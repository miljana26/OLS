
Predispitna_obaveza.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101d8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005204  080103a0  080103a0  000203a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155a4  080155a4  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  080155a4  080155a4  000255a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155ac  080155ac  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155ac  080155ac  000255ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080155b0  080155b0  000255b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  080155b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ae40  20000234  080157e8  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b074  080157e8  0003b074  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ab53  00000000  00000000  00030262  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004786  00000000  00000000  0005adb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013a90  00000000  00000000  0005f53b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000015f8  00000000  00000000  00072fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001478  00000000  00000000  000745c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002bcf7  00000000  00000000  00075a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001538a  00000000  00000000  000a1737  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000f80eb  00000000  00000000  000b6ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000fd  00000000  00000000  001aebac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004024  00000000  00000000  001aecac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000234 	.word	0x20000234
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08010388 	.word	0x08010388

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000238 	.word	0x20000238
 8000204:	08010388 	.word	0x08010388

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b972 	b.w	8000d90 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	4604      	mov	r4, r0
 8000acc:	4688      	mov	r8, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d14b      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad2:	428a      	cmp	r2, r1
 8000ad4:	4615      	mov	r5, r2
 8000ad6:	d967      	bls.n	8000ba8 <__udivmoddi4+0xe4>
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0720 	rsb	r7, r2, #32
 8000ae2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ae6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aea:	4095      	lsls	r5, r2
 8000aec:	ea47 0803 	orr.w	r8, r7, r3
 8000af0:	4094      	lsls	r4, r2
 8000af2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000afc:	fa1f fc85 	uxth.w	ip, r5
 8000b00:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b04:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b08:	fb07 f10c 	mul.w	r1, r7, ip
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	d909      	bls.n	8000b24 <__udivmoddi4+0x60>
 8000b10:	18eb      	adds	r3, r5, r3
 8000b12:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b16:	f080 811b 	bcs.w	8000d50 <__udivmoddi4+0x28c>
 8000b1a:	4299      	cmp	r1, r3
 8000b1c:	f240 8118 	bls.w	8000d50 <__udivmoddi4+0x28c>
 8000b20:	3f02      	subs	r7, #2
 8000b22:	442b      	add	r3, r5
 8000b24:	1a5b      	subs	r3, r3, r1
 8000b26:	b2a4      	uxth	r4, r4
 8000b28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b34:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b38:	45a4      	cmp	ip, r4
 8000b3a:	d909      	bls.n	8000b50 <__udivmoddi4+0x8c>
 8000b3c:	192c      	adds	r4, r5, r4
 8000b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b42:	f080 8107 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b46:	45a4      	cmp	ip, r4
 8000b48:	f240 8104 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	442c      	add	r4, r5
 8000b50:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b54:	eba4 040c 	sub.w	r4, r4, ip
 8000b58:	2700      	movs	r7, #0
 8000b5a:	b11e      	cbz	r6, 8000b64 <__udivmoddi4+0xa0>
 8000b5c:	40d4      	lsrs	r4, r2
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e9c6 4300 	strd	r4, r3, [r6]
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d909      	bls.n	8000b82 <__udivmoddi4+0xbe>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80eb 	beq.w	8000d4a <__udivmoddi4+0x286>
 8000b74:	2700      	movs	r7, #0
 8000b76:	e9c6 0100 	strd	r0, r1, [r6]
 8000b7a:	4638      	mov	r0, r7
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	fab3 f783 	clz	r7, r3
 8000b86:	2f00      	cmp	r7, #0
 8000b88:	d147      	bne.n	8000c1a <__udivmoddi4+0x156>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d302      	bcc.n	8000b94 <__udivmoddi4+0xd0>
 8000b8e:	4282      	cmp	r2, r0
 8000b90:	f200 80fa 	bhi.w	8000d88 <__udivmoddi4+0x2c4>
 8000b94:	1a84      	subs	r4, r0, r2
 8000b96:	eb61 0303 	sbc.w	r3, r1, r3
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	4698      	mov	r8, r3
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d0e0      	beq.n	8000b64 <__udivmoddi4+0xa0>
 8000ba2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ba6:	e7dd      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000ba8:	b902      	cbnz	r2, 8000bac <__udivmoddi4+0xe8>
 8000baa:	deff      	udf	#255	; 0xff
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	f040 808f 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb6:	1b49      	subs	r1, r1, r5
 8000bb8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bbc:	fa1f f885 	uxth.w	r8, r5
 8000bc0:	2701      	movs	r7, #1
 8000bc2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd0:	fb08 f10c 	mul.w	r1, r8, ip
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd8:	18eb      	adds	r3, r5, r3
 8000bda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4299      	cmp	r1, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2bc>
 8000be6:	4684      	mov	ip, r0
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	b2a3      	uxth	r3, r4
 8000bec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bf4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf8:	fb08 f800 	mul.w	r8, r8, r0
 8000bfc:	45a0      	cmp	r8, r4
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x14c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x14a>
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	f200 80b6 	bhi.w	8000d7a <__udivmoddi4+0x2b6>
 8000c0e:	4618      	mov	r0, r3
 8000c10:	eba4 0408 	sub.w	r4, r4, r8
 8000c14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c18:	e79f      	b.n	8000b5a <__udivmoddi4+0x96>
 8000c1a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c1e:	40bb      	lsls	r3, r7
 8000c20:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c24:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c28:	fa01 f407 	lsl.w	r4, r1, r7
 8000c2c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c30:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c34:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c38:	4325      	orrs	r5, r4
 8000c3a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c3e:	0c2c      	lsrs	r4, r5, #16
 8000c40:	fb08 3319 	mls	r3, r8, r9, r3
 8000c44:	fa1f fa8e 	uxth.w	sl, lr
 8000c48:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c4c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c50:	429c      	cmp	r4, r3
 8000c52:	fa02 f207 	lsl.w	r2, r2, r7
 8000c56:	fa00 f107 	lsl.w	r1, r0, r7
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c64:	f080 8087 	bcs.w	8000d76 <__udivmoddi4+0x2b2>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f240 8084 	bls.w	8000d76 <__udivmoddi4+0x2b2>
 8000c6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c72:	4473      	add	r3, lr
 8000c74:	1b1b      	subs	r3, r3, r4
 8000c76:	b2ad      	uxth	r5, r5
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c84:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c88:	45a2      	cmp	sl, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	d26b      	bcs.n	8000d6e <__udivmoddi4+0x2aa>
 8000c96:	45a2      	cmp	sl, r4
 8000c98:	d969      	bls.n	8000d6e <__udivmoddi4+0x2aa>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4474      	add	r4, lr
 8000c9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ca2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ca6:	eba4 040a 	sub.w	r4, r4, sl
 8000caa:	454c      	cmp	r4, r9
 8000cac:	46c2      	mov	sl, r8
 8000cae:	464b      	mov	r3, r9
 8000cb0:	d354      	bcc.n	8000d5c <__udivmoddi4+0x298>
 8000cb2:	d051      	beq.n	8000d58 <__udivmoddi4+0x294>
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d069      	beq.n	8000d8c <__udivmoddi4+0x2c8>
 8000cb8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cbc:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cc4:	40fd      	lsrs	r5, r7
 8000cc6:	40fc      	lsrs	r4, r7
 8000cc8:	ea4c 0505 	orr.w	r5, ip, r5
 8000ccc:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	e747      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000cd4:	f1c2 0320 	rsb	r3, r2, #32
 8000cd8:	fa20 f703 	lsr.w	r7, r0, r3
 8000cdc:	4095      	lsls	r5, r2
 8000cde:	fa01 f002 	lsl.w	r0, r1, r2
 8000ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	4338      	orrs	r0, r7
 8000cec:	0c01      	lsrs	r1, r0, #16
 8000cee:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cf2:	fa1f f885 	uxth.w	r8, r5
 8000cf6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cfa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfe:	fb07 f308 	mul.w	r3, r7, r8
 8000d02:	428b      	cmp	r3, r1
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x256>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d10:	d22f      	bcs.n	8000d72 <__udivmoddi4+0x2ae>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d92d      	bls.n	8000d72 <__udivmoddi4+0x2ae>
 8000d16:	3f02      	subs	r7, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1acb      	subs	r3, r1, r3
 8000d1c:	b281      	uxth	r1, r0
 8000d1e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d22:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d26:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2a:	fb00 f308 	mul.w	r3, r0, r8
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x27e>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d38:	d217      	bcs.n	8000d6a <__udivmoddi4+0x2a6>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d915      	bls.n	8000d6a <__udivmoddi4+0x2a6>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1ac9      	subs	r1, r1, r3
 8000d44:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d48:	e73b      	b.n	8000bc2 <__udivmoddi4+0xfe>
 8000d4a:	4637      	mov	r7, r6
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e709      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000d50:	4607      	mov	r7, r0
 8000d52:	e6e7      	b.n	8000b24 <__udivmoddi4+0x60>
 8000d54:	4618      	mov	r0, r3
 8000d56:	e6fb      	b.n	8000b50 <__udivmoddi4+0x8c>
 8000d58:	4541      	cmp	r1, r8
 8000d5a:	d2ab      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d5c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d60:	eb69 020e 	sbc.w	r2, r9, lr
 8000d64:	3801      	subs	r0, #1
 8000d66:	4613      	mov	r3, r2
 8000d68:	e7a4      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6a:	4660      	mov	r0, ip
 8000d6c:	e7e9      	b.n	8000d42 <__udivmoddi4+0x27e>
 8000d6e:	4618      	mov	r0, r3
 8000d70:	e795      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d72:	4667      	mov	r7, ip
 8000d74:	e7d1      	b.n	8000d1a <__udivmoddi4+0x256>
 8000d76:	4681      	mov	r9, r0
 8000d78:	e77c      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	442c      	add	r4, r5
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0x14c>
 8000d80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d84:	442b      	add	r3, r5
 8000d86:	e72f      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d88:	4638      	mov	r0, r7
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xda>
 8000d8c:	4637      	mov	r7, r6
 8000d8e:	e6e9      	b.n	8000b64 <__udivmoddi4+0xa0>

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <Init_LCD_GPIO>:

//=============================================================================
// GPIO setup 
//=============================================================================
void Init_LCD_GPIO(void)
{
 8000d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d98:	b08b      	sub	sp, #44	; 0x2c
	  GPIO_InitTypeDef GPIO_InitStruct;

	  __HAL_RCC_CRC_CLK_ENABLE();
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <Init_LCD_GPIO+0xe0>)
 8000d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000da2:	631a      	str	r2, [r3, #48]	; 0x30
 8000da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000daa:	9201      	str	r2, [sp, #4]
 8000dac:	9a01      	ldr	r2, [sp, #4]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db0:	f042 0210 	orr.w	r2, r2, #16
 8000db4:	631a      	str	r2, [r3, #48]	; 0x30
 8000db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db8:	f002 0210 	and.w	r2, r2, #16
 8000dbc:	9202      	str	r2, [sp, #8]
 8000dbe:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc2:	f042 0220 	orr.w	r2, r2, #32
 8000dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dca:	f002 0220 	and.w	r2, r2, #32
 8000dce:	9203      	str	r2, [sp, #12]
 8000dd0:	9a03      	ldr	r2, [sp, #12]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de0:	9304      	str	r3, [sp, #16]
 8000de2:	9b04      	ldr	r3, [sp, #16]


	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8000de4:	4c24      	ldr	r4, [pc, #144]	; (8000e78 <Init_LCD_GPIO+0xe4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000dec:	4620      	mov	r0, r4
 8000dee:	f000 fc7d 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 8000df2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000e7c <Init_LCD_GPIO+0xe8>
 8000df6:	2200      	movs	r2, #0
 8000df8:	21ff      	movs	r1, #255	; 0xff
 8000dfa:	4648      	mov	r0, r9
 8000dfc:	f000 fc76 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 8000e00:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000e80 <Init_LCD_GPIO+0xec>
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000e0a:	4640      	mov	r0, r8
 8000e0c:	f000 fc6e 	bl	80016ec <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GCMD;
 8000e10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e14:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2701      	movs	r7, #1
 8000e18:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2503      	movs	r5, #3
 8000e20:	9508      	str	r5, [sp, #32]
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 8000e22:	a905      	add	r1, sp, #20
 8000e24:	4620      	mov	r0, r4
 8000e26:	f000 fb6d 	bl	8001504 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_LO;
 8000e2a:	23ff      	movs	r3, #255	; 0xff
 8000e2c:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	9508      	str	r5, [sp, #32]
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 8000e34:	a905      	add	r1, sp, #20
 8000e36:	4648      	mov	r0, r9
 8000e38:	f000 fb64 	bl	8001504 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_HI;
 8000e3c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000e40:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	9508      	str	r5, [sp, #32]
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 8000e48:	a905      	add	r1, sp, #20
 8000e4a:	4640      	mov	r0, r8
 8000e4c:	f000 fb5a 	bl	8001504 <HAL_GPIO_Init>

	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8000e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e54:	61a3      	str	r3, [r4, #24]
 8000e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e5a:	61a3      	str	r3, [r4, #24]
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	61a3      	str	r3, [r4, #24]
 8000e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e66:	61a3      	str	r3, [r4, #24]
 8000e68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e6c:	61a3      	str	r3, [r4, #24]
}
 8000e6e:	b00b      	add	sp, #44	; 0x2c
 8000e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40021400 	.word	0x40021400
 8000e7c:	40021800 	.word	0x40021800
 8000e80:	40021000 	.word	0x40021000

08000e84 <SSD1963_WriteCommand>:
//=============================================================================
// Write command to display
//=============================================================================
void SSD1963_WriteCommand(uint16_t Data)
{
 8000e84:	b410      	push	{r4}
	uint16_t _Data=~Data;
 8000e86:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8000e88:	4911      	ldr	r1, [pc, #68]	; (8000ed0 <SSD1963_WriteCommand+0x4c>)
 8000e8a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000e8e:	618a      	str	r2, [r1, #24]

	CLR_CS;
 8000e90:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <SSD1963_WriteCommand+0x50>)
 8000e92:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000e96:	6194      	str	r4, [r2, #24]
	CLR_DC;
 8000e98:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000e9c:	6194      	str	r4, [r2, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8000e9e:	041b      	lsls	r3, r3, #16
 8000ea0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000ea4:	b2c4      	uxtb	r4, r0
 8000ea6:	4323      	orrs	r3, r4
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <SSD1963_WriteCommand+0x54>)
 8000eaa:	61a3      	str	r3, [r4, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8000eac:	694b      	ldr	r3, [r1, #20]
 8000eae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8000eb2:	4318      	orrs	r0, r3
 8000eb4:	6148      	str	r0, [r1, #20]
	writeStrobe;
 8000eb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ec0:	6193      	str	r3, [r2, #24]
	SET_CS;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec6:	6193      	str	r3, [r2, #24]
}
 8000ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	40021800 	.word	0x40021800

08000edc <SSD1963_WriteData>:
//=============================================================================
// Write data to display
//=============================================================================

void SSD1963_WriteData(uint16_t Data)
{
 8000edc:	b410      	push	{r4}
	uint16_t _Data=~Data;
 8000ede:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8000ee0:	4911      	ldr	r1, [pc, #68]	; (8000f28 <SSD1963_WriteData+0x4c>)
 8000ee2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000ee6:	618a      	str	r2, [r1, #24]

	CLR_CS;
 8000ee8:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <SSD1963_WriteData+0x50>)
 8000eea:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000eee:	6194      	str	r4, [r2, #24]
	SET_DC;
 8000ef0:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8000ef4:	6194      	str	r4, [r2, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8000ef6:	041b      	lsls	r3, r3, #16
 8000ef8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000efc:	b2c4      	uxtb	r4, r0
 8000efe:	4323      	orrs	r3, r4
 8000f00:	4c0b      	ldr	r4, [pc, #44]	; (8000f30 <SSD1963_WriteData+0x54>)
 8000f02:	61a3      	str	r3, [r4, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8000f04:	694b      	ldr	r3, [r1, #20]
 8000f06:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8000f0a:	4318      	orrs	r0, r3
 8000f0c:	6148      	str	r0, [r1, #20]
	writeStrobe;
 8000f0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f18:	6193      	str	r3, [r2, #24]
	SET_CS;
 8000f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1e:	6193      	str	r3, [r2, #24]

}
 8000f20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40021400 	.word	0x40021400
 8000f30:	40021800 	.word	0x40021800

08000f34 <SSD1963_WriteDataMultiple>:
//=============================================================================
// Write multiple data to display
//=============================================================================
void SSD1963_WriteDataMultiple(uint16_t * Data, int NumItems)
{
 8000f34:	b538      	push	{r3, r4, r5, lr}
 8000f36:	4605      	mov	r5, r0
 8000f38:	460c      	mov	r4, r1
  while (NumItems)
 8000f3a:	e004      	b.n	8000f46 <SSD1963_WriteDataMultiple+0x12>
  {
	  SSD1963_WriteData(*Data);
 8000f3c:	f835 0b02 	ldrh.w	r0, [r5], #2
 8000f40:	f7ff ffcc 	bl	8000edc <SSD1963_WriteData>
	  Data++;
	  NumItems--;
 8000f44:	3c01      	subs	r4, #1
  while (NumItems)
 8000f46:	2c00      	cmp	r4, #0
 8000f48:	d1f8      	bne.n	8000f3c <SSD1963_WriteDataMultiple+0x8>
  }
}
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}

08000f4c <SSD1963_Init>:
//=============================================================================
// Display initialization
//=============================================================================

void SSD1963_Init (void)
{
 8000f4c:	b510      	push	{r4, lr}
	CLR_RST;  // reset
 8000f4e:	4c54      	ldr	r4, [pc, #336]	; (80010a0 <SSD1963_Init+0x154>)
 8000f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f54:	61a3      	str	r3, [r4, #24]
	HAL_Delay(500);
 8000f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f5a:	f000 fa53 	bl	8001404 <HAL_Delay>
	SET_RST;
 8000f5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f62:	61a3      	str	r3, [r4, #24]
	HAL_Delay(100);
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f000 fa4d 	bl	8001404 <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SOFT_RESET);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f7ff ff8a 	bl	8000e84 <SSD1963_WriteCommand>
	HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f000 fa47 	bl	8001404 <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PLL_MN);
 8000f76:	20e2      	movs	r0, #226	; 0xe2
 8000f78:	f7ff ff84 	bl	8000e84 <SSD1963_WriteCommand>
	SSD1963_WriteData(29);	// PLLclk = REFclk * 30 (300MHz)
 8000f7c:	201d      	movs	r0, #29
 8000f7e:	f7ff ffad 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(2);	// SYSclk = PLLclk / 3  (100MHz)
 8000f82:	2002      	movs	r0, #2
 8000f84:	f7ff ffaa 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(4);  	// dummy
 8000f88:	2004      	movs	r0, #4
 8000f8a:	f7ff ffa7 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 8000f8e:	20e0      	movs	r0, #224	; 0xe0
 8000f90:	f7ff ff78 	bl	8000e84 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0001);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff ffa1 	bl	8000edc <SSD1963_WriteData>

	HAL_Delay(100);
 8000f9a:	2064      	movs	r0, #100	; 0x64
 8000f9c:	f000 fa32 	bl	8001404 <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 8000fa0:	20e0      	movs	r0, #224	; 0xe0
 8000fa2:	f7ff ff6f 	bl	8000e84 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0003);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f7ff ff98 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LCD_MODE);
 8000fac:	20b0      	movs	r0, #176	; 0xb0
 8000fae:	f7ff ff69 	bl	8000e84 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0020);
 8000fb2:	2020      	movs	r0, #32
 8000fb4:	f7ff ff92 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff ff8f 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_WIDTH-1)));
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f7ff ff8c 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_WIDTH-1)));
 8000fc4:	20df      	movs	r0, #223	; 0xdf
 8000fc6:	f7ff ff89 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HEIGHT-1)));
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f7ff ff86 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HEIGHT-1)));
 8000fd0:	200f      	movs	r0, #15
 8000fd2:	f7ff ff83 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff ff80 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PIXEL_DATA_INTERFACE);
 8000fdc:	20f0      	movs	r0, #240	; 0xf0
 8000fde:	f7ff ff51 	bl	8000e84 <SSD1963_WriteCommand>
	SSD1963_WriteData(SSD1963_PDI_16BIT565);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f7ff ff7a 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LSHIFT_FREQ);
 8000fe8:	20e6      	movs	r0, #230	; 0xe6
 8000fea:	f7ff ff4b 	bl	8000e84 <SSD1963_WriteCommand>
	SSD1963_WriteData((LCD_FPR >> 16) & 0x00FF);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff ff74 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData((LCD_FPR >> 8) & 0x00FF);
 8000ff4:	2075      	movs	r0, #117	; 0x75
 8000ff6:	f7ff ff71 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(LCD_FPR & 0x00FF);
 8000ffa:	20ed      	movs	r0, #237	; 0xed
 8000ffc:	f7ff ff6e 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_HORI_PERIOD);
 8001000:	20b4      	movs	r0, #180	; 0xb4
 8001002:	f7ff ff3f 	bl	8000e84 <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_HSYNC_PERIOD));
 8001006:	2002      	movs	r0, #2
 8001008:	f7ff ff68 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_HSYNC_PERIOD));
 800100c:	2014      	movs	r0, #20
 800100e:	f7ff ff65 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff ff62 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 8001018:	202c      	movs	r0, #44	; 0x2c
 800101a:	f7ff ff5f 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(TFT_HSYNC_PULSE);
 800101e:	2002      	movs	r0, #2
 8001020:	f7ff ff5c 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff ff59 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff ff56 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff ff53 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_VERT_PERIOD);
 8001036:	20b6      	movs	r0, #182	; 0xb6
 8001038:	f7ff ff24 	bl	8000e84 <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_VSYNC_PERIOD));
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff ff4d 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_VSYNC_PERIOD));
 8001042:	201e      	movs	r0, #30
 8001044:	f7ff ff4a 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff ff47 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 800104e:	200c      	movs	r0, #12
 8001050:	f7ff ff44 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(TFT_VSYNC_PULSE);
 8001054:	2006      	movs	r0, #6
 8001056:	f7ff ff41 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff ff3e 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ff3b 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_DISPLAY_ON);//SET display on
 8001066:	2029      	movs	r0, #41	; 0x29
 8001068:	f7ff ff0c 	bl	8000e84 <SSD1963_WriteCommand>

	HAL_Delay(10);
 800106c:	200a      	movs	r0, #10
 800106e:	f000 f9c9 	bl	8001404 <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PWM_CONF); //set PWM for Backlight. Manual p.53
 8001072:	20be      	movs	r0, #190	; 0xbe
 8001074:	f7ff ff06 	bl	8000e84 <SSD1963_WriteCommand>
	// 6 parameters to be set
	SSD1963_WriteData(0x0004); 					// PWM Freq =100MHz/(256*(PWMF[7:0]+1))/256  PWMF[7:0]=4 PWM Freq=305Hz
 8001078:	2004      	movs	r0, #4
 800107a:	f7ff ff2f 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x00C0); 					// PWM duty cycle(50%)
 800107e:	20c0      	movs	r0, #192	; 0xc0
 8001080:	f7ff ff2c 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0001); 					// PWM controlled by host, PWM enabled
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff ff29 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0040); 					// brightness level 0x00 - 0xFF
 800108a:	2040      	movs	r0, #64	; 0x40
 800108c:	f7ff ff26 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000); 					// minimum brightness level =  0x00 - 0xFF
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff23 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);					// brightness prescalar 0x0 - 0xF
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff20 	bl	8000edc <SSD1963_WriteData>


}
 800109c:	bd10      	pop	{r4, pc}
 800109e:	bf00      	nop
 80010a0:	40021400 	.word	0x40021400

080010a4 <Init_TOUCH_GPIO>:

I2C_HandleTypeDef hi2c;


void Init_TOUCH_GPIO(I2C_HandleTypeDef i2c_handle)
{
 80010a4:	b084      	sub	sp, #16
 80010a6:	b508      	push	{r3, lr}
 80010a8:	f10d 0c08 	add.w	ip, sp, #8
 80010ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 80010b0:	224c      	movs	r2, #76	; 0x4c
 80010b2:	4661      	mov	r1, ip
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <Init_TOUCH_GPIO+0x20>)
 80010b6:	f00f f880 	bl	80101ba <memcpy>
}
 80010ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80010be:	b004      	add	sp, #16
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20019524 	.word	0x20019524

080010c8 <STMPE610_Write>:
		return FALSE;
}


void STMPE610_Write(uint8_t reg, uint8_t val)
{
 80010c8:	b500      	push	{lr}
 80010ca:	b085      	sub	sp, #20
	uint8_t	txbuf[2];

	txbuf[0]=reg;
 80010cc:	f88d 000c 	strb.w	r0, [sp, #12]
	txbuf[1]=val;
 80010d0:	f88d 100d 	strb.w	r1, [sp, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80010d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2302      	movs	r3, #2
 80010dc:	aa03      	add	r2, sp, #12
 80010de:	2188      	movs	r1, #136	; 0x88
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <STMPE610_Write+0x28>)
 80010e2:	f000 fcfd 	bl	8001ae0 <HAL_I2C_Master_Transmit>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	d1f4      	bne.n	80010d4 <STMPE610_Write+0xc>
}
 80010ea:	b005      	add	sp, #20
 80010ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f0:	20019524 	.word	0x20019524

080010f4 <STMPE610_ReadByte>:

uint8_t STMPE610_ReadByte(uint8_t reg)
{
 80010f4:	b500      	push	{lr}
 80010f6:	b087      	sub	sp, #28
 80010f8:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t rxbuf[1];
	rxbuf[0] = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f88d 3014 	strb.w	r3, [sp, #20]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, STMPE610_TIMEOUT)!= HAL_OK);
 8001102:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	f10d 020f 	add.w	r2, sp, #15
 800110e:	2188      	movs	r1, #136	; 0x88
 8001110:	480a      	ldr	r0, [pc, #40]	; (800113c <STMPE610_ReadByte+0x48>)
 8001112:	f000 fce5 	bl	8001ae0 <HAL_I2C_Master_Transmit>
 8001116:	2800      	cmp	r0, #0
 8001118:	d1f3      	bne.n	8001102 <STMPE610_ReadByte+0xe>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 1, STMPE610_TIMEOUT) != HAL_OK);
 800111a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	aa05      	add	r2, sp, #20
 8001124:	2188      	movs	r1, #136	; 0x88
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <STMPE610_ReadByte+0x48>)
 8001128:	f000 fd98 	bl	8001c5c <HAL_I2C_Master_Receive>
 800112c:	2800      	cmp	r0, #0
 800112e:	d1f4      	bne.n	800111a <STMPE610_ReadByte+0x26>

	return rxbuf[0];
}
 8001130:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8001134:	b007      	add	sp, #28
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop
 800113c:	20019524 	.word	0x20019524

08001140 <STMPE610_ReadWord>:

uint16_t STMPE610_ReadWord(uint8_t reg)
{
 8001140:	b500      	push	{lr}
 8001142:	b087      	sub	sp, #28
 8001144:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	rxbuf[2];
	
	rxbuf[0] = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	f88d 3014 	strb.w	r3, [sp, #20]
	rxbuf[1] = 0;
 800114e:	f88d 3015 	strb.w	r3, [sp, #21]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, 10000)!= HAL_OK);
 8001152:	f242 7310 	movw	r3, #10000	; 0x2710
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	f10d 020f 	add.w	r2, sp, #15
 800115e:	2188      	movs	r1, #136	; 0x88
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <STMPE610_ReadWord+0x54>)
 8001162:	f000 fcbd 	bl	8001ae0 <HAL_I2C_Master_Transmit>
 8001166:	2800      	cmp	r0, #0
 8001168:	d1f3      	bne.n	8001152 <STMPE610_ReadWord+0x12>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 2, 10000) != HAL_OK);
 800116a:	f242 7310 	movw	r3, #10000	; 0x2710
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2302      	movs	r3, #2
 8001172:	aa05      	add	r2, sp, #20
 8001174:	2188      	movs	r1, #136	; 0x88
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <STMPE610_ReadWord+0x54>)
 8001178:	f000 fd70 	bl	8001c5c <HAL_I2C_Master_Receive>
 800117c:	2800      	cmp	r0, #0
 800117e:	d1f4      	bne.n	800116a <STMPE610_ReadWord+0x2a>

	return (((uint16_t)rxbuf[0]) << 8) | rxbuf[1];
 8001180:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8001184:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
 8001188:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800118c:	b007      	add	sp, #28
 800118e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001192:	bf00      	nop
 8001194:	20019524 	.word	0x20019524

08001198 <STMPE610_Init>:

void STMPE610_Init(void)
{
 8001198:	b508      	push	{r3, lr}
	STMPE610_Write(STMPE610_REG_SYS_CTRL1, 0x02);		// Software chip reset
 800119a:	2102      	movs	r1, #2
 800119c:	2003      	movs	r0, #3
 800119e:	f7ff ff93 	bl	80010c8 <STMPE610_Write>
	HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f000 f92e 	bl	8001404 <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_SYS_CTRL2, 0x04);		// Temperature sensor clock off, GPIO clock off, touch clock on, ADC clock on
 80011a8:	2104      	movs	r1, #4
 80011aa:	4608      	mov	r0, r1
 80011ac:	f7ff ff8c 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_EN, 0x03);			// Interrupt on INT pin when there is a sample or a touch transition.
 80011b0:	2103      	movs	r1, #3
 80011b2:	200a      	movs	r0, #10
 80011b4:	f7ff ff88 	bl	80010c8 <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_INT_EN, 0x00);						// Don't Interrupt on INT pin
	STMPE610_Write(STMPE610_REG_ADC_CTRL1, 0x48);		// ADC conversion time = 80 clock ticks, 12-bit ADC, internal voltage refernce
 80011b8:	2148      	movs	r1, #72	; 0x48
 80011ba:	2020      	movs	r0, #32
 80011bc:	f7ff ff84 	bl	80010c8 <STMPE610_Write>
	HAL_Delay(2);
 80011c0:	2002      	movs	r0, #2
 80011c2:	f000 f91f 	bl	8001404 <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_ADC_CTRL2, 0x01);		// ADC speed 3.25MHz
 80011c6:	2101      	movs	r1, #1
 80011c8:	2021      	movs	r0, #33	; 0x21
 80011ca:	f7ff ff7d 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_GPIO_AF, 0x00);			// GPIO alternate function - OFF
 80011ce:	2100      	movs	r1, #0
 80011d0:	2017      	movs	r0, #23
 80011d2:	f7ff ff79 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CFG, 0xA3);			// Averaging 4, touch detect delay 1ms, panel driver settling time 1ms
 80011d6:	21a3      	movs	r1, #163	; 0xa3
 80011d8:	2041      	movs	r0, #65	; 0x41
 80011da:	f7ff ff75 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_TH, 0x01);			// FIFO threshold = 1
 80011de:	2101      	movs	r1, #1
 80011e0:	204a      	movs	r0, #74	; 0x4a
 80011e2:	f7ff ff71 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);			// FIFO reset enable
 80011e6:	2101      	movs	r1, #1
 80011e8:	204b      	movs	r0, #75	; 0x4b
 80011ea:	f7ff ff6d 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);			// FIFO reset disable
 80011ee:	2100      	movs	r1, #0
 80011f0:	204b      	movs	r0, #75	; 0x4b
 80011f2:	f7ff ff69 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_FRACT_XYZ, 0x07);	// Z axis data format
 80011f6:	2107      	movs	r1, #7
 80011f8:	2056      	movs	r0, #86	; 0x56
 80011fa:	f7ff ff65 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_I_DRIVE, 0x01);		// max 50mA touchscreen line current
 80011fe:	2101      	movs	r1, #1
 8001200:	2058      	movs	r0, #88	; 0x58
 8001202:	f7ff ff61 	bl	80010c8 <STMPE610_Write>

	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x30);			// X&Y&Z, 16 reading window
 8001206:	2130      	movs	r1, #48	; 0x30
 8001208:	2040      	movs	r0, #64	; 0x40
 800120a:	f7ff ff5d 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x31);			// X&Y&Z, 16 reading window, TSC enable
 800120e:	2131      	movs	r1, #49	; 0x31
 8001210:	2040      	movs	r0, #64	; 0x40
 8001212:	f7ff ff59 	bl	80010c8 <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_TSC_CTRL, 0x32);						// X&Y, 16 reading window
	//STMPE610_write_reg(TMPE610_REG_TSC_CTRL, 0x33);						// X&Y, 16 reading window, TSC enable

	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);		// Clear all interrupts
 8001216:	21ff      	movs	r1, #255	; 0xff
 8001218:	200b      	movs	r0, #11
 800121a:	f7ff ff55 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_CTRL, 0x01);		// Level interrupt, enable interrupts
 800121e:	2101      	movs	r1, #1
 8001220:	2009      	movs	r0, #9
 8001222:	f7ff ff51 	bl	80010c8 <STMPE610_Write>
}
 8001226:	bd08      	pop	{r3, pc}

08001228 <STMPE610_read_xyz>:

uint8_t STMPE610_read_xyz(void)
{
 8001228:	b508      	push	{r3, lr}
	uint8_t	status;

	// Is there something in the fifo
	status = STMPE610_ReadByte(STMPE610_REG_FIFO_STA);
 800122a:	204b      	movs	r0, #75	; 0x4b
 800122c:	f7ff ff62 	bl	80010f4 <STMPE610_ReadByte>
	if ((status & 0x20))
 8001230:	f010 0f20 	tst.w	r0, #32
 8001234:	d012      	beq.n	800125c <STMPE610_read_xyz+0x34>
	{
		STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 8001236:	21ff      	movs	r1, #255	; 0xff
 8001238:	200b      	movs	r0, #11
 800123a:	f7ff ff45 	bl	80010c8 <STMPE610_Write>
		if (!(STMPE610_ReadByte(STMPE610_REG_TSC_CTRL) & 0x80))
 800123e:	2040      	movs	r0, #64	; 0x40
 8001240:	f7ff ff58 	bl	80010f4 <STMPE610_ReadByte>
 8001244:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001248:	d125      	bne.n	8001296 <STMPE610_read_xyz+0x6e>
		{
			x=0;
 800124a:	2300      	movs	r3, #0
 800124c:	4a13      	ldr	r2, [pc, #76]	; (800129c <STMPE610_read_xyz+0x74>)
 800124e:	8013      	strh	r3, [r2, #0]
			y=0;
 8001250:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <STMPE610_read_xyz+0x78>)
 8001252:	8013      	strh	r3, [r2, #0]
			z=0;
 8001254:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <STMPE610_read_xyz+0x7c>)
 8001256:	8013      	strh	r3, [r2, #0]
	//		UART8_printf("true");
			return TRUE;
 8001258:	2001      	movs	r0, #1
 800125a:	e01b      	b.n	8001294 <STMPE610_read_xyz+0x6c>
		return FALSE;

	}

	// Time to get some readings
	x = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_X);
 800125c:	204d      	movs	r0, #77	; 0x4d
 800125e:	f7ff ff6f 	bl	8001140 <STMPE610_ReadWord>
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <STMPE610_read_xyz+0x74>)
 8001264:	8018      	strh	r0, [r3, #0]
	y = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_Y);
 8001266:	204f      	movs	r0, #79	; 0x4f
 8001268:	f7ff ff6a 	bl	8001140 <STMPE610_ReadWord>
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <STMPE610_read_xyz+0x78>)
 800126e:	8018      	strh	r0, [r3, #0]
	z = STMPE610_ReadByte(STMPE610_REG_TSC_DATA_Z);
 8001270:	2051      	movs	r0, #81	; 0x51
 8001272:	f7ff ff3f 	bl	80010f4 <STMPE610_ReadByte>
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <STMPE610_read_xyz+0x7c>)
 8001278:	8018      	strh	r0, [r3, #0]

//	UART8_printf("%d, %d, %d\n\r", x,y,z );

	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);		// FIFO reset enable
 800127a:	2101      	movs	r1, #1
 800127c:	204b      	movs	r0, #75	; 0x4b
 800127e:	f7ff ff23 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);		// FIFO reset disable
 8001282:	2100      	movs	r1, #0
 8001284:	204b      	movs	r0, #75	; 0x4b
 8001286:	f7ff ff1f 	bl	80010c8 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 800128a:	21ff      	movs	r1, #255	; 0xff
 800128c:	200b      	movs	r0, #11
 800128e:	f7ff ff1b 	bl	80010c8 <STMPE610_Write>


	return TRUE;
 8001292:	2001      	movs	r0, #1
}
 8001294:	bd08      	pop	{r3, pc}
		return FALSE;
 8001296:	2000      	movs	r0, #0
 8001298:	e7fc      	b.n	8001294 <STMPE610_read_xyz+0x6c>
 800129a:	bf00      	nop
 800129c:	20000250 	.word	0x20000250
 80012a0:	20000252 	.word	0x20000252
 80012a4:	20000254 	.word	0x20000254

080012a8 <STMPE610_GetX_TOUCH>:

uint16_t STMPE610_GetX_TOUCH(void)
{
 80012a8:	b508      	push	{r3, lr}
	float pom=0;

	pom=(float)x;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <STMPE610_GetX_TOUCH+0x50>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
	pom=480.0*(pom-GUI_TOUCH_AD_LEFT)/(GUI_TOUCH_AD_RIGHT-GUI_TOUCH_AD_LEFT);
 80012b6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80012fc <STMPE610_GetX_TOUCH+0x54>
 80012ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012be:	ee17 0a90 	vmov	r0, s15
 80012c2:	f7ff f905 	bl	80004d0 <__aeabi_f2d>
 80012c6:	2200      	movs	r2, #0
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <STMPE610_GetX_TOUCH+0x58>)
 80012ca:	f7ff f959 	bl	8000580 <__aeabi_dmul>
 80012ce:	a308      	add	r3, pc, #32	; (adr r3, 80012f0 <STMPE610_GetX_TOUCH+0x48>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff fa7e 	bl	80007d4 <__aeabi_ddiv>
 80012d8:	f7ff fb8c 	bl	80009f4 <__aeabi_d2f>
	return (uint16_t)pom;
 80012dc:	ee07 0a90 	vmov	s15, r0
 80012e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
}
 80012e4:	ee17 3a90 	vmov	r3, s15
 80012e8:	b298      	uxth	r0, r3
 80012ea:	bd08      	pop	{r3, pc}
 80012ec:	f3af 8000 	nop.w
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40adc400 	.word	0x40adc400
 80012f8:	20000250 	.word	0x20000250
 80012fc:	43120000 	.word	0x43120000
 8001300:	407e0000 	.word	0x407e0000
 8001304:	00000000 	.word	0x00000000

08001308 <STMPE610_GetY_TOUCH>:
uint16_t STMPE610_GetY_TOUCH(void)
{
 8001308:	b508      	push	{r3, lr}
	float pom=0;

	pom=(float)y;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <STMPE610_GetY_TOUCH+0x50>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7a67 	vcvt.f32.u32	s15, s15
	pom=272.0*(pom-GUI_TOUCH_AD_TOP)/(GUI_TOUCH_AD_BOTTOM-GUI_TOUCH_AD_TOP);
 8001316:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800135c <STMPE610_GetY_TOUCH+0x54>
 800131a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800131e:	ee17 0a90 	vmov	r0, s15
 8001322:	f7ff f8d5 	bl	80004d0 <__aeabi_f2d>
 8001326:	2200      	movs	r2, #0
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <STMPE610_GetY_TOUCH+0x58>)
 800132a:	f7ff f929 	bl	8000580 <__aeabi_dmul>
 800132e:	a308      	add	r3, pc, #32	; (adr r3, 8001350 <STMPE610_GetY_TOUCH+0x48>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff fa4e 	bl	80007d4 <__aeabi_ddiv>
 8001338:	f7ff fb5c 	bl	80009f4 <__aeabi_d2f>
	return (uint16_t)pom;
 800133c:	ee07 0a90 	vmov	s15, r0
 8001340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
}
 8001344:	ee17 3a90 	vmov	r3, s15
 8001348:	b298      	uxth	r0, r3
 800134a:	bd08      	pop	{r3, pc}
 800134c:	f3af 8000 	nop.w
 8001350:	00000000 	.word	0x00000000
 8001354:	40abea00 	.word	0x40abea00
 8001358:	20000252 	.word	0x20000252
 800135c:	43870000 	.word	0x43870000
 8001360:	40710000 	.word	0x40710000

08001364 <STMPE610_GetX_TOUCH_RAW>:
}

uint16_t STMPE610_GetX_TOUCH_RAW(void)
{
	return x;
}
 8001364:	4b01      	ldr	r3, [pc, #4]	; (800136c <STMPE610_GetX_TOUCH_RAW+0x8>)
 8001366:	8818      	ldrh	r0, [r3, #0]
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000250 	.word	0x20000250

08001370 <STMPE610_GetY_TOUCH_RAW>:
uint16_t STMPE610_GetY_TOUCH_RAW(void)
{
	return y;
}
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <STMPE610_GetY_TOUCH_RAW+0x8>)
 8001372:	8818      	ldrh	r0, [r3, #0]
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000252 	.word	0x20000252

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b510      	push	{r4, lr}
 800137e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_InitTick+0x40>)
 8001382:	7818      	ldrb	r0, [r3, #0]
 8001384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001388:	fbb3 f3f0 	udiv	r3, r3, r0
 800138c:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <HAL_InitTick+0x44>)
 800138e:	6810      	ldr	r0, [r2, #0]
 8001390:	fbb0 f0f3 	udiv	r0, r0, r3
 8001394:	f000 f89c 	bl	80014d0 <HAL_SYSTICK_Config>
 8001398:	b968      	cbnz	r0, 80013b6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139a:	2c0f      	cmp	r4, #15
 800139c:	d901      	bls.n	80013a2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800139e:	2001      	movs	r0, #1
 80013a0:	e00a      	b.n	80013b8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a2:	2200      	movs	r2, #0
 80013a4:	4621      	mov	r1, r4
 80013a6:	f04f 30ff 	mov.w	r0, #4294967295
 80013aa:	f000 f851 	bl	8001450 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_InitTick+0x48>)
 80013b0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013b2:	2000      	movs	r0, #0
 80013b4:	e000      	b.n	80013b8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80013b6:	2001      	movs	r0, #1
}
 80013b8:	bd10      	pop	{r4, pc}
 80013ba:	bf00      	nop
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000118 	.word	0x20000118
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_Init>:
{
 80013c8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f000 f82e 	bl	800142c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ffd3 	bl	800137c <HAL_InitTick>
  HAL_MspInit();
 80013d6:	f004 ff21 	bl	800621c <HAL_MspInit>
}
 80013da:	2000      	movs	r0, #0
 80013dc:	bd08      	pop	{r3, pc}
	...

080013e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <HAL_IncTick+0x10>)
 80013e2:	6811      	ldr	r1, [r2, #0]
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_IncTick+0x14>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	440b      	add	r3, r1
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20019570 	.word	0x20019570
 80013f4:	20000000 	.word	0x20000000

080013f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <HAL_GetTick+0x8>)
 80013fa:	6818      	ldr	r0, [r3, #0]
}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20019570 	.word	0x20019570

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b538      	push	{r3, r4, r5, lr}
 8001406:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff fff6 	bl	80013f8 <HAL_GetTick>
 800140c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001412:	d002      	beq.n	800141a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_Delay+0x24>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141a:	f7ff ffed 	bl	80013f8 <HAL_GetTick>
 800141e:	1b40      	subs	r0, r0, r5
 8001420:	42a0      	cmp	r0, r4
 8001422:	d3fa      	bcc.n	800141a <HAL_Delay+0x16>
  {
  }
}
 8001424:	bd38      	pop	{r3, r4, r5, pc}
 8001426:	bf00      	nop
 8001428:	20000000 	.word	0x20000000

0800142c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4906      	ldr	r1, [pc, #24]	; (8001448 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800142e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001430:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	0200      	lsls	r0, r0, #8
 800143a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001440:	4a02      	ldr	r2, [pc, #8]	; (800144c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001442:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001444:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00
 800144c:	05fa0000 	.word	0x05fa0000

08001450 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001450:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_NVIC_SetPriority+0x58>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145a:	f1c3 0407 	rsb	r4, r3, #7
 800145e:	2c04      	cmp	r4, #4
 8001460:	bf28      	it	cs
 8001462:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001464:	1d1d      	adds	r5, r3, #4
 8001466:	2d06      	cmp	r5, #6
 8001468:	d914      	bls.n	8001494 <HAL_NVIC_SetPriority+0x44>
 800146a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 35ff 	mov.w	r5, #4294967295
 8001470:	fa05 f404 	lsl.w	r4, r5, r4
 8001474:	ea21 0104 	bic.w	r1, r1, r4
 8001478:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147a:	fa05 f303 	lsl.w	r3, r5, r3
 800147e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001482:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001484:	2800      	cmp	r0, #0
 8001486:	db07      	blt.n	8001498 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	0109      	lsls	r1, r1, #4
 800148a:	b2c9      	uxtb	r1, r1
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <HAL_NVIC_SetPriority+0x5c>)
 800148e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001490:	bc30      	pop	{r4, r5}
 8001492:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001494:	2300      	movs	r3, #0
 8001496:	e7e9      	b.n	800146c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	f000 000f 	and.w	r0, r0, #15
 800149c:	0109      	lsls	r1, r1, #4
 800149e:	b2c9      	uxtb	r1, r1
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_NVIC_SetPriority+0x60>)
 80014a2:	5419      	strb	r1, [r3, r0]
 80014a4:	e7f4      	b.n	8001490 <HAL_NVIC_SetPriority+0x40>
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00
 80014ac:	e000e400 	.word	0xe000e400
 80014b0:	e000ed14 	.word	0xe000ed14

080014b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014b4:	2800      	cmp	r0, #0
 80014b6:	db07      	blt.n	80014c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b8:	f000 021f 	and.w	r2, r0, #31
 80014bc:	0940      	lsrs	r0, r0, #5
 80014be:	2301      	movs	r3, #1
 80014c0:	4093      	lsls	r3, r2
 80014c2:	4a02      	ldr	r2, [pc, #8]	; (80014cc <HAL_NVIC_EnableIRQ+0x18>)
 80014c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	3801      	subs	r0, #1
 80014d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014d6:	d20a      	bcs.n	80014ee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_SYSTICK_Config+0x24>)
 80014da:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_SYSTICK_Config+0x28>)
 80014de:	21f0      	movs	r1, #240	; 0xf0
 80014e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	2000      	movs	r0, #0
 80014e6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80014fc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80014fe:	f004 fb19 	bl	8005b34 <HAL_SYSTICK_Callback>
}
 8001502:	bd08      	pop	{r3, pc}

08001504 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001504:	2300      	movs	r3, #0
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f200 80e7 	bhi.w	80016da <HAL_GPIO_Init+0x1d6>
{
 800150c:	b4f0      	push	{r4, r5, r6, r7}
 800150e:	b082      	sub	sp, #8
 8001510:	e05e      	b.n	80015d0 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001512:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001514:	005f      	lsls	r7, r3, #1
 8001516:	2403      	movs	r4, #3
 8001518:	40bc      	lsls	r4, r7
 800151a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800151e:	68cc      	ldr	r4, [r1, #12]
 8001520:	40bc      	lsls	r4, r7
 8001522:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001524:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001526:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001528:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800152c:	684c      	ldr	r4, [r1, #4]
 800152e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001532:	409a      	lsls	r2, r3
 8001534:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001536:	6042      	str	r2, [r0, #4]
 8001538:	e057      	b.n	80015ea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800153a:	08dc      	lsrs	r4, r3, #3
 800153c:	3408      	adds	r4, #8
 800153e:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001542:	f003 0207 	and.w	r2, r3, #7
 8001546:	0096      	lsls	r6, r2, #2
 8001548:	220f      	movs	r2, #15
 800154a:	40b2      	lsls	r2, r6
 800154c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001550:	690a      	ldr	r2, [r1, #16]
 8001552:	40b2      	lsls	r2, r6
 8001554:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3] = temp;
 8001556:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800155a:	e05a      	b.n	8001612 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800155c:	2209      	movs	r2, #9
 800155e:	e000      	b.n	8001562 <HAL_GPIO_Init+0x5e>
 8001560:	2200      	movs	r2, #0
 8001562:	40b2      	lsls	r2, r6
 8001564:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001566:	3402      	adds	r4, #2
 8001568:	4e5c      	ldr	r6, [pc, #368]	; (80016dc <HAL_GPIO_Init+0x1d8>)
 800156a:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156e:	4a5c      	ldr	r2, [pc, #368]	; (80016e0 <HAL_GPIO_Init+0x1dc>)
 8001570:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001572:	43ea      	mvns	r2, r5
 8001574:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001578:	684f      	ldr	r7, [r1, #4]
 800157a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800157e:	d001      	beq.n	8001584 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8001580:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001584:	4c56      	ldr	r4, [pc, #344]	; (80016e0 <HAL_GPIO_Init+0x1dc>)
 8001586:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001588:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800158a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800158e:	684f      	ldr	r7, [r1, #4]
 8001590:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8001594:	d001      	beq.n	800159a <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8001596:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->FTSR = temp;
 800159a:	4c51      	ldr	r4, [pc, #324]	; (80016e0 <HAL_GPIO_Init+0x1dc>)
 800159c:	60e6      	str	r6, [r4, #12]

        temp = EXTI->EMR;
 800159e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015a4:	684f      	ldr	r7, [r1, #4]
 80015a6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80015aa:	d001      	beq.n	80015b0 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80015ac:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80015b0:	4c4b      	ldr	r4, [pc, #300]	; (80016e0 <HAL_GPIO_Init+0x1dc>)
 80015b2:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b8:	684e      	ldr	r6, [r1, #4]
 80015ba:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80015be:	d001      	beq.n	80015c4 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80015c0:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->IMR = temp;
 80015c4:	4c46      	ldr	r4, [pc, #280]	; (80016e0 <HAL_GPIO_Init+0x1dc>)
 80015c6:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015c8:	3301      	adds	r3, #1
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	f200 8082 	bhi.w	80016d4 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80015d0:	2201      	movs	r2, #1
 80015d2:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d4:	680c      	ldr	r4, [r1, #0]
 80015d6:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80015da:	42aa      	cmp	r2, r5
 80015dc:	d1f4      	bne.n	80015c8 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015de:	684c      	ldr	r4, [r1, #4]
 80015e0:	f004 0403 	and.w	r4, r4, #3
 80015e4:	3c01      	subs	r4, #1
 80015e6:	2c01      	cmp	r4, #1
 80015e8:	d993      	bls.n	8001512 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ea:	684a      	ldr	r2, [r1, #4]
 80015ec:	f002 0203 	and.w	r2, r2, #3
 80015f0:	2a03      	cmp	r2, #3
 80015f2:	d009      	beq.n	8001608 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 80015f4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015f6:	005e      	lsls	r6, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	40b2      	lsls	r2, r6
 80015fc:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001600:	688a      	ldr	r2, [r1, #8]
 8001602:	40b2      	lsls	r2, r6
 8001604:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001606:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001608:	684a      	ldr	r2, [r1, #4]
 800160a:	f002 0203 	and.w	r2, r2, #3
 800160e:	2a02      	cmp	r2, #2
 8001610:	d093      	beq.n	800153a <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001612:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001614:	005e      	lsls	r6, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	40b2      	lsls	r2, r6
 800161a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800161e:	684a      	ldr	r2, [r1, #4]
 8001620:	f002 0203 	and.w	r2, r2, #3
 8001624:	40b2      	lsls	r2, r6
 8001626:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001628:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800162a:	684a      	ldr	r2, [r1, #4]
 800162c:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001630:	d0ca      	beq.n	80015c8 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4a2c      	ldr	r2, [pc, #176]	; (80016e4 <HAL_GPIO_Init+0x1e0>)
 8001634:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001636:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800163a:	6454      	str	r4, [r2, #68]	; 0x44
 800163c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800163e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001642:	9201      	str	r2, [sp, #4]
 8001644:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001646:	089c      	lsrs	r4, r3, #2
 8001648:	1ca6      	adds	r6, r4, #2
 800164a:	4a24      	ldr	r2, [pc, #144]	; (80016dc <HAL_GPIO_Init+0x1d8>)
 800164c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001650:	f003 0203 	and.w	r2, r3, #3
 8001654:	0096      	lsls	r6, r2, #2
 8001656:	220f      	movs	r2, #15
 8001658:	40b2      	lsls	r2, r6
 800165a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800165e:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <HAL_GPIO_Init+0x1e4>)
 8001660:	4290      	cmp	r0, r2
 8001662:	f43f af7d 	beq.w	8001560 <HAL_GPIO_Init+0x5c>
 8001666:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800166a:	4290      	cmp	r0, r2
 800166c:	d022      	beq.n	80016b4 <HAL_GPIO_Init+0x1b0>
 800166e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001672:	4290      	cmp	r0, r2
 8001674:	d020      	beq.n	80016b8 <HAL_GPIO_Init+0x1b4>
 8001676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800167a:	4290      	cmp	r0, r2
 800167c:	d01e      	beq.n	80016bc <HAL_GPIO_Init+0x1b8>
 800167e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001682:	4290      	cmp	r0, r2
 8001684:	d01c      	beq.n	80016c0 <HAL_GPIO_Init+0x1bc>
 8001686:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800168a:	4290      	cmp	r0, r2
 800168c:	d01a      	beq.n	80016c4 <HAL_GPIO_Init+0x1c0>
 800168e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001692:	4290      	cmp	r0, r2
 8001694:	d018      	beq.n	80016c8 <HAL_GPIO_Init+0x1c4>
 8001696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800169a:	4290      	cmp	r0, r2
 800169c:	d016      	beq.n	80016cc <HAL_GPIO_Init+0x1c8>
 800169e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016a2:	4290      	cmp	r0, r2
 80016a4:	d014      	beq.n	80016d0 <HAL_GPIO_Init+0x1cc>
 80016a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016aa:	4290      	cmp	r0, r2
 80016ac:	f43f af56 	beq.w	800155c <HAL_GPIO_Init+0x58>
 80016b0:	220a      	movs	r2, #10
 80016b2:	e756      	b.n	8001562 <HAL_GPIO_Init+0x5e>
 80016b4:	2201      	movs	r2, #1
 80016b6:	e754      	b.n	8001562 <HAL_GPIO_Init+0x5e>
 80016b8:	2202      	movs	r2, #2
 80016ba:	e752      	b.n	8001562 <HAL_GPIO_Init+0x5e>
 80016bc:	2203      	movs	r2, #3
 80016be:	e750      	b.n	8001562 <HAL_GPIO_Init+0x5e>
 80016c0:	2204      	movs	r2, #4
 80016c2:	e74e      	b.n	8001562 <HAL_GPIO_Init+0x5e>
 80016c4:	2205      	movs	r2, #5
 80016c6:	e74c      	b.n	8001562 <HAL_GPIO_Init+0x5e>
 80016c8:	2206      	movs	r2, #6
 80016ca:	e74a      	b.n	8001562 <HAL_GPIO_Init+0x5e>
 80016cc:	2207      	movs	r2, #7
 80016ce:	e748      	b.n	8001562 <HAL_GPIO_Init+0x5e>
 80016d0:	2208      	movs	r2, #8
 80016d2:	e746      	b.n	8001562 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 80016d4:	b002      	add	sp, #8
 80016d6:	bcf0      	pop	{r4, r5, r6, r7}
 80016d8:	4770      	bx	lr
 80016da:	4770      	bx	lr
 80016dc:	40013800 	.word	0x40013800
 80016e0:	40013c00 	.word	0x40013c00
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	b912      	cbnz	r2, 80016f4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016ee:	0409      	lsls	r1, r1, #16
 80016f0:	6181      	str	r1, [r0, #24]
  }
}
 80016f2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80016f4:	6181      	str	r1, [r0, #24]
 80016f6:	4770      	bx	lr

080016f8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016f8:	6803      	ldr	r3, [r0, #0]
 80016fa:	699a      	ldr	r2, [r3, #24]
 80016fc:	f012 0f02 	tst.w	r2, #2
 8001700:	d001      	beq.n	8001706 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001702:	2200      	movs	r2, #0
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001706:	6803      	ldr	r3, [r0, #0]
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	f012 0f01 	tst.w	r2, #1
 800170e:	d103      	bne.n	8001718 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	619a      	str	r2, [r3, #24]
  }
}
 8001718:	4770      	bx	lr

0800171a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800171a:	b410      	push	{r4}
 800171c:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800171e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001722:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001726:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001728:	4321      	orrs	r1, r4
 800172a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800172e:	6802      	ldr	r2, [r0, #0]
 8001730:	6853      	ldr	r3, [r2, #4]
 8001732:	0d64      	lsrs	r4, r4, #21
 8001734:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001738:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800173c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001740:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001744:	f044 0403 	orr.w	r4, r4, #3
 8001748:	ea23 0404 	bic.w	r4, r3, r4
 800174c:	4321      	orrs	r1, r4
 800174e:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001754:	4770      	bx	lr

08001756 <I2C_IsErrorOccurred>:
{
 8001756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001758:	4604      	mov	r4, r0
 800175a:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 800175c:	6803      	ldr	r3, [r0, #0]
 800175e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001760:	f012 0f10 	tst.w	r2, #16
 8001764:	d04a      	beq.n	80017fc <I2C_IsErrorOccurred+0xa6>
 8001766:	460e      	mov	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001768:	2210      	movs	r2, #16
 800176a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	f012 0f20 	tst.w	r2, #32
 8001776:	d13a      	bne.n	80017ee <I2C_IsErrorOccurred+0x98>
 8001778:	2d00      	cmp	r5, #0
 800177a:	d138      	bne.n	80017ee <I2C_IsErrorOccurred+0x98>
      if (Timeout != HAL_MAX_DELAY)
 800177c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001780:	d0f5      	beq.n	800176e <I2C_IsErrorOccurred+0x18>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001782:	f7ff fe39 	bl	80013f8 <HAL_GetTick>
 8001786:	1bc0      	subs	r0, r0, r7
 8001788:	42b0      	cmp	r0, r6
 800178a:	d801      	bhi.n	8001790 <I2C_IsErrorOccurred+0x3a>
 800178c:	2e00      	cmp	r6, #0
 800178e:	d1ee      	bne.n	800176e <I2C_IsErrorOccurred+0x18>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001790:	6821      	ldr	r1, [r4, #0]
 8001792:	684a      	ldr	r2, [r1, #4]
 8001794:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8001798:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800179c:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800179e:	6988      	ldr	r0, [r1, #24]
 80017a0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80017a4:	d00b      	beq.n	80017be <I2C_IsErrorOccurred+0x68>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 80017a6:	3b20      	subs	r3, #32
 80017a8:	bf18      	it	ne
 80017aa:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 80017ac:	b93a      	cbnz	r2, 80017be <I2C_IsErrorOccurred+0x68>
 80017ae:	b133      	cbz	r3, 80017be <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017b0:	684b      	ldr	r3, [r1, #4]
 80017b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b6:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80017b8:	f7ff fe1e 	bl	80013f8 <HAL_GetTick>
 80017bc:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f013 0f20 	tst.w	r3, #32
 80017c6:	d1d2      	bne.n	800176e <I2C_IsErrorOccurred+0x18>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80017c8:	f7ff fe16 	bl	80013f8 <HAL_GetTick>
 80017cc:	1bc0      	subs	r0, r0, r7
 80017ce:	2819      	cmp	r0, #25
 80017d0:	d9f5      	bls.n	80017be <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017d4:	f043 0320 	orr.w	r3, r3, #32
 80017d8:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80017da:	2320      	movs	r3, #32
 80017dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 80017e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 80017ea:	2501      	movs	r5, #1
 80017ec:	e7e7      	b.n	80017be <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 80017ee:	2d00      	cmp	r5, #0
 80017f0:	d140      	bne.n	8001874 <I2C_IsErrorOccurred+0x11e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017f2:	2220      	movs	r2, #32
 80017f4:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80017f6:	2604      	movs	r6, #4
    status = HAL_ERROR;
 80017f8:	2501      	movs	r5, #1
 80017fa:	e001      	b.n	8001800 <I2C_IsErrorOccurred+0xaa>
  uint32_t error_code = 0;
 80017fc:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017fe:	4635      	mov	r5, r6
  itflag = hi2c->Instance->ISR;
 8001800:	6822      	ldr	r2, [r4, #0]
 8001802:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001804:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001808:	d005      	beq.n	8001816 <I2C_IsErrorOccurred+0xc0>
    error_code |= HAL_I2C_ERROR_BERR;
 800180a:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800180e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001812:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001814:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001816:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800181a:	d006      	beq.n	800182a <I2C_IsErrorOccurred+0xd4>
    error_code |= HAL_I2C_ERROR_OVR;
 800181c:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001820:	6822      	ldr	r2, [r4, #0]
 8001822:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001826:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001828:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800182a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800182e:	d023      	beq.n	8001878 <I2C_IsErrorOccurred+0x122>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001830:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183a:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800183c:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff ff5a 	bl	80016f8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001844:	6822      	ldr	r2, [r4, #0]
 8001846:	6853      	ldr	r3, [r2, #4]
 8001848:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800184c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001850:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800185a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800185c:	431e      	orrs	r6, r3
 800185e:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001860:	2320      	movs	r3, #32
 8001862:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001866:	2300      	movs	r3, #0
 8001868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800186c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001870:	4628      	mov	r0, r5
 8001872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8001874:	2604      	movs	r6, #4
 8001876:	e7c3      	b.n	8001800 <I2C_IsErrorOccurred+0xaa>
  if (status != HAL_OK)
 8001878:	2d00      	cmp	r5, #0
 800187a:	d1e0      	bne.n	800183e <I2C_IsErrorOccurred+0xe8>
 800187c:	e7f8      	b.n	8001870 <I2C_IsErrorOccurred+0x11a>

0800187e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800187e:	b570      	push	{r4, r5, r6, lr}
 8001880:	4604      	mov	r4, r0
 8001882:	460d      	mov	r5, r1
 8001884:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f013 0f02 	tst.w	r3, #2
 800188e:	d11d      	bne.n	80018cc <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001890:	4632      	mov	r2, r6
 8001892:	4629      	mov	r1, r5
 8001894:	4620      	mov	r0, r4
 8001896:	f7ff ff5e 	bl	8001756 <I2C_IsErrorOccurred>
 800189a:	b9c8      	cbnz	r0, 80018d0 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800189c:	f1b5 3fff 	cmp.w	r5, #4294967295
 80018a0:	d0f1      	beq.n	8001886 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a2:	f7ff fda9 	bl	80013f8 <HAL_GetTick>
 80018a6:	1b80      	subs	r0, r0, r6
 80018a8:	42a8      	cmp	r0, r5
 80018aa:	d801      	bhi.n	80018b0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80018ac:	2d00      	cmp	r5, #0
 80018ae:	d1ea      	bne.n	8001886 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018b2:	f043 0320 	orr.w	r3, r3, #32
 80018b6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018b8:	2320      	movs	r3, #32
 80018ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80018c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80018c8:	2001      	movs	r0, #1
 80018ca:	e000      	b.n	80018ce <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80018cc:	2000      	movs	r0, #0
}
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80018d0:	2001      	movs	r0, #1
 80018d2:	e7fc      	b.n	80018ce <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080018d4 <I2C_WaitOnFlagUntilTimeout>:
{
 80018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d6:	4605      	mov	r5, r0
 80018d8:	460f      	mov	r7, r1
 80018da:	4616      	mov	r6, r2
 80018dc:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018de:	682b      	ldr	r3, [r5, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	ea37 0303 	bics.w	r3, r7, r3
 80018e6:	bf0c      	ite	eq
 80018e8:	2301      	moveq	r3, #1
 80018ea:	2300      	movne	r3, #0
 80018ec:	42b3      	cmp	r3, r6
 80018ee:	d118      	bne.n	8001922 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80018f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80018f4:	d0f3      	beq.n	80018de <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f6:	f7ff fd7f 	bl	80013f8 <HAL_GetTick>
 80018fa:	9b06      	ldr	r3, [sp, #24]
 80018fc:	1ac0      	subs	r0, r0, r3
 80018fe:	42a0      	cmp	r0, r4
 8001900:	d801      	bhi.n	8001906 <I2C_WaitOnFlagUntilTimeout+0x32>
 8001902:	2c00      	cmp	r4, #0
 8001904:	d1eb      	bne.n	80018de <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001906:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001908:	f043 0320 	orr.w	r3, r3, #32
 800190c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800190e:	2320      	movs	r3, #32
 8001910:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	2300      	movs	r3, #0
 8001916:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800191a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800191e:	2001      	movs	r0, #1
 8001920:	e000      	b.n	8001924 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8001922:	2000      	movs	r0, #0
}
 8001924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001926 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001926:	b570      	push	{r4, r5, r6, lr}
 8001928:	4605      	mov	r5, r0
 800192a:	460c      	mov	r4, r1
 800192c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800192e:	682b      	ldr	r3, [r5, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f013 0f20 	tst.w	r3, #32
 8001936:	d11a      	bne.n	800196e <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001938:	4632      	mov	r2, r6
 800193a:	4621      	mov	r1, r4
 800193c:	4628      	mov	r0, r5
 800193e:	f7ff ff0a 	bl	8001756 <I2C_IsErrorOccurred>
 8001942:	b9b0      	cbnz	r0, 8001972 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001944:	f7ff fd58 	bl	80013f8 <HAL_GetTick>
 8001948:	1b80      	subs	r0, r0, r6
 800194a:	42a0      	cmp	r0, r4
 800194c:	d801      	bhi.n	8001952 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800194e:	2c00      	cmp	r4, #0
 8001950:	d1ed      	bne.n	800192e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001952:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001954:	f043 0320 	orr.w	r3, r3, #32
 8001958:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800195a:	2320      	movs	r3, #32
 800195c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001960:	2300      	movs	r3, #0
 8001962:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001966:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800196a:	2001      	movs	r0, #1
}
 800196c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800196e:	2000      	movs	r0, #0
 8001970:	e7fc      	b.n	800196c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001972:	2001      	movs	r0, #1
 8001974:	e7fa      	b.n	800196c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08001976 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001976:	b570      	push	{r4, r5, r6, lr}
 8001978:	4604      	mov	r4, r0
 800197a:	460d      	mov	r5, r1
 800197c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f013 0f04 	tst.w	r3, #4
 8001986:	d149      	bne.n	8001a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001988:	4632      	mov	r2, r6
 800198a:	4629      	mov	r1, r5
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff fee2 	bl	8001756 <I2C_IsErrorOccurred>
 8001992:	4601      	mov	r1, r0
 8001994:	2800      	cmp	r0, #0
 8001996:	d143      	bne.n	8001a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	f012 0f20 	tst.w	r2, #32
 80019a0:	d113      	bne.n	80019ca <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a2:	f7ff fd29 	bl	80013f8 <HAL_GetTick>
 80019a6:	1b80      	subs	r0, r0, r6
 80019a8:	42a8      	cmp	r0, r5
 80019aa:	d801      	bhi.n	80019b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80019ac:	2d00      	cmp	r5, #0
 80019ae:	d1e6      	bne.n	800197e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019b2:	f043 0320 	orr.w	r3, r3, #32
 80019b6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019b8:	2320      	movs	r3, #32
 80019ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80019be:	2300      	movs	r3, #0
 80019c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80019c4:	2101      	movs	r1, #1
}
 80019c6:	4608      	mov	r0, r1
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	f012 0f04 	tst.w	r2, #4
 80019d0:	d002      	beq.n	80019d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80019d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d1f6      	bne.n	80019c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	f012 0f10 	tst.w	r2, #16
 80019de:	d01a      	beq.n	8001a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e0:	2210      	movs	r2, #16
 80019e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80019e4:	2304      	movs	r3, #4
 80019e6:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	2220      	movs	r2, #32
 80019ec:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80019ee:	6821      	ldr	r1, [r4, #0]
 80019f0:	684b      	ldr	r3, [r1, #4]
 80019f2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80019f6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80019fa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8001a04:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001a0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001a12:	2101      	movs	r1, #1
 8001a14:	e7d7      	b.n	80019c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	6463      	str	r3, [r4, #68]	; 0x44
 8001a1a:	e7e5      	b.n	80019e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	e7d2      	b.n	80019c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8001a20:	2101      	movs	r1, #1
 8001a22:	e7d0      	b.n	80019c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08001a24 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d057      	beq.n	8001ad8 <HAL_I2C_Init+0xb4>
{
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d041      	beq.n	8001ab8 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a34:	2324      	movs	r3, #36	; 0x24
 8001a36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001a3a:	6822      	ldr	r2, [r4, #0]
 8001a3c:	6813      	ldr	r3, [r2, #0]
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a44:	6863      	ldr	r3, [r4, #4]
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001a4c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a4e:	6822      	ldr	r2, [r4, #0]
 8001a50:	6893      	ldr	r3, [r2, #8]
 8001a52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a56:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a58:	68e3      	ldr	r3, [r4, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d031      	beq.n	8001ac2 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a5e:	68a3      	ldr	r3, [r4, #8]
 8001a60:	6822      	ldr	r2, [r4, #0]
 8001a62:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001a66:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a68:	68e3      	ldr	r3, [r4, #12]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d02f      	beq.n	8001ace <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a6e:	6822      	ldr	r2, [r4, #0]
 8001a70:	6851      	ldr	r1, [r2, #4]
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_I2C_Init+0xb8>)
 8001a74:	430b      	orrs	r3, r1
 8001a76:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	68d3      	ldr	r3, [r2, #12]
 8001a7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a80:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a82:	6923      	ldr	r3, [r4, #16]
 8001a84:	6962      	ldr	r2, [r4, #20]
 8001a86:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a88:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a8a:	6822      	ldr	r2, [r4, #0]
 8001a8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a90:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a92:	69e3      	ldr	r3, [r4, #28]
 8001a94:	6a21      	ldr	r1, [r4, #32]
 8001a96:	6822      	ldr	r2, [r4, #0]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001a9c:	6822      	ldr	r2, [r4, #0]
 8001a9e:	6813      	ldr	r3, [r2, #0]
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ab0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001ab6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001ab8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001abc:	f004 fbc6 	bl	800624c <HAL_I2C_MspInit>
 8001ac0:	e7b8      	b.n	8001a34 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ac2:	68a3      	ldr	r3, [r4, #8]
 8001ac4:	6822      	ldr	r2, [r4, #0]
 8001ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aca:	6093      	str	r3, [r2, #8]
 8001acc:	e7cc      	b.n	8001a68 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	e7ca      	b.n	8001a6e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001ad8:	2001      	movs	r0, #1
}
 8001ada:	4770      	bx	lr
 8001adc:	02008000 	.word	0x02008000

08001ae0 <HAL_I2C_Master_Transmit>:
{
 8001ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ae4:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae6:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001aea:	b2ed      	uxtb	r5, r5
 8001aec:	2d20      	cmp	r5, #32
 8001aee:	f040 80a4 	bne.w	8001c3a <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8001af2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001af6:	2c01      	cmp	r4, #1
 8001af8:	f000 80a4 	beq.w	8001c44 <HAL_I2C_Master_Transmit+0x164>
 8001afc:	4698      	mov	r8, r3
 8001afe:	4617      	mov	r7, r2
 8001b00:	460e      	mov	r6, r1
 8001b02:	4604      	mov	r4, r0
 8001b04:	f04f 0901 	mov.w	r9, #1
 8001b08:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001b0c:	f7ff fc74 	bl	80013f8 <HAL_GetTick>
 8001b10:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b12:	9000      	str	r0, [sp, #0]
 8001b14:	2319      	movs	r3, #25
 8001b16:	464a      	mov	r2, r9
 8001b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff fed9 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 8001b22:	2800      	cmp	r0, #0
 8001b24:	f040 8090 	bne.w	8001c48 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b28:	2321      	movs	r3, #33	; 0x21
 8001b2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b2e:	2310      	movs	r3, #16
 8001b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001b38:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b3a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b3e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2bff      	cmp	r3, #255	; 0xff
 8001b46:	d90a      	bls.n	8001b5e <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b48:	22ff      	movs	r2, #255	; 0xff
 8001b4a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <HAL_I2C_Master_Transmit+0x178>)
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b54:	4631      	mov	r1, r6
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff fddf 	bl	800171a <I2C_TransferConfig>
 8001b5c:	e018      	b.n	8001b90 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8001b5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b60:	b292      	uxth	r2, r2
 8001b62:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b64:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <HAL_I2C_Master_Transmit+0x178>)
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	4631      	mov	r1, r6
 8001b70:	4620      	mov	r0, r4
 8001b72:	f7ff fdd2 	bl	800171a <I2C_TransferConfig>
 8001b76:	e00b      	b.n	8001b90 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001b78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	4631      	mov	r1, r6
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fdc5 	bl	800171a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d033      	beq.n	8001c00 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b98:	462a      	mov	r2, r5
 8001b9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff fe6e 	bl	800187e <I2C_WaitOnTXISFlagUntilTimeout>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d152      	bne.n	8001c4c <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ba6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001bb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001bbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001bc6:	b292      	uxth	r2, r2
 8001bc8:	2a00      	cmp	r2, #0
 8001bca:	d0e1      	beq.n	8001b90 <HAL_I2C_Master_Transmit+0xb0>
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1df      	bne.n	8001b90 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bd0:	9500      	str	r5, [sp, #0]
 8001bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f7ff fe7b 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d136      	bne.n	8001c50 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001be2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2bff      	cmp	r3, #255	; 0xff
 8001be8:	d9c6      	bls.n	8001b78 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bea:	22ff      	movs	r2, #255	; 0xff
 8001bec:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bee:	2300      	movs	r3, #0
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bf6:	4631      	mov	r1, r6
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f7ff fd8e 	bl	800171a <I2C_TransferConfig>
 8001bfe:	e7c7      	b.n	8001b90 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c00:	462a      	mov	r2, r5
 8001c02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff fe8e 	bl	8001926 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	bb10      	cbnz	r0, 8001c54 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c0e:	6822      	ldr	r2, [r4, #0]
 8001c10:	2120      	movs	r1, #32
 8001c12:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001c14:	6820      	ldr	r0, [r4, #0]
 8001c16:	6842      	ldr	r2, [r0, #4]
 8001c18:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001c1c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001c20:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001c34:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001c38:	e000      	b.n	8001c3c <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	b003      	add	sp, #12
 8001c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001c44:	2302      	movs	r3, #2
 8001c46:	e7f9      	b.n	8001c3c <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e7f7      	b.n	8001c3c <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e7f5      	b.n	8001c3c <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e7f3      	b.n	8001c3c <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e7f1      	b.n	8001c3c <HAL_I2C_Master_Transmit+0x15c>
 8001c58:	80002000 	.word	0x80002000

08001c5c <HAL_I2C_Master_Receive>:
{
 8001c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c60:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c62:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001c66:	b2ed      	uxtb	r5, r5
 8001c68:	2d20      	cmp	r5, #32
 8001c6a:	f040 80a4 	bne.w	8001db6 <HAL_I2C_Master_Receive+0x15a>
    __HAL_LOCK(hi2c);
 8001c6e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001c72:	2c01      	cmp	r4, #1
 8001c74:	f000 80a4 	beq.w	8001dc0 <HAL_I2C_Master_Receive+0x164>
 8001c78:	4698      	mov	r8, r3
 8001c7a:	4617      	mov	r7, r2
 8001c7c:	460e      	mov	r6, r1
 8001c7e:	4604      	mov	r4, r0
 8001c80:	f04f 0901 	mov.w	r9, #1
 8001c84:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001c88:	f7ff fbb6 	bl	80013f8 <HAL_GetTick>
 8001c8c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c8e:	9000      	str	r0, [sp, #0]
 8001c90:	2319      	movs	r3, #25
 8001c92:	464a      	mov	r2, r9
 8001c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f7ff fe1b 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	f040 8090 	bne.w	8001dc4 <HAL_I2C_Master_Receive+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ca4:	2322      	movs	r3, #34	; 0x22
 8001ca6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001caa:	2310      	movs	r3, #16
 8001cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001cb4:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cb6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cba:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	2bff      	cmp	r3, #255	; 0xff
 8001cc2:	d90a      	bls.n	8001cda <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc4:	22ff      	movs	r2, #255	; 0xff
 8001cc6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cc8:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_I2C_Master_Receive+0x178>)
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cd0:	4631      	mov	r1, r6
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff fd21 	bl	800171a <I2C_TransferConfig>
 8001cd8:	e018      	b.n	8001d0c <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8001cda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ce0:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <HAL_I2C_Master_Receive+0x178>)
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4631      	mov	r1, r6
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff fd14 	bl	800171a <I2C_TransferConfig>
 8001cf2:	e00b      	b.n	8001d0c <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001cf4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001cf6:	b292      	uxth	r2, r2
 8001cf8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	4631      	mov	r1, r6
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff fd07 	bl	800171a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d033      	beq.n	8001d7c <HAL_I2C_Master_Receive+0x120>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d14:	462a      	mov	r2, r5
 8001d16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f7ff fe2c 	bl	8001976 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d152      	bne.n	8001dc8 <HAL_I2C_Master_Receive+0x16c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d28:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001d30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001d38:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d3a:	3a01      	subs	r2, #1
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d42:	b292      	uxth	r2, r2
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d0e1      	beq.n	8001d0c <HAL_I2C_Master_Receive+0xb0>
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1df      	bne.n	8001d0c <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d4c:	9500      	str	r5, [sp, #0]
 8001d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d50:	2200      	movs	r2, #0
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff fdbd 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d136      	bne.n	8001dcc <HAL_I2C_Master_Receive+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2bff      	cmp	r3, #255	; 0xff
 8001d64:	d9c6      	bls.n	8001cf4 <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d66:	22ff      	movs	r2, #255	; 0xff
 8001d68:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d72:	4631      	mov	r1, r6
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7ff fcd0 	bl	800171a <I2C_TransferConfig>
 8001d7a:	e7c7      	b.n	8001d0c <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d7c:	462a      	mov	r2, r5
 8001d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff fdd0 	bl	8001926 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	bb10      	cbnz	r0, 8001dd0 <HAL_I2C_Master_Receive+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001d90:	6820      	ldr	r0, [r4, #0]
 8001d92:	6842      	ldr	r2, [r0, #4]
 8001d94:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001d98:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001d9c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001daa:	2200      	movs	r2, #0
 8001dac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001db0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001db4:	e000      	b.n	8001db8 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	b003      	add	sp, #12
 8001dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e7f9      	b.n	8001db8 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e7f7      	b.n	8001db8 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e7f5      	b.n	8001db8 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e7f3      	b.n	8001db8 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e7f1      	b.n	8001db8 <HAL_I2C_Master_Receive+0x15c>
 8001dd4:	80002400 	.word	0x80002400

08001dd8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d124      	bne.n	8001e2c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d022      	beq.n	8001e30 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001dea:	2301      	movs	r3, #1
 8001dec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	2324      	movs	r3, #36	; 0x24
 8001df2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001df6:	6802      	ldr	r2, [r0, #0]
 8001df8:	6813      	ldr	r3, [r2, #0]
 8001dfa:	f023 0301 	bic.w	r3, r3, #1
 8001dfe:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e00:	6802      	ldr	r2, [r0, #0]
 8001e02:	6813      	ldr	r3, [r2, #0]
 8001e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e08:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e0a:	6802      	ldr	r2, [r0, #0]
 8001e0c:	6813      	ldr	r3, [r2, #0]
 8001e0e:	4319      	orrs	r1, r3
 8001e10:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e12:	6802      	ldr	r2, [r0, #0]
 8001e14:	6813      	ldr	r3, [r2, #0]
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e22:	2300      	movs	r3, #0
 8001e24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001e28:	4618      	mov	r0, r3
 8001e2a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001e30:	2002      	movs	r0, #2
  }
}
 8001e32:	4770      	bx	lr

08001e34 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e34:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d122      	bne.n	8001e84 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d020      	beq.n	8001e88 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001e46:	2301      	movs	r3, #1
 8001e48:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4c:	2324      	movs	r3, #36	; 0x24
 8001e4e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e52:	6802      	ldr	r2, [r0, #0]
 8001e54:	6813      	ldr	r3, [r2, #0]
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e5c:	6802      	ldr	r2, [r0, #0]
 8001e5e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e64:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e68:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e6a:	6802      	ldr	r2, [r0, #0]
 8001e6c:	6813      	ldr	r3, [r2, #0]
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	2320      	movs	r3, #32
 8001e76:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001e80:	4618      	mov	r0, r3
 8001e82:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2002      	movs	r0, #2
 8001e86:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001e88:	2002      	movs	r0, #2
  }
}
 8001e8a:	4770      	bx	lr

08001e8c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e90:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e92:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001e94:	00ca      	lsls	r2, r1, #3
 8001e96:	1a52      	subs	r2, r2, r1
 8001e98:	0093      	lsls	r3, r2, #2
 8001e9a:	4403      	add	r3, r0
 8001e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d857      	bhi.n	8001f54 <PCD_WriteEmptyTxFifo+0xc8>
 8001ea4:	46b8      	mov	r8, r7
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ea6:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001ea8:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8001eac:	00a2      	lsls	r2, r4, #2
 8001eae:	4402      	add	r2, r0
 8001eb0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d300      	bcc.n	8001eb8 <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	460c      	mov	r4, r1
 8001eba:	4606      	mov	r6, r0
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001ebc:	f102 0a03 	add.w	sl, r2, #3
 8001ec0:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ec4:	e016      	b.n	8001ef4 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001ec6:	f109 0a03 	add.w	sl, r9, #3
 8001eca:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ece:	00e3      	lsls	r3, r4, #3
 8001ed0:	1b1b      	subs	r3, r3, r4
 8001ed2:	009d      	lsls	r5, r3, #2
 8001ed4:	4435      	add	r5, r6
 8001ed6:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001ed8:	7c33      	ldrb	r3, [r6, #16]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	fa1f f389 	uxth.w	r3, r9
 8001ee0:	b2e2      	uxtb	r2, r4
 8001ee2:	4638      	mov	r0, r7
 8001ee4:	f002 fb92 	bl	800460c <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001ee8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001eea:	444b      	add	r3, r9
 8001eec:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001eee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001ef0:	444b      	add	r3, r9
 8001ef2:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ef4:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8001ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	4553      	cmp	r3, sl
 8001f02:	d313      	bcc.n	8001f2c <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f04:	00e3      	lsls	r3, r4, #3
 8001f06:	1b1b      	subs	r3, r3, r4
 8001f08:	009a      	lsls	r2, r3, #2
 8001f0a:	4432      	add	r2, r6
 8001f0c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001f0e:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f10:	4299      	cmp	r1, r3
 8001f12:	d20b      	bcs.n	8001f2c <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f14:	b153      	cbz	r3, 8001f2c <PCD_WriteEmptyTxFifo+0xa0>
    len = ep->xfer_len - ep->xfer_count;
 8001f16:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8001f18:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001f1c:	008a      	lsls	r2, r1, #2
 8001f1e:	4432      	add	r2, r6
 8001f20:	f8d2 9044 	ldr.w	r9, [r2, #68]	; 0x44
 8001f24:	4599      	cmp	r9, r3
 8001f26:	d3ce      	bcc.n	8001ec6 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8001f28:	4699      	mov	r9, r3
 8001f2a:	e7cc      	b.n	8001ec6 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f2c:	00e3      	lsls	r3, r4, #3
 8001f2e:	1b1b      	subs	r3, r3, r4
 8001f30:	0098      	lsls	r0, r3, #2
 8001f32:	4406      	add	r6, r0
 8001f34:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8001f36:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d80f      	bhi.n	8001f5c <PCD_WriteEmptyTxFifo+0xd0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f3c:	f004 040f 	and.w	r4, r4, #15
 8001f40:	2101      	movs	r1, #1
 8001f42:	40a1      	lsls	r1, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f44:	f8d7 4834 	ldr.w	r4, [r7, #2100]	; 0x834
 8001f48:	ea24 0401 	bic.w	r4, r4, r1
 8001f4c:	f8c7 4834 	str.w	r4, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 8001f50:	2000      	movs	r0, #0
 8001f52:	e000      	b.n	8001f56 <PCD_WriteEmptyTxFifo+0xca>
    return HAL_ERROR;
 8001f54:	2001      	movs	r0, #1
}
 8001f56:	b002      	add	sp, #8
 8001f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	e7fa      	b.n	8001f56 <PCD_WriteEmptyTxFifo+0xca>

08001f60 <HAL_PCD_Init>:
{
 8001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f62:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001f64:	2800      	cmp	r0, #0
 8001f66:	f000 8091 	beq.w	800208c <HAL_PCD_Init+0x12c>
 8001f6a:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8001f6c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f6e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001f72:	b323      	cbz	r3, 8001fbe <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f74:	2303      	movs	r3, #3
 8001f76:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f7a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001f7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f80:	d101      	bne.n	8001f86 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	6123      	str	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001f86:	6820      	ldr	r0, [r4, #0]
 8001f88:	f002 f8d2 	bl	8004130 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f8c:	4625      	mov	r5, r4
 8001f8e:	f855 7b10 	ldr.w	r7, [r5], #16
 8001f92:	466e      	mov	r6, sp
 8001f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001f9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fa0:	e886 0003 	stmia.w	r6, {r0, r1}
 8001fa4:	1d23      	adds	r3, r4, #4
 8001fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa8:	4638      	mov	r0, r7
 8001faa:	f002 f807 	bl	8003fbc <USB_CoreInit>
 8001fae:	b158      	cbz	r0, 8001fc8 <HAL_PCD_Init+0x68>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001fb6:	2501      	movs	r5, #1
}
 8001fb8:	4628      	mov	r0, r5
 8001fba:	b00b      	add	sp, #44	; 0x2c
 8001fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001fbe:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001fc2:	f004 fa3d 	bl	8006440 <HAL_PCD_MspInit>
 8001fc6:	e7d5      	b.n	8001f74 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	6820      	ldr	r0, [r4, #0]
 8001fcc:	f002 fd21 	bl	8004a12 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e015      	b.n	8002000 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8001fd4:	00d9      	lsls	r1, r3, #3
 8001fd6:	1ac8      	subs	r0, r1, r3
 8001fd8:	0082      	lsls	r2, r0, #2
 8001fda:	4422      	add	r2, r4
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001fe2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fe6:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fea:	2000      	movs	r0, #0
 8001fec:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ff0:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ff2:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ff4:	1aca      	subs	r2, r1, r3
 8001ff6:	0091      	lsls	r1, r2, #2
 8001ff8:	4421      	add	r1, r4
 8001ffa:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	6865      	ldr	r5, [r4, #4]
 8002002:	42ab      	cmp	r3, r5
 8002004:	d3e6      	bcc.n	8001fd4 <HAL_PCD_Init+0x74>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002006:	2300      	movs	r3, #0
 8002008:	e015      	b.n	8002036 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 800200a:	00d8      	lsls	r0, r3, #3
 800200c:	1ac1      	subs	r1, r0, r3
 800200e:	008a      	lsls	r2, r1, #2
 8002010:	4422      	add	r2, r4
 8002012:	2100      	movs	r1, #0
 8002014:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8002018:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800201c:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002020:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002024:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002028:	1ac2      	subs	r2, r0, r3
 800202a:	0090      	lsls	r0, r2, #2
 800202c:	4420      	add	r0, r4
 800202e:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002032:	3301      	adds	r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	429d      	cmp	r5, r3
 8002038:	d8e7      	bhi.n	800200a <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800203a:	4625      	mov	r5, r4
 800203c:	f855 7b10 	ldr.w	r7, [r5], #16
 8002040:	466e      	mov	r6, sp
 8002042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002044:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002048:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800204a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800204e:	e886 0003 	stmia.w	r6, {r0, r1}
 8002052:	1d23      	adds	r3, r4, #4
 8002054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002056:	4638      	mov	r0, r7
 8002058:	f002 f8c2 	bl	80041e0 <USB_DevInit>
 800205c:	4605      	mov	r5, r0
 800205e:	b960      	cbnz	r0, 800207a <HAL_PCD_Init+0x11a>
  hpcd->USB_Address = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002066:	2301      	movs	r3, #1
 8002068:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800206c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800206e:	2b01      	cmp	r3, #1
 8002070:	d008      	beq.n	8002084 <HAL_PCD_Init+0x124>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002072:	6820      	ldr	r0, [r4, #0]
 8002074:	f002 fc8a 	bl	800498c <USB_DevDisconnect>
  return HAL_OK;
 8002078:	e79e      	b.n	8001fb8 <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207a:	2302      	movs	r3, #2
 800207c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002080:	2501      	movs	r5, #1
 8002082:	e799      	b.n	8001fb8 <HAL_PCD_Init+0x58>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002084:	4620      	mov	r0, r4
 8002086:	f000 fcbd 	bl	8002a04 <HAL_PCDEx_ActivateLPM>
 800208a:	e7f2      	b.n	8002072 <HAL_PCD_Init+0x112>
    return HAL_ERROR;
 800208c:	2501      	movs	r5, #1
 800208e:	e793      	b.n	8001fb8 <HAL_PCD_Init+0x58>

08002090 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8002090:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002094:	2b01      	cmp	r3, #1
 8002096:	d00e      	beq.n	80020b6 <HAL_PCD_Start+0x26>
{
 8002098:	b510      	push	{r4, lr}
 800209a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800209c:	2301      	movs	r3, #1
 800209e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80020a2:	6800      	ldr	r0, [r0, #0]
 80020a4:	f002 f83e 	bl	8004124 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020a8:	6820      	ldr	r0, [r4, #0]
 80020aa:	f002 fc61 	bl	8004970 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80020b4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80020b6:	2002      	movs	r0, #2
}
 80020b8:	4770      	bx	lr
	...

080020bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020bc:	b570      	push	{r4, r5, r6, lr}
 80020be:	4604      	mov	r4, r0
 80020c0:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c2:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020c4:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020c6:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80020ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ce:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020d0:	6921      	ldr	r1, [r4, #16]
 80020d2:	2901      	cmp	r1, #1
 80020d4:	d011      	beq.n	80020fa <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020d6:	4937      	ldr	r1, [pc, #220]	; (80021b4 <PCD_EP_OutXfrComplete_int+0xf8>)
 80020d8:	428e      	cmp	r6, r1
 80020da:	d054      	beq.n	8002186 <PCD_EP_OutXfrComplete_int+0xca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020dc:	b93d      	cbnz	r5, 80020ee <PCD_EP_OutXfrComplete_int+0x32>
 80020de:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 80020e2:	0093      	lsls	r3, r2, #2
 80020e4:	4423      	add	r3, r4
 80020e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d05c      	beq.n	80021a8 <PCD_EP_OutXfrComplete_int+0xec>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020ee:	b2e9      	uxtb	r1, r5
 80020f0:	4620      	mov	r0, r4
 80020f2:	f004 f9f1 	bl	80064d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 80020f6:	2000      	movs	r0, #0
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020fa:	f012 0f08 	tst.w	r2, #8
 80020fe:	d009      	beq.n	8002114 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002100:	492d      	ldr	r1, [pc, #180]	; (80021b8 <PCD_EP_OutXfrComplete_int+0xfc>)
 8002102:	428e      	cmp	r6, r1
 8002104:	d9f7      	bls.n	80020f6 <PCD_EP_OutXfrComplete_int+0x3a>
 8002106:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800210a:	d0f4      	beq.n	80020f6 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800210c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	e7f0      	b.n	80020f6 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002114:	f012 0f20 	tst.w	r2, #32
 8002118:	d128      	bne.n	800216c <PCD_EP_OutXfrComplete_int+0xb0>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800211a:	f012 0f28 	tst.w	r2, #40	; 0x28
 800211e:	d1ea      	bne.n	80020f6 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002120:	4925      	ldr	r1, [pc, #148]	; (80021b8 <PCD_EP_OutXfrComplete_int+0xfc>)
 8002122:	428e      	cmp	r6, r1
 8002124:	d902      	bls.n	800212c <PCD_EP_OutXfrComplete_int+0x70>
 8002126:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800212a:	d122      	bne.n	8002172 <PCD_EP_OutXfrComplete_int+0xb6>
          hpcd->OUT_ep[epnum].maxpacket -
 800212c:	00e9      	lsls	r1, r5, #3
 800212e:	1b49      	subs	r1, r1, r5
 8002130:	008a      	lsls	r2, r1, #2
 8002132:	4422      	add	r2, r4
 8002134:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800213e:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002140:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002144:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8002148:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800214c:	440b      	add	r3, r1
 800214e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002152:	b935      	cbnz	r5, 8002162 <PCD_EP_OutXfrComplete_int+0xa6>
 8002154:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002158:	0093      	lsls	r3, r2, #2
 800215a:	4423      	add	r3, r4
 800215c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002160:	b15b      	cbz	r3, 800217a <PCD_EP_OutXfrComplete_int+0xbe>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002162:	b2e9      	uxtb	r1, r5
 8002164:	4620      	mov	r0, r4
 8002166:	f004 f9b7 	bl	80064d8 <HAL_PCD_DataOutStageCallback>
 800216a:	e7c4      	b.n	80020f6 <PCD_EP_OutXfrComplete_int+0x3a>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800216c:	2220      	movs	r2, #32
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e7c1      	b.n	80020f6 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002172:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	e7bd      	b.n	80020f6 <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800217a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800217e:	2101      	movs	r1, #1
 8002180:	f002 fc88 	bl	8004a94 <USB_EP0_OutStart>
 8002184:	e7ed      	b.n	8002162 <PCD_EP_OutXfrComplete_int+0xa6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002186:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800218a:	d109      	bne.n	80021a0 <PCD_EP_OutXfrComplete_int+0xe4>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800218c:	f012 0f20 	tst.w	r2, #32
 8002190:	d001      	beq.n	8002196 <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002192:	2220      	movs	r2, #32
 8002194:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002196:	b2e9      	uxtb	r1, r5
 8002198:	4620      	mov	r0, r4
 800219a:	f004 f99d 	bl	80064d8 <HAL_PCD_DataOutStageCallback>
 800219e:	e7aa      	b.n	80020f6 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	e7a6      	b.n	80020f6 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021a8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80021ac:	2100      	movs	r1, #0
 80021ae:	f002 fc71 	bl	8004a94 <USB_EP0_OutStart>
 80021b2:	e79c      	b.n	80020ee <PCD_EP_OutXfrComplete_int+0x32>
 80021b4:	4f54310a 	.word	0x4f54310a
 80021b8:	4f54300a 	.word	0x4f54300a

080021bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c0:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021c2:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021c4:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80021c8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <PCD_EP_OutSetupPacket_int+0x4c>)
 80021ce:	429d      	cmp	r5, r3
 80021d0:	d907      	bls.n	80021e2 <PCD_EP_OutSetupPacket_int+0x26>
 80021d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80021d6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80021da:	d002      	beq.n	80021e2 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e0:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021e2:	4620      	mov	r0, r4
 80021e4:	f004 f970 	bl	80064c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <PCD_EP_OutSetupPacket_int+0x4c>)
 80021ea:	429d      	cmp	r5, r3
 80021ec:	d902      	bls.n	80021f4 <PCD_EP_OutSetupPacket_int+0x38>
 80021ee:	6923      	ldr	r3, [r4, #16]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d001      	beq.n	80021f8 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 80021f4:	2000      	movs	r0, #0
 80021f6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021f8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80021fc:	2101      	movs	r1, #1
 80021fe:	6820      	ldr	r0, [r4, #0]
 8002200:	f002 fc48 	bl	8004a94 <USB_EP0_OutStart>
 8002204:	e7f6      	b.n	80021f4 <PCD_EP_OutSetupPacket_int+0x38>
 8002206:	bf00      	nop
 8002208:	4f54300a 	.word	0x4f54300a

0800220c <HAL_PCD_IRQHandler>:
{
 800220c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002210:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002212:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002214:	4628      	mov	r0, r5
 8002216:	f002 fbf8 	bl	8004a0a <USB_GetMode>
 800221a:	b108      	cbz	r0, 8002220 <HAL_PCD_IRQHandler+0x14>
}
 800221c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002220:	462f      	mov	r7, r5
 8002222:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002224:	6820      	ldr	r0, [r4, #0]
 8002226:	f002 fbbf 	bl	80049a8 <USB_ReadInterrupts>
 800222a:	2800      	cmp	r0, #0
 800222c:	d0f6      	beq.n	800221c <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800222e:	6820      	ldr	r0, [r4, #0]
 8002230:	f002 fbba 	bl	80049a8 <USB_ReadInterrupts>
 8002234:	f010 0f02 	tst.w	r0, #2
 8002238:	d004      	beq.n	8002244 <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800223a:	6822      	ldr	r2, [r4, #0]
 800223c:	6953      	ldr	r3, [r2, #20]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002244:	6820      	ldr	r0, [r4, #0]
 8002246:	f002 fbaf 	bl	80049a8 <USB_ReadInterrupts>
 800224a:	f010 0f10 	tst.w	r0, #16
 800224e:	d015      	beq.n	800227c <HAL_PCD_IRQHandler+0x70>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002250:	6822      	ldr	r2, [r4, #0]
 8002252:	6993      	ldr	r3, [r2, #24]
 8002254:	f023 0310 	bic.w	r3, r3, #16
 8002258:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 800225a:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800225e:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002262:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8002266:	2b02      	cmp	r3, #2
 8002268:	f000 8085 	beq.w	8002376 <HAL_PCD_IRQHandler+0x16a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800226c:	2b06      	cmp	r3, #6
 800226e:	f000 80a5 	beq.w	80023bc <HAL_PCD_IRQHandler+0x1b0>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	6993      	ldr	r3, [r2, #24]
 8002276:	f043 0310 	orr.w	r3, r3, #16
 800227a:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800227c:	6820      	ldr	r0, [r4, #0]
 800227e:	f002 fb93 	bl	80049a8 <USB_ReadInterrupts>
 8002282:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8002286:	f040 80ad 	bne.w	80023e4 <HAL_PCD_IRQHandler+0x1d8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800228a:	6820      	ldr	r0, [r4, #0]
 800228c:	f002 fb8c 	bl	80049a8 <USB_ReadInterrupts>
 8002290:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002294:	f040 80f1 	bne.w	800247a <HAL_PCD_IRQHandler+0x26e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002298:	6820      	ldr	r0, [r4, #0]
 800229a:	f002 fb85 	bl	80049a8 <USB_ReadInterrupts>
 800229e:	2800      	cmp	r0, #0
 80022a0:	f2c0 815f 	blt.w	8002562 <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	f002 fb7f 	bl	80049a8 <USB_ReadInterrupts>
 80022aa:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80022ae:	d00a      	beq.n	80022c6 <HAL_PCD_IRQHandler+0xba>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022b0:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80022b4:	f013 0f01 	tst.w	r3, #1
 80022b8:	f040 816d 	bne.w	8002596 <HAL_PCD_IRQHandler+0x38a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022bc:	6822      	ldr	r2, [r4, #0]
 80022be:	6953      	ldr	r3, [r2, #20]
 80022c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80022c6:	6820      	ldr	r0, [r4, #0]
 80022c8:	f002 fb6e 	bl	80049a8 <USB_ReadInterrupts>
 80022cc:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80022d0:	d015      	beq.n	80022fe <HAL_PCD_IRQHandler+0xf2>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80022d2:	6822      	ldr	r2, [r4, #0]
 80022d4:	6953      	ldr	r3, [r2, #20]
 80022d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022da:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80022dc:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 815c 	bne.w	800259e <HAL_PCD_IRQHandler+0x392>
        hpcd->LPM_State = LPM_L1;
 80022e6:	2101      	movs	r1, #1
 80022e8:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80022f4:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80022f8:	4620      	mov	r0, r4
 80022fa:	f004 f9a9 	bl	8006650 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022fe:	6820      	ldr	r0, [r4, #0]
 8002300:	f002 fb52 	bl	80049a8 <USB_ReadInterrupts>
 8002304:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002308:	f040 814d 	bne.w	80025a6 <HAL_PCD_IRQHandler+0x39a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800230c:	6820      	ldr	r0, [r4, #0]
 800230e:	f002 fb4b 	bl	80049a8 <USB_ReadInterrupts>
 8002312:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002316:	f040 81a5 	bne.w	8002664 <HAL_PCD_IRQHandler+0x458>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800231a:	6820      	ldr	r0, [r4, #0]
 800231c:	f002 fb44 	bl	80049a8 <USB_ReadInterrupts>
 8002320:	f010 0f08 	tst.w	r0, #8
 8002324:	f040 81b6 	bne.w	8002694 <HAL_PCD_IRQHandler+0x488>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002328:	6820      	ldr	r0, [r4, #0]
 800232a:	f002 fb3d 	bl	80049a8 <USB_ReadInterrupts>
 800232e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002332:	f040 81b8 	bne.w	80026a6 <HAL_PCD_IRQHandler+0x49a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002336:	6820      	ldr	r0, [r4, #0]
 8002338:	f002 fb36 	bl	80049a8 <USB_ReadInterrupts>
 800233c:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002340:	f040 81bb 	bne.w	80026ba <HAL_PCD_IRQHandler+0x4ae>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002344:	6820      	ldr	r0, [r4, #0]
 8002346:	f002 fb2f 	bl	80049a8 <USB_ReadInterrupts>
 800234a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800234e:	f040 81be 	bne.w	80026ce <HAL_PCD_IRQHandler+0x4c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002352:	6820      	ldr	r0, [r4, #0]
 8002354:	f002 fb28 	bl	80049a8 <USB_ReadInterrupts>
 8002358:	f010 0f04 	tst.w	r0, #4
 800235c:	f43f af5e 	beq.w	800221c <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002364:	f015 0f04 	tst.w	r5, #4
 8002368:	f040 81ba 	bne.w	80026e0 <HAL_PCD_IRQHandler+0x4d4>
      hpcd->Instance->GOTGINT |= temp;
 800236c:	6822      	ldr	r2, [r4, #0]
 800236e:	6853      	ldr	r3, [r2, #4]
 8002370:	432b      	orrs	r3, r5
 8002372:	6053      	str	r3, [r2, #4]
 8002374:	e752      	b.n	800221c <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002376:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800237a:	ea18 0f03 	tst.w	r8, r3
 800237e:	f43f af78 	beq.w	8002272 <HAL_PCD_IRQHandler+0x66>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002382:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 8002386:	ebab 0309 	sub.w	r3, fp, r9
 800238a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800238e:	44a2      	add	sl, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002390:	ea4f 1818 	mov.w	r8, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002394:	f3c8 020a 	ubfx	r2, r8, #0, #11
 8002398:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 800239c:	4628      	mov	r0, r5
 800239e:	f002 fa55 	bl	800484c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023a2:	f3c8 080a 	ubfx	r8, r8, #0, #11
 80023a6:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 80023aa:	4443      	add	r3, r8
 80023ac:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023b0:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
 80023b4:	4443      	add	r3, r8
 80023b6:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 80023ba:	e75a      	b.n	8002272 <HAL_PCD_IRQHandler+0x66>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023bc:	2208      	movs	r2, #8
 80023be:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80023c2:	4628      	mov	r0, r5
 80023c4:	f002 fa42 	bl	800484c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023c8:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80023cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023d0:	eba3 0109 	sub.w	r1, r3, r9
 80023d4:	008a      	lsls	r2, r1, #2
 80023d6:	4422      	add	r2, r4
 80023d8:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80023dc:	4443      	add	r3, r8
 80023de:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80023e2:	e746      	b.n	8002272 <HAL_PCD_IRQHandler+0x66>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023e4:	6820      	ldr	r0, [r4, #0]
 80023e6:	f002 fae3 	bl	80049b0 <USB_ReadDevAllOutEpInterrupt>
 80023ea:	4680      	mov	r8, r0
      epnum = 0U;
 80023ec:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80023ee:	e017      	b.n	8002420 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023f0:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80023f4:	2201      	movs	r2, #1
 80023f6:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023fa:	4649      	mov	r1, r9
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7ff fe5d 	bl	80020bc <PCD_EP_OutXfrComplete_int>
 8002402:	e01d      	b.n	8002440 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002404:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002408:	2208      	movs	r2, #8
 800240a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800240e:	4649      	mov	r1, r9
 8002410:	4620      	mov	r0, r4
 8002412:	f7ff fed3 	bl	80021bc <PCD_EP_OutSetupPacket_int>
 8002416:	e016      	b.n	8002446 <HAL_PCD_IRQHandler+0x23a>
        epnum++;
 8002418:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800241c:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002420:	f1b8 0f00 	cmp.w	r8, #0
 8002424:	f43f af31 	beq.w	800228a <HAL_PCD_IRQHandler+0x7e>
        if ((ep_intr & 0x1U) != 0U)
 8002428:	f018 0f01 	tst.w	r8, #1
 800242c:	d0f4      	beq.n	8002418 <HAL_PCD_IRQHandler+0x20c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800242e:	fa5f f189 	uxtb.w	r1, r9
 8002432:	6820      	ldr	r0, [r4, #0]
 8002434:	f002 facc 	bl	80049d0 <USB_ReadDevOutEPInterrupt>
 8002438:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800243a:	f010 0f01 	tst.w	r0, #1
 800243e:	d1d7      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x1e4>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002440:	f01a 0f08 	tst.w	sl, #8
 8002444:	d1de      	bne.n	8002404 <HAL_PCD_IRQHandler+0x1f8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002446:	f01a 0f10 	tst.w	sl, #16
 800244a:	d004      	beq.n	8002456 <HAL_PCD_IRQHandler+0x24a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800244c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002450:	2210      	movs	r2, #16
 8002452:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002456:	f01a 0f20 	tst.w	sl, #32
 800245a:	d004      	beq.n	8002466 <HAL_PCD_IRQHandler+0x25a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800245c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002460:	2220      	movs	r2, #32
 8002462:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002466:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 800246a:	d0d5      	beq.n	8002418 <HAL_PCD_IRQHandler+0x20c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800246c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002470:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002474:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8002478:	e7ce      	b.n	8002418 <HAL_PCD_IRQHandler+0x20c>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800247a:	6820      	ldr	r0, [r4, #0]
 800247c:	f002 faa0 	bl	80049c0 <USB_ReadDevAllInEpInterrupt>
 8002480:	4680      	mov	r8, r0
      epnum = 0U;
 8002482:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002484:	e02a      	b.n	80024dc <HAL_PCD_IRQHandler+0x2d0>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002486:	4659      	mov	r1, fp
 8002488:	4620      	mov	r0, r4
 800248a:	f004 f831 	bl	80064f0 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800248e:	f01a 0f08 	tst.w	sl, #8
 8002492:	d004      	beq.n	800249e <HAL_PCD_IRQHandler+0x292>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002494:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002498:	2208      	movs	r2, #8
 800249a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800249e:	f01a 0f10 	tst.w	sl, #16
 80024a2:	d004      	beq.n	80024ae <HAL_PCD_IRQHandler+0x2a2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024a4:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80024a8:	2210      	movs	r2, #16
 80024aa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024ae:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80024b2:	d004      	beq.n	80024be <HAL_PCD_IRQHandler+0x2b2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024b4:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80024b8:	2240      	movs	r2, #64	; 0x40
 80024ba:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024be:	f01a 0f02 	tst.w	sl, #2
 80024c2:	d004      	beq.n	80024ce <HAL_PCD_IRQHandler+0x2c2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024c4:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80024c8:	2202      	movs	r2, #2
 80024ca:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024ce:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80024d2:	d141      	bne.n	8002558 <HAL_PCD_IRQHandler+0x34c>
        epnum++;
 80024d4:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80024d8:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80024dc:	f1b8 0f00 	cmp.w	r8, #0
 80024e0:	f43f aeda 	beq.w	8002298 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024e4:	f018 0f01 	tst.w	r8, #1
 80024e8:	d0f4      	beq.n	80024d4 <HAL_PCD_IRQHandler+0x2c8>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024ea:	fa5f fb89 	uxtb.w	fp, r9
 80024ee:	4659      	mov	r1, fp
 80024f0:	6820      	ldr	r0, [r4, #0]
 80024f2:	f002 fa76 	bl	80049e2 <USB_ReadDevInEPInterrupt>
 80024f6:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024f8:	f010 0f01 	tst.w	r0, #1
 80024fc:	d0c7      	beq.n	800248e <HAL_PCD_IRQHandler+0x282>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024fe:	f009 030f 	and.w	r3, r9, #15
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002508:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800250c:	ea23 0302 	bic.w	r3, r3, r2
 8002510:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002514:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002518:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 800251c:	6923      	ldr	r3, [r4, #16]
 800251e:	428b      	cmp	r3, r1
 8002520:	d1b1      	bne.n	8002486 <HAL_PCD_IRQHandler+0x27a>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002522:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002526:	eba2 0209 	sub.w	r2, r2, r9
 800252a:	0093      	lsls	r3, r2, #2
 800252c:	4423      	add	r3, r4
 800252e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002532:	440a      	add	r2, r1
 8002534:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002536:	f1b9 0f00 	cmp.w	r9, #0
 800253a:	d1a4      	bne.n	8002486 <HAL_PCD_IRQHandler+0x27a>
 800253c:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8002540:	0093      	lsls	r3, r2, #2
 8002542:	4423      	add	r3, r4
 8002544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002546:	2b00      	cmp	r3, #0
 8002548:	d19d      	bne.n	8002486 <HAL_PCD_IRQHandler+0x27a>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800254a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800254e:	2101      	movs	r1, #1
 8002550:	6820      	ldr	r0, [r4, #0]
 8002552:	f002 fa9f 	bl	8004a94 <USB_EP0_OutStart>
 8002556:	e796      	b.n	8002486 <HAL_PCD_IRQHandler+0x27a>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002558:	4649      	mov	r1, r9
 800255a:	4620      	mov	r0, r4
 800255c:	f7ff fc96 	bl	8001e8c <PCD_WriteEmptyTxFifo>
 8002560:	e7b8      	b.n	80024d4 <HAL_PCD_IRQHandler+0x2c8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002562:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800256e:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002572:	2b01      	cmp	r3, #1
 8002574:	d008      	beq.n	8002588 <HAL_PCD_IRQHandler+0x37c>
        HAL_PCD_ResumeCallback(hpcd);
 8002576:	4620      	mov	r0, r4
 8002578:	f003 fffa 	bl	8006570 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800257c:	6822      	ldr	r2, [r4, #0]
 800257e:	6953      	ldr	r3, [r2, #20]
 8002580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002584:	6153      	str	r3, [r2, #20]
 8002586:	e68d      	b.n	80022a4 <HAL_PCD_IRQHandler+0x98>
        hpcd->LPM_State = LPM_L0;
 8002588:	2100      	movs	r1, #0
 800258a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800258e:	4620      	mov	r0, r4
 8002590:	f004 f85e 	bl	8006650 <HAL_PCDEx_LPM_Callback>
 8002594:	e7f2      	b.n	800257c <HAL_PCD_IRQHandler+0x370>
        HAL_PCD_SuspendCallback(hpcd);
 8002596:	4620      	mov	r0, r4
 8002598:	f003 ffd2 	bl	8006540 <HAL_PCD_SuspendCallback>
 800259c:	e68e      	b.n	80022bc <HAL_PCD_IRQHandler+0xb0>
        HAL_PCD_SuspendCallback(hpcd);
 800259e:	4620      	mov	r0, r4
 80025a0:	f003 ffce 	bl	8006540 <HAL_PCD_SuspendCallback>
 80025a4:	e6ab      	b.n	80022fe <HAL_PCD_IRQHandler+0xf2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025a6:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 80025aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025b6:	2110      	movs	r1, #16
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	f001 fdbf 	bl	800413c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025be:	e01a      	b.n	80025f6 <HAL_PCD_IRQHandler+0x3ea>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025c0:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 80025c4:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80025c8:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025cc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80025d0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80025d4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025d8:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025dc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80025e0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80025e4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025e8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80025ec:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80025f0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f4:	3601      	adds	r6, #1
 80025f6:	6863      	ldr	r3, [r4, #4]
 80025f8:	42b3      	cmp	r3, r6
 80025fa:	d8e1      	bhi.n	80025c0 <HAL_PCD_IRQHandler+0x3b4>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025fc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8002600:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002604:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002608:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800260a:	b1eb      	cbz	r3, 8002648 <HAL_PCD_IRQHandler+0x43c>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800260c:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8002610:	f043 030b 	orr.w	r3, r3, #11
 8002614:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002618:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800261c:	f043 030b 	orr.w	r3, r3, #11
 8002620:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002624:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8002628:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800262c:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002630:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002634:	7c21      	ldrb	r1, [r4, #16]
 8002636:	6820      	ldr	r0, [r4, #0]
 8002638:	f002 fa2c 	bl	8004a94 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	6953      	ldr	r3, [r2, #20]
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	6153      	str	r3, [r2, #20]
 8002646:	e661      	b.n	800230c <HAL_PCD_IRQHandler+0x100>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002648:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800264c:	f242 032b 	movw	r3, #8235	; 0x202b
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002656:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800265a:	f043 030b 	orr.w	r3, r3, #11
 800265e:	f8c8 3010 	str.w	r3, [r8, #16]
 8002662:	e7df      	b.n	8002624 <HAL_PCD_IRQHandler+0x418>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002664:	6820      	ldr	r0, [r4, #0]
 8002666:	f002 fa05 	bl	8004a74 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800266a:	6820      	ldr	r0, [r4, #0]
 800266c:	f001 fe7c 	bl	8004368 <USB_GetDevSpeed>
 8002670:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002672:	6825      	ldr	r5, [r4, #0]
 8002674:	f000 fd3a 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8002678:	7b22      	ldrb	r2, [r4, #12]
 800267a:	4601      	mov	r1, r0
 800267c:	4628      	mov	r0, r5
 800267e:	f001 fcdb 	bl	8004038 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002682:	4620      	mov	r0, r4
 8002684:	f003 ff45 	bl	8006512 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	6953      	ldr	r3, [r2, #20]
 800268c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002690:	6153      	str	r3, [r2, #20]
 8002692:	e642      	b.n	800231a <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_SOFCallback(hpcd);
 8002694:	4620      	mov	r0, r4
 8002696:	f003 ff36 	bl	8006506 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800269a:	6822      	ldr	r2, [r4, #0]
 800269c:	6953      	ldr	r3, [r2, #20]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	6153      	str	r3, [r2, #20]
 80026a4:	e640      	b.n	8002328 <HAL_PCD_IRQHandler+0x11c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026a6:	2100      	movs	r1, #0
 80026a8:	4620      	mov	r0, r4
 80026aa:	f003 ff6d 	bl	8006588 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026ae:	6822      	ldr	r2, [r4, #0]
 80026b0:	6953      	ldr	r3, [r2, #20]
 80026b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b6:	6153      	str	r3, [r2, #20]
 80026b8:	e63d      	b.n	8002336 <HAL_PCD_IRQHandler+0x12a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026ba:	2100      	movs	r1, #0
 80026bc:	4620      	mov	r0, r4
 80026be:	f003 ff5d 	bl	800657c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	6953      	ldr	r3, [r2, #20]
 80026c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ca:	6153      	str	r3, [r2, #20]
 80026cc:	e63a      	b.n	8002344 <HAL_PCD_IRQHandler+0x138>
      HAL_PCD_ConnectCallback(hpcd);
 80026ce:	4620      	mov	r0, r4
 80026d0:	f003 ff60 	bl	8006594 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026d4:	6822      	ldr	r2, [r4, #0]
 80026d6:	6953      	ldr	r3, [r2, #20]
 80026d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026dc:	6153      	str	r3, [r2, #20]
 80026de:	e638      	b.n	8002352 <HAL_PCD_IRQHandler+0x146>
        HAL_PCD_DisconnectCallback(hpcd);
 80026e0:	4620      	mov	r0, r4
 80026e2:	f003 ff5d 	bl	80065a0 <HAL_PCD_DisconnectCallback>
 80026e6:	e641      	b.n	800236c <HAL_PCD_IRQHandler+0x160>

080026e8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80026e8:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d00d      	beq.n	800270c <HAL_PCD_SetAddress+0x24>
{
 80026f0:	b510      	push	{r4, lr}
 80026f2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80026f4:	2301      	movs	r3, #1
 80026f6:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80026fa:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026fe:	6800      	ldr	r0, [r0, #0]
 8002700:	f002 f926 	bl	8004950 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002704:	2000      	movs	r0, #0
 8002706:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800270a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800270c:	2002      	movs	r0, #2
}
 800270e:	4770      	bx	lr

08002710 <HAL_PCD_EP_Open>:
{
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8002712:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002716:	d128      	bne.n	800276a <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002718:	f001 060f 	and.w	r6, r1, #15
 800271c:	00f5      	lsls	r5, r6, #3
 800271e:	1baf      	subs	r7, r5, r6
 8002720:	00bc      	lsls	r4, r7, #2
 8002722:	4627      	mov	r7, r4
 8002724:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8002728:	4404      	add	r4, r0
 800272a:	3404      	adds	r4, #4
    ep->is_in = 0U;
 800272c:	463e      	mov	r6, r7
 800272e:	4406      	add	r6, r0
 8002730:	2500      	movs	r5, #0
 8002732:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8002736:	f001 010f 	and.w	r1, r1, #15
 800273a:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 800273c:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 800273e:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 8002740:	7862      	ldrb	r2, [r4, #1]
 8002742:	b102      	cbz	r2, 8002746 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8002744:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK)
 8002746:	2b02      	cmp	r3, #2
 8002748:	d01e      	beq.n	8002788 <HAL_PCD_EP_Open+0x78>
  __HAL_LOCK(hpcd);
 800274a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800274e:	2b01      	cmp	r3, #1
 8002750:	d01d      	beq.n	800278e <HAL_PCD_EP_Open+0x7e>
 8002752:	4605      	mov	r5, r0
 8002754:	2301      	movs	r3, #1
 8002756:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800275a:	4621      	mov	r1, r4
 800275c:	6800      	ldr	r0, [r0, #0]
 800275e:	f001 fe13 	bl	8004388 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002762:	2000      	movs	r0, #0
 8002764:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8002768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800276a:	f001 060f 	and.w	r6, r1, #15
 800276e:	00f5      	lsls	r5, r6, #3
 8002770:	1baf      	subs	r7, r5, r6
 8002772:	00bc      	lsls	r4, r7, #2
 8002774:	4627      	mov	r7, r4
 8002776:	3438      	adds	r4, #56	; 0x38
 8002778:	4404      	add	r4, r0
 800277a:	3404      	adds	r4, #4
    ep->is_in = 1U;
 800277c:	463e      	mov	r6, r7
 800277e:	4406      	add	r6, r0
 8002780:	2501      	movs	r5, #1
 8002782:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 8002786:	e7d6      	b.n	8002736 <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	7123      	strb	r3, [r4, #4]
 800278c:	e7dd      	b.n	800274a <HAL_PCD_EP_Open+0x3a>
  __HAL_LOCK(hpcd);
 800278e:	2002      	movs	r0, #2
 8002790:	e7ea      	b.n	8002768 <HAL_PCD_EP_Open+0x58>

08002792 <HAL_PCD_EP_Close>:
{
 8002792:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8002794:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002798:	d121      	bne.n	80027de <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800279a:	f001 050f 	and.w	r5, r1, #15
 800279e:	00ea      	lsls	r2, r5, #3
 80027a0:	1b54      	subs	r4, r2, r5
 80027a2:	00a3      	lsls	r3, r4, #2
 80027a4:	461c      	mov	r4, r3
 80027a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027aa:	4403      	add	r3, r0
 80027ac:	3304      	adds	r3, #4
    ep->is_in = 0U;
 80027ae:	4625      	mov	r5, r4
 80027b0:	4405      	add	r5, r0
 80027b2:	2200      	movs	r2, #0
 80027b4:	f885 21fd 	strb.w	r2, [r5, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027b8:	f001 010f 	and.w	r1, r1, #15
 80027bc:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 80027be:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80027c2:	2a01      	cmp	r2, #1
 80027c4:	d01a      	beq.n	80027fc <HAL_PCD_EP_Close+0x6a>
 80027c6:	4604      	mov	r4, r0
 80027c8:	2201      	movs	r2, #1
 80027ca:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027ce:	4619      	mov	r1, r3
 80027d0:	6800      	ldr	r0, [r0, #0]
 80027d2:	f001 fe21 	bl	8004418 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80027dc:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027de:	f001 040f 	and.w	r4, r1, #15
 80027e2:	00e2      	lsls	r2, r4, #3
 80027e4:	1b15      	subs	r5, r2, r4
 80027e6:	00ab      	lsls	r3, r5, #2
 80027e8:	461d      	mov	r5, r3
 80027ea:	3338      	adds	r3, #56	; 0x38
 80027ec:	4403      	add	r3, r0
 80027ee:	3304      	adds	r3, #4
    ep->is_in = 1U;
 80027f0:	462c      	mov	r4, r5
 80027f2:	4404      	add	r4, r0
 80027f4:	2201      	movs	r2, #1
 80027f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80027fa:	e7dd      	b.n	80027b8 <HAL_PCD_EP_Close+0x26>
  __HAL_LOCK(hpcd);
 80027fc:	2002      	movs	r0, #2
 80027fe:	e7ed      	b.n	80027dc <HAL_PCD_EP_Close+0x4a>

08002800 <HAL_PCD_EP_Receive>:
{
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002806:	00ee      	lsls	r6, r5, #3
 8002808:	1b71      	subs	r1, r6, r5
 800280a:	008c      	lsls	r4, r1, #2
 800280c:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8002810:	4404      	add	r4, r0
 8002812:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8002814:	1b76      	subs	r6, r6, r5
 8002816:	00b4      	lsls	r4, r6, #2
 8002818:	4404      	add	r4, r0
 800281a:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 800281e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8002828:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800282c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8002830:	6903      	ldr	r3, [r0, #16]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d006      	beq.n	8002844 <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002836:	b165      	cbz	r5, 8002852 <HAL_PCD_EP_Receive+0x52>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002838:	b2da      	uxtb	r2, r3
 800283a:	6800      	ldr	r0, [r0, #0]
 800283c:	f001 fefa 	bl	8004634 <USB_EPStartXfer>
}
 8002840:	2000      	movs	r0, #0
 8002842:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002844:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8002848:	00b4      	lsls	r4, r6, #2
 800284a:	4404      	add	r4, r0
 800284c:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 8002850:	e7f1      	b.n	8002836 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002852:	b2da      	uxtb	r2, r3
 8002854:	6800      	ldr	r0, [r0, #0]
 8002856:	f001 fe4d 	bl	80044f4 <USB_EP0StartXfer>
 800285a:	e7f1      	b.n	8002840 <HAL_PCD_EP_Receive+0x40>

0800285c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800285c:	f001 010f 	and.w	r1, r1, #15
 8002860:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002864:	008b      	lsls	r3, r1, #2
 8002866:	4418      	add	r0, r3
}
 8002868:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 800286c:	4770      	bx	lr

0800286e <HAL_PCD_EP_Transmit>:
{
 800286e:	b570      	push	{r4, r5, r6, lr}
 8002870:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002874:	00ee      	lsls	r6, r5, #3
 8002876:	1b71      	subs	r1, r6, r5
 8002878:	008c      	lsls	r4, r1, #2
 800287a:	3438      	adds	r4, #56	; 0x38
 800287c:	4404      	add	r4, r0
 800287e:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8002880:	1b76      	subs	r6, r6, r5
 8002882:	00b4      	lsls	r4, r6, #2
 8002884:	4404      	add	r4, r0
 8002886:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8002888:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800288e:	2301      	movs	r3, #1
 8002890:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8002894:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8002898:	6903      	ldr	r3, [r0, #16]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d006      	beq.n	80028ac <HAL_PCD_EP_Transmit+0x3e>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800289e:	b15d      	cbz	r5, 80028b8 <HAL_PCD_EP_Transmit+0x4a>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	6800      	ldr	r0, [r0, #0]
 80028a4:	f001 fec6 	bl	8004634 <USB_EPStartXfer>
}
 80028a8:	2000      	movs	r0, #0
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80028ac:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 80028b0:	00b4      	lsls	r4, r6, #2
 80028b2:	4404      	add	r4, r0
 80028b4:	64e2      	str	r2, [r4, #76]	; 0x4c
 80028b6:	e7f2      	b.n	800289e <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	6800      	ldr	r0, [r0, #0]
 80028bc:	f001 fe1a 	bl	80044f4 <USB_EP0StartXfer>
 80028c0:	e7f2      	b.n	80028a8 <HAL_PCD_EP_Transmit+0x3a>

080028c2 <HAL_PCD_EP_SetStall>:
{
 80028c2:	b538      	push	{r3, r4, r5, lr}
 80028c4:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028c8:	6843      	ldr	r3, [r0, #4]
 80028ca:	429d      	cmp	r5, r3
 80028cc:	d836      	bhi.n	800293c <HAL_PCD_EP_SetStall+0x7a>
  if ((0x80U & ep_addr) == 0x80U)
 80028ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80028d2:	d120      	bne.n	8002916 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 80028d4:	00ca      	lsls	r2, r1, #3
 80028d6:	1a54      	subs	r4, r2, r1
 80028d8:	00a3      	lsls	r3, r4, #2
 80028da:	461c      	mov	r4, r3
 80028dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028e0:	4403      	add	r3, r0
 80028e2:	3304      	adds	r3, #4
    ep->is_in = 0U;
 80028e4:	4622      	mov	r2, r4
 80028e6:	4402      	add	r2, r0
 80028e8:	2100      	movs	r1, #0
 80028ea:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  ep->is_stall = 1U;
 80028ee:	2201      	movs	r2, #1
 80028f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f2:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80028f4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80028f8:	2a01      	cmp	r2, #1
 80028fa:	d021      	beq.n	8002940 <HAL_PCD_EP_SetStall+0x7e>
 80028fc:	4604      	mov	r4, r0
 80028fe:	2201      	movs	r2, #1
 8002900:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002904:	4619      	mov	r1, r3
 8002906:	6800      	ldr	r0, [r0, #0]
 8002908:	f001 ffc7 	bl	800489a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800290c:	b17d      	cbz	r5, 800292e <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 800290e:	2000      	movs	r0, #0
 8002910:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002914:	e013      	b.n	800293e <HAL_PCD_EP_SetStall+0x7c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002916:	00ea      	lsls	r2, r5, #3
 8002918:	1b51      	subs	r1, r2, r5
 800291a:	008b      	lsls	r3, r1, #2
 800291c:	4619      	mov	r1, r3
 800291e:	3338      	adds	r3, #56	; 0x38
 8002920:	4403      	add	r3, r0
 8002922:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8002924:	4401      	add	r1, r0
 8002926:	2201      	movs	r2, #1
 8002928:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 800292c:	e7df      	b.n	80028ee <HAL_PCD_EP_SetStall+0x2c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800292e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002932:	7c21      	ldrb	r1, [r4, #16]
 8002934:	6820      	ldr	r0, [r4, #0]
 8002936:	f002 f8ad 	bl	8004a94 <USB_EP0_OutStart>
 800293a:	e7e8      	b.n	800290e <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 800293c:	2001      	movs	r0, #1
}
 800293e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002940:	2002      	movs	r0, #2
 8002942:	e7fc      	b.n	800293e <HAL_PCD_EP_SetStall+0x7c>

08002944 <HAL_PCD_EP_ClrStall>:
{
 8002944:	b510      	push	{r4, lr}
 8002946:	f001 040f 	and.w	r4, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800294a:	6843      	ldr	r3, [r0, #4]
 800294c:	429c      	cmp	r4, r3
 800294e:	d82c      	bhi.n	80029aa <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8002950:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002954:	d11d      	bne.n	8002992 <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002956:	00e3      	lsls	r3, r4, #3
 8002958:	1b1a      	subs	r2, r3, r4
 800295a:	0091      	lsls	r1, r2, #2
 800295c:	460a      	mov	r2, r1
 800295e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8002962:	4401      	add	r1, r0
 8002964:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8002966:	4402      	add	r2, r0
 8002968:	2300      	movs	r3, #0
 800296a:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002972:	700c      	strb	r4, [r1, #0]
  __HAL_LOCK(hpcd);
 8002974:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002978:	2b01      	cmp	r3, #1
 800297a:	d018      	beq.n	80029ae <HAL_PCD_EP_ClrStall+0x6a>
 800297c:	4604      	mov	r4, r0
 800297e:	2301      	movs	r3, #1
 8002980:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002984:	6800      	ldr	r0, [r0, #0]
 8002986:	f001 ffb5 	bl	80048f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800298a:	2000      	movs	r0, #0
 800298c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002990:	e00c      	b.n	80029ac <HAL_PCD_EP_ClrStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002992:	00e3      	lsls	r3, r4, #3
 8002994:	1b1a      	subs	r2, r3, r4
 8002996:	0091      	lsls	r1, r2, #2
 8002998:	460a      	mov	r2, r1
 800299a:	3138      	adds	r1, #56	; 0x38
 800299c:	4401      	add	r1, r0
 800299e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80029a0:	4402      	add	r2, r0
 80029a2:	2301      	movs	r3, #1
 80029a4:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
 80029a8:	e7e1      	b.n	800296e <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 80029aa:	2001      	movs	r0, #1
}
 80029ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80029ae:	2002      	movs	r0, #2
 80029b0:	e7fc      	b.n	80029ac <HAL_PCD_EP_ClrStall+0x68>

080029b2 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029b2:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029b4:	6804      	ldr	r4, [r0, #0]
 80029b6:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 80029b8:	b129      	cbz	r1, 80029c6 <HAL_PCDEx_SetTxFiFo+0x14>
 80029ba:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029be:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	e00c      	b.n	80029e0 <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80029ca:	62a0      	str	r0, [r4, #40]	; 0x28
 80029cc:	e012      	b.n	80029f4 <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029ce:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80029d2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80029d6:	6849      	ldr	r1, [r1, #4]
 80029d8:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80029dc:	3301      	adds	r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	1e69      	subs	r1, r5, #1
 80029e2:	428b      	cmp	r3, r1
 80029e4:	d3f3      	bcc.n	80029ce <HAL_PCDEx_SetTxFiFo+0x1c>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029e6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80029ea:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 80029ee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80029f2:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 80029f4:	2000      	movs	r0, #0
 80029f6:	bc30      	pop	{r4, r5}
 80029f8:	4770      	bx	lr

080029fa <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80029fa:	6803      	ldr	r3, [r0, #0]
 80029fc:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 80029fe:	2000      	movs	r0, #0
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a04:	4602      	mov	r2, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a06:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8002a08:	2101      	movs	r1, #1
 8002a0a:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f882 03f4 	strb.w	r0, [r2, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002a1a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a1e:	4a02      	ldr	r2, [pc, #8]	; (8002a28 <HAL_PCDEx_ActivateLPM+0x24>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	10000003 	.word	0x10000003

08002a2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_PWREx_EnableOverDrive+0x74>)
 8002a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a44:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <HAL_PWREx_EnableOverDrive+0x78>)
 8002a46:	6813      	ldr	r3, [r2, #0]
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4e:	f7fe fcd3 	bl	80013f8 <HAL_GetTick>
 8002a52:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_PWREx_EnableOverDrive+0x78>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002a5c:	d108      	bne.n	8002a70 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a5e:	f7fe fccb 	bl	80013f8 <HAL_GetTick>
 8002a62:	1b00      	subs	r0, r0, r4
 8002a64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a68:	d9f4      	bls.n	8002a54 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002a6a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a70:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <HAL_PWREx_EnableOverDrive+0x78>)
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a78:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002a7a:	f7fe fcbd 	bl	80013f8 <HAL_GetTick>
 8002a7e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_PWREx_EnableOverDrive+0x78>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a88:	d107      	bne.n	8002a9a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a8a:	f7fe fcb5 	bl	80013f8 <HAL_GetTick>
 8002a8e:	1b00      	subs	r0, r0, r4
 8002a90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a94:	d9f4      	bls.n	8002a80 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8002a96:	2003      	movs	r0, #3
 8002a98:	e7e8      	b.n	8002a6c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	e7e6      	b.n	8002a6c <HAL_PWREx_EnableOverDrive+0x40>
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40007000 	.word	0x40007000

08002aa8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	f000 8209 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x418>
{
 8002aae:	b570      	push	{r4, r5, r6, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	f013 0f01 	tst.w	r3, #1
 8002aba:	d029      	beq.n	8002b10 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002abc:	4ba2      	ldr	r3, [pc, #648]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d01a      	beq.n	8002afe <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac8:	4b9f      	ldr	r3, [pc, #636]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d00f      	beq.n	8002af4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad4:	6863      	ldr	r3, [r4, #4]
 8002ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ada:	d040      	beq.n	8002b5e <HAL_RCC_OscConfig+0xb6>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d154      	bne.n	8002b8a <HAL_RCC_OscConfig+0xe2>
 8002ae0:	4b99      	ldr	r3, [pc, #612]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e039      	b.n	8002b68 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af4:	4b94      	ldr	r3, [pc, #592]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002afc:	d0ea      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afe:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b06:	d003      	beq.n	8002b10 <HAL_RCC_OscConfig+0x68>
 8002b08:	6863      	ldr	r3, [r4, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 81da 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	f013 0f02 	tst.w	r3, #2
 8002b16:	d075      	beq.n	8002c04 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b18:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f013 0f0c 	tst.w	r3, #12
 8002b20:	d05e      	beq.n	8002be0 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d053      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b2e:	68e3      	ldr	r3, [r4, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 808a 	beq.w	8002c4a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b36:	4a84      	ldr	r2, [pc, #528]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002b38:	6813      	ldr	r3, [r2, #0]
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fc5a 	bl	80013f8 <HAL_GetTick>
 8002b44:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b80      	ldr	r3, [pc, #512]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f013 0f02 	tst.w	r3, #2
 8002b4e:	d173      	bne.n	8002c38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b50:	f7fe fc52 	bl	80013f8 <HAL_GetTick>
 8002b54:	1b40      	subs	r0, r0, r5
 8002b56:	2802      	cmp	r0, #2
 8002b58:	d9f5      	bls.n	8002b46 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002b5a:	2003      	movs	r0, #3
 8002b5c:	e1b5      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5e:	4a7a      	ldr	r2, [pc, #488]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002b60:	6813      	ldr	r3, [r2, #0]
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b68:	6863      	ldr	r3, [r4, #4]
 8002b6a:	b32b      	cbz	r3, 8002bb8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fc44 	bl	80013f8 <HAL_GetTick>
 8002b70:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	4b75      	ldr	r3, [pc, #468]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b7a:	d1c9      	bne.n	8002b10 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fc3c 	bl	80013f8 <HAL_GetTick>
 8002b80:	1b40      	subs	r0, r0, r5
 8002b82:	2864      	cmp	r0, #100	; 0x64
 8002b84:	d9f5      	bls.n	8002b72 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8002b86:	2003      	movs	r0, #3
 8002b88:	e19f      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b8e:	d009      	beq.n	8002ba4 <HAL_RCC_OscConfig+0xfc>
 8002b90:	4b6d      	ldr	r3, [pc, #436]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e7e1      	b.n	8002b68 <HAL_RCC_OscConfig+0xc0>
 8002ba4:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e7d7      	b.n	8002b68 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fc1e 	bl	80013f8 <HAL_GetTick>
 8002bbc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	4b62      	ldr	r3, [pc, #392]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002bc6:	d0a3      	beq.n	8002b10 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fc16 	bl	80013f8 <HAL_GetTick>
 8002bcc:	1b40      	subs	r0, r0, r5
 8002bce:	2864      	cmp	r0, #100	; 0x64
 8002bd0:	d9f5      	bls.n	8002bbe <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8002bd2:	2003      	movs	r0, #3
 8002bd4:	e179      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd6:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002bde:	d1a6      	bne.n	8002b2e <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be0:	4b59      	ldr	r3, [pc, #356]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f013 0f02 	tst.w	r3, #2
 8002be8:	d004      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x14c>
 8002bea:	68e3      	ldr	r3, [r4, #12]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	e16a      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4a54      	ldr	r2, [pc, #336]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002bf6:	6813      	ldr	r3, [r2, #0]
 8002bf8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002bfc:	6921      	ldr	r1, [r4, #16]
 8002bfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c02:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	f013 0f08 	tst.w	r3, #8
 8002c0a:	d046      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c0c:	6963      	ldr	r3, [r4, #20]
 8002c0e:	b383      	cbz	r3, 8002c72 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c10:	4a4d      	ldr	r2, [pc, #308]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002c12:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fbed 	bl	80013f8 <HAL_GetTick>
 8002c1e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c20:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c24:	f013 0f02 	tst.w	r3, #2
 8002c28:	d137      	bne.n	8002c9a <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2a:	f7fe fbe5 	bl	80013f8 <HAL_GetTick>
 8002c2e:	1b40      	subs	r0, r0, r5
 8002c30:	2802      	cmp	r0, #2
 8002c32:	d9f5      	bls.n	8002c20 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8002c34:	2003      	movs	r0, #3
 8002c36:	e148      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4a43      	ldr	r2, [pc, #268]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c40:	6921      	ldr	r1, [r4, #16]
 8002c42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e7dc      	b.n	8002c04 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4a3f      	ldr	r2, [pc, #252]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c54:	f7fe fbd0 	bl	80013f8 <HAL_GetTick>
 8002c58:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f013 0f02 	tst.w	r3, #2
 8002c62:	d0cf      	beq.n	8002c04 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c64:	f7fe fbc8 	bl	80013f8 <HAL_GetTick>
 8002c68:	1b40      	subs	r0, r0, r5
 8002c6a:	2802      	cmp	r0, #2
 8002c6c:	d9f5      	bls.n	8002c5a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8002c6e:	2003      	movs	r0, #3
 8002c70:	e12b      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c72:	4a35      	ldr	r2, [pc, #212]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002c74:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fbbc 	bl	80013f8 <HAL_GetTick>
 8002c80:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c82:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c86:	f013 0f02 	tst.w	r3, #2
 8002c8a:	d006      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fbb4 	bl	80013f8 <HAL_GetTick>
 8002c90:	1b40      	subs	r0, r0, r5
 8002c92:	2802      	cmp	r0, #2
 8002c94:	d9f5      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8002c96:	2003      	movs	r0, #3
 8002c98:	e117      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	f013 0f04 	tst.w	r3, #4
 8002ca0:	d07e      	beq.n	8002da0 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002caa:	d11e      	bne.n	8002cea <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cac:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002cc0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc2:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <HAL_RCC_OscConfig+0x2a4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cca:	d010      	beq.n	8002cee <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	68a3      	ldr	r3, [r4, #8]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d021      	beq.n	8002d16 <HAL_RCC_OscConfig+0x26e>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d13c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x2a8>
 8002cd6:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002cd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	671a      	str	r2, [r3, #112]	; 0x70
 8002ce0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ce2:	f022 0204 	bic.w	r2, r2, #4
 8002ce6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ce8:	e01a      	b.n	8002d20 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8002cea:	2500      	movs	r5, #0
 8002cec:	e7e9      	b.n	8002cc2 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8002cee:	4a17      	ldr	r2, [pc, #92]	; (8002d4c <HAL_RCC_OscConfig+0x2a4>)
 8002cf0:	6813      	ldr	r3, [r2, #0]
 8002cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fb7e 	bl	80013f8 <HAL_GetTick>
 8002cfc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_RCC_OscConfig+0x2a4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d06:	d1e1      	bne.n	8002ccc <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d08:	f7fe fb76 	bl	80013f8 <HAL_GetTick>
 8002d0c:	1b80      	subs	r0, r0, r6
 8002d0e:	2864      	cmp	r0, #100	; 0x64
 8002d10:	d9f5      	bls.n	8002cfe <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002d12:	2003      	movs	r0, #3
 8002d14:	e0d9      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002d18:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d20:	68a3      	ldr	r3, [r4, #8]
 8002d22:	b35b      	cbz	r3, 8002d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fb68 	bl	80013f8 <HAL_GetTick>
 8002d28:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	f013 0f02 	tst.w	r3, #2
 8002d32:	d134      	bne.n	8002d9e <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe fb60 	bl	80013f8 <HAL_GetTick>
 8002d38:	1b80      	subs	r0, r0, r6
 8002d3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d3e:	4298      	cmp	r0, r3
 8002d40:	d9f3      	bls.n	8002d2a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8002d42:	2003      	movs	r0, #3
 8002d44:	e0c1      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d50:	2b05      	cmp	r3, #5
 8002d52:	d009      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2c0>
 8002d54:	4b60      	ldr	r3, [pc, #384]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	671a      	str	r2, [r3, #112]	; 0x70
 8002d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d60:	f022 0204 	bic.w	r2, r2, #4
 8002d64:	671a      	str	r2, [r3, #112]	; 0x70
 8002d66:	e7db      	b.n	8002d20 <HAL_RCC_OscConfig+0x278>
 8002d68:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002d6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d6c:	f042 0204 	orr.w	r2, r2, #4
 8002d70:	671a      	str	r2, [r3, #112]	; 0x70
 8002d72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	671a      	str	r2, [r3, #112]	; 0x70
 8002d7a:	e7d1      	b.n	8002d20 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fb3c 	bl	80013f8 <HAL_GetTick>
 8002d80:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d82:	4b55      	ldr	r3, [pc, #340]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f013 0f02 	tst.w	r3, #2
 8002d8a:	d008      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fb34 	bl	80013f8 <HAL_GetTick>
 8002d90:	1b80      	subs	r0, r0, r6
 8002d92:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d96:	4298      	cmp	r0, r3
 8002d98:	d9f3      	bls.n	8002d82 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8002d9a:	2003      	movs	r0, #3
 8002d9c:	e095      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d9e:	b9fd      	cbnz	r5, 8002de0 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da0:	69a3      	ldr	r3, [r4, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8090 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da8:	4a4b      	ldr	r2, [pc, #300]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002daa:	6892      	ldr	r2, [r2, #8]
 8002dac:	f002 020c 	and.w	r2, r2, #12
 8002db0:	2a08      	cmp	r2, #8
 8002db2:	d058      	beq.n	8002e66 <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d019      	beq.n	8002dec <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db8:	4a47      	ldr	r2, [pc, #284]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002dba:	6813      	ldr	r3, [r2, #0]
 8002dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fb19 	bl	80013f8 <HAL_GetTick>
 8002dc6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc8:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002dd0:	d047      	beq.n	8002e62 <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe fb11 	bl	80013f8 <HAL_GetTick>
 8002dd6:	1b00      	subs	r0, r0, r4
 8002dd8:	2802      	cmp	r0, #2
 8002dda:	d9f5      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8002ddc:	2003      	movs	r0, #3
 8002dde:	e074      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de0:	4a3d      	ldr	r2, [pc, #244]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002de2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	e7d9      	b.n	8002da0 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4a3a      	ldr	r2, [pc, #232]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002dee:	6813      	ldr	r3, [r2, #0]
 8002df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002df6:	f7fe faff 	bl	80013f8 <HAL_GetTick>
 8002dfa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfc:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e04:	d006      	beq.n	8002e14 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e06:	f7fe faf7 	bl	80013f8 <HAL_GetTick>
 8002e0a:	1b40      	subs	r0, r0, r5
 8002e0c:	2802      	cmp	r0, #2
 8002e0e:	d9f5      	bls.n	8002dfc <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 8002e10:	2003      	movs	r0, #3
 8002e12:	e05a      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e14:	69e3      	ldr	r3, [r4, #28]
 8002e16:	6a22      	ldr	r2, [r4, #32]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e1c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e22:	0852      	lsrs	r2, r2, #1
 8002e24:	3a01      	subs	r2, #1
 8002e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e34:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002e36:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e40:	f7fe fada 	bl	80013f8 <HAL_GetTick>
 8002e44:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fad2 	bl	80013f8 <HAL_GetTick>
 8002e54:	1b00      	subs	r0, r0, r4
 8002e56:	2802      	cmp	r0, #2
 8002e58:	d9f5      	bls.n	8002e46 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	e035      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002e5e:	2000      	movs	r0, #0
 8002e60:	e033      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
 8002e62:	2000      	movs	r0, #0
 8002e64:	e031      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
      pll_config = RCC->PLLCFGR;
 8002e66:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <HAL_RCC_OscConfig+0x430>)
 8002e68:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d02f      	beq.n	8002ece <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002e72:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e74:	428b      	cmp	r3, r1
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
 8002e7a:	e026      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e7c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002e80:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	428b      	cmp	r3, r1
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x3e2>
        return HAL_ERROR;
 8002e86:	2001      	movs	r0, #1
 8002e88:	e01f      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e90:	4013      	ands	r3, r2
 8002e92:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
 8002e98:	2001      	movs	r0, #1
 8002e9a:	e016      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e9c:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002ea0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ea2:	085b      	lsrs	r3, r3, #1
 8002ea4:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea6:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x408>
        return HAL_ERROR;
 8002eac:	2001      	movs	r0, #1
 8002eae:	e00c      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eb0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002eb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002eb6:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x42a>
        return HAL_ERROR;
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	e004      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
    return HAL_ERROR;
 8002ec0:	2001      	movs	r0, #1
}
 8002ec2:	4770      	bx	lr
        return HAL_ERROR;
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002ec8:	2000      	movs	r0, #0
}
 8002eca:	b002      	add	sp, #8
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002ece:	2001      	movs	r0, #1
 8002ed0:	e7fb      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	e7f9      	b.n	8002eca <HAL_RCC_OscConfig+0x422>
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800

08002edc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002edc:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d044      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x96>
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eec:	4823      	ldr	r0, [pc, #140]	; (8002f7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eee:	4770      	bx	lr
{
 8002ef0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f04:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	481c      	ldr	r0, [pc, #112]	; (8002f80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f10:	fba1 0100 	umull	r0, r1, r1, r0
 8002f14:	f7fd fdbe 	bl	8000a94 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f20:	3301      	adds	r3, #1
 8002f22:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002f24:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f28:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002f34:	461e      	mov	r6, r3
 8002f36:	2700      	movs	r7, #0
 8002f38:	015c      	lsls	r4, r3, #5
 8002f3a:	2500      	movs	r5, #0
 8002f3c:	1ae4      	subs	r4, r4, r3
 8002f3e:	eb65 0507 	sbc.w	r5, r5, r7
 8002f42:	01a9      	lsls	r1, r5, #6
 8002f44:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002f48:	01a0      	lsls	r0, r4, #6
 8002f4a:	1b00      	subs	r0, r0, r4
 8002f4c:	eb61 0105 	sbc.w	r1, r1, r5
 8002f50:	00cb      	lsls	r3, r1, #3
 8002f52:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002f56:	00c4      	lsls	r4, r0, #3
 8002f58:	19a0      	adds	r0, r4, r6
 8002f5a:	eb43 0107 	adc.w	r1, r3, r7
 8002f5e:	028b      	lsls	r3, r1, #10
 8002f60:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002f64:	0284      	lsls	r4, r0, #10
 8002f66:	4620      	mov	r0, r4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f7fd fd92 	bl	8000a94 <__aeabi_uldivmod>
 8002f70:	e7d2      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8002f72:	4803      	ldr	r0, [pc, #12]	; (8002f80 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	00f42400 	.word	0x00f42400
 8002f80:	017d7840 	.word	0x017d7840

08002f84 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002f84:	2800      	cmp	r0, #0
 8002f86:	f000 80a3 	beq.w	80030d0 <HAL_RCC_ClockConfig+0x14c>
{
 8002f8a:	b570      	push	{r4, r5, r6, lr}
 8002f8c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8e:	4b52      	ldr	r3, [pc, #328]	; (80030d8 <HAL_RCC_ClockConfig+0x154>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	428b      	cmp	r3, r1
 8002f98:	d20c      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4a4f      	ldr	r2, [pc, #316]	; (80030d8 <HAL_RCC_ClockConfig+0x154>)
 8002f9c:	6813      	ldr	r3, [r2, #0]
 8002f9e:	f023 030f 	bic.w	r3, r3, #15
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	428b      	cmp	r3, r1
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002fb0:	2001      	movs	r0, #1
}
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	f013 0f02 	tst.w	r3, #2
 8002fba:	d017      	beq.n	8002fec <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	f013 0f04 	tst.w	r3, #4
 8002fc0:	d004      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc2:	4a46      	ldr	r2, [pc, #280]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 8002fc4:	6893      	ldr	r3, [r2, #8]
 8002fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fca:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	f013 0f08 	tst.w	r3, #8
 8002fd2:	d004      	beq.n	8002fde <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd4:	4a41      	ldr	r2, [pc, #260]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 8002fd6:	6893      	ldr	r3, [r2, #8]
 8002fd8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fdc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fde:	4a3f      	ldr	r2, [pc, #252]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 8002fe0:	6893      	ldr	r3, [r2, #8]
 8002fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fe6:	68a0      	ldr	r0, [r4, #8]
 8002fe8:	4303      	orrs	r3, r0
 8002fea:	6093      	str	r3, [r2, #8]
 8002fec:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	f013 0f01 	tst.w	r3, #1
 8002ff4:	d031      	beq.n	800305a <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff6:	6863      	ldr	r3, [r4, #4]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d020      	beq.n	800303e <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d025      	beq.n	800304c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	4a36      	ldr	r2, [pc, #216]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	f012 0f02 	tst.w	r2, #2
 8003008:	d064      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300a:	4934      	ldr	r1, [pc, #208]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 800300c:	688a      	ldr	r2, [r1, #8]
 800300e:	f022 0203 	bic.w	r2, r2, #3
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003016:	f7fe f9ef 	bl	80013f8 <HAL_GetTick>
 800301a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301c:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	6862      	ldr	r2, [r4, #4]
 8003026:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800302a:	d016      	beq.n	800305a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7fe f9e4 	bl	80013f8 <HAL_GetTick>
 8003030:	1b80      	subs	r0, r0, r6
 8003032:	f241 3388 	movw	r3, #5000	; 0x1388
 8003036:	4298      	cmp	r0, r3
 8003038:	d9f0      	bls.n	800301c <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800303a:	2003      	movs	r0, #3
 800303c:	e7b9      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4a27      	ldr	r2, [pc, #156]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003046:	d1e0      	bne.n	800300a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003048:	2001      	movs	r0, #1
 800304a:	e7b2      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304c:	4a23      	ldr	r2, [pc, #140]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003054:	d1d9      	bne.n	800300a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003056:	2001      	movs	r0, #1
 8003058:	e7ab      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800305a:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <HAL_RCC_ClockConfig+0x154>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	42ab      	cmp	r3, r5
 8003064:	d90c      	bls.n	8003080 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <HAL_RCC_ClockConfig+0x154>)
 8003068:	6813      	ldr	r3, [r2, #0]
 800306a:	f023 030f 	bic.w	r3, r3, #15
 800306e:	432b      	orrs	r3, r5
 8003070:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	6813      	ldr	r3, [r2, #0]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	42ab      	cmp	r3, r5
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 800307c:	2001      	movs	r0, #1
 800307e:	e798      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	f013 0f04 	tst.w	r3, #4
 8003086:	d006      	beq.n	8003096 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4a14      	ldr	r2, [pc, #80]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 800308a:	6893      	ldr	r3, [r2, #8]
 800308c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003090:	68e1      	ldr	r1, [r4, #12]
 8003092:	430b      	orrs	r3, r1
 8003094:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	f013 0f08 	tst.w	r3, #8
 800309c:	d007      	beq.n	80030ae <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800309e:	4a0f      	ldr	r2, [pc, #60]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 80030a0:	6893      	ldr	r3, [r2, #8]
 80030a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80030a6:	6921      	ldr	r1, [r4, #16]
 80030a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030ac:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ae:	f7ff ff15 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x158>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x15c>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	40d8      	lsrs	r0, r3
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_RCC_ClockConfig+0x160>)
 80030c2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <HAL_RCC_ClockConfig+0x164>)
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	f7fe f958 	bl	800137c <HAL_InitTick>
  return HAL_OK;
 80030cc:	2000      	movs	r0, #0
 80030ce:	e770      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80030d0:	2001      	movs	r0, #1
}
 80030d2:	4770      	bx	lr
        return HAL_ERROR;
 80030d4:	2001      	movs	r0, #1
 80030d6:	e76c      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x2e>
 80030d8:	40023c00 	.word	0x40023c00
 80030dc:	40023800 	.word	0x40023800
 80030e0:	08010458 	.word	0x08010458
 80030e4:	20000118 	.word	0x20000118
 80030e8:	20000004 	.word	0x20000004

080030ec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80030ec:	4b01      	ldr	r3, [pc, #4]	; (80030f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000118 	.word	0x20000118

080030f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fa:	b083      	sub	sp, #12
 80030fc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030fe:	6803      	ldr	r3, [r0, #0]
 8003100:	f013 0f01 	tst.w	r3, #1
 8003104:	d00c      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003106:	4bb6      	ldr	r3, [pc, #728]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003118:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800311a:	b1c3      	cbz	r3, 800314e <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 800311c:	2600      	movs	r6, #0
 800311e:	e000      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8003120:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003128:	d015      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800312a:	4aad      	ldr	r2, [pc, #692]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800312c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003130:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003134:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003136:	430b      	orrs	r3, r1
 8003138:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800313c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800313e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003142:	d006      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8129 	beq.w	800339c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
  uint32_t pllsaiused = 0;
 800314a:	2500      	movs	r5, #0
 800314c:	e004      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800314e:	2601      	movs	r6, #1
 8003150:	e7e7      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8003152:	2601      	movs	r6, #1
 8003154:	e7f6      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8003156:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800315e:	d00f      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003160:	4a9f      	ldr	r2, [pc, #636]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003162:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003166:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800316a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800316c:	430b      	orrs	r3, r1
 800316e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003178:	f000 8112 	beq.w	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800317c:	b903      	cbnz	r3, 8003180 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 800317e:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003186:	d000      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8003188:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800318a:	f013 0f20 	tst.w	r3, #32
 800318e:	f040 8109 	bne.w	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	f013 0f10 	tst.w	r3, #16
 8003198:	d00c      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800319a:	4b91      	ldr	r3, [pc, #580]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800319c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031a0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80031a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80031a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80031ae:	430a      	orrs	r2, r1
 80031b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80031ba:	d008      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031bc:	4a88      	ldr	r2, [pc, #544]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80031c8:	430b      	orrs	r3, r1
 80031ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80031d4:	d008      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031d6:	4a82      	ldr	r2, [pc, #520]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031dc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80031e0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80031e2:	430b      	orrs	r3, r1
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80031ee:	d008      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f0:	4a7b      	ldr	r2, [pc, #492]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031f6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80031fa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80031fc:	430b      	orrs	r3, r1
 80031fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003208:	d008      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800320a:	4a75      	ldr	r2, [pc, #468]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800320c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003210:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003214:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003216:	430b      	orrs	r3, r1
 8003218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003222:	d008      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003224:	4a6e      	ldr	r2, [pc, #440]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003226:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003230:	430b      	orrs	r3, r1
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	f013 0f80 	tst.w	r3, #128	; 0x80
 800323c:	d008      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800323e:	4a68      	ldr	r2, [pc, #416]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003240:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003244:	f023 030c 	bic.w	r3, r3, #12
 8003248:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800324a:	430b      	orrs	r3, r1
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003256:	d008      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003258:	4a61      	ldr	r2, [pc, #388]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800325a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800325e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003262:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003264:	430b      	orrs	r3, r1
 8003266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003270:	d008      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003272:	4a5b      	ldr	r2, [pc, #364]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003274:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003278:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800327c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800327e:	430b      	orrs	r3, r1
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800328a:	d008      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800328c:	4a54      	ldr	r2, [pc, #336]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800328e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003296:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003298:	430b      	orrs	r3, r1
 800329a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80032a4:	d008      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80032a6:	4a4e      	ldr	r2, [pc, #312]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80032b0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80032b2:	430b      	orrs	r3, r1
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80032be:	d008      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032c0:	4a47      	ldr	r2, [pc, #284]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80032cc:	430b      	orrs	r3, r1
 80032ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80032d8:	d008      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032da:	4a41      	ldr	r2, [pc, #260]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80032e4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80032e6:	430b      	orrs	r3, r1
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80032f2:	d008      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032f4:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032fe:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003300:	430b      	orrs	r3, r1
 8003302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800330c:	d00d      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800330e:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003310:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003314:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003318:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800331a:	430b      	orrs	r3, r1
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003320:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003326:	f000 80a7 	beq.w	8003478 <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	f013 0f08 	tst.w	r3, #8
 8003330:	d000      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8003332:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003334:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003338:	d008      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333a:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800333c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003340:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003344:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003346:	430b      	orrs	r3, r1
 8003348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003352:	d009      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003354:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003356:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800335a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003362:	430b      	orrs	r3, r1
 8003364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003368:	b926      	cbnz	r6, 8003374 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003370:	f000 8102 	beq.w	8003578 <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003374:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800337c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337e:	f7fe f83b 	bl	80013f8 <HAL_GetTick>
 8003382:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800338c:	d076      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800338e:	f7fe f833 	bl	80013f8 <HAL_GetTick>
 8003392:	1b80      	subs	r0, r0, r6
 8003394:	2864      	cmp	r0, #100	; 0x64
 8003396:	d9f5      	bls.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003398:	2003      	movs	r0, #3
 800339a:	e0ef      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x484>
      pllsaiused = 1;
 800339c:	2501      	movs	r5, #1
 800339e:	e6db      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80033a0:	2601      	movs	r6, #1
 80033a2:	e6eb      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80033b8:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033ba:	6813      	ldr	r3, [r2, #0]
 80033bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80033c2:	f7fe f819 	bl	80013f8 <HAL_GetTick>
 80033c6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033d0:	d10a      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d2:	f7fe f811 	bl	80013f8 <HAL_GetTick>
 80033d6:	1bc0      	subs	r0, r0, r7
 80033d8:	2864      	cmp	r0, #100	; 0x64
 80033da:	d9f5      	bls.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        return HAL_TIMEOUT;
 80033dc:	2003      	movs	r0, #3
 80033de:	e0cd      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033e8:	4baa      	ldr	r3, [pc, #680]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80033f0:	d015      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x326>
 80033f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80033f4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d010      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033fc:	4ba5      	ldr	r3, [pc, #660]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80033fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003400:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003404:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003406:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800340a:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800340c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800340e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003412:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003414:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f013 0f01 	tst.w	r3, #1
 800341c:	d112      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003420:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003424:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003428:	d01d      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800342a:	4a9a      	ldr	r2, [pc, #616]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800342c:	6893      	ldr	r3, [r2, #8]
 800342e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003432:	6093      	str	r3, [r2, #8]
 8003434:	4997      	ldr	r1, [pc, #604]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003436:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003438:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800343a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800343e:	4313      	orrs	r3, r2
 8003440:	670b      	str	r3, [r1, #112]	; 0x70
 8003442:	e6a6      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8003444:	f7fd ffd8 	bl	80013f8 <HAL_GetTick>
 8003448:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344a:	4b92      	ldr	r3, [pc, #584]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	f013 0f02 	tst.w	r3, #2
 8003452:	d1e4      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fd ffd0 	bl	80013f8 <HAL_GetTick>
 8003458:	1bc0      	subs	r0, r0, r7
 800345a:	f241 3388 	movw	r3, #5000	; 0x1388
 800345e:	4298      	cmp	r0, r3
 8003460:	d9f3      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 8003462:	2003      	movs	r0, #3
 8003464:	e08a      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x484>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003466:	488b      	ldr	r0, [pc, #556]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003468:	6882      	ldr	r2, [r0, #8]
 800346a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800346e:	498a      	ldr	r1, [pc, #552]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8003470:	4019      	ands	r1, r3
 8003472:	430a      	orrs	r2, r1
 8003474:	6082      	str	r2, [r0, #8]
 8003476:	e7dd      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 8003478:	2501      	movs	r5, #1
 800347a:	e756      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x232>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	f013 0f01 	tst.w	r3, #1
 8003482:	d013      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8003484:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003486:	b98b      	cbnz	r3, 80034ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003488:	4a82      	ldr	r2, [pc, #520]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800348a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800348e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003492:	6860      	ldr	r0, [r4, #4]
 8003494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003498:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800349c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80034a0:	430b      	orrs	r3, r1
 80034a2:	68a1      	ldr	r1, [r4, #8]
 80034a4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80034a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80034b2:	d003      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80034b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80034b6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80034ba:	d006      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80034bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80034c0:	d01e      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c8:	d11a      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034ca:	4a72      	ldr	r2, [pc, #456]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80034cc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034d0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034d4:	6860      	ldr	r0, [r4, #4]
 80034d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034da:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80034de:	68e0      	ldr	r0, [r4, #12]
 80034e0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80034e4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80034e8:	430b      	orrs	r3, r1
 80034ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034ee:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80034f2:	f023 031f 	bic.w	r3, r3, #31
 80034f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034f8:	3901      	subs	r1, #1
 80034fa:	430b      	orrs	r3, r1
 80034fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003506:	d011      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003508:	4a62      	ldr	r2, [pc, #392]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800350a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800350e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003512:	6866      	ldr	r6, [r4, #4]
 8003514:	6923      	ldr	r3, [r4, #16]
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800351c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003520:	4303      	orrs	r3, r0
 8003522:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003526:	430b      	orrs	r3, r1
 8003528:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003532:	d00d      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003534:	6862      	ldr	r2, [r4, #4]
 8003536:	6923      	ldr	r3, [r4, #16]
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800353e:	68e2      	ldr	r2, [r4, #12]
 8003540:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003544:	68a2      	ldr	r2, [r4, #8]
 8003546:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800354a:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800354c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003550:	4a50      	ldr	r2, [pc, #320]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003552:	6813      	ldr	r3, [r2, #0]
 8003554:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355a:	f7fd ff4d 	bl	80013f8 <HAL_GetTick>
 800355e:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003560:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003568:	d106      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800356a:	f7fd ff45 	bl	80013f8 <HAL_GetTick>
 800356e:	1b80      	subs	r0, r0, r6
 8003570:	2864      	cmp	r0, #100	; 0x64
 8003572:	d9f5      	bls.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003574:	2003      	movs	r0, #3
 8003576:	e001      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x484>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003578:	b915      	cbnz	r5, 8003580 <HAL_RCCEx_PeriphCLKConfig+0x488>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800357a:	2000      	movs	r0, #0
}
 800357c:	b003      	add	sp, #12
 800357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8003580:	4a44      	ldr	r2, [pc, #272]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003588:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800358a:	f7fd ff35 	bl	80013f8 <HAL_GetTick>
 800358e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003590:	4b40      	ldr	r3, [pc, #256]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003598:	d006      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800359a:	f7fd ff2d 	bl	80013f8 <HAL_GetTick>
 800359e:	1b40      	subs	r0, r0, r5
 80035a0:	2864      	cmp	r0, #100	; 0x64
 80035a2:	d9f5      	bls.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x498>
        return HAL_TIMEOUT;
 80035a4:	2003      	movs	r0, #3
 80035a6:	e7e9      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x484>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80035ae:	d001      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80035b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80035b2:	b122      	cbz	r2, 80035be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80035b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80035b8:	d01d      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035bc:	b9db      	cbnz	r3, 80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035be:	4a35      	ldr	r2, [pc, #212]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80035c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035c4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035c8:	6960      	ldr	r0, [r4, #20]
 80035ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80035d2:	69a0      	ldr	r0, [r4, #24]
 80035d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80035d8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80035dc:	430b      	orrs	r3, r1
 80035de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035e2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80035e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80035ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80035ec:	3901      	subs	r1, #1
 80035ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80035fc:	d003      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80035fe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003604:	d031      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x572>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	f013 0f08 	tst.w	r3, #8
 800360c:	d019      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800360e:	4a21      	ldr	r2, [pc, #132]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003610:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003614:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003618:	6960      	ldr	r0, [r4, #20]
 800361a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800361e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003622:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003626:	430b      	orrs	r3, r1
 8003628:	69e1      	ldr	r1, [r4, #28]
 800362a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800362e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003632:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003636:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800363a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800363c:	430b      	orrs	r3, r1
 800363e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8003642:	4a14      	ldr	r2, [pc, #80]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003644:	6813      	ldr	r3, [r2, #0]
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800364c:	f7fd fed4 	bl	80013f8 <HAL_GetTick>
 8003650:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800365a:	d119      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x598>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800365c:	f7fd fecc 	bl	80013f8 <HAL_GetTick>
 8003660:	1b00      	subs	r0, r0, r4
 8003662:	2864      	cmp	r0, #100	; 0x64
 8003664:	d9f5      	bls.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        return HAL_TIMEOUT;
 8003666:	2003      	movs	r0, #3
 8003668:	e788      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800366a:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800366c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003670:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003674:	6965      	ldr	r5, [r4, #20]
 8003676:	6a23      	ldr	r3, [r4, #32]
 8003678:	041b      	lsls	r3, r3, #16
 800367a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800367e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003682:	4303      	orrs	r3, r0
 8003684:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003688:	430b      	orrs	r3, r1
 800368a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800368e:	e7ba      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  return HAL_OK;
 8003690:	2000      	movs	r0, #0
 8003692:	e773      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003694:	40023800 	.word	0x40023800
 8003698:	0ffffcff 	.word	0x0ffffcff

0800369c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369e:	6a03      	ldr	r3, [r0, #32]
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036aa:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036ac:	4c12      	ldr	r4, [pc, #72]	; (80036f8 <TIM_OC1_SetConfig+0x5c>)
 80036ae:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b0:	680d      	ldr	r5, [r1, #0]
 80036b2:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b4:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036b8:	688b      	ldr	r3, [r1, #8]
 80036ba:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036bc:	4c0f      	ldr	r4, [pc, #60]	; (80036fc <TIM_OC1_SetConfig+0x60>)
 80036be:	4e10      	ldr	r6, [pc, #64]	; (8003700 <TIM_OC1_SetConfig+0x64>)
 80036c0:	42b0      	cmp	r0, r6
 80036c2:	bf18      	it	ne
 80036c4:	42a0      	cmpne	r0, r4
 80036c6:	bf0c      	ite	eq
 80036c8:	2401      	moveq	r4, #1
 80036ca:	2400      	movne	r4, #0
 80036cc:	d105      	bne.n	80036da <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036ce:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036d2:	68ce      	ldr	r6, [r1, #12]
 80036d4:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036d6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036da:	b12c      	cbz	r4, 80036e8 <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036e0:	694c      	ldr	r4, [r1, #20]
 80036e2:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036e4:	698a      	ldr	r2, [r1, #24]
 80036e6:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ea:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ec:	684a      	ldr	r2, [r1, #4]
 80036ee:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f0:	6203      	str	r3, [r0, #32]
}
 80036f2:	bc70      	pop	{r4, r5, r6}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	fffeff8c 	.word	0xfffeff8c
 80036fc:	40010000 	.word	0x40010000
 8003700:	40010400 	.word	0x40010400

08003704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003706:	6a03      	ldr	r3, [r0, #32]
 8003708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800370c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003710:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003712:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003714:	4c14      	ldr	r4, [pc, #80]	; (8003768 <TIM_OC3_SetConfig+0x64>)
 8003716:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003718:	680e      	ldr	r6, [r1, #0]
 800371a:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800371c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003720:	688c      	ldr	r4, [r1, #8]
 8003722:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003726:	4c11      	ldr	r4, [pc, #68]	; (800376c <TIM_OC3_SetConfig+0x68>)
 8003728:	4d11      	ldr	r5, [pc, #68]	; (8003770 <TIM_OC3_SetConfig+0x6c>)
 800372a:	42a8      	cmp	r0, r5
 800372c:	bf18      	it	ne
 800372e:	42a0      	cmpne	r0, r4
 8003730:	bf0c      	ite	eq
 8003732:	2401      	moveq	r4, #1
 8003734:	2400      	movne	r4, #0
 8003736:	d106      	bne.n	8003746 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800373c:	68cd      	ldr	r5, [r1, #12]
 800373e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003746:	b13c      	cbz	r4, 8003758 <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003748:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800374c:	694c      	ldr	r4, [r1, #20]
 800374e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003752:	698c      	ldr	r4, [r1, #24]
 8003754:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003758:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800375a:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800375c:	684a      	ldr	r2, [r1, #4]
 800375e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003760:	6203      	str	r3, [r0, #32]
}
 8003762:	bc70      	pop	{r4, r5, r6}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	fffeff8c 	.word	0xfffeff8c
 800376c:	40010000 	.word	0x40010000
 8003770:	40010400 	.word	0x40010400

08003774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003776:	6a03      	ldr	r3, [r0, #32]
 8003778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800377c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003780:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003782:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <TIM_OC4_SetConfig+0x48>)
 8003786:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	680d      	ldr	r5, [r1, #0]
 800378a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800378e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003792:	688d      	ldr	r5, [r1, #8]
 8003794:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003798:	4e09      	ldr	r6, [pc, #36]	; (80037c0 <TIM_OC4_SetConfig+0x4c>)
 800379a:	4d0a      	ldr	r5, [pc, #40]	; (80037c4 <TIM_OC4_SetConfig+0x50>)
 800379c:	42a8      	cmp	r0, r5
 800379e:	bf18      	it	ne
 80037a0:	42b0      	cmpne	r0, r6
 80037a2:	d104      	bne.n	80037ae <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037a4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037a8:	694d      	ldr	r5, [r1, #20]
 80037aa:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ae:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037b2:	684a      	ldr	r2, [r1, #4]
 80037b4:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b6:	6203      	str	r3, [r0, #32]
}
 80037b8:	bc70      	pop	{r4, r5, r6}
 80037ba:	4770      	bx	lr
 80037bc:	feff8cff 	.word	0xfeff8cff
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40010400 	.word	0x40010400

080037c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037c8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037ca:	6a03      	ldr	r3, [r0, #32]
 80037cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037d6:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037d8:	4d0d      	ldr	r5, [pc, #52]	; (8003810 <TIM_OC5_SetConfig+0x48>)
 80037da:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037dc:	680c      	ldr	r4, [r1, #0]
 80037de:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037e4:	688d      	ldr	r5, [r1, #8]
 80037e6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ea:	4e0a      	ldr	r6, [pc, #40]	; (8003814 <TIM_OC5_SetConfig+0x4c>)
 80037ec:	4d0a      	ldr	r5, [pc, #40]	; (8003818 <TIM_OC5_SetConfig+0x50>)
 80037ee:	42a8      	cmp	r0, r5
 80037f0:	bf18      	it	ne
 80037f2:	42b0      	cmpne	r0, r6
 80037f4:	d104      	bne.n	8003800 <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037fa:	694d      	ldr	r5, [r1, #20]
 80037fc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003800:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003802:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003804:	684a      	ldr	r2, [r1, #4]
 8003806:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003808:	6203      	str	r3, [r0, #32]
}
 800380a:	bc70      	pop	{r4, r5, r6}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	fffeff8f 	.word	0xfffeff8f
 8003814:	40010000 	.word	0x40010000
 8003818:	40010400 	.word	0x40010400

0800381c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800381e:	6a03      	ldr	r3, [r0, #32]
 8003820:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003824:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003828:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800382a:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800382c:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <TIM_OC6_SetConfig+0x48>)
 800382e:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	680d      	ldr	r5, [r1, #0]
 8003832:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800383a:	688d      	ldr	r5, [r1, #8]
 800383c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003840:	4e09      	ldr	r6, [pc, #36]	; (8003868 <TIM_OC6_SetConfig+0x4c>)
 8003842:	4d0a      	ldr	r5, [pc, #40]	; (800386c <TIM_OC6_SetConfig+0x50>)
 8003844:	42a8      	cmp	r0, r5
 8003846:	bf18      	it	ne
 8003848:	42b0      	cmpne	r0, r6
 800384a:	d104      	bne.n	8003856 <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800384c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003850:	694d      	ldr	r5, [r1, #20]
 8003852:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003856:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003858:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800385a:	684a      	ldr	r2, [r1, #4]
 800385c:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385e:	6203      	str	r3, [r0, #32]
}
 8003860:	bc70      	pop	{r4, r5, r6}
 8003862:	4770      	bx	lr
 8003864:	feff8fff 	.word	0xfeff8fff
 8003868:	40010000 	.word	0x40010000
 800386c:	40010400 	.word	0x40010400

08003870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003870:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003872:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003874:	6a04      	ldr	r4, [r0, #32]
 8003876:	f024 0401 	bic.w	r4, r4, #1
 800387a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800387e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003882:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003886:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800388a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800388c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800388e:	6203      	str	r3, [r0, #32]
}
 8003890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003894:	4770      	bx	lr

08003896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003896:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003898:	6a03      	ldr	r3, [r0, #32]
 800389a:	f023 0310 	bic.w	r3, r3, #16
 800389e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80038a2:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a4:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038a8:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80038b0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038b4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80038b6:	6203      	str	r3, [r0, #32]
}
 80038b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038bc:	4770      	bx	lr

080038be <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038be:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038c4:	4319      	orrs	r1, r3
 80038c6:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ca:	6081      	str	r1, [r0, #8]
}
 80038cc:	4770      	bx	lr

080038ce <HAL_TIM_PWM_MspInit>:
}
 80038ce:	4770      	bx	lr

080038d0 <TIM_Base_SetConfig>:
{
 80038d0:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 80038d2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d4:	4c3a      	ldr	r4, [pc, #232]	; (80039c0 <TIM_Base_SetConfig+0xf0>)
 80038d6:	42a0      	cmp	r0, r4
 80038d8:	bf14      	ite	ne
 80038da:	2400      	movne	r4, #0
 80038dc:	2401      	moveq	r4, #1
 80038de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038e2:	bf14      	ite	ne
 80038e4:	4622      	movne	r2, r4
 80038e6:	f044 0201 	orreq.w	r2, r4, #1
 80038ea:	b9aa      	cbnz	r2, 8003918 <TIM_Base_SetConfig+0x48>
 80038ec:	4d35      	ldr	r5, [pc, #212]	; (80039c4 <TIM_Base_SetConfig+0xf4>)
 80038ee:	42a8      	cmp	r0, r5
 80038f0:	bf14      	ite	ne
 80038f2:	2500      	movne	r5, #0
 80038f4:	2501      	moveq	r5, #1
 80038f6:	4e34      	ldr	r6, [pc, #208]	; (80039c8 <TIM_Base_SetConfig+0xf8>)
 80038f8:	42b0      	cmp	r0, r6
 80038fa:	d00d      	beq.n	8003918 <TIM_Base_SetConfig+0x48>
 80038fc:	b965      	cbnz	r5, 8003918 <TIM_Base_SetConfig+0x48>
 80038fe:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003902:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8003906:	42a8      	cmp	r0, r5
 8003908:	bf14      	ite	ne
 800390a:	2500      	movne	r5, #0
 800390c:	2501      	moveq	r5, #1
 800390e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003912:	42b0      	cmp	r0, r6
 8003914:	d000      	beq.n	8003918 <TIM_Base_SetConfig+0x48>
 8003916:	b11d      	cbz	r5, 8003920 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800391c:	684d      	ldr	r5, [r1, #4]
 800391e:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003920:	2a00      	cmp	r2, #0
 8003922:	d133      	bne.n	800398c <TIM_Base_SetConfig+0xbc>
 8003924:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <TIM_Base_SetConfig+0xf4>)
 8003926:	4290      	cmp	r0, r2
 8003928:	bf14      	ite	ne
 800392a:	2200      	movne	r2, #0
 800392c:	2201      	moveq	r2, #1
 800392e:	4d26      	ldr	r5, [pc, #152]	; (80039c8 <TIM_Base_SetConfig+0xf8>)
 8003930:	42a8      	cmp	r0, r5
 8003932:	d02b      	beq.n	800398c <TIM_Base_SetConfig+0xbc>
 8003934:	bb52      	cbnz	r2, 800398c <TIM_Base_SetConfig+0xbc>
 8003936:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800393a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800393e:	4290      	cmp	r0, r2
 8003940:	bf14      	ite	ne
 8003942:	2200      	movne	r2, #0
 8003944:	2201      	moveq	r2, #1
 8003946:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800394a:	42a8      	cmp	r0, r5
 800394c:	d01e      	beq.n	800398c <TIM_Base_SetConfig+0xbc>
 800394e:	b9ea      	cbnz	r2, 800398c <TIM_Base_SetConfig+0xbc>
 8003950:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <TIM_Base_SetConfig+0xfc>)
 8003952:	4290      	cmp	r0, r2
 8003954:	bf14      	ite	ne
 8003956:	2200      	movne	r2, #0
 8003958:	2201      	moveq	r2, #1
 800395a:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800395e:	42a8      	cmp	r0, r5
 8003960:	d014      	beq.n	800398c <TIM_Base_SetConfig+0xbc>
 8003962:	b99a      	cbnz	r2, 800398c <TIM_Base_SetConfig+0xbc>
 8003964:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <TIM_Base_SetConfig+0x100>)
 8003966:	4290      	cmp	r0, r2
 8003968:	bf14      	ite	ne
 800396a:	2200      	movne	r2, #0
 800396c:	2201      	moveq	r2, #1
 800396e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003972:	42a8      	cmp	r0, r5
 8003974:	d00a      	beq.n	800398c <TIM_Base_SetConfig+0xbc>
 8003976:	b94a      	cbnz	r2, 800398c <TIM_Base_SetConfig+0xbc>
 8003978:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <TIM_Base_SetConfig+0x104>)
 800397a:	4290      	cmp	r0, r2
 800397c:	bf14      	ite	ne
 800397e:	2200      	movne	r2, #0
 8003980:	2201      	moveq	r2, #1
 8003982:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8003986:	42a8      	cmp	r0, r5
 8003988:	d000      	beq.n	800398c <TIM_Base_SetConfig+0xbc>
 800398a:	b11a      	cbz	r2, 8003994 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 800398c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003990:	68ca      	ldr	r2, [r1, #12]
 8003992:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003998:	694a      	ldr	r2, [r1, #20]
 800399a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800399c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800399e:	688a      	ldr	r2, [r1, #8]
 80039a0:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039a2:	680a      	ldr	r2, [r1, #0]
 80039a4:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <TIM_Base_SetConfig+0x108>)
 80039a8:	4298      	cmp	r0, r3
 80039aa:	bf14      	ite	ne
 80039ac:	4623      	movne	r3, r4
 80039ae:	f044 0301 	orreq.w	r3, r4, #1
 80039b2:	b10b      	cbz	r3, 80039b8 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 80039b4:	690b      	ldr	r3, [r1, #16]
 80039b6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80039b8:	2301      	movs	r3, #1
 80039ba:	6143      	str	r3, [r0, #20]
}
 80039bc:	bc70      	pop	{r4, r5, r6}
 80039be:	4770      	bx	lr
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40000800 	.word	0x40000800
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40001800 	.word	0x40001800
 80039d4:	40002000 	.word	0x40002000
 80039d8:	40010400 	.word	0x40010400

080039dc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80039dc:	b358      	cbz	r0, 8003a36 <HAL_TIM_Base_Init+0x5a>
{
 80039de:	b510      	push	{r4, lr}
 80039e0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80039e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039e6:	b30b      	cbz	r3, 8003a2c <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	2302      	movs	r3, #2
 80039ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ee:	1d21      	adds	r1, r4, #4
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	f7ff ff6d 	bl	80038d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003a00:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003a04:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003a08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003a18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a1c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003a20:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a28:	2000      	movs	r0, #0
}
 8003a2a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003a30:	f002 fc42 	bl	80062b8 <HAL_TIM_Base_MspInit>
 8003a34:	e7d8      	b.n	80039e8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003a36:	2001      	movs	r0, #1
}
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003a3a:	b358      	cbz	r0, 8003a94 <HAL_TIM_PWM_Init+0x5a>
{
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a40:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a44:	b30b      	cbz	r3, 8003a8a <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a46:	2302      	movs	r3, #2
 8003a48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a4c:	1d21      	adds	r1, r4, #4
 8003a4e:	6820      	ldr	r0, [r4, #0]
 8003a50:	f7ff ff3e 	bl	80038d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003a5e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003a62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003a66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003a6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003a7e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003a82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a86:	2000      	movs	r0, #0
}
 8003a88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003a8e:	f7ff ff1e 	bl	80038ce <HAL_TIM_PWM_MspInit>
 8003a92:	e7d8      	b.n	8003a46 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003a94:	2001      	movs	r0, #1
}
 8003a96:	4770      	bx	lr

08003a98 <TIM_OC2_SetConfig>:
{
 8003a98:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a9a:	6a03      	ldr	r3, [r0, #32]
 8003a9c:	f023 0310 	bic.w	r3, r3, #16
 8003aa0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003aa2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003aa4:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003aa6:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aa8:	4c14      	ldr	r4, [pc, #80]	; (8003afc <TIM_OC2_SetConfig+0x64>)
 8003aaa:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aac:	680d      	ldr	r5, [r1, #0]
 8003aae:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003ab2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ab6:	688c      	ldr	r4, [r1, #8]
 8003ab8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003abc:	4c10      	ldr	r4, [pc, #64]	; (8003b00 <TIM_OC2_SetConfig+0x68>)
 8003abe:	4e11      	ldr	r6, [pc, #68]	; (8003b04 <TIM_OC2_SetConfig+0x6c>)
 8003ac0:	42b0      	cmp	r0, r6
 8003ac2:	bf18      	it	ne
 8003ac4:	42a0      	cmpne	r0, r4
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2401      	moveq	r4, #1
 8003aca:	2400      	movne	r4, #0
 8003acc:	d106      	bne.n	8003adc <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ad2:	68ce      	ldr	r6, [r1, #12]
 8003ad4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003adc:	b13c      	cbz	r4, 8003aee <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ade:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ae2:	694c      	ldr	r4, [r1, #20]
 8003ae4:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ae8:	698c      	ldr	r4, [r1, #24]
 8003aea:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8003aee:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003af0:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003af2:	684a      	ldr	r2, [r1, #4]
 8003af4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003af6:	6203      	str	r3, [r0, #32]
}
 8003af8:	bc70      	pop	{r4, r5, r6}
 8003afa:	4770      	bx	lr
 8003afc:	feff8cff 	.word	0xfeff8cff
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40010400 	.word	0x40010400

08003b08 <HAL_TIM_PWM_ConfigChannel>:
{
 8003b08:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003b0a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	f000 8095 	beq.w	8003c3e <HAL_TIM_PWM_ConfigChannel+0x136>
 8003b14:	460d      	mov	r5, r1
 8003b16:	4604      	mov	r4, r0
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003b1e:	2a14      	cmp	r2, #20
 8003b20:	f200 808b 	bhi.w	8003c3a <HAL_TIM_PWM_ConfigChannel+0x132>
 8003b24:	e8df f002 	tbb	[pc, r2]
 8003b28:	8989890b 	.word	0x8989890b
 8003b2c:	89898922 	.word	0x89898922
 8003b30:	89898937 	.word	0x89898937
 8003b34:	8989894b 	.word	0x8989894b
 8003b38:	89898960 	.word	0x89898960
 8003b3c:	74          	.byte	0x74
 8003b3d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b3e:	6800      	ldr	r0, [r0, #0]
 8003b40:	f7ff fdac 	bl	800369c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	6993      	ldr	r3, [r2, #24]
 8003b48:	f043 0308 	orr.w	r3, r3, #8
 8003b4c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	6993      	ldr	r3, [r2, #24]
 8003b52:	f023 0304 	bic.w	r3, r3, #4
 8003b56:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b58:	6822      	ldr	r2, [r4, #0]
 8003b5a:	6993      	ldr	r3, [r2, #24]
 8003b5c:	6929      	ldr	r1, [r5, #16]
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8003b64:	2300      	movs	r3, #0
 8003b66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b6c:	6800      	ldr	r0, [r0, #0]
 8003b6e:	f7ff ff93 	bl	8003a98 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	6993      	ldr	r3, [r2, #24]
 8003b76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b7a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b7c:	6822      	ldr	r2, [r4, #0]
 8003b7e:	6993      	ldr	r3, [r2, #24]
 8003b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b84:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	6993      	ldr	r3, [r2, #24]
 8003b8a:	6929      	ldr	r1, [r5, #16]
 8003b8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b90:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2000      	movs	r0, #0
      break;
 8003b94:	e7e6      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b96:	6800      	ldr	r0, [r0, #0]
 8003b98:	f7ff fdb4 	bl	8003704 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b9c:	6822      	ldr	r2, [r4, #0]
 8003b9e:	69d3      	ldr	r3, [r2, #28]
 8003ba0:	f043 0308 	orr.w	r3, r3, #8
 8003ba4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ba6:	6822      	ldr	r2, [r4, #0]
 8003ba8:	69d3      	ldr	r3, [r2, #28]
 8003baa:	f023 0304 	bic.w	r3, r3, #4
 8003bae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	69d3      	ldr	r3, [r2, #28]
 8003bb4:	6929      	ldr	r1, [r5, #16]
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003bba:	2000      	movs	r0, #0
      break;
 8003bbc:	e7d2      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bbe:	6800      	ldr	r0, [r0, #0]
 8003bc0:	f7ff fdd8 	bl	8003774 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bc4:	6822      	ldr	r2, [r4, #0]
 8003bc6:	69d3      	ldr	r3, [r2, #28]
 8003bc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bcc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bce:	6822      	ldr	r2, [r4, #0]
 8003bd0:	69d3      	ldr	r3, [r2, #28]
 8003bd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bd8:	6822      	ldr	r2, [r4, #0]
 8003bda:	69d3      	ldr	r3, [r2, #28]
 8003bdc:	6929      	ldr	r1, [r5, #16]
 8003bde:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003be2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003be4:	2000      	movs	r0, #0
      break;
 8003be6:	e7bd      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003be8:	6800      	ldr	r0, [r0, #0]
 8003bea:	f7ff fded 	bl	80037c8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bee:	6822      	ldr	r2, [r4, #0]
 8003bf0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003bf2:	f043 0308 	orr.w	r3, r3, #8
 8003bf6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bf8:	6822      	ldr	r2, [r4, #0]
 8003bfa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c06:	6929      	ldr	r1, [r5, #16]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2000      	movs	r0, #0
      break;
 8003c0e:	e7a9      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c10:	6800      	ldr	r0, [r0, #0]
 8003c12:	f7ff fe03 	bl	800381c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c16:	6822      	ldr	r2, [r4, #0]
 8003c18:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c1e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c28:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c2e:	6929      	ldr	r1, [r5, #16]
 8003c30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c34:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2000      	movs	r0, #0
      break;
 8003c38:	e794      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x5c>
      status = HAL_ERROR;
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	e792      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x5c>
  __HAL_LOCK(htim);
 8003c3e:	2002      	movs	r0, #2
 8003c40:	e793      	b.n	8003b6a <HAL_TIM_PWM_ConfigChannel+0x62>

08003c42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c42:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c44:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c46:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c4a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c52:	6083      	str	r3, [r0, #8]
}
 8003c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003c5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d071      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0xec>
{
 8003c64:	b510      	push	{r4, lr}
 8003c66:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003c74:	6802      	ldr	r2, [r0, #0]
 8003c76:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c78:	4b34      	ldr	r3, [pc, #208]	; (8003d4c <HAL_TIM_ConfigClockSource+0xf0>)
 8003c7a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003c7c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003c7e:	680b      	ldr	r3, [r1, #0]
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d056      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0xd6>
 8003c84:	d911      	bls.n	8003caa <HAL_TIM_ConfigClockSource+0x4e>
 8003c86:	2b70      	cmp	r3, #112	; 0x70
 8003c88:	d03b      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0xa6>
 8003c8a:	d81f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x70>
 8003c8c:	2b50      	cmp	r3, #80	; 0x50
 8003c8e:	d045      	beq.n	8003d1c <HAL_TIM_ConfigClockSource+0xc0>
 8003c90:	2b60      	cmp	r3, #96	; 0x60
 8003c92:	d119      	bne.n	8003cc8 <HAL_TIM_ConfigClockSource+0x6c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c94:	68ca      	ldr	r2, [r1, #12]
 8003c96:	6849      	ldr	r1, [r1, #4]
 8003c98:	6820      	ldr	r0, [r4, #0]
 8003c9a:	f7ff fdfc 	bl	8003896 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c9e:	2160      	movs	r1, #96	; 0x60
 8003ca0:	6820      	ldr	r0, [r4, #0]
 8003ca2:	f7ff fe0c 	bl	80038be <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2000      	movs	r0, #0
      break;
 8003ca8:	e024      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x98>
  switch (sClockSourceConfig->ClockSource)
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d004      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x5c>
 8003cae:	d909      	bls.n	8003cc4 <HAL_TIM_ConfigClockSource+0x68>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d001      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x5c>
 8003cb4:	2b30      	cmp	r3, #48	; 0x30
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_ConfigClockSource+0x6c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6820      	ldr	r0, [r4, #0]
 8003cbc:	f7ff fdff 	bl	80038be <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003cc0:	2000      	movs	r0, #0
      break;
 8003cc2:	e017      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x98>
  switch (sClockSourceConfig->ClockSource)
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f7      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x5c>
      status = HAL_ERROR;
 8003cc8:	2001      	movs	r0, #1
 8003cca:	e013      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x98>
  switch (sClockSourceConfig->ClockSource)
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	d00f      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x96>
 8003cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd6:	d1f7      	bne.n	8003cc8 <HAL_TIM_ConfigClockSource+0x6c>
      TIM_ETR_SetConfig(htim->Instance,
 8003cd8:	68cb      	ldr	r3, [r1, #12]
 8003cda:	684a      	ldr	r2, [r1, #4]
 8003cdc:	6889      	ldr	r1, [r1, #8]
 8003cde:	6820      	ldr	r0, [r4, #0]
 8003ce0:	f7ff ffaf 	bl	8003c42 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6893      	ldr	r3, [r2, #8]
 8003ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cec:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2000      	movs	r0, #0
      break;
 8003cf0:	e000      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x98>
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003d00:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8003d02:	68cb      	ldr	r3, [r1, #12]
 8003d04:	684a      	ldr	r2, [r1, #4]
 8003d06:	6889      	ldr	r1, [r1, #8]
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	f7ff ff9a 	bl	8003c42 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d0e:	6822      	ldr	r2, [r4, #0]
 8003d10:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003d16:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2000      	movs	r0, #0
      break;
 8003d1a:	e7eb      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x98>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1c:	68ca      	ldr	r2, [r1, #12]
 8003d1e:	6849      	ldr	r1, [r1, #4]
 8003d20:	6820      	ldr	r0, [r4, #0]
 8003d22:	f7ff fda5 	bl	8003870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d26:	2150      	movs	r1, #80	; 0x50
 8003d28:	6820      	ldr	r0, [r4, #0]
 8003d2a:	f7ff fdc8 	bl	80038be <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003d2e:	2000      	movs	r0, #0
      break;
 8003d30:	e7e0      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x98>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d32:	68ca      	ldr	r2, [r1, #12]
 8003d34:	6849      	ldr	r1, [r1, #4]
 8003d36:	6820      	ldr	r0, [r4, #0]
 8003d38:	f7ff fd9a 	bl	8003870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d3c:	2140      	movs	r1, #64	; 0x40
 8003d3e:	6820      	ldr	r0, [r4, #0]
 8003d40:	f7ff fdbd 	bl	80038be <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2000      	movs	r0, #0
      break;
 8003d46:	e7d5      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x98>
  __HAL_LOCK(htim);
 8003d48:	2002      	movs	r0, #2
}
 8003d4a:	4770      	bx	lr
 8003d4c:	fffe0088 	.word	0xfffe0088

08003d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d50:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d52:	f001 011f 	and.w	r1, r1, #31
 8003d56:	2301      	movs	r3, #1
 8003d58:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d5c:	6a03      	ldr	r3, [r0, #32]
 8003d5e:	ea23 0304 	bic.w	r3, r3, r4
 8003d62:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d64:	6a03      	ldr	r3, [r0, #32]
 8003d66:	408a      	lsls	r2, r1
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	6203      	str	r3, [r0, #32]
}
 8003d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <HAL_TIM_PWM_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d74:	460a      	mov	r2, r1
 8003d76:	2900      	cmp	r1, #0
 8003d78:	d145      	bne.n	8003e06 <HAL_TIM_PWM_Start+0x92>
 8003d7a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003d84:	bf18      	it	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f040 8096 	bne.w	8003eba <HAL_TIM_PWM_Start+0x146>
{
 8003d8e:	b510      	push	{r4, lr}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d90:	2a00      	cmp	r2, #0
 8003d92:	d168      	bne.n	8003e66 <HAL_TIM_PWM_Start+0xf2>
 8003d94:	2302      	movs	r3, #2
 8003d96:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d9e:	2201      	movs	r2, #1
 8003da0:	6800      	ldr	r0, [r0, #0]
 8003da2:	f7ff ffd5 	bl	8003d50 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	4946      	ldr	r1, [pc, #280]	; (8003ec4 <HAL_TIM_PWM_Start+0x150>)
 8003daa:	4a47      	ldr	r2, [pc, #284]	; (8003ec8 <HAL_TIM_PWM_Start+0x154>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	bf18      	it	ne
 8003db0:	428b      	cmpne	r3, r1
 8003db2:	d103      	bne.n	8003dbc <HAL_TIM_PWM_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 8003db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dba:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	4a41      	ldr	r2, [pc, #260]	; (8003ec4 <HAL_TIM_PWM_Start+0x150>)
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc4:	bf18      	it	ne
 8003dc6:	4293      	cmpne	r3, r2
 8003dc8:	d069      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x12a>
 8003dca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d065      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x12a>
 8003dd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d061      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x12a>
 8003dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d05d      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x12a>
 8003de2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d059      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x12a>
 8003dea:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d055      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x12a>
 8003df2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d051      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x12a>
    __HAL_TIM_ENABLE(htim);
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003e02:	2000      	movs	r0, #0
 8003e04:	e058      	b.n	8003eb8 <HAL_TIM_PWM_Start+0x144>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e06:	2904      	cmp	r1, #4
 8003e08:	d00d      	beq.n	8003e26 <HAL_TIM_PWM_Start+0xb2>
 8003e0a:	2908      	cmp	r1, #8
 8003e0c:	d013      	beq.n	8003e36 <HAL_TIM_PWM_Start+0xc2>
 8003e0e:	290c      	cmp	r1, #12
 8003e10:	d019      	beq.n	8003e46 <HAL_TIM_PWM_Start+0xd2>
 8003e12:	2910      	cmp	r1, #16
 8003e14:	d01f      	beq.n	8003e56 <HAL_TIM_PWM_Start+0xe2>
 8003e16:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e20:	bf18      	it	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	e7b0      	b.n	8003d88 <HAL_TIM_PWM_Start+0x14>
 8003e26:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e30:	bf18      	it	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	e7a8      	b.n	8003d88 <HAL_TIM_PWM_Start+0x14>
 8003e36:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e40:	bf18      	it	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	e7a0      	b.n	8003d88 <HAL_TIM_PWM_Start+0x14>
 8003e46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e50:	bf18      	it	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	e798      	b.n	8003d88 <HAL_TIM_PWM_Start+0x14>
 8003e56:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e60:	bf18      	it	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	e790      	b.n	8003d88 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e66:	2a04      	cmp	r2, #4
 8003e68:	d009      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x10a>
 8003e6a:	2a08      	cmp	r2, #8
 8003e6c:	d00b      	beq.n	8003e86 <HAL_TIM_PWM_Start+0x112>
 8003e6e:	2a0c      	cmp	r2, #12
 8003e70:	d00d      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x11a>
 8003e72:	2a10      	cmp	r2, #16
 8003e74:	d00f      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x122>
 8003e76:	2302      	movs	r3, #2
 8003e78:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8003e7c:	e78d      	b.n	8003d9a <HAL_TIM_PWM_Start+0x26>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8003e84:	e789      	b.n	8003d9a <HAL_TIM_PWM_Start+0x26>
 8003e86:	2302      	movs	r3, #2
 8003e88:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003e8c:	e785      	b.n	8003d9a <HAL_TIM_PWM_Start+0x26>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003e94:	e781      	b.n	8003d9a <HAL_TIM_PWM_Start+0x26>
 8003e96:	2302      	movs	r3, #2
 8003e98:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8003e9c:	e77d      	b.n	8003d9a <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HAL_TIM_PWM_Start+0x158>)
 8003ea2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea4:	2a06      	cmp	r2, #6
 8003ea6:	bf18      	it	ne
 8003ea8:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8003eac:	d007      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x14a>
      __HAL_TIM_ENABLE(htim);
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003eb6:	2000      	movs	r0, #0
}
 8003eb8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003eba:	2001      	movs	r0, #1
}
 8003ebc:	4770      	bx	lr
  return HAL_OK;
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	e7fa      	b.n	8003eb8 <HAL_TIM_PWM_Start+0x144>
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40010400 	.word	0x40010400
 8003ecc:	00010007 	.word	0x00010007

08003ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d045      	beq.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 8003ed8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8003eda:	2301      	movs	r3, #1
 8003edc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee6:	6803      	ldr	r3, [r0, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eea:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003eec:	4e1e      	ldr	r6, [pc, #120]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8003eee:	4c1f      	ldr	r4, [pc, #124]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003ef0:	42a3      	cmp	r3, r4
 8003ef2:	bf18      	it	ne
 8003ef4:	42b3      	cmpne	r3, r6
 8003ef6:	d103      	bne.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ef8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003efc:	684c      	ldr	r4, [r1, #4]
 8003efe:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f04:	680c      	ldr	r4, [r1, #0]
 8003f06:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0a:	6803      	ldr	r3, [r0, #0]
 8003f0c:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f12:	bf18      	it	ne
 8003f14:	4293      	cmpne	r3, r2
 8003f16:	d017      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003f18:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003f20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00f      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003f28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003f30:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003f38:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003f40:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d104      	bne.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f48:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f4c:	688a      	ldr	r2, [r1, #8]
 8003f4e:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f50:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003f5e:	4618      	mov	r0, r3
}
 8003f60:	bc70      	pop	{r4, r5, r6}
 8003f62:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003f64:	2002      	movs	r0, #2
}
 8003f66:	4770      	bx	lr
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40010400 	.word	0x40010400

08003f70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f70:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	9301      	str	r3, [sp, #4]
 8003f7c:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <USB_CoreReset+0x48>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d814      	bhi.n	8003fac <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f82:	6903      	ldr	r3, [r0, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	daf6      	bge.n	8003f76 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f8c:	6903      	ldr	r3, [r0, #16]
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8003f94:	9b01      	ldr	r3, [sp, #4]
 8003f96:	3301      	adds	r3, #1
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <USB_CoreReset+0x48>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d808      	bhi.n	8003fb2 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003fa0:	6903      	ldr	r3, [r0, #16]
 8003fa2:	f013 0f01 	tst.w	r3, #1
 8003fa6:	d1f5      	bne.n	8003f94 <USB_CoreReset+0x24>

  return HAL_OK;
 8003fa8:	2000      	movs	r0, #0
 8003faa:	e000      	b.n	8003fae <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8003fac:	2003      	movs	r0, #3
}
 8003fae:	b002      	add	sp, #8
 8003fb0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003fb2:	2003      	movs	r0, #3
 8003fb4:	e7fb      	b.n	8003fae <USB_CoreReset+0x3e>
 8003fb6:	bf00      	nop
 8003fb8:	00030d40 	.word	0x00030d40

08003fbc <USB_CoreInit>:
{
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	a803      	add	r0, sp, #12
 8003fc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fc8:	9b08      	ldr	r3, [sp, #32]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d11d      	bne.n	800400a <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fd6:	68e2      	ldr	r2, [r4, #12]
 8003fd8:	4b16      	ldr	r3, [pc, #88]	; (8004034 <USB_CoreInit+0x78>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fde:	68e3      	ldr	r3, [r4, #12]
 8003fe0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003fe4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8003fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d009      	beq.n	8004000 <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8003fec:	4620      	mov	r0, r4
 8003fee:	f7ff ffbf 	bl	8003f70 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003ff2:	9b06      	ldr	r3, [sp, #24]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d014      	beq.n	8004022 <USB_CoreInit+0x66>
}
 8003ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffc:	b004      	add	sp, #16
 8003ffe:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004000:	68e3      	ldr	r3, [r4, #12]
 8004002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004006:	60e3      	str	r3, [r4, #12]
 8004008:	e7f0      	b.n	8003fec <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800400a:	68e3      	ldr	r3, [r4, #12]
 800400c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004010:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8004012:	4620      	mov	r0, r4
 8004014:	f7ff ffac 	bl	8003f70 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800401a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004020:	e7e7      	b.n	8003ff2 <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004022:	68a3      	ldr	r3, [r4, #8]
 8004024:	f043 0306 	orr.w	r3, r3, #6
 8004028:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800402a:	68a3      	ldr	r3, [r4, #8]
 800402c:	f043 0320 	orr.w	r3, r3, #32
 8004030:	60a3      	str	r3, [r4, #8]
 8004032:	e7e1      	b.n	8003ff8 <USB_CoreInit+0x3c>
 8004034:	ffbdffbf 	.word	0xffbdffbf

08004038 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004038:	2a02      	cmp	r2, #2
 800403a:	d00a      	beq.n	8004052 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800403c:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800403e:	68c2      	ldr	r2, [r0, #12]
 8004040:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004044:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004046:	68c3      	ldr	r3, [r0, #12]
 8004048:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800404c:	60c3      	str	r3, [r0, #12]
}
 800404e:	2000      	movs	r0, #0
 8004050:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004052:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <USB_SetTurnaroundTime+0xb8>)
 8004054:	440b      	add	r3, r1
 8004056:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <USB_SetTurnaroundTime+0xbc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d939      	bls.n	80040d0 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800405c:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <USB_SetTurnaroundTime+0xc0>)
 800405e:	440b      	add	r3, r1
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <USB_SetTurnaroundTime+0xc4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d936      	bls.n	80040d4 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004066:	4b26      	ldr	r3, [pc, #152]	; (8004100 <USB_SetTurnaroundTime+0xc8>)
 8004068:	440b      	add	r3, r1
 800406a:	4a26      	ldr	r2, [pc, #152]	; (8004104 <USB_SetTurnaroundTime+0xcc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d933      	bls.n	80040d8 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <USB_SetTurnaroundTime+0xd0>)
 8004072:	440b      	add	r3, r1
 8004074:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8004078:	32a0      	adds	r2, #160	; 0xa0
 800407a:	4293      	cmp	r3, r2
 800407c:	d92e      	bls.n	80040dc <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800407e:	4b23      	ldr	r3, [pc, #140]	; (800410c <USB_SetTurnaroundTime+0xd4>)
 8004080:	440b      	add	r3, r1
 8004082:	4a23      	ldr	r2, [pc, #140]	; (8004110 <USB_SetTurnaroundTime+0xd8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d92b      	bls.n	80040e0 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004088:	4b22      	ldr	r3, [pc, #136]	; (8004114 <USB_SetTurnaroundTime+0xdc>)
 800408a:	440b      	add	r3, r1
 800408c:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8004090:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8004094:	4293      	cmp	r3, r2
 8004096:	d925      	bls.n	80040e4 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004098:	4b1f      	ldr	r3, [pc, #124]	; (8004118 <USB_SetTurnaroundTime+0xe0>)
 800409a:	440b      	add	r3, r1
 800409c:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80040a0:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d91f      	bls.n	80040e8 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80040a8:	4b1c      	ldr	r3, [pc, #112]	; (800411c <USB_SetTurnaroundTime+0xe4>)
 80040aa:	440b      	add	r3, r1
 80040ac:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80040b0:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d919      	bls.n	80040ec <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040b8:	4b19      	ldr	r3, [pc, #100]	; (8004120 <USB_SetTurnaroundTime+0xe8>)
 80040ba:	440b      	add	r3, r1
 80040bc:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 80040c0:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <USB_SetTurnaroundTime+0x94>
      UsbTrd = 0x6U;
 80040c8:	2106      	movs	r1, #6
 80040ca:	e7b8      	b.n	800403e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x7U;
 80040cc:	2107      	movs	r1, #7
 80040ce:	e7b6      	b.n	800403e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80040d0:	210f      	movs	r1, #15
 80040d2:	e7b4      	b.n	800403e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80040d4:	210e      	movs	r1, #14
 80040d6:	e7b2      	b.n	800403e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80040d8:	210d      	movs	r1, #13
 80040da:	e7b0      	b.n	800403e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80040dc:	210c      	movs	r1, #12
 80040de:	e7ae      	b.n	800403e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80040e0:	210b      	movs	r1, #11
 80040e2:	e7ac      	b.n	800403e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80040e4:	210a      	movs	r1, #10
 80040e6:	e7aa      	b.n	800403e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80040e8:	2109      	movs	r1, #9
 80040ea:	e7a8      	b.n	800403e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80040ec:	2108      	movs	r1, #8
 80040ee:	e7a6      	b.n	800403e <USB_SetTurnaroundTime+0x6>
 80040f0:	ff275340 	.word	0xff275340
 80040f4:	000c34ff 	.word	0x000c34ff
 80040f8:	ff1b1e40 	.word	0xff1b1e40
 80040fc:	000f423f 	.word	0x000f423f
 8004100:	ff0bdc00 	.word	0xff0bdc00
 8004104:	00124f7f 	.word	0x00124f7f
 8004108:	fef98c80 	.word	0xfef98c80
 800410c:	fee5b660 	.word	0xfee5b660
 8004110:	0016e35f 	.word	0x0016e35f
 8004114:	feced300 	.word	0xfeced300
 8004118:	feb35bc0 	.word	0xfeb35bc0
 800411c:	fe91ca00 	.word	0xfe91ca00
 8004120:	fe5954e0 	.word	0xfe5954e0

08004124 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004124:	6883      	ldr	r3, [r0, #8]
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6083      	str	r3, [r0, #8]
}
 800412c:	2000      	movs	r0, #0
 800412e:	4770      	bx	lr

08004130 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004130:	6883      	ldr	r3, [r0, #8]
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	6083      	str	r3, [r0, #8]
}
 8004138:	2000      	movs	r0, #0
 800413a:	4770      	bx	lr

0800413c <USB_FlushTxFifo>:
{
 800413c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 8004142:	9b01      	ldr	r3, [sp, #4]
 8004144:	3301      	adds	r3, #1
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <USB_FlushTxFifo+0x48>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d814      	bhi.n	8004178 <USB_FlushTxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800414e:	6903      	ldr	r3, [r0, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	daf6      	bge.n	8004142 <USB_FlushTxFifo+0x6>
  count = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004158:	0189      	lsls	r1, r1, #6
 800415a:	f041 0120 	orr.w	r1, r1, #32
 800415e:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8004160:	9b01      	ldr	r3, [sp, #4]
 8004162:	3301      	adds	r3, #1
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	4a07      	ldr	r2, [pc, #28]	; (8004184 <USB_FlushTxFifo+0x48>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d808      	bhi.n	800417e <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800416c:	6903      	ldr	r3, [r0, #16]
 800416e:	f013 0f20 	tst.w	r3, #32
 8004172:	d1f5      	bne.n	8004160 <USB_FlushTxFifo+0x24>
  return HAL_OK;
 8004174:	2000      	movs	r0, #0
 8004176:	e000      	b.n	800417a <USB_FlushTxFifo+0x3e>
      return HAL_TIMEOUT;
 8004178:	2003      	movs	r0, #3
}
 800417a:	b002      	add	sp, #8
 800417c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800417e:	2003      	movs	r0, #3
 8004180:	e7fb      	b.n	800417a <USB_FlushTxFifo+0x3e>
 8004182:	bf00      	nop
 8004184:	00030d40 	.word	0x00030d40

08004188 <USB_FlushRxFifo>:
{
 8004188:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 800418e:	9b01      	ldr	r3, [sp, #4]
 8004190:	3301      	adds	r3, #1
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	4a0d      	ldr	r2, [pc, #52]	; (80041cc <USB_FlushRxFifo+0x44>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d812      	bhi.n	80041c0 <USB_FlushRxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800419a:	6903      	ldr	r3, [r0, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	daf6      	bge.n	800418e <USB_FlushRxFifo+0x6>
  count = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041a4:	2310      	movs	r3, #16
 80041a6:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80041a8:	9b01      	ldr	r3, [sp, #4]
 80041aa:	3301      	adds	r3, #1
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	4a07      	ldr	r2, [pc, #28]	; (80041cc <USB_FlushRxFifo+0x44>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d808      	bhi.n	80041c6 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041b4:	6903      	ldr	r3, [r0, #16]
 80041b6:	f013 0f10 	tst.w	r3, #16
 80041ba:	d1f5      	bne.n	80041a8 <USB_FlushRxFifo+0x20>
  return HAL_OK;
 80041bc:	2000      	movs	r0, #0
 80041be:	e000      	b.n	80041c2 <USB_FlushRxFifo+0x3a>
      return HAL_TIMEOUT;
 80041c0:	2003      	movs	r0, #3
}
 80041c2:	b002      	add	sp, #8
 80041c4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80041c6:	2003      	movs	r0, #3
 80041c8:	e7fb      	b.n	80041c2 <USB_FlushRxFifo+0x3a>
 80041ca:	bf00      	nop
 80041cc:	00030d40 	.word	0x00030d40

080041d0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80041d0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80041d4:	4319      	orrs	r1, r3
 80041d6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80041da:	2000      	movs	r0, #0
 80041dc:	4770      	bx	lr
	...

080041e0 <USB_DevInit>:
{
 80041e0:	b084      	sub	sp, #16
 80041e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041e6:	4604      	mov	r4, r0
 80041e8:	a807      	add	r0, sp, #28
 80041ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ee:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 80041f0:	2300      	movs	r3, #0
 80041f2:	e006      	b.n	8004202 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 80041f4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80041f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80041fc:	2100      	movs	r1, #0
 80041fe:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8004200:	3301      	adds	r3, #1
 8004202:	2b0e      	cmp	r3, #14
 8004204:	d9f6      	bls.n	80041f4 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8004206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004208:	bb23      	cbnz	r3, 8004254 <USB_DevInit+0x74>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800420a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800420e:	f043 0302 	orr.w	r3, r3, #2
 8004212:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800421c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004224:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004234:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8004238:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800423c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004242:	2b01      	cmp	r3, #1
 8004244:	d110      	bne.n	8004268 <USB_DevInit+0x88>
    if (cfg.speed == USBD_HS_SPEED)
 8004246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004248:	b94b      	cbnz	r3, 800425e <USB_DevInit+0x7e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800424a:	2100      	movs	r1, #0
 800424c:	4620      	mov	r0, r4
 800424e:	f7ff ffbf 	bl	80041d0 <USB_SetDevSpeed>
 8004252:	e00d      	b.n	8004270 <USB_DevInit+0x90>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004256:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800425a:	63a3      	str	r3, [r4, #56]	; 0x38
 800425c:	e7e7      	b.n	800422e <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800425e:	2101      	movs	r1, #1
 8004260:	4620      	mov	r0, r4
 8004262:	f7ff ffb5 	bl	80041d0 <USB_SetDevSpeed>
 8004266:	e003      	b.n	8004270 <USB_DevInit+0x90>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004268:	2103      	movs	r1, #3
 800426a:	4620      	mov	r0, r4
 800426c:	f7ff ffb0 	bl	80041d0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004270:	2110      	movs	r1, #16
 8004272:	4620      	mov	r0, r4
 8004274:	f7ff ff62 	bl	800413c <USB_FlushTxFifo>
 8004278:	4680      	mov	r8, r0
 800427a:	b108      	cbz	r0, 8004280 <USB_DevInit+0xa0>
    ret = HAL_ERROR;
 800427c:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004280:	4620      	mov	r0, r4
 8004282:	f7ff ff81 	bl	8004188 <USB_FlushRxFifo>
 8004286:	b108      	cbz	r0, 800428c <USB_DevInit+0xac>
    ret = HAL_ERROR;
 8004288:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004290:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004292:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004294:	e00a      	b.n	80042ac <USB_DevInit+0xcc>
      if (i == 0U)
 8004296:	b9c3      	cbnz	r3, 80042ca <USB_DevInit+0xea>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004298:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800429c:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042a0:	2200      	movs	r2, #0
 80042a2:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042a4:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80042a8:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042aa:	3301      	adds	r3, #1
 80042ac:	9907      	ldr	r1, [sp, #28]
 80042ae:	4299      	cmp	r1, r3
 80042b0:	d910      	bls.n	80042d4 <USB_DevInit+0xf4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042b2:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80042b6:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80042ba:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80042be:	2800      	cmp	r0, #0
 80042c0:	dbe9      	blt.n	8004296 <USB_DevInit+0xb6>
      USBx_INEP(i)->DIEPCTL = 0U;
 80042c2:	2000      	movs	r0, #0
 80042c4:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80042c8:	e7ea      	b.n	80042a0 <USB_DevInit+0xc0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042ce:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80042d2:	e7e5      	b.n	80042a0 <USB_DevInit+0xc0>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d4:	2300      	movs	r3, #0
 80042d6:	e00a      	b.n	80042ee <USB_DevInit+0x10e>
      if (i == 0U)
 80042d8:	b1bb      	cbz	r3, 800430a <USB_DevInit+0x12a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042da:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 80042de:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042e2:	2200      	movs	r2, #0
 80042e4:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042e6:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80042ea:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ec:	3301      	adds	r3, #1
 80042ee:	4299      	cmp	r1, r3
 80042f0:	d910      	bls.n	8004314 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042f2:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80042f6:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 80042fa:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 80042fe:	2f00      	cmp	r7, #0
 8004300:	dbea      	blt.n	80042d8 <USB_DevInit+0xf8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004302:	2700      	movs	r7, #0
 8004304:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8004308:	e7eb      	b.n	80042e2 <USB_DevInit+0x102>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800430a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 800430e:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8004312:	e7e6      	b.n	80042e2 <USB_DevInit+0x102>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004314:	6933      	ldr	r3, [r6, #16]
 8004316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431a:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004320:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004324:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004328:	b91b      	cbnz	r3, 8004332 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800432a:	69a3      	ldr	r3, [r4, #24]
 800432c:	f043 0310 	orr.w	r3, r3, #16
 8004330:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004332:	69a2      	ldr	r2, [r4, #24]
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <USB_DevInit+0x180>)
 8004336:	4313      	orrs	r3, r2
 8004338:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800433a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800433c:	b11b      	cbz	r3, 8004346 <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800433e:	69a3      	ldr	r3, [r4, #24]
 8004340:	f043 0308 	orr.w	r3, r3, #8
 8004344:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004348:	2b01      	cmp	r3, #1
 800434a:	d004      	beq.n	8004356 <USB_DevInit+0x176>
}
 800434c:	4640      	mov	r0, r8
 800434e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004352:	b004      	add	sp, #16
 8004354:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004356:	69a2      	ldr	r2, [r4, #24]
 8004358:	4b02      	ldr	r3, [pc, #8]	; (8004364 <USB_DevInit+0x184>)
 800435a:	4313      	orrs	r3, r2
 800435c:	61a3      	str	r3, [r4, #24]
 800435e:	e7f5      	b.n	800434c <USB_DevInit+0x16c>
 8004360:	803c3800 	.word	0x803c3800
 8004364:	40000004 	.word	0x40000004

08004368 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004368:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800436c:	f013 0306 	ands.w	r3, r3, #6
 8004370:	d005      	beq.n	800437e <USB_GetDevSpeed+0x16>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004372:	2b06      	cmp	r3, #6
 8004374:	bf18      	it	ne
 8004376:	2b02      	cmpne	r3, #2
 8004378:	d103      	bne.n	8004382 <USB_GetDevSpeed+0x1a>
    speed = USBD_FS_SPEED;
 800437a:	2002      	movs	r0, #2
 800437c:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 800437e:	2000      	movs	r0, #0
 8004380:	4770      	bx	lr
    speed = 0xFU;
 8004382:	200f      	movs	r0, #15
}
 8004384:	4770      	bx	lr
	...

08004388 <USB_ActivateEndpoint>:
{
 8004388:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800438a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800438c:	784a      	ldrb	r2, [r1, #1]
 800438e:	2a01      	cmp	r2, #1
 8004390:	d020      	beq.n	80043d4 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004392:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8004396:	f003 060f 	and.w	r6, r3, #15
 800439a:	2401      	movs	r4, #1
 800439c:	40b4      	lsls	r4, r6
 800439e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80043a2:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043a6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80043aa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80043ae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80043b2:	d10c      	bne.n	80043ce <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043b4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80043b8:	688b      	ldr	r3, [r1, #8]
 80043ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043be:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043c0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80043c4:	4313      	orrs	r3, r2
 80043c6:	4a13      	ldr	r2, [pc, #76]	; (8004414 <USB_ActivateEndpoint+0x8c>)
 80043c8:	431a      	orrs	r2, r3
 80043ca:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 80043ce:	2000      	movs	r0, #0
 80043d0:	bc70      	pop	{r4, r5, r6}
 80043d2:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043d4:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 80043d8:	f003 060f 	and.w	r6, r3, #15
 80043dc:	40b2      	lsls	r2, r6
 80043de:	b292      	uxth	r2, r2
 80043e0:	4322      	orrs	r2, r4
 80043e2:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80043e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80043ea:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80043ee:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80043f2:	d1ec      	bne.n	80043ce <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043f4:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 80043f8:	688a      	ldr	r2, [r1, #8]
 80043fa:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043fe:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004400:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004404:	ea42 5383 	orr.w	r3, r2, r3, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004408:	4323      	orrs	r3, r4
 800440a:	4a02      	ldr	r2, [pc, #8]	; (8004414 <USB_ActivateEndpoint+0x8c>)
 800440c:	431a      	orrs	r2, r3
 800440e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8004412:	e7dc      	b.n	80043ce <USB_ActivateEndpoint+0x46>
 8004414:	10008000 	.word	0x10008000

08004418 <USB_DeactivateEndpoint>:
{
 8004418:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800441a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800441c:	784a      	ldrb	r2, [r1, #1]
 800441e:	2a01      	cmp	r2, #1
 8004420:	d024      	beq.n	800446c <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004422:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004426:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800442a:	2a00      	cmp	r2, #0
 800442c:	db50      	blt.n	80044d0 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800442e:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8004432:	780a      	ldrb	r2, [r1, #0]
 8004434:	f002 020f 	and.w	r2, r2, #15
 8004438:	2401      	movs	r4, #1
 800443a:	fa04 f202 	lsl.w	r2, r4, r2
 800443e:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8004442:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004446:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800444a:	7809      	ldrb	r1, [r1, #0]
 800444c:	f001 010f 	and.w	r1, r1, #15
 8004450:	408c      	lsls	r4, r1
 8004452:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8004456:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800445a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800445e:	4a23      	ldr	r2, [pc, #140]	; (80044ec <USB_DeactivateEndpoint+0xd4>)
 8004460:	400a      	ands	r2, r1
 8004462:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8004466:	2000      	movs	r0, #0
 8004468:	bc30      	pop	{r4, r5}
 800446a:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800446c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004470:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004474:	2a00      	cmp	r2, #0
 8004476:	db1e      	blt.n	80044b6 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004478:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800447c:	780a      	ldrb	r2, [r1, #0]
 800447e:	f002 020f 	and.w	r2, r2, #15
 8004482:	2401      	movs	r4, #1
 8004484:	fa04 f202 	lsl.w	r2, r4, r2
 8004488:	b292      	uxth	r2, r2
 800448a:	ea25 0202 	bic.w	r2, r5, r2
 800448e:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004492:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8004496:	7809      	ldrb	r1, [r1, #0]
 8004498:	f001 010f 	and.w	r1, r1, #15
 800449c:	408c      	lsls	r4, r1
 800449e:	b2a4      	uxth	r4, r4
 80044a0:	ea22 0404 	bic.w	r4, r2, r4
 80044a4:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044a8:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 80044ac:	4a10      	ldr	r2, [pc, #64]	; (80044f0 <USB_DeactivateEndpoint+0xd8>)
 80044ae:	400a      	ands	r2, r1
 80044b0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80044b4:	e7d7      	b.n	8004466 <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80044b6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80044ba:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80044be:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80044c2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80044c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044ca:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80044ce:	e7d3      	b.n	8004478 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044d0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80044d4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80044d8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044dc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80044e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044e4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80044e8:	e7a1      	b.n	800442e <USB_DeactivateEndpoint+0x16>
 80044ea:	bf00      	nop
 80044ec:	eff37800 	.word	0xeff37800
 80044f0:	ec337800 	.word	0xec337800

080044f4 <USB_EP0StartXfer>:
{
 80044f4:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 80044f6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80044f8:	784c      	ldrb	r4, [r1, #1]
 80044fa:	2c01      	cmp	r4, #1
 80044fc:	d024      	beq.n	8004548 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044fe:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004502:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004506:	691d      	ldr	r5, [r3, #16]
 8004508:	4c3e      	ldr	r4, [pc, #248]	; (8004604 <USB_EP0StartXfer+0x110>)
 800450a:	402c      	ands	r4, r5
 800450c:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800450e:	691d      	ldr	r5, [r3, #16]
 8004510:	4c3d      	ldr	r4, [pc, #244]	; (8004608 <USB_EP0StartXfer+0x114>)
 8004512:	402c      	ands	r4, r5
 8004514:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8004516:	694c      	ldr	r4, [r1, #20]
 8004518:	b10c      	cbz	r4, 800451e <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800451a:	688c      	ldr	r4, [r1, #8]
 800451c:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800451e:	691c      	ldr	r4, [r3, #16]
 8004520:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004524:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004526:	691c      	ldr	r4, [r3, #16]
 8004528:	688d      	ldr	r5, [r1, #8]
 800452a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800452e:	432c      	orrs	r4, r5
 8004530:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004532:	2a01      	cmp	r2, #1
 8004534:	d061      	beq.n	80045fa <USB_EP0StartXfer+0x106>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004536:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800453a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800453e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004542:	2000      	movs	r0, #0
 8004544:	bc70      	pop	{r4, r5, r6}
 8004546:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8004548:	694c      	ldr	r4, [r1, #20]
 800454a:	bb5c      	cbnz	r4, 80045a4 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800454c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004550:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8004554:	4d2c      	ldr	r5, [pc, #176]	; (8004608 <USB_EP0StartXfer+0x114>)
 8004556:	4035      	ands	r5, r6
 8004558:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800455c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004560:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004564:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004568:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800456c:	4d25      	ldr	r5, [pc, #148]	; (8004604 <USB_EP0StartXfer+0x110>)
 800456e:	4035      	ands	r5, r6
 8004570:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8004574:	2a01      	cmp	r2, #1
 8004576:	d031      	beq.n	80045dc <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004578:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800457c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004580:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004584:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8004588:	694b      	ldr	r3, [r1, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0d9      	beq.n	8004542 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800458e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8004592:	7809      	ldrb	r1, [r1, #0]
 8004594:	f001 040f 	and.w	r4, r1, #15
 8004598:	2101      	movs	r1, #1
 800459a:	40a1      	lsls	r1, r4
 800459c:	430a      	orrs	r2, r1
 800459e:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 80045a2:	e7ce      	b.n	8004542 <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045a4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80045a8:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 80045ac:	6926      	ldr	r6, [r4, #16]
 80045ae:	4d15      	ldr	r5, [pc, #84]	; (8004604 <USB_EP0StartXfer+0x110>)
 80045b0:	4035      	ands	r5, r6
 80045b2:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045b4:	6926      	ldr	r6, [r4, #16]
 80045b6:	4d14      	ldr	r5, [pc, #80]	; (8004608 <USB_EP0StartXfer+0x114>)
 80045b8:	4035      	ands	r5, r6
 80045ba:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 80045bc:	694e      	ldr	r6, [r1, #20]
 80045be:	688d      	ldr	r5, [r1, #8]
 80045c0:	42ae      	cmp	r6, r5
 80045c2:	d900      	bls.n	80045c6 <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 80045c4:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045c6:	6925      	ldr	r5, [r4, #16]
 80045c8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80045cc:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045ce:	6925      	ldr	r5, [r4, #16]
 80045d0:	694e      	ldr	r6, [r1, #20]
 80045d2:	f3c6 0612 	ubfx	r6, r6, #0, #19
 80045d6:	4335      	orrs	r5, r6
 80045d8:	6125      	str	r5, [r4, #16]
 80045da:	e7cb      	b.n	8004574 <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 80045dc:	690a      	ldr	r2, [r1, #16]
 80045de:	b11a      	cbz	r2, 80045e8 <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045e0:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80045e4:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045e8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80045ec:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80045f0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80045f4:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 80045f8:	e7a3      	b.n	8004542 <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 80045fa:	68ca      	ldr	r2, [r1, #12]
 80045fc:	2a00      	cmp	r2, #0
 80045fe:	d09a      	beq.n	8004536 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004600:	615a      	str	r2, [r3, #20]
 8004602:	e798      	b.n	8004536 <USB_EP0StartXfer+0x42>
 8004604:	fff80000 	.word	0xfff80000
 8004608:	e007ffff 	.word	0xe007ffff

0800460c <USB_WritePacket>:
{
 800460c:	b470      	push	{r4, r5, r6}
 800460e:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8004612:	b964      	cbnz	r4, 800462e <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004614:	3303      	adds	r3, #3
 8004616:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8004618:	e007      	b.n	800462a <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800461a:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800461e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004622:	f851 6b04 	ldr.w	r6, [r1], #4
 8004626:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8004628:	3401      	adds	r4, #1
 800462a:	42ac      	cmp	r4, r5
 800462c:	d3f5      	bcc.n	800461a <USB_WritePacket+0xe>
}
 800462e:	2000      	movs	r0, #0
 8004630:	bc70      	pop	{r4, r5, r6}
 8004632:	4770      	bx	lr

08004634 <USB_EPStartXfer>:
{
 8004634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004636:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8004638:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800463a:	784c      	ldrb	r4, [r1, #1]
 800463c:	2c01      	cmp	r4, #1
 800463e:	d029      	beq.n	8004694 <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004640:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004644:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8004648:	6926      	ldr	r6, [r4, #16]
 800464a:	4d7d      	ldr	r5, [pc, #500]	; (8004840 <USB_EPStartXfer+0x20c>)
 800464c:	4035      	ands	r5, r6
 800464e:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004650:	6926      	ldr	r6, [r4, #16]
 8004652:	4d7c      	ldr	r5, [pc, #496]	; (8004844 <USB_EPStartXfer+0x210>)
 8004654:	4035      	ands	r5, r6
 8004656:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8004658:	694d      	ldr	r5, [r1, #20]
 800465a:	2d00      	cmp	r5, #0
 800465c:	f040 80c1 	bne.w	80047e2 <USB_EPStartXfer+0x1ae>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004660:	6925      	ldr	r5, [r4, #16]
 8004662:	688e      	ldr	r6, [r1, #8]
 8004664:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8004668:	4335      	orrs	r5, r6
 800466a:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800466c:	6925      	ldr	r5, [r4, #16]
 800466e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004672:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8004674:	2a01      	cmp	r2, #1
 8004676:	f000 80c9 	beq.w	800480c <USB_EPStartXfer+0x1d8>
    if (ep->type == EP_TYPE_ISOC)
 800467a:	78ca      	ldrb	r2, [r1, #3]
 800467c:	2a01      	cmp	r2, #1
 800467e:	f000 80cb 	beq.w	8004818 <USB_EPStartXfer+0x1e4>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004682:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004686:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800468a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800468e:	2000      	movs	r0, #0
 8004690:	b003      	add	sp, #12
 8004692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8004694:	694c      	ldr	r4, [r1, #20]
 8004696:	bb74      	cbnz	r4, 80046f6 <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004698:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800469c:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 80046a0:	4d68      	ldr	r5, [pc, #416]	; (8004844 <USB_EPStartXfer+0x210>)
 80046a2:	4035      	ands	r5, r6
 80046a4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046a8:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80046ac:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80046b0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046b4:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 80046b8:	4d61      	ldr	r5, [pc, #388]	; (8004840 <USB_EPStartXfer+0x20c>)
 80046ba:	4035      	ands	r5, r6
 80046bc:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 80046c0:	2a01      	cmp	r2, #1
 80046c2:	d04a      	beq.n	800475a <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046c4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80046c8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80046cc:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80046d0:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80046d4:	78cc      	ldrb	r4, [r1, #3]
 80046d6:	2c01      	cmp	r4, #1
 80046d8:	d068      	beq.n	80047ac <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 80046da:	694b      	ldr	r3, [r1, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0d6      	beq.n	800468e <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046e0:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80046e4:	7809      	ldrb	r1, [r1, #0]
 80046e6:	f001 040f 	and.w	r4, r1, #15
 80046ea:	2101      	movs	r1, #1
 80046ec:	40a1      	lsls	r1, r4
 80046ee:	430a      	orrs	r2, r1
 80046f0:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 80046f4:	e7cb      	b.n	800468e <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046f6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80046fa:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 80046fe:	4d50      	ldr	r5, [pc, #320]	; (8004840 <USB_EPStartXfer+0x20c>)
 8004700:	4035      	ands	r5, r6
 8004702:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004706:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800470a:	4d4e      	ldr	r5, [pc, #312]	; (8004844 <USB_EPStartXfer+0x210>)
 800470c:	4035      	ands	r5, r6
 800470e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004712:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004716:	694d      	ldr	r5, [r1, #20]
 8004718:	688f      	ldr	r7, [r1, #8]
 800471a:	443d      	add	r5, r7
 800471c:	3d01      	subs	r5, #1
 800471e:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004722:	4f49      	ldr	r7, [pc, #292]	; (8004848 <USB_EPStartXfer+0x214>)
 8004724:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8004728:	4335      	orrs	r5, r6
 800472a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800472e:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004732:	694e      	ldr	r6, [r1, #20]
 8004734:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8004738:	4335      	orrs	r5, r6
 800473a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800473e:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8004742:	78cd      	ldrb	r5, [r1, #3]
 8004744:	2d01      	cmp	r5, #1
 8004746:	d1bb      	bne.n	80046c0 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004748:	6925      	ldr	r5, [r4, #16]
 800474a:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800474e:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004750:	6925      	ldr	r5, [r4, #16]
 8004752:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004756:	6125      	str	r5, [r4, #16]
 8004758:	e7b2      	b.n	80046c0 <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 800475a:	690a      	ldr	r2, [r1, #16]
 800475c:	b11a      	cbz	r2, 8004766 <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800475e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004762:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8004766:	78ca      	ldrb	r2, [r1, #3]
 8004768:	2a01      	cmp	r2, #1
 800476a:	d008      	beq.n	800477e <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800476c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004770:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004774:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004778:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800477c:	e787      	b.n	800468e <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800477e:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8004782:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004786:	d108      	bne.n	800479a <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004788:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800478c:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004790:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004794:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8004798:	e7e8      	b.n	800476c <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800479a:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800479e:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 80047a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047a6:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 80047aa:	e7df      	b.n	800476c <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047ac:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80047b0:	f414 7f80 	tst.w	r4, #256	; 0x100
 80047b4:	d10e      	bne.n	80047d4 <USB_EPStartXfer+0x1a0>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047b6:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80047ba:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80047be:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80047c2:	4614      	mov	r4, r2
 80047c4:	460b      	mov	r3, r1
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80047c6:	68c9      	ldr	r1, [r1, #12]
 80047c8:	781a      	ldrb	r2, [r3, #0]
 80047ca:	8a9b      	ldrh	r3, [r3, #20]
 80047cc:	9400      	str	r4, [sp, #0]
 80047ce:	f7ff ff1d 	bl	800460c <USB_WritePacket>
 80047d2:	e75c      	b.n	800468e <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047d4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80047d8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80047dc:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80047e0:	e7ef      	b.n	80047c2 <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047e2:	688e      	ldr	r6, [r1, #8]
 80047e4:	4435      	add	r5, r6
 80047e6:	3d01      	subs	r5, #1
 80047e8:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80047ec:	6926      	ldr	r6, [r4, #16]
 80047ee:	4f16      	ldr	r7, [pc, #88]	; (8004848 <USB_EPStartXfer+0x214>)
 80047f0:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 80047f4:	433e      	orrs	r6, r7
 80047f6:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80047f8:	6927      	ldr	r7, [r4, #16]
 80047fa:	688e      	ldr	r6, [r1, #8]
 80047fc:	b2ad      	uxth	r5, r5
 80047fe:	fb06 f505 	mul.w	r5, r6, r5
 8004802:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004806:	433d      	orrs	r5, r7
 8004808:	6125      	str	r5, [r4, #16]
 800480a:	e733      	b.n	8004674 <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 800480c:	68ca      	ldr	r2, [r1, #12]
 800480e:	2a00      	cmp	r2, #0
 8004810:	f43f af33 	beq.w	800467a <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004814:	6162      	str	r2, [r4, #20]
 8004816:	e730      	b.n	800467a <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004818:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800481c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004820:	d106      	bne.n	8004830 <USB_EPStartXfer+0x1fc>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004822:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004826:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800482a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800482e:	e728      	b.n	8004682 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004830:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004834:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004838:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800483c:	e721      	b.n	8004682 <USB_EPStartXfer+0x4e>
 800483e:	bf00      	nop
 8004840:	fff80000 	.word	0xfff80000
 8004844:	e007ffff 	.word	0xe007ffff
 8004848:	1ff80000 	.word	0x1ff80000

0800484c <USB_ReadPacket>:
{
 800484c:	b470      	push	{r4, r5, r6}
 800484e:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	4606      	mov	r6, r0
  uint32_t count32b = (uint32_t)len >> 2U;
 8004852:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8004854:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8004858:	2300      	movs	r3, #0
 800485a:	e005      	b.n	8004868 <USB_ReadPacket+0x1c>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800485c:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 8004860:	6824      	ldr	r4, [r4, #0]
 8004862:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 8004866:	3301      	adds	r3, #1
 8004868:	42ab      	cmp	r3, r5
 800486a:	d3f7      	bcc.n	800485c <USB_ReadPacket+0x10>
  if (remaining_bytes != 0U)
 800486c:	b19a      	cbz	r2, 8004896 <USB_ReadPacket+0x4a>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800486e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8004872:	6803      	ldr	r3, [r0, #0]
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	4608      	mov	r0, r1
    i = 0U;
 8004878:	2400      	movs	r4, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800487a:	b2e3      	uxtb	r3, r4
 800487c:	00d9      	lsls	r1, r3, #3
 800487e:	9b01      	ldr	r3, [sp, #4]
 8004880:	40cb      	lsrs	r3, r1
 8004882:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8004886:	3401      	adds	r4, #1
      remaining_bytes--;
 8004888:	3a01      	subs	r2, #1
 800488a:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 800488c:	2a00      	cmp	r2, #0
 800488e:	d1f4      	bne.n	800487a <USB_ReadPacket+0x2e>
}
 8004890:	b003      	add	sp, #12
 8004892:	bc70      	pop	{r4, r5, r6}
 8004894:	4770      	bx	lr
 8004896:	4608      	mov	r0, r1
  return ((void *)pDest);
 8004898:	e7fa      	b.n	8004890 <USB_ReadPacket+0x44>

0800489a <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800489a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800489c:	784a      	ldrb	r2, [r1, #1]
 800489e:	2a01      	cmp	r2, #1
 80048a0:	d014      	beq.n	80048cc <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048a2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80048a6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80048aa:	2a00      	cmp	r2, #0
 80048ac:	db06      	blt.n	80048bc <USB_EPSetStall+0x22>
 80048ae:	b12b      	cbz	r3, 80048bc <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80048b0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80048b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048b8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80048bc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80048c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048c4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80048c8:	2000      	movs	r0, #0
 80048ca:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80048d0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	db06      	blt.n	80048e6 <USB_EPSetStall+0x4c>
 80048d8:	b12b      	cbz	r3, 80048e6 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80048da:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80048de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048e2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048e6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80048ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048ee:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80048f2:	e7e9      	b.n	80048c8 <USB_EPSetStall+0x2e>

080048f4 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80048f4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80048f6:	784a      	ldrb	r2, [r1, #1]
 80048f8:	2a01      	cmp	r2, #1
 80048fa:	d00e      	beq.n	800491a <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048fc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004900:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004904:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004908:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800490c:	78cb      	ldrb	r3, [r1, #3]
 800490e:	3b02      	subs	r3, #2
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b01      	cmp	r3, #1
 8004914:	d915      	bls.n	8004942 <USB_EPClearStall+0x4e>
}
 8004916:	2000      	movs	r0, #0
 8004918:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800491a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800491e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004926:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800492a:	78cb      	ldrb	r3, [r1, #3]
 800492c:	3b02      	subs	r3, #2
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d8f0      	bhi.n	8004916 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004934:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8004940:	e7e9      	b.n	8004916 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004942:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800494e:	e7e2      	b.n	8004916 <USB_EPClearStall+0x22>

08004950 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004950:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004954:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004958:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800495c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004960:	0109      	lsls	r1, r1, #4
 8004962:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8004966:	430b      	orrs	r3, r1
 8004968:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 800496c:	2000      	movs	r0, #0
 800496e:	4770      	bx	lr

08004970 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004970:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004974:	f023 0303 	bic.w	r3, r3, #3
 8004978:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800497c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004980:	f023 0302 	bic.w	r3, r3, #2
 8004984:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8004988:	2000      	movs	r0, #0
 800498a:	4770      	bx	lr

0800498c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800498c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004990:	f023 0303 	bic.w	r3, r3, #3
 8004994:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004998:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80049a4:	2000      	movs	r0, #0
 80049a6:	4770      	bx	lr

080049a8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80049a8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80049aa:	6980      	ldr	r0, [r0, #24]
}
 80049ac:	4010      	ands	r0, r2
 80049ae:	4770      	bx	lr

080049b0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80049b0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80049b4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049b8:	69c0      	ldr	r0, [r0, #28]
 80049ba:	4018      	ands	r0, r3
}
 80049bc:	0c00      	lsrs	r0, r0, #16
 80049be:	4770      	bx	lr

080049c0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80049c0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80049c4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049c8:	69c0      	ldr	r0, [r0, #28]
 80049ca:	4018      	ands	r0, r3
}
 80049cc:	b280      	uxth	r0, r0
 80049ce:	4770      	bx	lr

080049d0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049d0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80049d4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049d8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80049dc:	6940      	ldr	r0, [r0, #20]
}
 80049de:	4010      	ands	r0, r2
 80049e0:	4770      	bx	lr

080049e2 <USB_ReadDevInEPInterrupt>:
{
 80049e2:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80049e4:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049e8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049ec:	f001 020f 	and.w	r2, r1, #15
 80049f0:	40d3      	lsrs	r3, r2
 80049f2:	01db      	lsls	r3, r3, #7
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049f8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80049fc:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8004a00:	6880      	ldr	r0, [r0, #8]
}
 8004a02:	4018      	ands	r0, r3
 8004a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004a0a:	6940      	ldr	r0, [r0, #20]
}
 8004a0c:	f000 0001 	and.w	r0, r0, #1
 8004a10:	4770      	bx	lr

08004a12 <USB_SetCurrentMode>:
{
 8004a12:	b538      	push	{r3, r4, r5, lr}
 8004a14:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a16:	68c3      	ldr	r3, [r0, #12]
 8004a18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a1c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004a1e:	2901      	cmp	r1, #1
 8004a20:	d013      	beq.n	8004a4a <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8004a22:	bb29      	cbnz	r1, 8004a70 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a24:	68c3      	ldr	r3, [r0, #12]
 8004a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a2a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004a2c:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004a2e:	2001      	movs	r0, #1
 8004a30:	f7fc fce8 	bl	8001404 <HAL_Delay>
      ms++;
 8004a34:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a36:	4628      	mov	r0, r5
 8004a38:	f7ff ffe7 	bl	8004a0a <USB_GetMode>
 8004a3c:	b108      	cbz	r0, 8004a42 <USB_SetCurrentMode+0x30>
 8004a3e:	2c31      	cmp	r4, #49	; 0x31
 8004a40:	d9f5      	bls.n	8004a2e <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8004a42:	2c32      	cmp	r4, #50	; 0x32
 8004a44:	d012      	beq.n	8004a6c <USB_SetCurrentMode+0x5a>
  return HAL_OK;
 8004a46:	2000      	movs	r0, #0
}
 8004a48:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a4a:	68c3      	ldr	r3, [r0, #12]
 8004a4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a50:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004a52:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004a54:	2001      	movs	r0, #1
 8004a56:	f7fc fcd5 	bl	8001404 <HAL_Delay>
      ms++;
 8004a5a:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f7ff ffd4 	bl	8004a0a <USB_GetMode>
 8004a62:	2801      	cmp	r0, #1
 8004a64:	d0ed      	beq.n	8004a42 <USB_SetCurrentMode+0x30>
 8004a66:	2c31      	cmp	r4, #49	; 0x31
 8004a68:	d9f4      	bls.n	8004a54 <USB_SetCurrentMode+0x42>
 8004a6a:	e7ea      	b.n	8004a42 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	e7eb      	b.n	8004a48 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8004a70:	2001      	movs	r0, #1
 8004a72:	e7e9      	b.n	8004a48 <USB_SetCurrentMode+0x36>

08004a74 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a74:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <USB_ActivateSetup+0x1c>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a80:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a88:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	4770      	bx	lr
 8004a90:	fffff800 	.word	0xfffff800

08004a94 <USB_EP0_OutStart>:
{
 8004a94:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a96:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a98:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <USB_EP0_OutStart+0x5c>)
 8004a9a:	429c      	cmp	r4, r3
 8004a9c:	d903      	bls.n	8004aa6 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a9e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	db16      	blt.n	8004ad4 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004aa6:	2400      	movs	r4, #0
 8004aa8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004aac:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004ab0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004ab4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ab8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004abc:	f044 0418 	orr.w	r4, r4, #24
 8004ac0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ac4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004ac8:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8004acc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8004ad0:	2901      	cmp	r1, #1
 8004ad2:	d003      	beq.n	8004adc <USB_EP0_OutStart+0x48>
}
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ada:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004adc:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ae0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004ae4:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ae8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004aec:	e7f2      	b.n	8004ad4 <USB_EP0_OutStart+0x40>
 8004aee:	bf00      	nop
 8004af0:	4f54300a 	.word	0x4f54300a

08004af4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004af4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004af6:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004afa:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004afe:	b15b      	cbz	r3, 8004b18 <USBD_CDC_EP0_RxReady+0x24>
 8004b00:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004b04:	28ff      	cmp	r0, #255	; 0xff
 8004b06:	d007      	beq.n	8004b18 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004b12:	23ff      	movs	r3, #255	; 0xff
 8004b14:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8004b18:	2000      	movs	r0, #0
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004b1c:	2343      	movs	r3, #67	; 0x43
 8004b1e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8004b20:	4800      	ldr	r0, [pc, #0]	; (8004b24 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004b22:	4770      	bx	lr
 8004b24:	20000040 	.word	0x20000040

08004b28 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004b28:	2343      	movs	r3, #67	; 0x43
 8004b2a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8004b2c:	4800      	ldr	r0, [pc, #0]	; (8004b30 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004b2e:	4770      	bx	lr
 8004b30:	20000084 	.word	0x20000084

08004b34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004b34:	2343      	movs	r3, #67	; 0x43
 8004b36:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004b38:	4800      	ldr	r0, [pc, #0]	; (8004b3c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004b3a:	4770      	bx	lr
 8004b3c:	200000d4 	.word	0x200000d4

08004b40 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004b40:	230a      	movs	r3, #10
 8004b42:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8004b44:	4800      	ldr	r0, [pc, #0]	; (8004b48 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004b46:	4770      	bx	lr
 8004b48:	200000c8 	.word	0x200000c8

08004b4c <USBD_CDC_DataOut>:
{
 8004b4c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b4e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8004b52:	b175      	cbz	r5, 8004b72 <USBD_CDC_DataOut+0x26>
 8004b54:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b56:	f001 fd74 	bl	8006642 <USBD_LL_GetRxDataSize>
 8004b5a:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b5e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8004b68:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8004b6c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8004b6e:	2000      	movs	r0, #0
}
 8004b70:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8004b72:	2003      	movs	r0, #3
 8004b74:	e7fc      	b.n	8004b70 <USBD_CDC_DataOut+0x24>

08004b76 <USBD_CDC_DataIn>:
{
 8004b76:	b570      	push	{r4, r5, r6, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004b78:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8004b7c:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8004b80:	b355      	cbz	r5, 8004bd8 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004b82:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8004b86:	0093      	lsls	r3, r2, #2
 8004b88:	4403      	add	r3, r0
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	b96b      	cbnz	r3, 8004baa <USBD_CDC_DataIn+0x34>
    hcdc->TxState = 0U;
 8004b8e:	2400      	movs	r4, #0
 8004b90:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004b94:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8004ba0:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8004ba4:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8004ba6:	4620      	mov	r0, r4
}
 8004ba8:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004baa:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8004bae:	00b2      	lsls	r2, r6, #2
 8004bb0:	4414      	add	r4, r2
 8004bb2:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8004bb4:	fbb3 f2f4 	udiv	r2, r3, r4
 8004bb8:	fb04 3312 	mls	r3, r4, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e6      	bne.n	8004b8e <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 8004bc0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8004bc4:	0093      	lsls	r3, r2, #2
 8004bc6:	4403      	add	r3, r0
 8004bc8:	2400      	movs	r4, #0
 8004bca:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004bcc:	4623      	mov	r3, r4
 8004bce:	4622      	mov	r2, r4
 8004bd0:	f001 fdac 	bl	800672c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8004bd4:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004bd6:	e7e7      	b.n	8004ba8 <USBD_CDC_DataIn+0x32>
    return (uint8_t)USBD_FAIL;
 8004bd8:	2003      	movs	r0, #3
 8004bda:	e7e5      	b.n	8004ba8 <USBD_CDC_DataIn+0x32>

08004bdc <USBD_CDC_Setup>:
{
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	4605      	mov	r5, r0
 8004be2:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004be4:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8004bee:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bf2:	780b      	ldrb	r3, [r1, #0]
 8004bf4:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8004bf8:	d027      	beq.n	8004c4a <USBD_CDC_Setup+0x6e>
 8004bfa:	2a20      	cmp	r2, #32
 8004bfc:	d15b      	bne.n	8004cb6 <USBD_CDC_Setup+0xda>
    if (req->wLength != 0U)
 8004bfe:	88ca      	ldrh	r2, [r1, #6]
 8004c00:	b93a      	cbnz	r2, 8004c12 <USBD_CDC_Setup+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c02:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	7848      	ldrb	r0, [r1, #1]
 8004c0c:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e054      	b.n	8004cbc <USBD_CDC_Setup+0xe0>
      if ((req->bmRequest & 0x80U) != 0U)
 8004c12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c16:	d00c      	beq.n	8004c32 <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c18:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4631      	mov	r1, r6
 8004c20:	7860      	ldrb	r0, [r4, #1]
 8004c22:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c24:	88e2      	ldrh	r2, [r4, #6]
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f000 fde7 	bl	80057fc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e044      	b.n	8004cbc <USBD_CDC_Setup+0xe0>
        hcdc->CmdOpCode = req->bRequest;
 8004c32:	784b      	ldrb	r3, [r1, #1]
 8004c34:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004c38:	798b      	ldrb	r3, [r1, #6]
 8004c3a:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c3e:	88ca      	ldrh	r2, [r1, #6]
 8004c40:	4631      	mov	r1, r6
 8004c42:	f000 fdf0 	bl	8005826 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c46:	2000      	movs	r0, #0
 8004c48:	e038      	b.n	8004cbc <USBD_CDC_Setup+0xe0>
    switch (req->bRequest)
 8004c4a:	784b      	ldrb	r3, [r1, #1]
 8004c4c:	2b0b      	cmp	r3, #11
 8004c4e:	d82e      	bhi.n	8004cae <USBD_CDC_Setup+0xd2>
 8004c50:	e8df f003 	tbb	[pc, r3]
 8004c54:	2d2d3606 	.word	0x2d2d3606
 8004c58:	2d2d2d2d 	.word	0x2d2d2d2d
 8004c5c:	23142d2d 	.word	0x23142d2d
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c60:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d105      	bne.n	8004c74 <USBD_CDC_Setup+0x98>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c68:	2202      	movs	r2, #2
 8004c6a:	a901      	add	r1, sp, #4
 8004c6c:	f000 fdc6 	bl	80057fc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c70:	2000      	movs	r0, #0
 8004c72:	e023      	b.n	8004cbc <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8004c74:	f000 fa66 	bl	8005144 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c78:	2003      	movs	r0, #3
 8004c7a:	e01f      	b.n	8004cbc <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c7c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d106      	bne.n	8004c92 <USBD_CDC_Setup+0xb6>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c84:	2201      	movs	r2, #1
 8004c86:	f10d 0107 	add.w	r1, sp, #7
 8004c8a:	f000 fdb7 	bl	80057fc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c8e:	2000      	movs	r0, #0
 8004c90:	e014      	b.n	8004cbc <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8004c92:	f000 fa57 	bl	8005144 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c96:	2003      	movs	r0, #3
 8004c98:	e010      	b.n	8004cbc <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c9a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d101      	bne.n	8004ca6 <USBD_CDC_Setup+0xca>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	e00a      	b.n	8004cbc <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8004ca6:	f000 fa4d 	bl	8005144 <USBD_CtlError>
        ret = USBD_FAIL;
 8004caa:	2003      	movs	r0, #3
 8004cac:	e006      	b.n	8004cbc <USBD_CDC_Setup+0xe0>
      USBD_CtlError(pdev, req);
 8004cae:	f000 fa49 	bl	8005144 <USBD_CtlError>
      ret = USBD_FAIL;
 8004cb2:	2003      	movs	r0, #3
      break;
 8004cb4:	e002      	b.n	8004cbc <USBD_CDC_Setup+0xe0>
    USBD_CtlError(pdev, req);
 8004cb6:	f000 fa45 	bl	8005144 <USBD_CtlError>
    ret = USBD_FAIL;
 8004cba:	2003      	movs	r0, #3
}
 8004cbc:	b002      	add	sp, #8
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e7fb      	b.n	8004cbc <USBD_CDC_Setup+0xe0>

08004cc4 <USBD_CDC_DeInit>:
{
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004cc8:	2181      	movs	r1, #129	; 0x81
 8004cca:	f001 fd0f 	bl	80066ec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004cce:	2500      	movs	r5, #0
 8004cd0:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f001 fd09 	bl	80066ec <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004cda:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004cde:	2182      	movs	r1, #130	; 0x82
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f001 fd03 	bl	80066ec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004ce6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004cea:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8004cee:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004cf2:	b14b      	cbz	r3, 8004d08 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004cf4:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004cfc:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8004d00:	f00b fa44 	bl	801018c <free>
    pdev->pClassData = NULL;
 8004d04:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8004d08:	2000      	movs	r0, #0
 8004d0a:	bd38      	pop	{r3, r4, r5, pc}

08004d0c <USBD_CDC_Init>:
{
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d14:	f00b fa32 	bl	801017c <malloc>
  if (hcdc == NULL)
 8004d18:	b3b0      	cbz	r0, 8004d88 <USBD_CDC_Init+0x7c>
 8004d1a:	4605      	mov	r5, r0
  pdev->pClassData = (void *)hcdc;
 8004d1c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d20:	7c23      	ldrb	r3, [r4, #16]
 8004d22:	bbb3      	cbnz	r3, 8004d92 <USBD_CDC_Init+0x86>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d28:	2202      	movs	r2, #2
 8004d2a:	2181      	movs	r1, #129	; 0x81
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f001 fcd2 	bl	80066d6 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d32:	2601      	movs	r6, #1
 8004d34:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f001 fcc9 	bl	80066d6 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d44:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d48:	2310      	movs	r3, #16
 8004d4a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d4e:	2308      	movs	r3, #8
 8004d50:	2203      	movs	r2, #3
 8004d52:	2182      	movs	r1, #130	; 0x82
 8004d54:	4620      	mov	r0, r4
 8004d56:	f001 fcbe 	bl	80066d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d60:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4798      	blx	r3
  hcdc->TxState = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d6e:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d72:	7c23      	ldrb	r3, [r4, #16]
 8004d74:	b30b      	cbz	r3, 8004dba <USBD_CDC_Init+0xae>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d76:	2340      	movs	r3, #64	; 0x40
 8004d78:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f001 fcdc 	bl	800673c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004d84:	2000      	movs	r0, #0
}
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004d8e:	2002      	movs	r0, #2
 8004d90:	e7f9      	b.n	8004d86 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d92:	2340      	movs	r3, #64	; 0x40
 8004d94:	2202      	movs	r2, #2
 8004d96:	2181      	movs	r1, #129	; 0x81
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f001 fc9c 	bl	80066d6 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d9e:	2601      	movs	r6, #1
 8004da0:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004da2:	2340      	movs	r3, #64	; 0x40
 8004da4:	2202      	movs	r2, #2
 8004da6:	4631      	mov	r1, r6
 8004da8:	4620      	mov	r0, r4
 8004daa:	f001 fc94 	bl	80066d6 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004dae:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004db2:	2310      	movs	r3, #16
 8004db4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8004db8:	e7c9      	b.n	8004d4e <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dbe:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f001 fcb9 	bl	800673c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004dca:	2000      	movs	r0, #0
 8004dcc:	e7db      	b.n	8004d86 <USBD_CDC_Init+0x7a>

08004dce <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8004dce:	b119      	cbz	r1, 8004dd8 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8004dd0:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004dd8:	2003      	movs	r0, #3
}
 8004dda:	4770      	bx	lr

08004ddc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ddc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 8004de0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004de4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 8004de8:	2000      	movs	r0, #0
 8004dea:	4770      	bx	lr

08004dec <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dec:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 8004df0:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 8004df4:	2000      	movs	r0, #0
 8004df6:	4770      	bx	lr

08004df8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004df8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8004dfc:	b19a      	cbz	r2, 8004e26 <USBD_CDC_ReceivePacket+0x2e>
{
 8004dfe:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e00:	7c03      	ldrb	r3, [r0, #16]
 8004e02:	b13b      	cbz	r3, 8004e14 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e04:	2340      	movs	r3, #64	; 0x40
 8004e06:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	f001 fc96 	bl	800673c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e10:	2000      	movs	r0, #0
}
 8004e12:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e18:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	f001 fc8d 	bl	800673c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004e22:	2000      	movs	r0, #0
 8004e24:	e7f5      	b.n	8004e12 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8004e26:	2003      	movs	r0, #3
}
 8004e28:	4770      	bx	lr

08004e2a <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e2a:	b1c0      	cbz	r0, 8004e5e <USBD_Init+0x34>
{
 8004e2c:	b508      	push	{r3, lr}
 8004e2e:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004e30:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 8004e34:	b110      	cbz	r0, 8004e3c <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8004e36:	2000      	movs	r0, #0
 8004e38:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004e3c:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8004e40:	b110      	cbz	r0, 8004e48 <USBD_Init+0x1e>
  {
    pdev->pConfDesc = NULL;
 8004e42:	2000      	movs	r0, #0
 8004e44:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e48:	b109      	cbz	r1, 8004e4e <USBD_Init+0x24>
  {
    pdev->pDesc = pdesc;
 8004e4a:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
 8004e4e:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e50:	2301      	movs	r3, #1
 8004e52:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8004e56:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004e58:	f001 fba8 	bl	80065ac <USBD_LL_Init>

  return ret;
}
 8004e5c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004e5e:	2003      	movs	r0, #3
}
 8004e60:	4770      	bx	lr

08004e62 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004e62:	b510      	push	{r4, lr}
 8004e64:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8004e6c:	b159      	cbz	r1, 8004e86 <USBD_RegisterClass+0x24>
 8004e6e:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004e70:	f8c4 12b8 	str.w	r1, [r4, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004e74:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004e76:	f10d 0006 	add.w	r0, sp, #6
 8004e7a:	4798      	blx	r3
 8004e7c:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004e80:	2000      	movs	r0, #0
}
 8004e82:	b002      	add	sp, #8
 8004e84:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004e86:	2003      	movs	r0, #3
 8004e88:	e7fb      	b.n	8004e82 <USBD_RegisterClass+0x20>

08004e8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e8a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004e8c:	f001 fc1b 	bl	80066c6 <USBD_LL_Start>
}
 8004e90:	bd08      	pop	{r3, pc}

08004e92 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e92:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004e94:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004e98:	b113      	cbz	r3, 8004ea0 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4798      	blx	r3
  }

  return ret;
}
 8004e9e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	e7fc      	b.n	8004e9e <USBD_SetClassConfig+0xc>

08004ea4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ea4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004ea6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004eaa:	b10b      	cbz	r3, 8004eb0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	bd08      	pop	{r3, pc}

08004eb4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004eb8:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f000 f92d 	bl	800511c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004ec8:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004ecc:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004ed0:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8004ed4:	f001 031f 	and.w	r3, r1, #31
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d00d      	beq.n	8004ef8 <USBD_LL_SetupStage+0x44>
 8004edc:	b13b      	cbz	r3, 8004eee <USBD_LL_SetupStage+0x3a>
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d00f      	beq.n	8004f02 <USBD_LL_SetupStage+0x4e>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ee2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f001 fc08 	bl	80066fc <USBD_LL_StallEP>
      break;
 8004eec:	e003      	b.n	8004ef6 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004eee:	4629      	mov	r1, r5
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 fae0 	bl	80054b6 <USBD_StdDevReq>
  }

  return ret;
}
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 fb16 	bl	800552c <USBD_StdItfReq>
      break;
 8004f00:	e7f9      	b.n	8004ef6 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004f02:	4629      	mov	r1, r5
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 fb45 	bl	8005594 <USBD_StdEPReq>
      break;
 8004f0a:	e7f4      	b.n	8004ef6 <USBD_LL_SetupStage+0x42>

08004f0c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004f10:	bb29      	cbnz	r1, 8004f5e <USBD_LL_DataOutStage+0x52>
 8004f12:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004f14:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004f18:	2a03      	cmp	r2, #3
 8004f1a:	d001      	beq.n	8004f20 <USBD_LL_DataOutStage+0x14>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	e029      	b.n	8004f74 <USBD_LL_DataOutStage+0x68>
      if (pep->rem_length > pep->maxpacket)
 8004f20:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8004f24:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8004f28:	4291      	cmp	r1, r2
 8004f2a:	d80d      	bhi.n	8004f48 <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004f2c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	b123      	cbz	r3, 8004f3e <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f34:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004f38:	2a03      	cmp	r2, #3
 8004f3a:	d100      	bne.n	8004f3e <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev);
 8004f3c:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 fc88 	bl	8005854 <USBD_CtlSendStatus>
  return USBD_OK;
 8004f44:	2000      	movs	r0, #0
 8004f46:	e015      	b.n	8004f74 <USBD_LL_DataOutStage+0x68>
        pep->rem_length -= pep->maxpacket;
 8004f48:	1a89      	subs	r1, r1, r2
 8004f4a:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004f4e:	428a      	cmp	r2, r1
 8004f50:	bf28      	it	cs
 8004f52:	460a      	movcs	r2, r1
 8004f54:	4619      	mov	r1, r3
 8004f56:	f000 fc75 	bl	8005844 <USBD_CtlContinueRx>
  return USBD_OK;
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e00a      	b.n	8004f74 <USBD_LL_DataOutStage+0x68>
 8004f5e:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 8004f60:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	b133      	cbz	r3, 8004f76 <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f68:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004f6c:	2903      	cmp	r1, #3
 8004f6e:	d104      	bne.n	8004f7a <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004f70:	4611      	mov	r1, r2
 8004f72:	4798      	blx	r3
}
 8004f74:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004f76:	2003      	movs	r0, #3
 8004f78:	e7fc      	b.n	8004f74 <USBD_LL_DataOutStage+0x68>
 8004f7a:	2003      	movs	r0, #3
 8004f7c:	e7fa      	b.n	8004f74 <USBD_LL_DataOutStage+0x68>

08004f7e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004f82:	2900      	cmp	r1, #0
 8004f84:	d146      	bne.n	8005014 <USBD_LL_DataInStage+0x96>
 8004f86:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f88:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004f8c:	2a02      	cmp	r2, #2
 8004f8e:	d005      	beq.n	8004f9c <USBD_LL_DataInStage+0x1e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004f90:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d039      	beq.n	800500c <USBD_LL_DataInStage+0x8e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e046      	b.n	800502a <USBD_LL_DataInStage+0xac>
      if (pep->rem_length > pep->maxpacket)
 8004f9c:	69c2      	ldr	r2, [r0, #28]
 8004f9e:	6a01      	ldr	r1, [r0, #32]
 8004fa0:	428a      	cmp	r2, r1
 8004fa2:	d813      	bhi.n	8004fcc <USBD_LL_DataInStage+0x4e>
        if ((pep->maxpacket == pep->rem_length) &&
 8004fa4:	428a      	cmp	r2, r1
 8004fa6:	d01d      	beq.n	8004fe4 <USBD_LL_DataInStage+0x66>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004fa8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	b12b      	cbz	r3, 8004fbc <USBD_LL_DataInStage+0x3e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004fb0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004fb4:	2a03      	cmp	r2, #3
 8004fb6:	d101      	bne.n	8004fbc <USBD_LL_DataInStage+0x3e>
            pdev->pClass->EP0_TxSent(pdev);
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004fbc:	2180      	movs	r1, #128	; 0x80
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f001 fb9c 	bl	80066fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f000 fc50 	bl	800586a <USBD_CtlReceiveStatus>
 8004fca:	e7e1      	b.n	8004f90 <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 8004fcc:	1a52      	subs	r2, r2, r1
 8004fce:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f000 fc20 	bl	8005816 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f001 fbad 	bl	800673c <USBD_LL_PrepareReceive>
 8004fe2:	e7d5      	b.n	8004f90 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 8004fe4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8004fe6:	4299      	cmp	r1, r3
 8004fe8:	d8de      	bhi.n	8004fa8 <USBD_LL_DataInStage+0x2a>
            (pep->total_length < pdev->ep0_data_len))
 8004fea:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d2da      	bcs.n	8004fa8 <USBD_LL_DataInStage+0x2a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	f000 fc0e 	bl	8005816 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005000:	460b      	mov	r3, r1
 8005002:	460a      	mov	r2, r1
 8005004:	4620      	mov	r0, r4
 8005006:	f001 fb99 	bl	800673c <USBD_LL_PrepareReceive>
 800500a:	e7c1      	b.n	8004f90 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0U;
 800500c:	2000      	movs	r0, #0
 800500e:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8005012:	e00a      	b.n	800502a <USBD_LL_DataInStage+0xac>
 8005014:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 8005016:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	b133      	cbz	r3, 800502c <USBD_LL_DataInStage+0xae>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800501e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005022:	2903      	cmp	r1, #3
 8005024:	d104      	bne.n	8005030 <USBD_LL_DataInStage+0xb2>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005026:	4611      	mov	r1, r2
 8005028:	4798      	blx	r3
}
 800502a:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800502c:	2003      	movs	r0, #3
 800502e:	e7fc      	b.n	800502a <USBD_LL_DataInStage+0xac>
 8005030:	2003      	movs	r0, #3
 8005032:	e7fa      	b.n	800502a <USBD_LL_DataInStage+0xac>

08005034 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005038:	2301      	movs	r3, #1
 800503a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800503e:	2300      	movs	r3, #0
 8005040:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8005044:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8005046:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800504a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800504e:	b123      	cbz	r3, 800505a <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005050:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2100      	movs	r1, #0
 8005058:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800505a:	2340      	movs	r3, #64	; 0x40
 800505c:	2200      	movs	r2, #0
 800505e:	4611      	mov	r1, r2
 8005060:	4620      	mov	r0, r4
 8005062:	f001 fb38 	bl	80066d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005066:	2601      	movs	r6, #1
 8005068:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800506c:	2540      	movs	r5, #64	; 0x40
 800506e:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005072:	462b      	mov	r3, r5
 8005074:	2200      	movs	r2, #0
 8005076:	2180      	movs	r1, #128	; 0x80
 8005078:	4620      	mov	r0, r4
 800507a:	f001 fb2c 	bl	80066d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800507e:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005080:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8005082:	2000      	movs	r0, #0
 8005084:	bd70      	pop	{r4, r5, r6, pc}

08005086 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005086:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005088:	2000      	movs	r0, #0
 800508a:	4770      	bx	lr

0800508c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800508c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005090:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005094:	2304      	movs	r3, #4
 8005096:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800509a:	2000      	movs	r0, #0
 800509c:	4770      	bx	lr

0800509e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800509e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d001      	beq.n	80050aa <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80050a6:	2000      	movs	r0, #0
 80050a8:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80050aa:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80050ae:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 80050b2:	e7f8      	b.n	80050a6 <USBD_LL_Resume+0x8>

080050b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80050b4:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d001      	beq.n	80050c2 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80050be:	2000      	movs	r0, #0
 80050c0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80050c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f8      	beq.n	80050be <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80050cc:	4798      	blx	r3
 80050ce:	e7f6      	b.n	80050be <USBD_LL_SOF+0xa>

080050d0 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80050d0:	2000      	movs	r0, #0
 80050d2:	4770      	bx	lr

080050d4 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80050d4:	2000      	movs	r0, #0
 80050d6:	4770      	bx	lr

080050d8 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80050d8:	2000      	movs	r0, #0
 80050da:	4770      	bx	lr

080050dc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80050dc:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050de:	2301      	movs	r3, #1
 80050e0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80050e4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80050e8:	b113      	cbz	r3, 80050f0 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	7901      	ldrb	r1, [r0, #4]
 80050ee:	4798      	blx	r3
  }

  return USBD_OK;
}
 80050f0:	2000      	movs	r0, #0
 80050f2:	bd08      	pop	{r3, pc}

080050f4 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 80050f4:	2300      	movs	r3, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80050f6:	e002      	b.n	80050fe <USBD_GetLen+0xa>
  {
    len++;
 80050f8:	3301      	adds	r3, #1
 80050fa:	b2db      	uxtb	r3, r3
    pbuff++;
 80050fc:	3001      	adds	r0, #1
  while (*pbuff != (uint8_t)'\0')
 80050fe:	7802      	ldrb	r2, [r0, #0]
 8005100:	2a00      	cmp	r2, #0
 8005102:	d1f9      	bne.n	80050f8 <USBD_GetLen+0x4>
  }

  return len;
}
 8005104:	4618      	mov	r0, r3
 8005106:	4770      	bx	lr

08005108 <USBD_SetFeature>:
{
 8005108:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800510a:	884b      	ldrh	r3, [r1, #2]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d000      	beq.n	8005112 <USBD_SetFeature+0xa>
}
 8005110:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8005112:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005116:	f000 fb9d 	bl	8005854 <USBD_CtlSendStatus>
}
 800511a:	e7f9      	b.n	8005110 <USBD_SetFeature+0x8>

0800511c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800511c:	780b      	ldrb	r3, [r1, #0]
 800511e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8005120:	784b      	ldrb	r3, [r1, #1]
 8005122:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8005124:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8005126:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005128:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800512c:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800512e:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8005130:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005132:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8005136:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8005138:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800513a:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800513c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8005140:	80c3      	strh	r3, [r0, #6]
}
 8005142:	4770      	bx	lr

08005144 <USBD_CtlError>:
{
 8005144:	b510      	push	{r4, lr}
 8005146:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005148:	2180      	movs	r1, #128	; 0x80
 800514a:	f001 fad7 	bl	80066fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800514e:	2100      	movs	r1, #0
 8005150:	4620      	mov	r0, r4
 8005152:	f001 fad3 	bl	80066fc <USBD_LL_StallEP>
}
 8005156:	bd10      	pop	{r4, pc}

08005158 <USBD_GetDescriptor>:
{
 8005158:	b530      	push	{r4, r5, lr}
 800515a:	b083      	sub	sp, #12
 800515c:	4604      	mov	r4, r0
 800515e:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005166:	884a      	ldrh	r2, [r1, #2]
 8005168:	0a13      	lsrs	r3, r2, #8
 800516a:	3b01      	subs	r3, #1
 800516c:	2b0e      	cmp	r3, #14
 800516e:	f200 80bc 	bhi.w	80052ea <USBD_GetDescriptor+0x192>
 8005172:	e8df f003 	tbb	[pc, r3]
 8005176:	3015      	.short	0x3015
 8005178:	9ebaba44 	.word	0x9ebaba44
 800517c:	bababaab 	.word	0xbababaab
 8005180:	babababa 	.word	0xbabababa
 8005184:	08          	.byte	0x08
 8005185:	00          	.byte	0x00
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005186:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	b123      	cbz	r3, 8005198 <USBD_GetDescriptor+0x40>
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800518e:	f10d 0106 	add.w	r1, sp, #6
 8005192:	7c00      	ldrb	r0, [r0, #16]
 8005194:	4798      	blx	r3
 8005196:	e00a      	b.n	80051ae <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 8005198:	4629      	mov	r1, r5
 800519a:	f7ff ffd3 	bl	8005144 <USBD_CtlError>
 800519e:	e018      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80051a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f10d 0106 	add.w	r1, sp, #6
 80051aa:	7c00      	ldrb	r0, [r0, #16]
 80051ac:	4798      	blx	r3
    if (req->wLength != 0U)
 80051ae:	88ea      	ldrh	r2, [r5, #6]
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	f000 80a3 	beq.w	80052fc <USBD_GetDescriptor+0x1a4>
      if (len != 0U)
 80051b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8099 	beq.w	80052f2 <USBD_GetDescriptor+0x19a>
        len = MIN(len, req->wLength);
 80051c0:	429a      	cmp	r2, r3
 80051c2:	bf28      	it	cs
 80051c4:	461a      	movcs	r2, r3
 80051c6:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80051ca:	4601      	mov	r1, r0
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 fb15 	bl	80057fc <USBD_CtlSendData>
}
 80051d2:	b003      	add	sp, #12
 80051d4:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051d6:	7c03      	ldrb	r3, [r0, #16]
 80051d8:	b943      	cbnz	r3, 80051ec <USBD_GetDescriptor+0x94>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80051da:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	f10d 0006 	add.w	r0, sp, #6
 80051e4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051e6:	2302      	movs	r3, #2
 80051e8:	7043      	strb	r3, [r0, #1]
 80051ea:	e7e0      	b.n	80051ae <USBD_GetDescriptor+0x56>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80051ec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	f10d 0006 	add.w	r0, sp, #6
 80051f6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051f8:	2302      	movs	r3, #2
 80051fa:	7043      	strb	r3, [r0, #1]
 80051fc:	e7d7      	b.n	80051ae <USBD_GetDescriptor+0x56>
    switch ((uint8_t)(req->wValue))
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	2a05      	cmp	r2, #5
 8005202:	d852      	bhi.n	80052aa <USBD_GetDescriptor+0x152>
 8005204:	e8df f002 	tbb	[pc, r2]
 8005208:	2a1d1003 	.word	0x2a1d1003
 800520c:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800520e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	b123      	cbz	r3, 8005220 <USBD_GetDescriptor+0xc8>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005216:	f10d 0106 	add.w	r1, sp, #6
 800521a:	7c00      	ldrb	r0, [r0, #16]
 800521c:	4798      	blx	r3
 800521e:	e7c6      	b.n	80051ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8005220:	4629      	mov	r1, r5
 8005222:	f7ff ff8f 	bl	8005144 <USBD_CtlError>
 8005226:	e7d4      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005228:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	b123      	cbz	r3, 800523a <USBD_GetDescriptor+0xe2>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005230:	f10d 0106 	add.w	r1, sp, #6
 8005234:	7c00      	ldrb	r0, [r0, #16]
 8005236:	4798      	blx	r3
 8005238:	e7b9      	b.n	80051ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800523a:	4629      	mov	r1, r5
 800523c:	f7ff ff82 	bl	8005144 <USBD_CtlError>
 8005240:	e7c7      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005242:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	b123      	cbz	r3, 8005254 <USBD_GetDescriptor+0xfc>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800524a:	f10d 0106 	add.w	r1, sp, #6
 800524e:	7c00      	ldrb	r0, [r0, #16]
 8005250:	4798      	blx	r3
 8005252:	e7ac      	b.n	80051ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8005254:	4629      	mov	r1, r5
 8005256:	f7ff ff75 	bl	8005144 <USBD_CtlError>
 800525a:	e7ba      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800525c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	b123      	cbz	r3, 800526e <USBD_GetDescriptor+0x116>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005264:	f10d 0106 	add.w	r1, sp, #6
 8005268:	7c00      	ldrb	r0, [r0, #16]
 800526a:	4798      	blx	r3
 800526c:	e79f      	b.n	80051ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800526e:	4629      	mov	r1, r5
 8005270:	f7ff ff68 	bl	8005144 <USBD_CtlError>
 8005274:	e7ad      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005276:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	b123      	cbz	r3, 8005288 <USBD_GetDescriptor+0x130>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800527e:	f10d 0106 	add.w	r1, sp, #6
 8005282:	7c00      	ldrb	r0, [r0, #16]
 8005284:	4798      	blx	r3
 8005286:	e792      	b.n	80051ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8005288:	4629      	mov	r1, r5
 800528a:	f7ff ff5b 	bl	8005144 <USBD_CtlError>
 800528e:	e7a0      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005290:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	b123      	cbz	r3, 80052a2 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005298:	f10d 0106 	add.w	r1, sp, #6
 800529c:	7c00      	ldrb	r0, [r0, #16]
 800529e:	4798      	blx	r3
 80052a0:	e785      	b.n	80051ae <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80052a2:	4629      	mov	r1, r5
 80052a4:	f7ff ff4e 	bl	8005144 <USBD_CtlError>
 80052a8:	e793      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 80052aa:	4629      	mov	r1, r5
 80052ac:	f7ff ff4a 	bl	8005144 <USBD_CtlError>
 80052b0:	e78f      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052b2:	7c03      	ldrb	r3, [r0, #16]
 80052b4:	b933      	cbnz	r3, 80052c4 <USBD_GetDescriptor+0x16c>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80052b6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	f10d 0006 	add.w	r0, sp, #6
 80052c0:	4798      	blx	r3
 80052c2:	e774      	b.n	80051ae <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 80052c4:	4629      	mov	r1, r5
 80052c6:	f7ff ff3d 	bl	8005144 <USBD_CtlError>
 80052ca:	e782      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052cc:	7c03      	ldrb	r3, [r0, #16]
 80052ce:	b943      	cbnz	r3, 80052e2 <USBD_GetDescriptor+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80052d0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f10d 0006 	add.w	r0, sp, #6
 80052da:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80052dc:	2307      	movs	r3, #7
 80052de:	7043      	strb	r3, [r0, #1]
 80052e0:	e765      	b.n	80051ae <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 80052e2:	4629      	mov	r1, r5
 80052e4:	f7ff ff2e 	bl	8005144 <USBD_CtlError>
 80052e8:	e773      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
    USBD_CtlError(pdev, req);
 80052ea:	4629      	mov	r1, r5
 80052ec:	f7ff ff2a 	bl	8005144 <USBD_CtlError>
 80052f0:	e76f      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
        USBD_CtlError(pdev, req);
 80052f2:	4629      	mov	r1, r5
 80052f4:	4620      	mov	r0, r4
 80052f6:	f7ff ff25 	bl	8005144 <USBD_CtlError>
 80052fa:	e76a      	b.n	80051d2 <USBD_GetDescriptor+0x7a>
      (void)USBD_CtlSendStatus(pdev);
 80052fc:	4620      	mov	r0, r4
 80052fe:	f000 faa9 	bl	8005854 <USBD_CtlSendStatus>
 8005302:	e766      	b.n	80051d2 <USBD_GetDescriptor+0x7a>

08005304 <USBD_SetAddress>:
{
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005308:	888b      	ldrh	r3, [r1, #4]
 800530a:	b9f3      	cbnz	r3, 800534a <USBD_SetAddress+0x46>
 800530c:	88cb      	ldrh	r3, [r1, #6]
 800530e:	b9e3      	cbnz	r3, 800534a <USBD_SetAddress+0x46>
 8005310:	884b      	ldrh	r3, [r1, #2]
 8005312:	2b7f      	cmp	r3, #127	; 0x7f
 8005314:	d819      	bhi.n	800534a <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005316:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800531a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800531e:	2b03      	cmp	r3, #3
 8005320:	d00c      	beq.n	800533c <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8005322:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005326:	4629      	mov	r1, r5
 8005328:	f001 f9f8 	bl	800671c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fa91 	bl	8005854 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005332:	b135      	cbz	r5, 8005342 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005334:	2302      	movs	r3, #2
 8005336:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800533a:	e009      	b.n	8005350 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800533c:	f7ff ff02 	bl	8005144 <USBD_CtlError>
 8005340:	e006      	b.n	8005350 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005342:	2301      	movs	r3, #1
 8005344:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005348:	e002      	b.n	8005350 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800534a:	4620      	mov	r0, r4
 800534c:	f7ff fefa 	bl	8005144 <USBD_CtlError>
}
 8005350:	bd38      	pop	{r3, r4, r5, pc}
	...

08005354 <USBD_SetConfig>:
{
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	4604      	mov	r4, r0
 8005358:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 800535a:	7889      	ldrb	r1, [r1, #2]
 800535c:	4b2e      	ldr	r3, [pc, #184]	; (8005418 <USBD_SetConfig+0xc4>)
 800535e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005360:	2901      	cmp	r1, #1
 8005362:	d80f      	bhi.n	8005384 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8005364:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005368:	2b02      	cmp	r3, #2
 800536a:	d011      	beq.n	8005390 <USBD_SetConfig+0x3c>
 800536c:	2b03      	cmp	r3, #3
 800536e:	d025      	beq.n	80053bc <USBD_SetConfig+0x68>
    USBD_CtlError(pdev, req);
 8005370:	4629      	mov	r1, r5
 8005372:	f7ff fee7 	bl	8005144 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005376:	4b28      	ldr	r3, [pc, #160]	; (8005418 <USBD_SetConfig+0xc4>)
 8005378:	7819      	ldrb	r1, [r3, #0]
 800537a:	4620      	mov	r0, r4
 800537c:	f7ff fd92 	bl	8004ea4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005380:	2603      	movs	r6, #3
    break;
 8005382:	e003      	b.n	800538c <USBD_SetConfig+0x38>
    USBD_CtlError(pdev, req);
 8005384:	4629      	mov	r1, r5
 8005386:	f7ff fedd 	bl	8005144 <USBD_CtlError>
    return USBD_FAIL;
 800538a:	2603      	movs	r6, #3
}
 800538c:	4630      	mov	r0, r6
 800538e:	bd70      	pop	{r4, r5, r6, pc}
    if (cfgidx != 0U)
 8005390:	b181      	cbz	r1, 80053b4 <USBD_SetConfig+0x60>
      pdev->dev_config = cfgidx;
 8005392:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005394:	f7ff fd7d 	bl	8004e92 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8005398:	4606      	mov	r6, r0
 800539a:	b120      	cbz	r0, 80053a6 <USBD_SetConfig+0x52>
        USBD_CtlError(pdev, req);
 800539c:	4629      	mov	r1, r5
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff fed0 	bl	8005144 <USBD_CtlError>
 80053a4:	e7f2      	b.n	800538c <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 fa54 	bl	8005854 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80053ac:	2303      	movs	r3, #3
 80053ae:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80053b2:	e7eb      	b.n	800538c <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 80053b4:	f000 fa4e 	bl	8005854 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80053b8:	2600      	movs	r6, #0
 80053ba:	e7e7      	b.n	800538c <USBD_SetConfig+0x38>
    if (cfgidx == 0U)
 80053bc:	b1c9      	cbz	r1, 80053f2 <USBD_SetConfig+0x9e>
    else if (cfgidx != pdev->dev_config)
 80053be:	6843      	ldr	r3, [r0, #4]
 80053c0:	4299      	cmp	r1, r3
 80053c2:	d025      	beq.n	8005410 <USBD_SetConfig+0xbc>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80053c4:	b2d9      	uxtb	r1, r3
 80053c6:	f7ff fd6d 	bl	8004ea4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80053ca:	4b13      	ldr	r3, [pc, #76]	; (8005418 <USBD_SetConfig+0xc4>)
 80053cc:	7819      	ldrb	r1, [r3, #0]
 80053ce:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80053d0:	4620      	mov	r0, r4
 80053d2:	f7ff fd5e 	bl	8004e92 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80053d6:	4606      	mov	r6, r0
 80053d8:	b1b0      	cbz	r0, 8005408 <USBD_SetConfig+0xb4>
        USBD_CtlError(pdev, req);
 80053da:	4629      	mov	r1, r5
 80053dc:	4620      	mov	r0, r4
 80053de:	f7ff feb1 	bl	8005144 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80053e2:	7921      	ldrb	r1, [r4, #4]
 80053e4:	4620      	mov	r0, r4
 80053e6:	f7ff fd5d 	bl	8004ea4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053ea:	2302      	movs	r3, #2
 80053ec:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80053f0:	e7cc      	b.n	800538c <USBD_SetConfig+0x38>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80053f2:	2302      	movs	r3, #2
 80053f4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80053f8:	6041      	str	r1, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80053fa:	f7ff fd53 	bl	8004ea4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80053fe:	4620      	mov	r0, r4
 8005400:	f000 fa28 	bl	8005854 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005404:	2600      	movs	r6, #0
 8005406:	e7c1      	b.n	800538c <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 8005408:	4620      	mov	r0, r4
 800540a:	f000 fa23 	bl	8005854 <USBD_CtlSendStatus>
 800540e:	e7bd      	b.n	800538c <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 8005410:	f000 fa20 	bl	8005854 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005414:	2600      	movs	r6, #0
 8005416:	e7b9      	b.n	800538c <USBD_SetConfig+0x38>
 8005418:	20000256 	.word	0x20000256

0800541c <USBD_GetConfig>:
{
 800541c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800541e:	88cb      	ldrh	r3, [r1, #6]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10b      	bne.n	800543c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8005424:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005428:	b19b      	cbz	r3, 8005452 <USBD_GetConfig+0x36>
 800542a:	2b02      	cmp	r3, #2
 800542c:	d909      	bls.n	8005442 <USBD_GetConfig+0x26>
 800542e:	2b03      	cmp	r3, #3
 8005430:	d10f      	bne.n	8005452 <USBD_GetConfig+0x36>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005432:	2201      	movs	r2, #1
 8005434:	1d01      	adds	r1, r0, #4
 8005436:	f000 f9e1 	bl	80057fc <USBD_CtlSendData>
      break;
 800543a:	e001      	b.n	8005440 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800543c:	f7ff fe82 	bl	8005144 <USBD_CtlError>
}
 8005440:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 8005442:	4601      	mov	r1, r0
 8005444:	2300      	movs	r3, #0
 8005446:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800544a:	2201      	movs	r2, #1
 800544c:	f000 f9d6 	bl	80057fc <USBD_CtlSendData>
      break;
 8005450:	e7f6      	b.n	8005440 <USBD_GetConfig+0x24>
      USBD_CtlError(pdev, req);
 8005452:	f7ff fe77 	bl	8005144 <USBD_CtlError>
}
 8005456:	e7f3      	b.n	8005440 <USBD_GetConfig+0x24>

08005458 <USBD_GetStatus>:
{
 8005458:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800545a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800545e:	3b01      	subs	r3, #1
 8005460:	2b02      	cmp	r3, #2
 8005462:	d812      	bhi.n	800548a <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8005464:	88cb      	ldrh	r3, [r1, #6]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d10c      	bne.n	8005484 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800546a:	2301      	movs	r3, #1
 800546c:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800546e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005472:	b10b      	cbz	r3, 8005478 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005474:	2303      	movs	r3, #3
 8005476:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005478:	2202      	movs	r2, #2
 800547a:	f100 010c 	add.w	r1, r0, #12
 800547e:	f000 f9bd 	bl	80057fc <USBD_CtlSendData>
}
 8005482:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8005484:	f7ff fe5e 	bl	8005144 <USBD_CtlError>
      break;
 8005488:	e7fb      	b.n	8005482 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 800548a:	f7ff fe5b 	bl	8005144 <USBD_CtlError>
}
 800548e:	e7f8      	b.n	8005482 <USBD_GetStatus+0x2a>

08005490 <USBD_ClrFeature>:
{
 8005490:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005492:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005496:	3b01      	subs	r3, #1
 8005498:	2b02      	cmp	r3, #2
 800549a:	d809      	bhi.n	80054b0 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800549c:	884b      	ldrh	r3, [r1, #2]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d000      	beq.n	80054a4 <USBD_ClrFeature+0x14>
}
 80054a2:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80054aa:	f000 f9d3 	bl	8005854 <USBD_CtlSendStatus>
 80054ae:	e7f8      	b.n	80054a2 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80054b0:	f7ff fe48 	bl	8005144 <USBD_CtlError>
}
 80054b4:	e7f5      	b.n	80054a2 <USBD_ClrFeature+0x12>

080054b6 <USBD_StdDevReq>:
{
 80054b6:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054b8:	780b      	ldrb	r3, [r1, #0]
 80054ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d006      	beq.n	80054d0 <USBD_StdDevReq+0x1a>
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d004      	beq.n	80054d0 <USBD_StdDevReq+0x1a>
 80054c6:	b143      	cbz	r3, 80054da <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 80054c8:	f7ff fe3c 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80054cc:	2000      	movs	r0, #0
    break;
 80054ce:	e003      	b.n	80054d8 <USBD_StdDevReq+0x22>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054d0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	4798      	blx	r3
}
 80054d8:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 80054da:	784b      	ldrb	r3, [r1, #1]
 80054dc:	2b09      	cmp	r3, #9
 80054de:	d821      	bhi.n	8005524 <USBD_StdDevReq+0x6e>
 80054e0:	e8df f003 	tbb	[pc, r3]
 80054e4:	18201c14 	.word	0x18201c14
 80054e8:	20050920 	.word	0x20050920
 80054ec:	0d10      	.short	0x0d10
      USBD_GetDescriptor(pdev, req);
 80054ee:	f7ff fe33 	bl	8005158 <USBD_GetDescriptor>
  USBD_StatusTypeDef ret = USBD_OK;
 80054f2:	2000      	movs	r0, #0
      break;
 80054f4:	e7f0      	b.n	80054d8 <USBD_StdDevReq+0x22>
      USBD_SetAddress(pdev, req);
 80054f6:	f7ff ff05 	bl	8005304 <USBD_SetAddress>
  USBD_StatusTypeDef ret = USBD_OK;
 80054fa:	2000      	movs	r0, #0
      break;
 80054fc:	e7ec      	b.n	80054d8 <USBD_StdDevReq+0x22>
      ret = USBD_SetConfig(pdev, req);
 80054fe:	f7ff ff29 	bl	8005354 <USBD_SetConfig>
      break;
 8005502:	e7e9      	b.n	80054d8 <USBD_StdDevReq+0x22>
      USBD_GetConfig(pdev, req);
 8005504:	f7ff ff8a 	bl	800541c <USBD_GetConfig>
  USBD_StatusTypeDef ret = USBD_OK;
 8005508:	2000      	movs	r0, #0
      break;
 800550a:	e7e5      	b.n	80054d8 <USBD_StdDevReq+0x22>
      USBD_GetStatus(pdev, req);
 800550c:	f7ff ffa4 	bl	8005458 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005510:	2000      	movs	r0, #0
      break;
 8005512:	e7e1      	b.n	80054d8 <USBD_StdDevReq+0x22>
      USBD_SetFeature(pdev, req);
 8005514:	f7ff fdf8 	bl	8005108 <USBD_SetFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 8005518:	2000      	movs	r0, #0
      break;
 800551a:	e7dd      	b.n	80054d8 <USBD_StdDevReq+0x22>
      USBD_ClrFeature(pdev, req);
 800551c:	f7ff ffb8 	bl	8005490 <USBD_ClrFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 8005520:	2000      	movs	r0, #0
      break;
 8005522:	e7d9      	b.n	80054d8 <USBD_StdDevReq+0x22>
      USBD_CtlError(pdev, req);
 8005524:	f7ff fe0e 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005528:	2000      	movs	r0, #0
      break;
 800552a:	e7d5      	b.n	80054d8 <USBD_StdDevReq+0x22>

0800552c <USBD_StdItfReq>:
{
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	4605      	mov	r5, r0
 8005530:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005532:	780b      	ldrb	r3, [r1, #0]
 8005534:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005538:	2b20      	cmp	r3, #32
 800553a:	d007      	beq.n	800554c <USBD_StdItfReq+0x20>
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d005      	beq.n	800554c <USBD_StdItfReq+0x20>
 8005540:	b123      	cbz	r3, 800554c <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 8005542:	f7ff fdff 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005546:	2600      	movs	r6, #0
}
 8005548:	4630      	mov	r0, r6
 800554a:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 800554c:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8005550:	3b01      	subs	r3, #1
 8005552:	2b02      	cmp	r3, #2
 8005554:	d818      	bhi.n	8005588 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005556:	7923      	ldrb	r3, [r4, #4]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d80f      	bhi.n	800557c <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800555c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	4621      	mov	r1, r4
 8005564:	4628      	mov	r0, r5
 8005566:	4798      	blx	r3
 8005568:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800556a:	88e3      	ldrh	r3, [r4, #6]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1eb      	bne.n	8005548 <USBD_StdItfReq+0x1c>
 8005570:	2800      	cmp	r0, #0
 8005572:	d1e9      	bne.n	8005548 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8005574:	4628      	mov	r0, r5
 8005576:	f000 f96d 	bl	8005854 <USBD_CtlSendStatus>
 800557a:	e7e5      	b.n	8005548 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 800557c:	4621      	mov	r1, r4
 800557e:	4628      	mov	r0, r5
 8005580:	f7ff fde0 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005584:	2600      	movs	r6, #0
 8005586:	e7df      	b.n	8005548 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8005588:	4621      	mov	r1, r4
 800558a:	4628      	mov	r0, r5
 800558c:	f7ff fdda 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005590:	2600      	movs	r6, #0
      break;
 8005592:	e7d9      	b.n	8005548 <USBD_StdItfReq+0x1c>

08005594 <USBD_StdEPReq>:
{
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4605      	mov	r5, r0
 8005598:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800559a:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800559c:	780b      	ldrb	r3, [r1, #0]
 800559e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d008      	beq.n	80055b8 <USBD_StdEPReq+0x24>
 80055a6:	b2d1      	uxtb	r1, r2
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d005      	beq.n	80055b8 <USBD_StdEPReq+0x24>
 80055ac:	b15b      	cbz	r3, 80055c6 <USBD_StdEPReq+0x32>
    USBD_CtlError(pdev, req);
 80055ae:	4621      	mov	r1, r4
 80055b0:	f7ff fdc8 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80055b4:	2000      	movs	r0, #0
    break;
 80055b6:	e005      	b.n	80055c4 <USBD_StdEPReq+0x30>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055b8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	4621      	mov	r1, r4
 80055c0:	4628      	mov	r0, r5
 80055c2:	4798      	blx	r3
}
 80055c4:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 80055c6:	7863      	ldrb	r3, [r4, #1]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d038      	beq.n	800563e <USBD_StdEPReq+0xaa>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d06b      	beq.n	80056a8 <USBD_StdEPReq+0x114>
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	f040 80f0 	bne.w	80057b6 <USBD_StdEPReq+0x222>
      switch (pdev->dev_state)
 80055d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d006      	beq.n	80055ec <USBD_StdEPReq+0x58>
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d019      	beq.n	8005616 <USBD_StdEPReq+0x82>
        USBD_CtlError(pdev, req);
 80055e2:	4621      	mov	r1, r4
 80055e4:	f7ff fdae 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80055e8:	2000      	movs	r0, #0
        break;
 80055ea:	e7eb      	b.n	80055c4 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055ec:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 80055f0:	bf18      	it	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2900      	cmp	r1, #0
 80055f6:	bf08      	it	eq
 80055f8:	2300      	moveq	r3, #0
 80055fa:	b13b      	cbz	r3, 800560c <USBD_StdEPReq+0x78>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80055fc:	f001 f87e 	bl	80066fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005600:	2180      	movs	r1, #128	; 0x80
 8005602:	4628      	mov	r0, r5
 8005604:	f001 f87a 	bl	80066fc <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8005608:	2000      	movs	r0, #0
 800560a:	e7db      	b.n	80055c4 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 800560c:	4621      	mov	r1, r4
 800560e:	f7ff fd99 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005612:	2000      	movs	r0, #0
 8005614:	e7d6      	b.n	80055c4 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005616:	8863      	ldrh	r3, [r4, #2]
 8005618:	b94b      	cbnz	r3, 800562e <USBD_StdEPReq+0x9a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800561a:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800561e:	bf18      	it	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2900      	cmp	r1, #0
 8005624:	bf08      	it	eq
 8005626:	2300      	moveq	r3, #0
 8005628:	b10b      	cbz	r3, 800562e <USBD_StdEPReq+0x9a>
 800562a:	88e3      	ldrh	r3, [r4, #6]
 800562c:	b123      	cbz	r3, 8005638 <USBD_StdEPReq+0xa4>
        (void)USBD_CtlSendStatus(pdev);
 800562e:	4628      	mov	r0, r5
 8005630:	f000 f910 	bl	8005854 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005634:	2000      	movs	r0, #0
        break;
 8005636:	e7c5      	b.n	80055c4 <USBD_StdEPReq+0x30>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005638:	f001 f860 	bl	80066fc <USBD_LL_StallEP>
 800563c:	e7f7      	b.n	800562e <USBD_StdEPReq+0x9a>
      switch (pdev->dev_state)
 800563e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005642:	2b02      	cmp	r3, #2
 8005644:	d006      	beq.n	8005654 <USBD_StdEPReq+0xc0>
 8005646:	2b03      	cmp	r3, #3
 8005648:	d019      	beq.n	800567e <USBD_StdEPReq+0xea>
        USBD_CtlError(pdev, req);
 800564a:	4621      	mov	r1, r4
 800564c:	f7ff fd7a 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005650:	2000      	movs	r0, #0
        break;
 8005652:	e7b7      	b.n	80055c4 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005654:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8005658:	bf18      	it	ne
 800565a:	2301      	movne	r3, #1
 800565c:	2900      	cmp	r1, #0
 800565e:	bf08      	it	eq
 8005660:	2300      	moveq	r3, #0
 8005662:	b13b      	cbz	r3, 8005674 <USBD_StdEPReq+0xe0>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005664:	f001 f84a 	bl	80066fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005668:	2180      	movs	r1, #128	; 0x80
 800566a:	4628      	mov	r0, r5
 800566c:	f001 f846 	bl	80066fc <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8005670:	2000      	movs	r0, #0
 8005672:	e7a7      	b.n	80055c4 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 8005674:	4621      	mov	r1, r4
 8005676:	f7ff fd65 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800567a:	2000      	movs	r0, #0
 800567c:	e7a2      	b.n	80055c4 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800567e:	8863      	ldrh	r3, [r4, #2]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f040 809d 	bne.w	80057c0 <USBD_StdEPReq+0x22c>
          if ((ep_addr & 0x7FU) != 0x00U)
 8005686:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800568a:	d10a      	bne.n	80056a2 <USBD_StdEPReq+0x10e>
          (void)USBD_CtlSendStatus(pdev);
 800568c:	4628      	mov	r0, r5
 800568e:	f000 f8e1 	bl	8005854 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005692:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	4621      	mov	r1, r4
 800569a:	4628      	mov	r0, r5
 800569c:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800569e:	2000      	movs	r0, #0
 80056a0:	e790      	b.n	80055c4 <USBD_StdEPReq+0x30>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80056a2:	f001 f833 	bl	800670c <USBD_LL_ClearStallEP>
 80056a6:	e7f1      	b.n	800568c <USBD_StdEPReq+0xf8>
      switch (pdev->dev_state)
 80056a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d006      	beq.n	80056be <USBD_StdEPReq+0x12a>
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d02f      	beq.n	8005714 <USBD_StdEPReq+0x180>
        USBD_CtlError(pdev, req);
 80056b4:	4621      	mov	r1, r4
 80056b6:	f7ff fd45 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80056ba:	2000      	movs	r0, #0
        break;
 80056bc:	e782      	b.n	80055c4 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056be:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 80056c2:	bf18      	it	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2900      	cmp	r1, #0
 80056c8:	bf08      	it	eq
 80056ca:	2300      	moveq	r3, #0
 80056cc:	b99b      	cbnz	r3, 80056f6 <USBD_StdEPReq+0x162>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80056d2:	d115      	bne.n	8005700 <USBD_StdEPReq+0x16c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80056d4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056d8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80056dc:	008b      	lsls	r3, r1, #2
 80056de:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 80056e2:	4401      	add	r1, r0
 80056e4:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 80056e6:	2400      	movs	r4, #0
 80056e8:	600c      	str	r4, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80056ea:	2202      	movs	r2, #2
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 f885 	bl	80057fc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80056f2:	4620      	mov	r0, r4
        break;
 80056f4:	e766      	b.n	80055c4 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 80056f6:	4621      	mov	r1, r4
 80056f8:	f7ff fd24 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80056fc:	2000      	movs	r0, #0
          break;
 80056fe:	e761      	b.n	80055c4 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005700:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005704:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005708:	008b      	lsls	r3, r1, #2
 800570a:	f103 0110 	add.w	r1, r3, #16
 800570e:	4401      	add	r1, r0
 8005710:	3104      	adds	r1, #4
 8005712:	e7e8      	b.n	80056e6 <USBD_StdEPReq+0x152>
        if ((ep_addr & 0x80U) == 0x80U)
 8005714:	b252      	sxtb	r2, r2
 8005716:	2a00      	cmp	r2, #0
 8005718:	db24      	blt.n	8005764 <USBD_StdEPReq+0x1d0>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800571a:	f001 030f 	and.w	r3, r1, #15
 800571e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005722:	0098      	lsls	r0, r3, #2
 8005724:	4428      	add	r0, r5
 8005726:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 800572a:	b353      	cbz	r3, 8005782 <USBD_StdEPReq+0x1ee>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800572c:	2a00      	cmp	r2, #0
 800572e:	db2e      	blt.n	800578e <USBD_StdEPReq+0x1fa>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005730:	f001 027f 	and.w	r2, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005734:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005738:	0093      	lsls	r3, r2, #2
 800573a:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800573e:	442c      	add	r4, r5
 8005740:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005742:	2980      	cmp	r1, #128	; 0x80
 8005744:	bf14      	ite	ne
 8005746:	2300      	movne	r3, #0
 8005748:	2301      	moveq	r3, #1
 800574a:	2900      	cmp	r1, #0
 800574c:	bf08      	it	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	b33b      	cbz	r3, 80057a2 <USBD_StdEPReq+0x20e>
            pep->status = 0x0000U;
 8005752:	2300      	movs	r3, #0
 8005754:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005756:	2202      	movs	r2, #2
 8005758:	4621      	mov	r1, r4
 800575a:	4628      	mov	r0, r5
 800575c:	f000 f84e 	bl	80057fc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005760:	2000      	movs	r0, #0
          break;
 8005762:	e72f      	b.n	80055c4 <USBD_StdEPReq+0x30>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005764:	f001 030f 	and.w	r3, r1, #15
 8005768:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800576c:	0098      	lsls	r0, r3, #2
 800576e:	4428      	add	r0, r5
 8005770:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1da      	bne.n	800572c <USBD_StdEPReq+0x198>
            USBD_CtlError(pdev, req);
 8005776:	4621      	mov	r1, r4
 8005778:	4628      	mov	r0, r5
 800577a:	f7ff fce3 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800577e:	2000      	movs	r0, #0
            break;
 8005780:	e720      	b.n	80055c4 <USBD_StdEPReq+0x30>
            USBD_CtlError(pdev, req);
 8005782:	4621      	mov	r1, r4
 8005784:	4628      	mov	r0, r5
 8005786:	f7ff fcdd 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800578a:	2000      	movs	r0, #0
            break;
 800578c:	e71a      	b.n	80055c4 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800578e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8005792:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005796:	0093      	lsls	r3, r2, #2
 8005798:	f103 0410 	add.w	r4, r3, #16
 800579c:	442c      	add	r4, r5
 800579e:	3404      	adds	r4, #4
 80057a0:	e7cf      	b.n	8005742 <USBD_StdEPReq+0x1ae>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 ff36 	bl	8006614 <USBD_LL_IsStallEP>
 80057a8:	b110      	cbz	r0, 80057b0 <USBD_StdEPReq+0x21c>
            pep->status = 0x0001U;
 80057aa:	2301      	movs	r3, #1
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	e7d2      	b.n	8005756 <USBD_StdEPReq+0x1c2>
            pep->status = 0x0000U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	e7cf      	b.n	8005756 <USBD_StdEPReq+0x1c2>
      USBD_CtlError(pdev, req);
 80057b6:	4621      	mov	r1, r4
 80057b8:	f7ff fcc4 	bl	8005144 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80057bc:	2000      	movs	r0, #0
      break;
 80057be:	e701      	b.n	80055c4 <USBD_StdEPReq+0x30>
  USBD_StatusTypeDef ret = USBD_OK;
 80057c0:	2000      	movs	r0, #0
 80057c2:	e6ff      	b.n	80055c4 <USBD_StdEPReq+0x30>

080057c4 <USBD_GetString>:
  if (desc == NULL)
 80057c4:	b1c8      	cbz	r0, 80057fa <USBD_GetString+0x36>
{
 80057c6:	b570      	push	{r4, r5, r6, lr}
 80057c8:	460d      	mov	r5, r1
 80057ca:	4616      	mov	r6, r2
 80057cc:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80057ce:	f7ff fc91 	bl	80050f4 <USBD_GetLen>
 80057d2:	3001      	adds	r0, #1
 80057d4:	0040      	lsls	r0, r0, #1
 80057d6:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 80057d8:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80057da:	2303      	movs	r3, #3
 80057dc:	706b      	strb	r3, [r5, #1]
  idx++;
 80057de:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80057e0:	e007      	b.n	80057f2 <USBD_GetString+0x2e>
    unicode[idx] = *pdesc;
 80057e2:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 80057e4:	3401      	adds	r4, #1
    idx++;
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 80057ea:	2100      	movs	r1, #0
 80057ec:	54a9      	strb	r1, [r5, r2]
    idx++;
 80057ee:	3302      	adds	r3, #2
 80057f0:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80057f2:	7822      	ldrb	r2, [r4, #0]
 80057f4:	2a00      	cmp	r2, #0
 80057f6:	d1f4      	bne.n	80057e2 <USBD_GetString+0x1e>
}
 80057f8:	bd70      	pop	{r4, r5, r6, pc}
 80057fa:	4770      	bx	lr

080057fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80057fc:	b510      	push	{r4, lr}
 80057fe:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005800:	2202      	movs	r2, #2
 8005802:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005806:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8005808:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800580a:	460a      	mov	r2, r1
 800580c:	2100      	movs	r1, #0
 800580e:	f000 ff8d 	bl	800672c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005812:	2000      	movs	r0, #0
 8005814:	bd10      	pop	{r4, pc}

08005816 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005816:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005818:	4613      	mov	r3, r2
 800581a:	460a      	mov	r2, r1
 800581c:	2100      	movs	r1, #0
 800581e:	f000 ff85 	bl	800672c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005822:	2000      	movs	r0, #0
 8005824:	bd08      	pop	{r3, pc}

08005826 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005826:	b510      	push	{r4, lr}
 8005828:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800582a:	2203      	movs	r2, #3
 800582c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005830:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005834:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005838:	460a      	mov	r2, r1
 800583a:	2100      	movs	r1, #0
 800583c:	f000 ff7e 	bl	800673c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005840:	2000      	movs	r0, #0
 8005842:	bd10      	pop	{r4, pc}

08005844 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005844:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005846:	4613      	mov	r3, r2
 8005848:	460a      	mov	r2, r1
 800584a:	2100      	movs	r1, #0
 800584c:	f000 ff76 	bl	800673c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005850:	2000      	movs	r0, #0
 8005852:	bd08      	pop	{r3, pc}

08005854 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005854:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005856:	2304      	movs	r3, #4
 8005858:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800585c:	2300      	movs	r3, #0
 800585e:	461a      	mov	r2, r3
 8005860:	4619      	mov	r1, r3
 8005862:	f000 ff63 	bl	800672c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005866:	2000      	movs	r0, #0
 8005868:	bd08      	pop	{r3, pc}

0800586a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800586a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800586c:	2305      	movs	r3, #5
 800586e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005872:	2300      	movs	r3, #0
 8005874:	461a      	mov	r2, r3
 8005876:	4619      	mov	r1, r3
 8005878:	f000 ff60 	bl	800673c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800587c:	2000      	movs	r0, #0
 800587e:	bd08      	pop	{r3, pc}

08005880 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8005880:	b508      	push	{r3, lr}
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8005882:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
 8005886:	4803      	ldr	r0, [pc, #12]	; (8005894 <GUI_X_Config+0x14>)
 8005888:	f003 fc60 	bl	800914c <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 800588c:	4802      	ldr	r0, [pc, #8]	; (8005898 <GUI_X_Config+0x18>)
 800588e:	f002 ffcf 	bl	8008830 <GUI_SetDefaultFont>
}
 8005892:	bd08      	pop	{r3, pc}
 8005894:	20000258 	.word	0x20000258
 8005898:	080104c4 	.word	0x080104c4

0800589c <GUI_X_GetTime>:
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
  return OS_TimeMS; 
 800589c:	4b01      	ldr	r3, [pc, #4]	; (80058a4 <GUI_X_GetTime+0x8>)
 800589e:	6818      	ldr	r0, [r3, #0]
}
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20019574 	.word	0x20019574

080058a8 <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
  int tEnd = OS_TimeMS + ms;
 80058a8:	4b04      	ldr	r3, [pc, #16]	; (80058bc <GUI_X_Delay+0x14>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4418      	add	r0, r3
  while ((tEnd - OS_TimeMS) > 0);
 80058ae:	4b03      	ldr	r3, [pc, #12]	; (80058bc <GUI_X_Delay+0x14>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	1ac3      	subs	r3, r0, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dcfa      	bgt.n	80058ae <GUI_X_Delay+0x6>
}
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20019574 	.word	0x20019574

080058c0 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 80058c0:	4770      	bx	lr

080058c2 <GUI_TOUCH_X_ActivateX>:



void GUI_TOUCH_X_ActivateX(void)
{
}
 80058c2:	4770      	bx	lr

080058c4 <GUI_TOUCH_X_ActivateY>:
void GUI_TOUCH_X_ActivateY(void)
{
}
 80058c4:	4770      	bx	lr

080058c6 <GUI_TOUCH_X_MeasureX>:
int  GUI_TOUCH_X_MeasureX(void)
{
 80058c6:	b508      	push	{r3, lr}
  return STMPE610_GetX_TOUCH_RAW();
 80058c8:	f7fb fd4c 	bl	8001364 <STMPE610_GetX_TOUCH_RAW>
}
 80058cc:	bd08      	pop	{r3, pc}

080058ce <GUI_TOUCH_X_MeasureY>:
int  GUI_TOUCH_X_MeasureY(void)
{
 80058ce:	b508      	push	{r3, lr}
  return STMPE610_GetY_TOUCH_RAW();
 80058d0:	f7fb fd4e 	bl	8001370 <STMPE610_GetY_TOUCH_RAW>
}
 80058d4:	bd08      	pop	{r3, pc}
	...

080058d8 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 80058d8:	b530      	push	{r4, r5, lr}
 80058da:	b0a3      	sub	sp, #140	; 0x8c
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 80058dc:	2400      	movs	r4, #0
 80058de:	941d      	str	r4, [sp, #116]	; 0x74
 80058e0:	941e      	str	r4, [sp, #120]	; 0x78
 80058e2:	941f      	str	r4, [sp, #124]	; 0x7c
 80058e4:	9420      	str	r4, [sp, #128]	; 0x80
 80058e6:	9421      	str	r4, [sp, #132]	; 0x84
  GUI_PORT_API PortAPI = {0};
 80058e8:	2268      	movs	r2, #104	; 0x68
 80058ea:	4621      	mov	r1, r4
 80058ec:	a803      	add	r0, sp, #12
 80058ee:	f00a fc88 	bl	8010202 <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 80058f2:	4623      	mov	r3, r4
 80058f4:	4622      	mov	r2, r4
 80058f6:	491d      	ldr	r1, [pc, #116]	; (800596c <LCD_X_Config+0x94>)
 80058f8:	481d      	ldr	r0, [pc, #116]	; (8005970 <LCD_X_Config+0x98>)
 80058fa:	f002 ff2f 	bl	800875c <GUI_DEVICE_CreateAndLink>
 80058fe:	4605      	mov	r5, r0
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8005900:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005904:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005908:	4620      	mov	r0, r4
 800590a:	f002 f887 	bl	8007a1c <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS);
 800590e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005912:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005916:	4620      	mov	r0, r4
 8005918:	f002 f868 	bl	80079ec <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = 0;
 800591c:	941f      	str	r4, [sp, #124]	; 0x7c
  GUIDRV_FlexColor_Config(pDevice, &Config);
 800591e:	a91d      	add	r1, sp, #116	; 0x74
 8005920:	4628      	mov	r0, r5
 8005922:	f002 f82c 	bl	800797e <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite16_A0  = SSD1963_WriteCommand;
 8005926:	4b13      	ldr	r3, [pc, #76]	; (8005974 <LCD_X_Config+0x9c>)
 8005928:	930b      	str	r3, [sp, #44]	; 0x2c
  PortAPI.pfWrite16_A1  = SSD1963_WriteData;
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <LCD_X_Config+0xa0>)
 800592c:	930c      	str	r3, [sp, #48]	; 0x30
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 800592e:	4b13      	ldr	r3, [pc, #76]	; (800597c <LCD_X_Config+0xa4>)
 8005930:	930e      	str	r3, [sp, #56]	; 0x38
 // PortAPI.pfReadM16_A1  = SSD1963_ReadData;
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 8005932:	4b13      	ldr	r3, [pc, #76]	; (8005980 <LCD_X_Config+0xa8>)
 8005934:	4a13      	ldr	r2, [pc, #76]	; (8005984 <LCD_X_Config+0xac>)
 8005936:	a903      	add	r1, sp, #12
 8005938:	4628      	mov	r0, r5
 800593a:	f002 f83e 	bl	80079ba <GUIDRV_FlexColor_SetFunc>

  GUI_TOUCH_Calibrate(GUI_COORD_X, 0, 480, GUI_TOUCH_AD_LEFT , GUI_TOUCH_AD_RIGHT);
 800593e:	f640 7374 	movw	r3, #3956	; 0xf74
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	2392      	movs	r3, #146	; 0x92
 8005946:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800594a:	4621      	mov	r1, r4
 800594c:	4620      	mov	r0, r4
 800594e:	f002 f931 	bl	8007bb4 <GUI_TOUCH_Calibrate>
  GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, 272, GUI_TOUCH_AD_TOP, GUI_TOUCH_AD_BOTTOM);
 8005952:	f640 7303 	movw	r3, #3843	; 0xf03
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800595c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005960:	4621      	mov	r1, r4
 8005962:	2001      	movs	r0, #1
 8005964:	f002 f926 	bl	8007bb4 <GUI_TOUCH_Calibrate>

}
 8005968:	b023      	add	sp, #140	; 0x8c
 800596a:	bd30      	pop	{r4, r5, pc}
 800596c:	080134bc 	.word	0x080134bc
 8005970:	08013480 	.word	0x08013480
 8005974:	08000e85 	.word	0x08000e85
 8005978:	08000edd 	.word	0x08000edd
 800597c:	08000f35 	.word	0x08000f35
 8005980:	08007385 	.word	0x08007385
 8005984:	08006ce9 	.word	0x08006ce9

08005988 <LCD_X_DisplayDriver>:
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 8005988:	2901      	cmp	r1, #1
 800598a:	d106      	bne.n	800599a <LCD_X_DisplayDriver+0x12>
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 800598c:	b508      	push	{r3, lr}
    // display controller and put it into operation. If the display
    // controller is not initialized by any external routine this needs
    // to be adapted by the customer...
    //
    // ...
	  SSD1963_Init();
 800598e:	f7fb fadd 	bl	8000f4c <SSD1963_Init>
	  STMPE610_Init();
 8005992:	f7fb fc01 	bl	8001198 <STMPE610_Init>
    return 0;
 8005996:	2000      	movs	r0, #0
  }
  default:
    r = -1;
  }
  return r;
}
 8005998:	bd08      	pop	{r3, pc}
  return r;
 800599a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800599e:	4770      	bx	lr

080059a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80059a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a4:	2400      	movs	r4, #0
 80059a6:	9405      	str	r4, [sp, #20]
 80059a8:	9406      	str	r4, [sp, #24]
 80059aa:	9407      	str	r4, [sp, #28]
 80059ac:	9408      	str	r4, [sp, #32]
 80059ae:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80059b0:	4b23      	ldr	r3, [pc, #140]	; (8005a40 <MX_GPIO_Init+0xa0>)
 80059b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
 80059ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80059c0:	9201      	str	r2, [sp, #4]
 80059c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
 80059cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ce:	f002 0201 	and.w	r2, r2, #1
 80059d2:	9202      	str	r2, [sp, #8]
 80059d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80059d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
 80059de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80059e4:	9203      	str	r2, [sp, #12]
 80059e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ea:	f042 0202 	orr.w	r2, r2, #2
 80059ee:	631a      	str	r2, [r3, #48]	; 0x30
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 80059fa:	4f12      	ldr	r7, [pc, #72]	; (8005a44 <MX_GPIO_Init+0xa4>)
 80059fc:	4622      	mov	r2, r4
 80059fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a02:	4638      	mov	r0, r7
 8005a04:	f7fb fe72 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8005a08:	4d0f      	ldr	r5, [pc, #60]	; (8005a48 <MX_GPIO_Init+0xa8>)
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	2118      	movs	r1, #24
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f7fb fe6c 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005a14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a18:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a1a:	2601      	movs	r6, #1
 8005a1c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a20:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a22:	a905      	add	r1, sp, #20
 8005a24:	4638      	mov	r0, r7
 8005a26:	f7fb fd6d 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005a2a:	2318      	movs	r3, #24
 8005a2c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a2e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a30:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a32:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a34:	a905      	add	r1, sp, #20
 8005a36:	4628      	mov	r0, r5
 8005a38:	f7fb fd64 	bl	8001504 <HAL_GPIO_Init>

}
 8005a3c:	b00b      	add	sp, #44	; 0x2c
 8005a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a40:	40023800 	.word	0x40023800
 8005a44:	40021800 	.word	0x40021800
 8005a48:	40020400 	.word	0x40020400

08005a4c <MX_I2C1_Init>:
{
 8005a4c:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 8005a4e:	4c0d      	ldr	r4, [pc, #52]	; (8005a84 <MX_I2C1_Init+0x38>)
 8005a50:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <MX_I2C1_Init+0x3c>)
 8005a52:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8005a54:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <MX_I2C1_Init+0x40>)
 8005a56:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005a58:	2500      	movs	r5, #0
 8005a5a:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a60:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005a62:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a64:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a66:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a68:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7fb ffda 	bl	8001a24 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a70:	4629      	mov	r1, r5
 8005a72:	4620      	mov	r0, r4
 8005a74:	f7fc f9b0 	bl	8001dd8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7fc f9da 	bl	8001e34 <HAL_I2CEx_ConfigDigitalFilter>
}
 8005a80:	bd38      	pop	{r3, r4, r5, pc}
 8005a82:	bf00      	nop
 8005a84:	200195c4 	.word	0x200195c4
 8005a88:	40005400 	.word	0x40005400
 8005a8c:	20303e5d 	.word	0x20303e5d

08005a90 <MX_TIM4_Init>:
{
 8005a90:	b530      	push	{r4, r5, lr}
 8005a92:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a94:	2400      	movs	r4, #0
 8005a96:	940a      	str	r4, [sp, #40]	; 0x28
 8005a98:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a9a:	940c      	str	r4, [sp, #48]	; 0x30
 8005a9c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a9e:	9407      	str	r4, [sp, #28]
 8005aa0:	9408      	str	r4, [sp, #32]
 8005aa2:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005aa4:	9400      	str	r4, [sp, #0]
 8005aa6:	9401      	str	r4, [sp, #4]
 8005aa8:	9402      	str	r4, [sp, #8]
 8005aaa:	9403      	str	r4, [sp, #12]
 8005aac:	9404      	str	r4, [sp, #16]
 8005aae:	9405      	str	r4, [sp, #20]
 8005ab0:	9406      	str	r4, [sp, #24]
  htim4.Instance = TIM4;
 8005ab2:	4d16      	ldr	r5, [pc, #88]	; (8005b0c <MX_TIM4_Init+0x7c>)
 8005ab4:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <MX_TIM4_Init+0x80>)
 8005ab6:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 25;
 8005ab8:	2319      	movs	r3, #25
 8005aba:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005abc:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 9600;
 8005abe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005ac2:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ac4:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ac6:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f7fd ff87 	bl	80039dc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ad2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005ad4:	a90a      	add	r1, sp, #40	; 0x28
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f7fe f8c0 	bl	8003c5c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005adc:	4628      	mov	r0, r5
 8005ade:	f7fd ffac 	bl	8003a3a <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ae2:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ae4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005ae6:	a907      	add	r1, sp, #28
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f7fe f9f1 	bl	8003ed0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005aee:	2360      	movs	r3, #96	; 0x60
 8005af0:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8005af2:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005af4:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005af6:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005af8:	2208      	movs	r2, #8
 8005afa:	4669      	mov	r1, sp
 8005afc:	4628      	mov	r0, r5
 8005afe:	f7fe f803 	bl	8003b08 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 fb60 	bl	80061c8 <HAL_TIM_MspPostInit>
}
 8005b08:	b00f      	add	sp, #60	; 0x3c
 8005b0a:	bd30      	pop	{r4, r5, pc}
 8005b0c:	20019578 	.word	0x20019578
 8005b10:	40000800 	.word	0x40000800

08005b14 <set_buzzer>:
void set_buzzer(uint16_t frekvencija, uint8_t faktor_ispune){
 8005b14:	b410      	push	{r4}
	__HAL_TIM_SetAutoreload(&htim4, 3840000/frekvencija); //set frequency
 8005b16:	4c05      	ldr	r4, [pc, #20]	; (8005b2c <set_buzzer+0x18>)
 8005b18:	6822      	ldr	r2, [r4, #0]
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <set_buzzer+0x1c>)
 8005b1c:	fb93 f0f0 	sdiv	r0, r3, r0
 8005b20:	62d0      	str	r0, [r2, #44]	; 0x2c
 8005b22:	60e0      	str	r0, [r4, #12]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, faktor_ispune); //set volume
 8005b24:	63d1      	str	r1, [r2, #60]	; 0x3c
}
 8005b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20019578 	.word	0x20019578
 8005b30:	003a9800 	.word	0x003a9800

08005b34 <HAL_SYSTICK_Callback>:
	OS_TimeMS++;
 8005b34:	4a02      	ldr	r2, [pc, #8]	; (8005b40 <HAL_SYSTICK_Callback+0xc>)
 8005b36:	6813      	ldr	r3, [r2, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	6013      	str	r3, [r2, #0]
}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20019574 	.word	0x20019574

08005b44 <DrawNoteText>:
void DrawNoteText(int x, int y, int width, int height, const char *note) {
 8005b44:	b538      	push	{r3, r4, r5, lr}
    int textX = x + width / 2 - 10 + 3; // Centriranje teksta na sredinu bele tipke
 8005b46:	4614      	mov	r4, r2
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	db15      	blt.n	8005b78 <DrawNoteText+0x34>
 8005b4c:	eb00 0064 	add.w	r0, r0, r4, asr #1
 8005b50:	1fc4      	subs	r4, r0, #7
    int textY = y + height - 30; // Pomeranje teksta prema dnu bele tipke
 8005b52:	4419      	add	r1, r3
 8005b54:	f1a1 051e 	sub.w	r5, r1, #30
    GUI_SetBkColor(GUI_WHITE);
 8005b58:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005b5c:	f002 fbec 	bl	8008338 <GUI_SetBkColor>
    GUI_SetColor(GUI_BLACK);
 8005b60:	2000      	movs	r0, #0
 8005b62:	f002 fbeb 	bl	800833c <GUI_SetColor>
    GUI_SetFont(&GUI_Font16B_ASCII); // Podešavanje veličine fonta po potrebi
 8005b66:	4805      	ldr	r0, [pc, #20]	; (8005b7c <DrawNoteText+0x38>)
 8005b68:	f002 fbdc 	bl	8008324 <GUI_SetFont>
    GUI_DispStringAt(note, textX, textY);
 8005b6c:	462a      	mov	r2, r5
 8005b6e:	4621      	mov	r1, r4
 8005b70:	9804      	ldr	r0, [sp, #16]
 8005b72:	f002 fcdf 	bl	8008534 <GUI_DispStringAt>
}
 8005b76:	bd38      	pop	{r3, r4, r5, pc}
    int textX = x + width / 2 - 10 + 3; // Centriranje teksta na sredinu bele tipke
 8005b78:	1c54      	adds	r4, r2, #1
 8005b7a:	e7e7      	b.n	8005b4c <DrawNoteText+0x8>
 8005b7c:	08012a98 	.word	0x08012a98

08005b80 <DrawWhiteKey>:
void DrawWhiteKey(int x, int y, int width, int height) {
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	4604      	mov	r4, r0
 8005b84:	460d      	mov	r5, r1
 8005b86:	4616      	mov	r6, r2
 8005b88:	461f      	mov	r7, r3
    GUI_SetColor(GUI_BLACK);
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	f002 fbd6 	bl	800833c <GUI_SetColor>
    GUI_DrawRect(x, y, x + width, y + height);
 8005b90:	19eb      	adds	r3, r5, r7
 8005b92:	19a2      	adds	r2, r4, r6
 8005b94:	4629      	mov	r1, r5
 8005b96:	4620      	mov	r0, r4
 8005b98:	f003 fcfe 	bl	8009598 <GUI_DrawRect>
}
 8005b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b9e <DrawBlackKey>:
void DrawBlackKey(float x, int y, int width, int height) {
 8005b9e:	b538      	push	{r3, r4, r5, lr}
 8005ba0:	ed2d 8b02 	vpush	{d8}
 8005ba4:	eef0 8a40 	vmov.f32	s17, s0
 8005ba8:	4604      	mov	r4, r0
 8005baa:	ee08 1a10 	vmov	s16, r1
 8005bae:	4615      	mov	r5, r2
    GUI_SetColor(GUI_BLACK);
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f002 fbc3 	bl	800833c <GUI_SetColor>
    GUI_FillRect(x, y, x + width, y + height);
 8005bb6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8005bba:	ee38 8a28 	vadd.f32	s16, s16, s17
 8005bbe:	1963      	adds	r3, r4, r5
 8005bc0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005bc4:	ee17 2a90 	vmov	r2, s15
 8005bc8:	4621      	mov	r1, r4
 8005bca:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8005bce:	ee17 0a90 	vmov	r0, s15
 8005bd2:	f002 fc69 	bl	80084a8 <GUI_FillRect>
}
 8005bd6:	ecbd 8b02 	vpop	{d8}
 8005bda:	bd38      	pop	{r3, r4, r5, pc}

08005bdc <DrawPianoKeys>:
void DrawPianoKeys() {
 8005bdc:	b530      	push	{r4, r5, lr}
 8005bde:	ed2d 8b02 	vpush	{d8}
 8005be2:	b091      	sub	sp, #68	; 0x44
    GUI_Init();
 8005be4:	f002 fe96 	bl	8008914 <GUI_Init>
    GUI_SetBkColor(GUI_WHITE);
 8005be8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005bec:	f002 fba4 	bl	8008338 <GUI_SetBkColor>
    GUI_Clear();
 8005bf0:	f002 fe56 	bl	80088a0 <GUI_Clear>
    GUI_SetFont(&GUI_Font32_1);
 8005bf4:	482d      	ldr	r0, [pc, #180]	; (8005cac <DrawPianoKeys+0xd0>)
 8005bf6:	f002 fb95 	bl	8008324 <GUI_SetFont>
    GUI_SetColor(GUI_BLACK);
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f002 fb9e 	bl	800833c <GUI_SetColor>
    GUI_SetBkColor(GUI_WHITE);
 8005c00:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005c04:	f002 fb98 	bl	8008338 <GUI_SetBkColor>
    const char* noteNames[] = {"C4", "D4", "E4", "F4", "G4", "A4", "B4",
 8005c08:	ac02      	add	r4, sp, #8
 8005c0a:	4d29      	ldr	r5, [pc, #164]	; (8005cb0 <DrawPianoKeys+0xd4>)
 8005c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005c1c:	e884 0003 	stmia.w	r4, {r0, r1}
    for (int i = 0; i < 14; i ++) {
 8005c20:	2400      	movs	r4, #0
    float x = 2;
 8005c22:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
    for (int i = 0; i < 14; i ++) {
 8005c26:	e011      	b.n	8005c4c <DrawPianoKeys+0x70>
                DrawBlackKey(x + keyWidth - 9, y, 19, keyHeight / 2); //-9 kako bi presla crna tipka preko prve bele tipke
 8005c28:	eddf 7a22 	vldr	s15, [pc, #136]	; 8005cb4 <DrawPianoKeys+0xd8>
 8005c2c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005c30:	224b      	movs	r2, #75	; 0x4b
 8005c32:	2113      	movs	r1, #19
 8005c34:	2037      	movs	r0, #55	; 0x37
 8005c36:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8005c3a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005c3e:	f7ff ffae 	bl	8005b9e <DrawBlackKey>
    	    x += keyWidth + 1; // +1 za crnu liniju
 8005c42:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8005cb8 <DrawPianoKeys+0xdc>
 8005c46:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < 14; i ++) {
 8005c4a:	3401      	adds	r4, #1
 8005c4c:	2c0d      	cmp	r4, #13
 8005c4e:	dc27      	bgt.n	8005ca0 <DrawPianoKeys+0xc4>
    	    DrawWhiteKey(x, y, keyWidth, keyHeight);
 8005c50:	2396      	movs	r3, #150	; 0x96
 8005c52:	2221      	movs	r2, #33	; 0x21
 8005c54:	2137      	movs	r1, #55	; 0x37
 8005c56:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005c5a:	ee17 5a90 	vmov	r5, s15
 8005c5e:	ee17 0a90 	vmov	r0, s15
 8005c62:	f7ff ff8d 	bl	8005b80 <DrawWhiteKey>
    	    DrawNoteText(x, y, keyWidth, keyHeight, noteNames[i]);
 8005c66:	ab10      	add	r3, sp, #64	; 0x40
 8005c68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005c6c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	2396      	movs	r3, #150	; 0x96
 8005c74:	2221      	movs	r2, #33	; 0x21
 8005c76:	2137      	movs	r1, #55	; 0x37
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f7ff ff63 	bl	8005b44 <DrawNoteText>
            if (i == 0 || i == 1 || i == 3 || i == 4 || i == 5 || i == 7 || i == 8 || i == 10 || i == 11 || i == 12) {
 8005c7e:	2c03      	cmp	r4, #3
 8005c80:	bf18      	it	ne
 8005c82:	2c01      	cmpne	r4, #1
 8005c84:	d9d0      	bls.n	8005c28 <DrawPianoKeys+0x4c>
 8005c86:	1f22      	subs	r2, r4, #4
 8005c88:	2a01      	cmp	r2, #1
 8005c8a:	d9cd      	bls.n	8005c28 <DrawPianoKeys+0x4c>
 8005c8c:	1fe2      	subs	r2, r4, #7
 8005c8e:	2a01      	cmp	r2, #1
 8005c90:	d9ca      	bls.n	8005c28 <DrawPianoKeys+0x4c>
 8005c92:	f1a4 030a 	sub.w	r3, r4, #10
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d9c6      	bls.n	8005c28 <DrawPianoKeys+0x4c>
 8005c9a:	2c0c      	cmp	r4, #12
 8005c9c:	d1d1      	bne.n	8005c42 <DrawPianoKeys+0x66>
 8005c9e:	e7c3      	b.n	8005c28 <DrawPianoKeys+0x4c>
    GUI_Exec();
 8005ca0:	f002 fc3e 	bl	8008520 <GUI_Exec>
}
 8005ca4:	b011      	add	sp, #68	; 0x44
 8005ca6:	ecbd 8b02 	vpop	{d8}
 8005caa:	bd30      	pop	{r4, r5, pc}
 8005cac:	080122f4 	.word	0x080122f4
 8005cb0:	080103a0 	.word	0x080103a0
 8005cb4:	42040000 	.word	0x42040000
 8005cb8:	42080000 	.word	0x42080000

08005cbc <process_touch>:
void process_touch() {
 8005cbc:	b510      	push	{r4, lr}
    STMPE610_read_xyz();
 8005cbe:	f7fb fab3 	bl	8001228 <STMPE610_read_xyz>
    GUI_TOUCH_Exec();
 8005cc2:	f001 ffd5 	bl	8007c70 <GUI_TOUCH_Exec>
    keypressed = GUI_GetKey();
 8005cc6:	f002 fbc3 	bl	8008450 <GUI_GetKey>
 8005cca:	4bc5      	ldr	r3, [pc, #788]	; (8005fe0 <process_touch+0x324>)
 8005ccc:	8018      	strh	r0, [r3, #0]
    X_koordinata = STMPE610_GetX_TOUCH();
 8005cce:	f7fb faeb 	bl	80012a8 <STMPE610_GetX_TOUCH>
 8005cd2:	4cc4      	ldr	r4, [pc, #784]	; (8005fe4 <process_touch+0x328>)
 8005cd4:	8020      	strh	r0, [r4, #0]
    Y_koordinata = STMPE610_GetY_TOUCH();
 8005cd6:	f7fb fb17 	bl	8001308 <STMPE610_GetY_TOUCH>
 8005cda:	4bc3      	ldr	r3, [pc, #780]	; (8005fe8 <process_touch+0x32c>)
 8005cdc:	8018      	strh	r0, [r3, #0]
    if (X_koordinata > 2 && X_koordinata < 35 && Y_koordinata > 55 && Y_koordinata < 205) {
 8005cde:	8823      	ldrh	r3, [r4, #0]
 8005ce0:	1eda      	subs	r2, r3, #3
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	2a1f      	cmp	r2, #31
 8005ce6:	d804      	bhi.n	8005cf2 <process_touch+0x36>
 8005ce8:	2837      	cmp	r0, #55	; 0x37
 8005cea:	d902      	bls.n	8005cf2 <process_touch+0x36>
 8005cec:	28cc      	cmp	r0, #204	; 0xcc
 8005cee:	f240 80ef 	bls.w	8005ed0 <process_touch+0x214>
    else if (X_koordinata > 26 && X_koordinata < 45 && Y_koordinata > 55 && Y_koordinata < 130) {
 8005cf2:	f1a3 021b 	sub.w	r2, r3, #27
 8005cf6:	b292      	uxth	r2, r2
 8005cf8:	2a11      	cmp	r2, #17
 8005cfa:	d804      	bhi.n	8005d06 <process_touch+0x4a>
 8005cfc:	2837      	cmp	r0, #55	; 0x37
 8005cfe:	d902      	bls.n	8005d06 <process_touch+0x4a>
 8005d00:	2881      	cmp	r0, #129	; 0x81
 8005d02:	f240 80ee 	bls.w	8005ee2 <process_touch+0x226>
    else if (X_koordinata > 35 && X_koordinata < 68 && Y_koordinata > 55 && Y_koordinata < 205) {
 8005d06:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	2a1f      	cmp	r2, #31
 8005d0e:	d804      	bhi.n	8005d1a <process_touch+0x5e>
 8005d10:	2837      	cmp	r0, #55	; 0x37
 8005d12:	d902      	bls.n	8005d1a <process_touch+0x5e>
 8005d14:	28cc      	cmp	r0, #204	; 0xcc
 8005d16:	f240 80ed 	bls.w	8005ef4 <process_touch+0x238>
    else if (X_koordinata > 59 && X_koordinata < 78 && Y_koordinata > 55 && Y_koordinata < 130) {
 8005d1a:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8005d1e:	b292      	uxth	r2, r2
 8005d20:	2a11      	cmp	r2, #17
 8005d22:	d804      	bhi.n	8005d2e <process_touch+0x72>
 8005d24:	2837      	cmp	r0, #55	; 0x37
 8005d26:	d902      	bls.n	8005d2e <process_touch+0x72>
 8005d28:	2881      	cmp	r0, #129	; 0x81
 8005d2a:	f240 80ec 	bls.w	8005f06 <process_touch+0x24a>
    else if(X_koordinata > 68 && X_koordinata < 101 && Y_koordinata > 55 && Y_koordinata < 205){
 8005d2e:	f1a3 0245 	sub.w	r2, r3, #69	; 0x45
 8005d32:	b292      	uxth	r2, r2
 8005d34:	2a1f      	cmp	r2, #31
 8005d36:	d804      	bhi.n	8005d42 <process_touch+0x86>
 8005d38:	2837      	cmp	r0, #55	; 0x37
 8005d3a:	d902      	bls.n	8005d42 <process_touch+0x86>
 8005d3c:	28cc      	cmp	r0, #204	; 0xcc
 8005d3e:	f240 80eb 	bls.w	8005f18 <process_touch+0x25c>
    else if(X_koordinata > 101 && X_koordinata < 134 && Y_koordinata > 55 && Y_koordinata < 205){
 8005d42:	f1a3 0266 	sub.w	r2, r3, #102	; 0x66
 8005d46:	b292      	uxth	r2, r2
 8005d48:	2a1f      	cmp	r2, #31
 8005d4a:	d804      	bhi.n	8005d56 <process_touch+0x9a>
 8005d4c:	2837      	cmp	r0, #55	; 0x37
 8005d4e:	d902      	bls.n	8005d56 <process_touch+0x9a>
 8005d50:	28cc      	cmp	r0, #204	; 0xcc
 8005d52:	f240 80ea 	bls.w	8005f2a <process_touch+0x26e>
    else if (X_koordinata > 125 && X_koordinata < 144 && Y_koordinata > 55 && Y_koordinata < 130) {
 8005d56:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
 8005d5a:	b292      	uxth	r2, r2
 8005d5c:	2a11      	cmp	r2, #17
 8005d5e:	d804      	bhi.n	8005d6a <process_touch+0xae>
 8005d60:	2837      	cmp	r0, #55	; 0x37
 8005d62:	d902      	bls.n	8005d6a <process_touch+0xae>
 8005d64:	2881      	cmp	r0, #129	; 0x81
 8005d66:	f240 80e9 	bls.w	8005f3c <process_touch+0x280>
    else if (X_koordinata > 158 && X_koordinata < 177 && Y_koordinata > 55 && Y_koordinata < 130) {
 8005d6a:	f1a3 029f 	sub.w	r2, r3, #159	; 0x9f
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	2a11      	cmp	r2, #17
 8005d72:	d804      	bhi.n	8005d7e <process_touch+0xc2>
 8005d74:	2837      	cmp	r0, #55	; 0x37
 8005d76:	d902      	bls.n	8005d7e <process_touch+0xc2>
 8005d78:	2881      	cmp	r0, #129	; 0x81
 8005d7a:	f240 80e8 	bls.w	8005f4e <process_touch+0x292>
    else if(X_koordinata > 134 && X_koordinata < 167 && Y_koordinata > 55 && Y_koordinata < 205){
 8005d7e:	f1a3 0287 	sub.w	r2, r3, #135	; 0x87
 8005d82:	b292      	uxth	r2, r2
 8005d84:	2a1f      	cmp	r2, #31
 8005d86:	d804      	bhi.n	8005d92 <process_touch+0xd6>
 8005d88:	2837      	cmp	r0, #55	; 0x37
 8005d8a:	d902      	bls.n	8005d92 <process_touch+0xd6>
 8005d8c:	28cc      	cmp	r0, #204	; 0xcc
 8005d8e:	f240 80e7 	bls.w	8005f60 <process_touch+0x2a4>
    else if (X_koordinata > 191 && X_koordinata < 210 && Y_koordinata > 55 && Y_koordinata < 130) {
 8005d92:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 8005d96:	b292      	uxth	r2, r2
 8005d98:	2a11      	cmp	r2, #17
 8005d9a:	d804      	bhi.n	8005da6 <process_touch+0xea>
 8005d9c:	2837      	cmp	r0, #55	; 0x37
 8005d9e:	d902      	bls.n	8005da6 <process_touch+0xea>
 8005da0:	2881      	cmp	r0, #129	; 0x81
 8005da2:	f240 80e6 	bls.w	8005f72 <process_touch+0x2b6>
    else if(X_koordinata > 167 && X_koordinata < 200 && Y_koordinata > 55 && Y_koordinata < 205){
 8005da6:	f1a3 02a8 	sub.w	r2, r3, #168	; 0xa8
 8005daa:	b292      	uxth	r2, r2
 8005dac:	2a1f      	cmp	r2, #31
 8005dae:	d804      	bhi.n	8005dba <process_touch+0xfe>
 8005db0:	2837      	cmp	r0, #55	; 0x37
 8005db2:	d902      	bls.n	8005dba <process_touch+0xfe>
 8005db4:	28cc      	cmp	r0, #204	; 0xcc
 8005db6:	f240 80e5 	bls.w	8005f84 <process_touch+0x2c8>
    else if(X_koordinata > 200 && X_koordinata < 233 && Y_koordinata > 55 && Y_koordinata < 205){
 8005dba:	f1a3 02c9 	sub.w	r2, r3, #201	; 0xc9
 8005dbe:	b292      	uxth	r2, r2
 8005dc0:	2a1f      	cmp	r2, #31
 8005dc2:	d804      	bhi.n	8005dce <process_touch+0x112>
 8005dc4:	2837      	cmp	r0, #55	; 0x37
 8005dc6:	d902      	bls.n	8005dce <process_touch+0x112>
 8005dc8:	28cc      	cmp	r0, #204	; 0xcc
 8005dca:	f240 80e4 	bls.w	8005f96 <process_touch+0x2da>
    else if (X_koordinata > 257 && X_koordinata < 276 && Y_koordinata > 55 && Y_koordinata < 130) {
 8005dce:	f5a3 7281 	sub.w	r2, r3, #258	; 0x102
 8005dd2:	b292      	uxth	r2, r2
 8005dd4:	2a11      	cmp	r2, #17
 8005dd6:	d804      	bhi.n	8005de2 <process_touch+0x126>
 8005dd8:	2837      	cmp	r0, #55	; 0x37
 8005dda:	d902      	bls.n	8005de2 <process_touch+0x126>
 8005ddc:	2881      	cmp	r0, #129	; 0x81
 8005dde:	f240 80e3 	bls.w	8005fa8 <process_touch+0x2ec>
    else if(X_koordinata > 233 && X_koordinata < 266 && Y_koordinata > 55 && Y_koordinata < 205){
 8005de2:	f1a3 02ea 	sub.w	r2, r3, #234	; 0xea
 8005de6:	b292      	uxth	r2, r2
 8005de8:	2a1f      	cmp	r2, #31
 8005dea:	d804      	bhi.n	8005df6 <process_touch+0x13a>
 8005dec:	2837      	cmp	r0, #55	; 0x37
 8005dee:	d902      	bls.n	8005df6 <process_touch+0x13a>
 8005df0:	28cc      	cmp	r0, #204	; 0xcc
 8005df2:	f240 80e2 	bls.w	8005fba <process_touch+0x2fe>
    else if (X_koordinata > 290 && X_koordinata < 309 && Y_koordinata > 55 && Y_koordinata < 130) {
 8005df6:	f2a3 1223 	subw	r2, r3, #291	; 0x123
 8005dfa:	b292      	uxth	r2, r2
 8005dfc:	2a11      	cmp	r2, #17
 8005dfe:	d804      	bhi.n	8005e0a <process_touch+0x14e>
 8005e00:	2837      	cmp	r0, #55	; 0x37
 8005e02:	d902      	bls.n	8005e0a <process_touch+0x14e>
 8005e04:	2881      	cmp	r0, #129	; 0x81
 8005e06:	f240 80e1 	bls.w	8005fcc <process_touch+0x310>
    else if(X_koordinata > 266 && X_koordinata < 299 && Y_koordinata > 55 && Y_koordinata < 205){
 8005e0a:	f2a3 120b 	subw	r2, r3, #267	; 0x10b
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	2a1f      	cmp	r2, #31
 8005e12:	d804      	bhi.n	8005e1e <process_touch+0x162>
 8005e14:	2837      	cmp	r0, #55	; 0x37
 8005e16:	d902      	bls.n	8005e1e <process_touch+0x162>
 8005e18:	28cc      	cmp	r0, #204	; 0xcc
 8005e1a:	f240 80e9 	bls.w	8005ff0 <process_touch+0x334>
    else if(X_koordinata > 299 && X_koordinata < 332 && Y_koordinata > 55 && Y_koordinata < 205){
 8005e1e:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8005e22:	b292      	uxth	r2, r2
 8005e24:	2a1f      	cmp	r2, #31
 8005e26:	d804      	bhi.n	8005e32 <process_touch+0x176>
 8005e28:	2837      	cmp	r0, #55	; 0x37
 8005e2a:	d902      	bls.n	8005e32 <process_touch+0x176>
 8005e2c:	28cc      	cmp	r0, #204	; 0xcc
 8005e2e:	f240 80e8 	bls.w	8006002 <process_touch+0x346>
    else if(X_koordinata > 332 && X_koordinata < 365 && Y_koordinata > 55 && Y_koordinata < 205){
 8005e32:	f2a3 124d 	subw	r2, r3, #333	; 0x14d
 8005e36:	b292      	uxth	r2, r2
 8005e38:	2a1f      	cmp	r2, #31
 8005e3a:	d804      	bhi.n	8005e46 <process_touch+0x18a>
 8005e3c:	2837      	cmp	r0, #55	; 0x37
 8005e3e:	d902      	bls.n	8005e46 <process_touch+0x18a>
 8005e40:	28cc      	cmp	r0, #204	; 0xcc
 8005e42:	f240 80e7 	bls.w	8006014 <process_touch+0x358>
    else if (X_koordinata > 389 && X_koordinata < 408 && Y_koordinata > 55 && Y_koordinata < 130) {
 8005e46:	f5a3 72c3 	sub.w	r2, r3, #390	; 0x186
 8005e4a:	b292      	uxth	r2, r2
 8005e4c:	2a11      	cmp	r2, #17
 8005e4e:	d804      	bhi.n	8005e5a <process_touch+0x19e>
 8005e50:	2837      	cmp	r0, #55	; 0x37
 8005e52:	d902      	bls.n	8005e5a <process_touch+0x19e>
 8005e54:	2881      	cmp	r0, #129	; 0x81
 8005e56:	f240 80e6 	bls.w	8006026 <process_touch+0x36a>
    else if(X_koordinata > 365 && X_koordinata < 398 && Y_koordinata > 55 && Y_koordinata < 205){
 8005e5a:	f5a3 72b7 	sub.w	r2, r3, #366	; 0x16e
 8005e5e:	b292      	uxth	r2, r2
 8005e60:	2a1f      	cmp	r2, #31
 8005e62:	d804      	bhi.n	8005e6e <process_touch+0x1b2>
 8005e64:	2837      	cmp	r0, #55	; 0x37
 8005e66:	d902      	bls.n	8005e6e <process_touch+0x1b2>
 8005e68:	28cc      	cmp	r0, #204	; 0xcc
 8005e6a:	f240 80e5 	bls.w	8006038 <process_touch+0x37c>
    else if (X_koordinata > 422 && X_koordinata < 441 && Y_koordinata > 55 && Y_koordinata < 130) {
 8005e6e:	f2a3 12a7 	subw	r2, r3, #423	; 0x1a7
 8005e72:	b292      	uxth	r2, r2
 8005e74:	2a11      	cmp	r2, #17
 8005e76:	d804      	bhi.n	8005e82 <process_touch+0x1c6>
 8005e78:	2837      	cmp	r0, #55	; 0x37
 8005e7a:	d902      	bls.n	8005e82 <process_touch+0x1c6>
 8005e7c:	2881      	cmp	r0, #129	; 0x81
 8005e7e:	f240 80e4 	bls.w	800604a <process_touch+0x38e>
    else if(X_koordinata > 398 && X_koordinata < 431 && Y_koordinata > 55 && Y_koordinata < 205){
 8005e82:	f2a3 128f 	subw	r2, r3, #399	; 0x18f
 8005e86:	b292      	uxth	r2, r2
 8005e88:	2a1f      	cmp	r2, #31
 8005e8a:	d804      	bhi.n	8005e96 <process_touch+0x1da>
 8005e8c:	2837      	cmp	r0, #55	; 0x37
 8005e8e:	d902      	bls.n	8005e96 <process_touch+0x1da>
 8005e90:	28cc      	cmp	r0, #204	; 0xcc
 8005e92:	f240 80e3 	bls.w	800605c <process_touch+0x3a0>
    else if (X_koordinata > 455 && X_koordinata < 474 && Y_koordinata > 55 && Y_koordinata < 130) {
 8005e96:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	2a11      	cmp	r2, #17
 8005e9e:	d804      	bhi.n	8005eaa <process_touch+0x1ee>
 8005ea0:	2837      	cmp	r0, #55	; 0x37
 8005ea2:	d902      	bls.n	8005eaa <process_touch+0x1ee>
 8005ea4:	2881      	cmp	r0, #129	; 0x81
 8005ea6:	f240 80e2 	bls.w	800606e <process_touch+0x3b2>
    else if(X_koordinata > 431 && X_koordinata < 464 && Y_koordinata > 55 && Y_koordinata < 205){
 8005eaa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b1f      	cmp	r3, #31
 8005eb2:	d804      	bhi.n	8005ebe <process_touch+0x202>
 8005eb4:	2837      	cmp	r0, #55	; 0x37
 8005eb6:	d902      	bls.n	8005ebe <process_touch+0x202>
 8005eb8:	28cc      	cmp	r0, #204	; 0xcc
 8005eba:	f240 80e1 	bls.w	8006080 <process_touch+0x3c4>
        if (prethodno_prisutan_dodir == 1) {
 8005ebe:	4b4b      	ldr	r3, [pc, #300]	; (8005fec <process_touch+0x330>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	f000 80e5 	beq.w	8006092 <process_touch+0x3d6>
    GUI_Delay(10);
 8005ec8:	200a      	movs	r0, #10
 8005eca:	f001 fe5f 	bl	8007b8c <GUI_Delay>
}
 8005ece:	bd10      	pop	{r4, pc}
        set_buzzer(261.63, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8005ed0:	2150      	movs	r1, #80	; 0x50
 8005ed2:	f240 1005 	movw	r0, #261	; 0x105
 8005ed6:	f7ff fe1d 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005eda:	4b44      	ldr	r3, [pc, #272]	; (8005fec <process_touch+0x330>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	e7f2      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(277.18, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 8005ee2:	2150      	movs	r1, #80	; 0x50
 8005ee4:	f240 1015 	movw	r0, #277	; 0x115
 8005ee8:	f7ff fe14 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005eec:	4b3f      	ldr	r3, [pc, #252]	; (8005fec <process_touch+0x330>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	e7e9      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(293.66, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 8005ef4:	2150      	movs	r1, #80	; 0x50
 8005ef6:	f240 1025 	movw	r0, #293	; 0x125
 8005efa:	f7ff fe0b 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005efe:	4b3b      	ldr	r3, [pc, #236]	; (8005fec <process_touch+0x330>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	e7e0      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(311.13, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 8005f06:	2150      	movs	r1, #80	; 0x50
 8005f08:	f240 1037 	movw	r0, #311	; 0x137
 8005f0c:	f7ff fe02 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005f10:	4b36      	ldr	r3, [pc, #216]	; (8005fec <process_touch+0x330>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	e7d7      	b.n	8005ec8 <process_touch+0x20c>
    	set_buzzer(329.63, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8005f18:	2150      	movs	r1, #80	; 0x50
 8005f1a:	f240 1049 	movw	r0, #329	; 0x149
 8005f1e:	f7ff fdf9 	bl	8005b14 <set_buzzer>
    	        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005f22:	4b32      	ldr	r3, [pc, #200]	; (8005fec <process_touch+0x330>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	e7ce      	b.n	8005ec8 <process_touch+0x20c>
    	set_buzzer(349.23, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8005f2a:	2150      	movs	r1, #80	; 0x50
 8005f2c:	f240 105d 	movw	r0, #349	; 0x15d
 8005f30:	f7ff fdf0 	bl	8005b14 <set_buzzer>
    	        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005f34:	4b2d      	ldr	r3, [pc, #180]	; (8005fec <process_touch+0x330>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	e7c5      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(369.99, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 8005f3c:	2150      	movs	r1, #80	; 0x50
 8005f3e:	f240 1071 	movw	r0, #369	; 0x171
 8005f42:	f7ff fde7 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005f46:	4b29      	ldr	r3, [pc, #164]	; (8005fec <process_touch+0x330>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	e7bc      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(415.30, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 8005f4e:	2150      	movs	r1, #80	; 0x50
 8005f50:	f240 109f 	movw	r0, #415	; 0x19f
 8005f54:	f7ff fdde 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005f58:	4b24      	ldr	r3, [pc, #144]	; (8005fec <process_touch+0x330>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e7b3      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(392, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8005f60:	2150      	movs	r1, #80	; 0x50
 8005f62:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8005f66:	f7ff fdd5 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005f6a:	4b20      	ldr	r3, [pc, #128]	; (8005fec <process_touch+0x330>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	e7aa      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(466.16, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 8005f72:	2150      	movs	r1, #80	; 0x50
 8005f74:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
 8005f78:	f7ff fdcc 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <process_touch+0x330>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	e7a1      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(440, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8005f84:	2150      	movs	r1, #80	; 0x50
 8005f86:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8005f8a:	f7ff fdc3 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005f8e:	4b17      	ldr	r3, [pc, #92]	; (8005fec <process_touch+0x330>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	e798      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(493.88, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8005f96:	2150      	movs	r1, #80	; 0x50
 8005f98:	f240 10ed 	movw	r0, #493	; 0x1ed
 8005f9c:	f7ff fdba 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005fa0:	4b12      	ldr	r3, [pc, #72]	; (8005fec <process_touch+0x330>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	e78f      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(554.37, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 8005fa8:	2150      	movs	r1, #80	; 0x50
 8005faa:	f240 202a 	movw	r0, #554	; 0x22a
 8005fae:	f7ff fdb1 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005fb2:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <process_touch+0x330>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e786      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(523.25, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8005fba:	2150      	movs	r1, #80	; 0x50
 8005fbc:	f240 200b 	movw	r0, #523	; 0x20b
 8005fc0:	f7ff fda8 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005fc4:	4b09      	ldr	r3, [pc, #36]	; (8005fec <process_touch+0x330>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	e77d      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(622.25, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 8005fcc:	2150      	movs	r1, #80	; 0x50
 8005fce:	f240 206e 	movw	r0, #622	; 0x26e
 8005fd2:	f7ff fd9f 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1;
 8005fd6:	4b05      	ldr	r3, [pc, #20]	; (8005fec <process_touch+0x330>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	e774      	b.n	8005ec8 <process_touch+0x20c>
 8005fde:	bf00      	nop
 8005fe0:	2001925c 	.word	0x2001925c
 8005fe4:	20019258 	.word	0x20019258
 8005fe8:	2001925a 	.word	0x2001925a
 8005fec:	2001925e 	.word	0x2001925e
        set_buzzer(587.33, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8005ff0:	2150      	movs	r1, #80	; 0x50
 8005ff2:	f240 204b 	movw	r0, #587	; 0x24b
 8005ff6:	f7ff fd8d 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <process_touch+0x3e8>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	e762      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(659.26, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8006002:	2150      	movs	r1, #80	; 0x50
 8006004:	f240 2093 	movw	r0, #659	; 0x293
 8006008:	f7ff fd84 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 800600c:	4b25      	ldr	r3, [pc, #148]	; (80060a4 <process_touch+0x3e8>)
 800600e:	2201      	movs	r2, #1
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	e759      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(698.49, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8006014:	2150      	movs	r1, #80	; 0x50
 8006016:	f240 20ba 	movw	r0, #698	; 0x2ba
 800601a:	f7ff fd7b 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 800601e:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <process_touch+0x3e8>)
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e750      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(739.99, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 8006026:	2150      	movs	r1, #80	; 0x50
 8006028:	f240 20e3 	movw	r0, #739	; 0x2e3
 800602c:	f7ff fd72 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1;
 8006030:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <process_touch+0x3e8>)
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e747      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(783.99, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8006038:	2150      	movs	r1, #80	; 0x50
 800603a:	f240 300f 	movw	r0, #783	; 0x30f
 800603e:	f7ff fd69 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8006042:	4b18      	ldr	r3, [pc, #96]	; (80060a4 <process_touch+0x3e8>)
 8006044:	2201      	movs	r2, #1
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e73e      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(830.61, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 800604a:	2150      	movs	r1, #80	; 0x50
 800604c:	f240 303e 	movw	r0, #830	; 0x33e
 8006050:	f7ff fd60 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1;
 8006054:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <process_touch+0x3e8>)
 8006056:	2201      	movs	r2, #1
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	e735      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(880, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 800605c:	2150      	movs	r1, #80	; 0x50
 800605e:	f44f 705c 	mov.w	r0, #880	; 0x370
 8006062:	f7ff fd57 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 8006066:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <process_touch+0x3e8>)
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	e72c      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(932.33, 80); // Postavljanje frekvencije i jačine zvuka za drugu koordinatu
 800606e:	2150      	movs	r1, #80	; 0x50
 8006070:	f44f 7069 	mov.w	r0, #932	; 0x3a4
 8006074:	f7ff fd4e 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1;
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <process_touch+0x3e8>)
 800607a:	2201      	movs	r2, #1
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	e723      	b.n	8005ec8 <process_touch+0x20c>
        set_buzzer(987.77, 80); // Postavljanje frekvencije i jačine zvuka za prvu koordinatu
 8006080:	2150      	movs	r1, #80	; 0x50
 8006082:	f240 30db 	movw	r0, #987	; 0x3db
 8006086:	f7ff fd45 	bl	8005b14 <set_buzzer>
        prethodno_prisutan_dodir = 1; //promenljiva koja nam omogucava da se cuje zvuk samo kada je pritisnuta tipka
 800608a:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <process_touch+0x3e8>)
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e71a      	b.n	8005ec8 <process_touch+0x20c>
            set_buzzer(0, 0); // Isključivanje zvučnika
 8006092:	2100      	movs	r1, #0
 8006094:	4608      	mov	r0, r1
 8006096:	f7ff fd3d 	bl	8005b14 <set_buzzer>
            prethodno_prisutan_dodir = 0;
 800609a:	4b02      	ldr	r3, [pc, #8]	; (80060a4 <process_touch+0x3e8>)
 800609c:	2200      	movs	r2, #0
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	e712      	b.n	8005ec8 <process_touch+0x20c>
 80060a2:	bf00      	nop
 80060a4:	2001925e 	.word	0x2001925e

080060a8 <SystemClock_Config>:
{
 80060a8:	b530      	push	{r4, r5, lr}
 80060aa:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060ac:	2230      	movs	r2, #48	; 0x30
 80060ae:	2100      	movs	r1, #0
 80060b0:	a828      	add	r0, sp, #160	; 0xa0
 80060b2:	f00a f8a6 	bl	8010202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060b6:	2400      	movs	r4, #0
 80060b8:	9423      	str	r4, [sp, #140]	; 0x8c
 80060ba:	9424      	str	r4, [sp, #144]	; 0x90
 80060bc:	9425      	str	r4, [sp, #148]	; 0x94
 80060be:	9426      	str	r4, [sp, #152]	; 0x98
 80060c0:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80060c2:	2284      	movs	r2, #132	; 0x84
 80060c4:	4621      	mov	r1, r4
 80060c6:	a802      	add	r0, sp, #8
 80060c8:	f00a f89b 	bl	8010202 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80060cc:	4b21      	ldr	r3, [pc, #132]	; (8006154 <SystemClock_Config+0xac>)
 80060ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80060e0:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <SystemClock_Config+0xb0>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80060f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060fc:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060fe:	2502      	movs	r5, #2
 8006100:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006106:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006108:	2319      	movs	r3, #25
 800610a:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 384;
 800610c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006110:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006112:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006114:	2308      	movs	r3, #8
 8006116:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006118:	a828      	add	r0, sp, #160	; 0xa0
 800611a:	f7fc fcc5 	bl	8002aa8 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800611e:	f7fc fc85 	bl	8002a2c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006122:	230f      	movs	r3, #15
 8006124:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006126:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006128:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800612a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800612e:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006134:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8006136:	2106      	movs	r1, #6
 8006138:	a823      	add	r0, sp, #140	; 0x8c
 800613a:	f7fc ff23 	bl	8002f84 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_CLK48;
 800613e:	f44f 1301 	mov.w	r3, #2113536	; 0x204000
 8006142:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006144:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006146:	9421      	str	r4, [sp, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006148:	a802      	add	r0, sp, #8
 800614a:	f7fc ffd5 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
}
 800614e:	b035      	add	sp, #212	; 0xd4
 8006150:	bd30      	pop	{r4, r5, pc}
 8006152:	bf00      	nop
 8006154:	40023800 	.word	0x40023800
 8006158:	40007000 	.word	0x40007000

0800615c <main>:
{
 800615c:	b500      	push	{lr}
 800615e:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8006160:	f7fb f932 	bl	80013c8 <HAL_Init>
  SystemClock_Config();
 8006164:	f7ff ffa0 	bl	80060a8 <SystemClock_Config>
  MX_GPIO_Init();
 8006168:	f7ff fc1a 	bl	80059a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800616c:	f7ff fc6e 	bl	8005a4c <MX_I2C1_Init>
  MX_TIM4_Init();
 8006170:	f7ff fc8e 	bl	8005a90 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8006174:	f000 f90e 	bl	8006394 <MX_USB_DEVICE_Init>
  Init_LCD_GPIO();
 8006178:	f7fa fe0c 	bl	8000d94 <Init_LCD_GPIO>
  Init_TOUCH_GPIO(hi2c1);
 800617c:	4e0f      	ldr	r6, [pc, #60]	; (80061bc <main+0x60>)
 800617e:	466c      	mov	r4, sp
 8006180:	f106 0510 	add.w	r5, r6, #16
 8006184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800618a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800618e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006198:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800619c:	f7fa ff82 	bl	80010a4 <Init_TOUCH_GPIO>
  STMPE610_Init();
 80061a0:	f7fa fffa 	bl	8001198 <STMPE610_Init>
  GUI_Init();
 80061a4:	f002 fbb6 	bl	8008914 <GUI_Init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80061a8:	2108      	movs	r1, #8
 80061aa:	4805      	ldr	r0, [pc, #20]	; (80061c0 <main+0x64>)
 80061ac:	f7fd fde2 	bl	8003d74 <HAL_TIM_PWM_Start>
  DrawPianoKeys();
 80061b0:	f7ff fd14 	bl	8005bdc <DrawPianoKeys>
	  process_touch();
 80061b4:	f7ff fd82 	bl	8005cbc <process_touch>
 80061b8:	e7fc      	b.n	80061b4 <main+0x58>
 80061ba:	bf00      	nop
 80061bc:	200195c4 	.word	0x200195c4
 80061c0:	20019578 	.word	0x20019578

080061c4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80061c4:	4770      	bx	lr
	...

080061c8 <HAL_TIM_MspPostInit>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
                        
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80061c8:	b500      	push	{lr}
 80061ca:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061cc:	2300      	movs	r3, #0
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	9302      	str	r3, [sp, #8]
 80061d2:	9303      	str	r3, [sp, #12]
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 80061d8:	6802      	ldr	r2, [r0, #0]
 80061da:	4b0e      	ldr	r3, [pc, #56]	; (8006214 <HAL_TIM_MspPostInit+0x4c>)
 80061dc:	429a      	cmp	r2, r3
 80061de:	d002      	beq.n	80061e6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80061e0:	b007      	add	sp, #28
 80061e2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061e6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80061ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ec:	f042 0202 	orr.w	r2, r2, #2
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80061fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006200:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006202:	2302      	movs	r3, #2
 8006204:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006206:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006208:	a901      	add	r1, sp, #4
 800620a:	4803      	ldr	r0, [pc, #12]	; (8006218 <HAL_TIM_MspPostInit+0x50>)
 800620c:	f7fb f97a 	bl	8001504 <HAL_GPIO_Init>
}
 8006210:	e7e6      	b.n	80061e0 <HAL_TIM_MspPostInit+0x18>
 8006212:	bf00      	nop
 8006214:	40000800 	.word	0x40000800
 8006218:	40020400 	.word	0x40020400

0800621c <HAL_MspInit>:
void HAL_MspInit(void)
{
 800621c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <HAL_MspInit+0x2c>)
 8006220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006222:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006226:	641a      	str	r2, [r3, #64]	; 0x40
 8006228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800622a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800622e:	9200      	str	r2, [sp, #0]
 8006230:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006238:	645a      	str	r2, [r3, #68]	; 0x44
 800623a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006244:	b002      	add	sp, #8
 8006246:	4770      	bx	lr
 8006248:	40023800 	.word	0x40023800

0800624c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800624c:	b510      	push	{r4, lr}
 800624e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006250:	2300      	movs	r3, #0
 8006252:	9303      	str	r3, [sp, #12]
 8006254:	9304      	str	r3, [sp, #16]
 8006256:	9305      	str	r3, [sp, #20]
 8006258:	9306      	str	r3, [sp, #24]
 800625a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 800625c:	6802      	ldr	r2, [r0, #0]
 800625e:	4b13      	ldr	r3, [pc, #76]	; (80062ac <HAL_I2C_MspInit+0x60>)
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006264:	b008      	add	sp, #32
 8006266:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006268:	4c11      	ldr	r4, [pc, #68]	; (80062b0 <HAL_I2C_MspInit+0x64>)
 800626a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800626c:	f043 0302 	orr.w	r3, r3, #2
 8006270:	6323      	str	r3, [r4, #48]	; 0x30
 8006272:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800627c:	23c0      	movs	r3, #192	; 0xc0
 800627e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006280:	2312      	movs	r3, #18
 8006282:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006284:	2301      	movs	r3, #1
 8006286:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006288:	2303      	movs	r3, #3
 800628a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800628c:	2304      	movs	r3, #4
 800628e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006290:	a903      	add	r1, sp, #12
 8006292:	4808      	ldr	r0, [pc, #32]	; (80062b4 <HAL_I2C_MspInit+0x68>)
 8006294:	f7fb f936 	bl	8001504 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800629a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800629e:	6423      	str	r3, [r4, #64]	; 0x40
 80062a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062a6:	9302      	str	r3, [sp, #8]
 80062a8:	9b02      	ldr	r3, [sp, #8]
}
 80062aa:	e7db      	b.n	8006264 <HAL_I2C_MspInit+0x18>
 80062ac:	40005400 	.word	0x40005400
 80062b0:	40023800 	.word	0x40023800
 80062b4:	40020400 	.word	0x40020400

080062b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80062b8:	b500      	push	{lr}
 80062ba:	b083      	sub	sp, #12

  if(htim_base->Instance==TIM3)
 80062bc:	6803      	ldr	r3, [r0, #0]
 80062be:	4a13      	ldr	r2, [pc, #76]	; (800630c <HAL_TIM_Base_MspInit+0x54>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d005      	beq.n	80062d0 <HAL_TIM_Base_MspInit+0x18>

  /* USER CODE END TIM3_MspInit 1 */
  }
  else

  if(htim_base->Instance==TIM4)
 80062c4:	4a12      	ldr	r2, [pc, #72]	; (8006310 <HAL_TIM_Base_MspInit+0x58>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d015      	beq.n	80062f6 <HAL_TIM_Base_MspInit+0x3e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80062ca:	b003      	add	sp, #12
 80062cc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80062d0:	4b10      	ldr	r3, [pc, #64]	; (8006314 <HAL_TIM_Base_MspInit+0x5c>)
 80062d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d4:	f042 0202 	orr.w	r2, r2, #2
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80062e4:	2200      	movs	r2, #0
 80062e6:	4611      	mov	r1, r2
 80062e8:	201d      	movs	r0, #29
 80062ea:	f7fb f8b1 	bl	8001450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80062ee:	201d      	movs	r0, #29
 80062f0:	f7fb f8e0 	bl	80014b4 <HAL_NVIC_EnableIRQ>
 80062f4:	e7e9      	b.n	80062ca <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80062f6:	4b07      	ldr	r3, [pc, #28]	; (8006314 <HAL_TIM_Base_MspInit+0x5c>)
 80062f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062fa:	f042 0204 	orr.w	r2, r2, #4
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	9b01      	ldr	r3, [sp, #4]
}
 800630a:	e7de      	b.n	80062ca <HAL_TIM_Base_MspInit+0x12>
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40023800 	.word	0x40023800

08006318 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006318:	4770      	bx	lr

0800631a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800631a:	e7fe      	b.n	800631a <HardFault_Handler>

0800631c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800631c:	e7fe      	b.n	800631c <MemManage_Handler>

0800631e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800631e:	e7fe      	b.n	800631e <BusFault_Handler>

08006320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006320:	e7fe      	b.n	8006320 <UsageFault_Handler>

08006322 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006322:	4770      	bx	lr

08006324 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006324:	4770      	bx	lr

08006326 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006326:	4770      	bx	lr

08006328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006328:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800632a:	f7fb f859 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800632e:	f7fb f8e5 	bl	80014fc <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8006332:	bd08      	pop	{r3, pc}

08006334 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006334:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006336:	4802      	ldr	r0, [pc, #8]	; (8006340 <OTG_FS_IRQHandler+0xc>)
 8006338:	f7fb ff68 	bl	800220c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800633c:	bd08      	pop	{r3, pc}
 800633e:	bf00      	nop
 8006340:	2001a8e4 	.word	0x2001a8e4

08006344 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006344:	b508      	push	{r3, lr}
 8006346:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006348:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <_sbrk+0x34>)
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	b142      	cbz	r2, 8006360 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800634e:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <_sbrk+0x34>)
 8006350:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8006352:	4403      	add	r3, r0
 8006354:	466a      	mov	r2, sp
 8006356:	4293      	cmp	r3, r2
 8006358:	d806      	bhi.n	8006368 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800635a:	4a07      	ldr	r2, [pc, #28]	; (8006378 <_sbrk+0x34>)
 800635c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800635e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8006360:	4a05      	ldr	r2, [pc, #20]	; (8006378 <_sbrk+0x34>)
 8006362:	4906      	ldr	r1, [pc, #24]	; (800637c <_sbrk+0x38>)
 8006364:	6011      	str	r1, [r2, #0]
 8006366:	e7f2      	b.n	800634e <_sbrk+0xa>
		errno = ENOMEM;
 8006368:	f009 fede 	bl	8010128 <__errno>
 800636c:	230c      	movs	r3, #12
 800636e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	e7f3      	b.n	800635e <_sbrk+0x1a>
 8006376:	bf00      	nop
 8006378:	20019260 	.word	0x20019260
 800637c:	2001b078 	.word	0x2001b078

08006380 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006380:	4a03      	ldr	r2, [pc, #12]	; (8006390 <SystemInit+0x10>)
 8006382:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006386:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800638a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800638e:	4770      	bx	lr
 8006390:	e000ed00 	.word	0xe000ed00

08006394 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006394:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006396:	2200      	movs	r2, #0
 8006398:	490f      	ldr	r1, [pc, #60]	; (80063d8 <MX_USB_DEVICE_Init+0x44>)
 800639a:	4810      	ldr	r0, [pc, #64]	; (80063dc <MX_USB_DEVICE_Init+0x48>)
 800639c:	f7fe fd45 	bl	8004e2a <USBD_Init>
 80063a0:	b970      	cbnz	r0, 80063c0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80063a2:	490f      	ldr	r1, [pc, #60]	; (80063e0 <MX_USB_DEVICE_Init+0x4c>)
 80063a4:	480d      	ldr	r0, [pc, #52]	; (80063dc <MX_USB_DEVICE_Init+0x48>)
 80063a6:	f7fe fd5c 	bl	8004e62 <USBD_RegisterClass>
 80063aa:	b960      	cbnz	r0, 80063c6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80063ac:	490d      	ldr	r1, [pc, #52]	; (80063e4 <MX_USB_DEVICE_Init+0x50>)
 80063ae:	480b      	ldr	r0, [pc, #44]	; (80063dc <MX_USB_DEVICE_Init+0x48>)
 80063b0:	f7fe fd0d 	bl	8004dce <USBD_CDC_RegisterInterface>
 80063b4:	b950      	cbnz	r0, 80063cc <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80063b6:	4809      	ldr	r0, [pc, #36]	; (80063dc <MX_USB_DEVICE_Init+0x48>)
 80063b8:	f7fe fd67 	bl	8004e8a <USBD_Start>
 80063bc:	b948      	cbnz	r0, 80063d2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80063be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80063c0:	f7ff ff00 	bl	80061c4 <Error_Handler>
 80063c4:	e7ed      	b.n	80063a2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80063c6:	f7ff fefd 	bl	80061c4 <Error_Handler>
 80063ca:	e7ef      	b.n	80063ac <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80063cc:	f7ff fefa 	bl	80061c4 <Error_Handler>
 80063d0:	e7f1      	b.n	80063b6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80063d2:	f7ff fef7 	bl	80061c4 <Error_Handler>
}
 80063d6:	e7f2      	b.n	80063be <MX_USB_DEVICE_Init+0x2a>
 80063d8:	20000130 	.word	0x20000130
 80063dc:	20019614 	.word	0x20019614
 80063e0:	20000008 	.word	0x20000008
 80063e4:	2000011c 	.word	0x2000011c

080063e8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80063e8:	2000      	movs	r0, #0
 80063ea:	4770      	bx	lr

080063ec <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80063ec:	2000      	movs	r0, #0
 80063ee:	4770      	bx	lr

080063f0 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80063f0:	2000      	movs	r0, #0
 80063f2:	4770      	bx	lr

080063f4 <CDC_Receive_FS>:
{
 80063f4:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80063f6:	4c05      	ldr	r4, [pc, #20]	; (800640c <CDC_Receive_FS+0x18>)
 80063f8:	4601      	mov	r1, r0
 80063fa:	4620      	mov	r0, r4
 80063fc:	f7fe fcf6 	bl	8004dec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006400:	4620      	mov	r0, r4
 8006402:	f7fe fcf9 	bl	8004df8 <USBD_CDC_ReceivePacket>
}
 8006406:	2000      	movs	r0, #0
 8006408:	bd10      	pop	{r4, pc}
 800640a:	bf00      	nop
 800640c:	20019614 	.word	0x20019614

08006410 <CDC_Init_FS>:
{
 8006410:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006412:	4c06      	ldr	r4, [pc, #24]	; (800642c <CDC_Init_FS+0x1c>)
 8006414:	2200      	movs	r2, #0
 8006416:	4906      	ldr	r1, [pc, #24]	; (8006430 <CDC_Init_FS+0x20>)
 8006418:	4620      	mov	r0, r4
 800641a:	f7fe fcdf 	bl	8004ddc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800641e:	4905      	ldr	r1, [pc, #20]	; (8006434 <CDC_Init_FS+0x24>)
 8006420:	4620      	mov	r0, r4
 8006422:	f7fe fce3 	bl	8004dec <USBD_CDC_SetRxBuffer>
}
 8006426:	2000      	movs	r0, #0
 8006428:	bd10      	pop	{r4, pc}
 800642a:	bf00      	nop
 800642c:	20019614 	.word	0x20019614
 8006430:	2001a0e4 	.word	0x2001a0e4
 8006434:	200198e4 	.word	0x200198e4

08006438 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006438:	b508      	push	{r3, lr}
  SystemClock_Config();
 800643a:	f7ff fe35 	bl	80060a8 <SystemClock_Config>
}
 800643e:	bd08      	pop	{r3, pc}

08006440 <HAL_PCD_MspInit>:
{
 8006440:	b510      	push	{r4, lr}
 8006442:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006444:	2300      	movs	r3, #0
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	9304      	str	r3, [sp, #16]
 800644a:	9305      	str	r3, [sp, #20]
 800644c:	9306      	str	r3, [sp, #24]
 800644e:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006450:	6803      	ldr	r3, [r0, #0]
 8006452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006456:	d001      	beq.n	800645c <HAL_PCD_MspInit+0x1c>
}
 8006458:	b008      	add	sp, #32
 800645a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800645c:	4c18      	ldr	r4, [pc, #96]	; (80064c0 <HAL_PCD_MspInit+0x80>)
 800645e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006460:	f043 0301 	orr.w	r3, r3, #1
 8006464:	6323      	str	r3, [r4, #48]	; 0x30
 8006466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006470:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006474:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006476:	2302      	movs	r3, #2
 8006478:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800647a:	2303      	movs	r3, #3
 800647c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800647e:	230a      	movs	r3, #10
 8006480:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006482:	a903      	add	r1, sp, #12
 8006484:	480f      	ldr	r0, [pc, #60]	; (80064c4 <HAL_PCD_MspInit+0x84>)
 8006486:	f7fb f83d 	bl	8001504 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800648a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800648c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006490:	6363      	str	r3, [r4, #52]	; 0x34
 8006492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	9b01      	ldr	r3, [sp, #4]
 800649c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800649e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064a2:	6463      	str	r3, [r4, #68]	; 0x44
 80064a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064aa:	9302      	str	r3, [sp, #8]
 80064ac:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80064ae:	2200      	movs	r2, #0
 80064b0:	4611      	mov	r1, r2
 80064b2:	2043      	movs	r0, #67	; 0x43
 80064b4:	f7fa ffcc 	bl	8001450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80064b8:	2043      	movs	r0, #67	; 0x43
 80064ba:	f7fa fffb 	bl	80014b4 <HAL_NVIC_EnableIRQ>
}
 80064be:	e7cb      	b.n	8006458 <HAL_PCD_MspInit+0x18>
 80064c0:	40023800 	.word	0x40023800
 80064c4:	40020000 	.word	0x40020000

080064c8 <HAL_PCD_SetupStageCallback>:
{
 80064c8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80064ca:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80064ce:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80064d2:	f7fe fcef 	bl	8004eb4 <USBD_LL_SetupStage>
}
 80064d6:	bd08      	pop	{r3, pc}

080064d8 <HAL_PCD_DataOutStageCallback>:
{
 80064d8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80064da:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80064de:	0093      	lsls	r3, r2, #2
 80064e0:	4403      	add	r3, r0
 80064e2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80064e6:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80064ea:	f7fe fd0f 	bl	8004f0c <USBD_LL_DataOutStage>
}
 80064ee:	bd08      	pop	{r3, pc}

080064f0 <HAL_PCD_DataInStageCallback>:
{
 80064f0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80064f2:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80064f6:	0093      	lsls	r3, r2, #2
 80064f8:	4403      	add	r3, r0
 80064fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064fc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006500:	f7fe fd3d 	bl	8004f7e <USBD_LL_DataInStage>
}
 8006504:	bd08      	pop	{r3, pc}

08006506 <HAL_PCD_SOFCallback>:
{
 8006506:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006508:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800650c:	f7fe fdd2 	bl	80050b4 <USBD_LL_SOF>
}
 8006510:	bd08      	pop	{r3, pc}

08006512 <HAL_PCD_ResetCallback>:
{ 
 8006512:	b510      	push	{r4, lr}
 8006514:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006516:	68c3      	ldr	r3, [r0, #12]
 8006518:	b12b      	cbz	r3, 8006526 <HAL_PCD_ResetCallback+0x14>
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800651a:	2b02      	cmp	r3, #2
 800651c:	d00d      	beq.n	800653a <HAL_PCD_ResetCallback+0x28>
    Error_Handler();
 800651e:	f7ff fe51 	bl	80061c4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006522:	2101      	movs	r1, #1
 8006524:	e000      	b.n	8006528 <HAL_PCD_ResetCallback+0x16>
    speed = USBD_SPEED_HIGH;
 8006526:	2100      	movs	r1, #0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006528:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 800652c:	f7fe fdab 	bl	8005086 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006530:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8006534:	f7fe fd7e 	bl	8005034 <USBD_LL_Reset>
}
 8006538:	bd10      	pop	{r4, pc}
    speed = USBD_SPEED_FULL;
 800653a:	2101      	movs	r1, #1
 800653c:	e7f4      	b.n	8006528 <HAL_PCD_ResetCallback+0x16>
	...

08006540 <HAL_PCD_SuspendCallback>:
{
 8006540:	b510      	push	{r4, lr}
 8006542:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006544:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006548:	f7fe fda0 	bl	800508c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006552:	f043 0301 	orr.w	r3, r3, #1
 8006556:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  if (hpcd->Init.low_power_enable)
 800655a:	6a23      	ldr	r3, [r4, #32]
 800655c:	b123      	cbz	r3, 8006568 <HAL_PCD_SuspendCallback+0x28>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800655e:	4a03      	ldr	r2, [pc, #12]	; (800656c <HAL_PCD_SuspendCallback+0x2c>)
 8006560:	6913      	ldr	r3, [r2, #16]
 8006562:	f043 0306 	orr.w	r3, r3, #6
 8006566:	6113      	str	r3, [r2, #16]
}
 8006568:	bd10      	pop	{r4, pc}
 800656a:	bf00      	nop
 800656c:	e000ed00 	.word	0xe000ed00

08006570 <HAL_PCD_ResumeCallback>:
{
 8006570:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006572:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006576:	f7fe fd92 	bl	800509e <USBD_LL_Resume>
}
 800657a:	bd08      	pop	{r3, pc}

0800657c <HAL_PCD_ISOOUTIncompleteCallback>:
{
 800657c:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800657e:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006582:	f7fe fda7 	bl	80050d4 <USBD_LL_IsoOUTIncomplete>
}
 8006586:	bd08      	pop	{r3, pc}

08006588 <HAL_PCD_ISOINIncompleteCallback>:
{
 8006588:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800658a:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800658e:	f7fe fd9f 	bl	80050d0 <USBD_LL_IsoINIncomplete>
}
 8006592:	bd08      	pop	{r3, pc}

08006594 <HAL_PCD_ConnectCallback>:
{
 8006594:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006596:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800659a:	f7fe fd9d 	bl	80050d8 <USBD_LL_DevConnected>
}
 800659e:	bd08      	pop	{r3, pc}

080065a0 <HAL_PCD_DisconnectCallback>:
{
 80065a0:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80065a2:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80065a6:	f7fe fd99 	bl	80050dc <USBD_LL_DevDisconnected>
}
 80065aa:	bd08      	pop	{r3, pc}

080065ac <USBD_LL_Init>:
  if (pdev->id == DEVICE_FS) {
 80065ac:	7803      	ldrb	r3, [r0, #0]
 80065ae:	b10b      	cbz	r3, 80065b4 <USBD_LL_Init+0x8>
}
 80065b0:	2000      	movs	r0, #0
 80065b2:	4770      	bx	lr
{
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 80065b8:	4815      	ldr	r0, [pc, #84]	; (8006610 <USBD_LL_Init+0x64>)
 80065ba:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80065be:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80065c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80065c6:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80065c8:	2306      	movs	r3, #6
 80065ca:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80065cc:	2202      	movs	r2, #2
 80065ce:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80065d0:	2300      	movs	r3, #0
 80065d2:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80065d4:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80065d6:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80065d8:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80065da:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80065dc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80065de:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80065e0:	f7fb fcbe 	bl	8001f60 <HAL_PCD_Init>
 80065e4:	b980      	cbnz	r0, 8006608 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80065e6:	4c0a      	ldr	r4, [pc, #40]	; (8006610 <USBD_LL_Init+0x64>)
 80065e8:	2180      	movs	r1, #128	; 0x80
 80065ea:	4620      	mov	r0, r4
 80065ec:	f7fc fa05 	bl	80029fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80065f0:	2240      	movs	r2, #64	; 0x40
 80065f2:	2100      	movs	r1, #0
 80065f4:	4620      	mov	r0, r4
 80065f6:	f7fc f9dc 	bl	80029b2 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80065fa:	2280      	movs	r2, #128	; 0x80
 80065fc:	2101      	movs	r1, #1
 80065fe:	4620      	mov	r0, r4
 8006600:	f7fc f9d7 	bl	80029b2 <HAL_PCDEx_SetTxFiFo>
}
 8006604:	2000      	movs	r0, #0
 8006606:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006608:	f7ff fddc 	bl	80061c4 <Error_Handler>
 800660c:	e7eb      	b.n	80065e6 <USBD_LL_Init+0x3a>
 800660e:	bf00      	nop
 8006610:	2001a8e4 	.word	0x2001a8e4

08006614 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006614:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8006618:	f011 0f80 	tst.w	r1, #128	; 0x80
 800661c:	d108      	bne.n	8006630 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800661e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006622:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006626:	008a      	lsls	r2, r1, #2
 8006628:	4413      	add	r3, r2
 800662a:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
}
 800662e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006630:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006634:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006638:	008a      	lsls	r2, r1, #2
 800663a:	4413      	add	r3, r2
 800663c:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8006640:	4770      	bx	lr

08006642 <USBD_LL_GetRxDataSize>:
{
 8006642:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006644:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006648:	f7fc f908 	bl	800285c <HAL_PCD_EP_GetRxCount>
}
 800664c:	bd08      	pop	{r3, pc}
	...

08006650 <HAL_PCDEx_LPM_Callback>:
{
 8006650:	b510      	push	{r4, lr}
 8006652:	4604      	mov	r4, r0
  switch (msg)
 8006654:	b111      	cbz	r1, 800665c <HAL_PCDEx_LPM_Callback+0xc>
 8006656:	2901      	cmp	r1, #1
 8006658:	d016      	beq.n	8006688 <HAL_PCDEx_LPM_Callback+0x38>
}
 800665a:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800665c:	6a03      	ldr	r3, [r0, #32]
 800665e:	b95b      	cbnz	r3, 8006678 <HAL_PCDEx_LPM_Callback+0x28>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006660:	6822      	ldr	r2, [r4, #0]
 8006662:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 800666e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8006672:	f7fe fd14 	bl	800509e <USBD_LL_Resume>
    break;
 8006676:	e7f0      	b.n	800665a <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 8006678:	f7ff fede 	bl	8006438 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800667c:	4a0c      	ldr	r2, [pc, #48]	; (80066b0 <HAL_PCDEx_LPM_Callback+0x60>)
 800667e:	6913      	ldr	r3, [r2, #16]
 8006680:	f023 0306 	bic.w	r3, r3, #6
 8006684:	6113      	str	r3, [r2, #16]
 8006686:	e7eb      	b.n	8006660 <HAL_PCDEx_LPM_Callback+0x10>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006688:	6802      	ldr	r2, [r0, #0]
 800668a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800668e:	f043 0301 	orr.w	r3, r3, #1
 8006692:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8006696:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800669a:	f7fe fcf7 	bl	800508c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800669e:	6a23      	ldr	r3, [r4, #32]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0da      	beq.n	800665a <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80066a4:	4a02      	ldr	r2, [pc, #8]	; (80066b0 <HAL_PCDEx_LPM_Callback+0x60>)
 80066a6:	6913      	ldr	r3, [r2, #16]
 80066a8:	f043 0306 	orr.w	r3, r3, #6
 80066ac:	6113      	str	r3, [r2, #16]
}
 80066ae:	e7d4      	b.n	800665a <HAL_PCDEx_LPM_Callback+0xa>
 80066b0:	e000ed00 	.word	0xe000ed00

080066b4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80066b4:	b118      	cbz	r0, 80066be <USBD_Get_USB_Status+0xa>
 80066b6:	2802      	cmp	r0, #2
 80066b8:	d003      	beq.n	80066c2 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80066ba:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80066bc:	4770      	bx	lr
      usb_status = USBD_OK;
 80066be:	2000      	movs	r0, #0
 80066c0:	4770      	bx	lr
      usb_status = USBD_BUSY;
 80066c2:	2001      	movs	r0, #1
    break;
 80066c4:	4770      	bx	lr

080066c6 <USBD_LL_Start>:
{
 80066c6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80066c8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80066cc:	f7fb fce0 	bl	8002090 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80066d0:	f7ff fff0 	bl	80066b4 <USBD_Get_USB_Status>
}
 80066d4:	bd08      	pop	{r3, pc}

080066d6 <USBD_LL_OpenEP>:
{
 80066d6:	b510      	push	{r4, lr}
 80066d8:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80066da:	4613      	mov	r3, r2
 80066dc:	4622      	mov	r2, r4
 80066de:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80066e2:	f7fc f815 	bl	8002710 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80066e6:	f7ff ffe5 	bl	80066b4 <USBD_Get_USB_Status>
}
 80066ea:	bd10      	pop	{r4, pc}

080066ec <USBD_LL_CloseEP>:
{
 80066ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066ee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80066f2:	f7fc f84e 	bl	8002792 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80066f6:	f7ff ffdd 	bl	80066b4 <USBD_Get_USB_Status>
}
 80066fa:	bd08      	pop	{r3, pc}

080066fc <USBD_LL_StallEP>:
{
 80066fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80066fe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006702:	f7fc f8de 	bl	80028c2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006706:	f7ff ffd5 	bl	80066b4 <USBD_Get_USB_Status>
}
 800670a:	bd08      	pop	{r3, pc}

0800670c <USBD_LL_ClearStallEP>:
{
 800670c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800670e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006712:	f7fc f917 	bl	8002944 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8006716:	f7ff ffcd 	bl	80066b4 <USBD_Get_USB_Status>
}
 800671a:	bd08      	pop	{r3, pc}

0800671c <USBD_LL_SetUSBAddress>:
{
 800671c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800671e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006722:	f7fb ffe1 	bl	80026e8 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006726:	f7ff ffc5 	bl	80066b4 <USBD_Get_USB_Status>
}
 800672a:	bd08      	pop	{r3, pc}

0800672c <USBD_LL_Transmit>:
{
 800672c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800672e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006732:	f7fc f89c 	bl	800286e <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8006736:	f7ff ffbd 	bl	80066b4 <USBD_Get_USB_Status>
}
 800673a:	bd08      	pop	{r3, pc}

0800673c <USBD_LL_PrepareReceive>:
{
 800673c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800673e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006742:	f7fc f85d 	bl	8002800 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8006746:	f7ff ffb5 	bl	80066b4 <USBD_Get_USB_Status>
}
 800674a:	bd08      	pop	{r3, pc}

0800674c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800674c:	2312      	movs	r3, #18
 800674e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006750:	4800      	ldr	r0, [pc, #0]	; (8006754 <USBD_FS_DeviceDescriptor+0x8>)
 8006752:	4770      	bx	lr
 8006754:	2000015c 	.word	0x2000015c

08006758 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006758:	2304      	movs	r3, #4
 800675a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800675c:	4800      	ldr	r0, [pc, #0]	; (8006760 <USBD_FS_LangIDStrDescriptor+0x8>)
 800675e:	4770      	bx	lr
 8006760:	20000170 	.word	0x20000170

08006764 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006764:	230c      	movs	r3, #12
 8006766:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8006768:	4800      	ldr	r0, [pc, #0]	; (800676c <USBD_FS_USR_BOSDescriptor+0x8>)
 800676a:	4770      	bx	lr
 800676c:	20000150 	.word	0x20000150

08006770 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8006770:	2300      	movs	r3, #0
 8006772:	4293      	cmp	r3, r2
 8006774:	d216      	bcs.n	80067a4 <IntToUnicode+0x34>
{
 8006776:	b430      	push	{r4, r5}
 8006778:	e00b      	b.n	8006792 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800677a:	3437      	adds	r4, #55	; 0x37
 800677c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8006780:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8006782:	005c      	lsls	r4, r3, #1
 8006784:	3401      	adds	r4, #1
 8006786:	2500      	movs	r5, #0
 8006788:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800678a:	3301      	adds	r3, #1
 800678c:	b2db      	uxtb	r3, r3
 800678e:	4293      	cmp	r3, r2
 8006790:	d206      	bcs.n	80067a0 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8006792:	0f04      	lsrs	r4, r0, #28
 8006794:	2c09      	cmp	r4, #9
 8006796:	d8f0      	bhi.n	800677a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006798:	3430      	adds	r4, #48	; 0x30
 800679a:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800679e:	e7ef      	b.n	8006780 <IntToUnicode+0x10>
  }
}
 80067a0:	bc30      	pop	{r4, r5}
 80067a2:	4770      	bx	lr
 80067a4:	4770      	bx	lr
	...

080067a8 <Get_SerialNum>:
{
 80067a8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067aa:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <Get_SerialNum+0x2c>)
 80067ac:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067ae:	3304      	adds	r3, #4
 80067b0:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067b2:	3304      	adds	r3, #4
 80067b4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80067b6:	18c0      	adds	r0, r0, r3
 80067b8:	d100      	bne.n	80067bc <Get_SerialNum+0x14>
}
 80067ba:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067bc:	4d06      	ldr	r5, [pc, #24]	; (80067d8 <Get_SerialNum+0x30>)
 80067be:	2208      	movs	r2, #8
 80067c0:	1ca9      	adds	r1, r5, #2
 80067c2:	f7ff ffd5 	bl	8006770 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067c6:	2204      	movs	r2, #4
 80067c8:	f105 0112 	add.w	r1, r5, #18
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7ff ffcf 	bl	8006770 <IntToUnicode>
}
 80067d2:	e7f2      	b.n	80067ba <Get_SerialNum+0x12>
 80067d4:	1ff0f420 	.word	0x1ff0f420
 80067d8:	20000174 	.word	0x20000174

080067dc <USBD_FS_SerialStrDescriptor>:
{
 80067dc:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80067de:	231a      	movs	r3, #26
 80067e0:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80067e2:	f7ff ffe1 	bl	80067a8 <Get_SerialNum>
}
 80067e6:	4801      	ldr	r0, [pc, #4]	; (80067ec <USBD_FS_SerialStrDescriptor+0x10>)
 80067e8:	bd08      	pop	{r3, pc}
 80067ea:	bf00      	nop
 80067ec:	20000174 	.word	0x20000174

080067f0 <USBD_FS_ProductStrDescriptor>:
{
 80067f0:	b508      	push	{r3, lr}
 80067f2:	460a      	mov	r2, r1
  if(speed == 0)
 80067f4:	b128      	cbz	r0, 8006802 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067f6:	4905      	ldr	r1, [pc, #20]	; (800680c <USBD_FS_ProductStrDescriptor+0x1c>)
 80067f8:	4805      	ldr	r0, [pc, #20]	; (8006810 <USBD_FS_ProductStrDescriptor+0x20>)
 80067fa:	f7fe ffe3 	bl	80057c4 <USBD_GetString>
}
 80067fe:	4803      	ldr	r0, [pc, #12]	; (800680c <USBD_FS_ProductStrDescriptor+0x1c>)
 8006800:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006802:	4902      	ldr	r1, [pc, #8]	; (800680c <USBD_FS_ProductStrDescriptor+0x1c>)
 8006804:	4802      	ldr	r0, [pc, #8]	; (8006810 <USBD_FS_ProductStrDescriptor+0x20>)
 8006806:	f7fe ffdd 	bl	80057c4 <USBD_GetString>
 800680a:	e7f8      	b.n	80067fe <USBD_FS_ProductStrDescriptor+0xe>
 800680c:	2001ace8 	.word	0x2001ace8
 8006810:	08010498 	.word	0x08010498

08006814 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006814:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006816:	4c04      	ldr	r4, [pc, #16]	; (8006828 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006818:	460a      	mov	r2, r1
 800681a:	4621      	mov	r1, r4
 800681c:	4803      	ldr	r0, [pc, #12]	; (800682c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800681e:	f7fe ffd1 	bl	80057c4 <USBD_GetString>
}
 8006822:	4620      	mov	r0, r4
 8006824:	bd10      	pop	{r4, pc}
 8006826:	bf00      	nop
 8006828:	2001ace8 	.word	0x2001ace8
 800682c:	08010484 	.word	0x08010484

08006830 <USBD_FS_ConfigStrDescriptor>:
{
 8006830:	b508      	push	{r3, lr}
 8006832:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8006834:	b128      	cbz	r0, 8006842 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006836:	4905      	ldr	r1, [pc, #20]	; (800684c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006838:	4805      	ldr	r0, [pc, #20]	; (8006850 <USBD_FS_ConfigStrDescriptor+0x20>)
 800683a:	f7fe ffc3 	bl	80057c4 <USBD_GetString>
}
 800683e:	4803      	ldr	r0, [pc, #12]	; (800684c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006840:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006842:	4902      	ldr	r1, [pc, #8]	; (800684c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006844:	4802      	ldr	r0, [pc, #8]	; (8006850 <USBD_FS_ConfigStrDescriptor+0x20>)
 8006846:	f7fe ffbd 	bl	80057c4 <USBD_GetString>
 800684a:	e7f8      	b.n	800683e <USBD_FS_ConfigStrDescriptor+0xe>
 800684c:	2001ace8 	.word	0x2001ace8
 8006850:	08010468 	.word	0x08010468

08006854 <USBD_FS_InterfaceStrDescriptor>:
{
 8006854:	b508      	push	{r3, lr}
 8006856:	460a      	mov	r2, r1
  if(speed == 0)
 8006858:	b128      	cbz	r0, 8006866 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800685a:	4905      	ldr	r1, [pc, #20]	; (8006870 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800685c:	4805      	ldr	r0, [pc, #20]	; (8006874 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800685e:	f7fe ffb1 	bl	80057c4 <USBD_GetString>
}
 8006862:	4803      	ldr	r0, [pc, #12]	; (8006870 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006864:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006866:	4902      	ldr	r1, [pc, #8]	; (8006870 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006868:	4802      	ldr	r0, [pc, #8]	; (8006874 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800686a:	f7fe ffab 	bl	80057c4 <USBD_GetString>
 800686e:	e7f8      	b.n	8006862 <USBD_FS_InterfaceStrDescriptor+0xe>
 8006870:	2001ace8 	.word	0x2001ace8
 8006874:	08010474 	.word	0x08010474

08006878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800687c:	480d      	ldr	r0, [pc, #52]	; (80068b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800687e:	490e      	ldr	r1, [pc, #56]	; (80068b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006880:	4a0e      	ldr	r2, [pc, #56]	; (80068bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006884:	e002      	b.n	800688c <LoopCopyDataInit>

08006886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800688a:	3304      	adds	r3, #4

0800688c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800688c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800688e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006890:	d3f9      	bcc.n	8006886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006892:	4a0b      	ldr	r2, [pc, #44]	; (80068c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006894:	4c0b      	ldr	r4, [pc, #44]	; (80068c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006898:	e001      	b.n	800689e <LoopFillZerobss>

0800689a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800689a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800689c:	3204      	adds	r2, #4

0800689e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800689e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068a0:	d3fb      	bcc.n	800689a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80068a2:	f7ff fd6d 	bl	8006380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068a6:	f009 fc45 	bl	8010134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068aa:	f7ff fc57 	bl	800615c <main>
  bx  lr    
 80068ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80068b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80068b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068b8:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80068bc:	080155b4 	.word	0x080155b4
  ldr r2, =_sbss
 80068c0:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80068c4:	2001b074 	.word	0x2001b074

080068c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068c8:	e7fe      	b.n	80068c8 <ADC_IRQHandler>

080068ca <_SetPhysRAMAddr>:
 80068ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80068ce:	4604      	mov	r4, r0
 80068d0:	460e      	mov	r6, r1
 80068d2:	4615      	mov	r5, r2
 80068d4:	b15b      	cbz	r3, 80068ee <_SetPhysRAMAddr+0x24>
 80068d6:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80068da:	4798      	blx	r3
 80068dc:	4631      	mov	r1, r6
 80068de:	4607      	mov	r7, r0
 80068e0:	462a      	mov	r2, r5
 80068e2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80068e6:	4620      	mov	r0, r4
 80068e8:	4798      	blx	r3
 80068ea:	463e      	mov	r6, r7
 80068ec:	4605      	mov	r5, r0
 80068ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80068f2:	4620      	mov	r0, r4
 80068f4:	212a      	movs	r1, #42	; 0x2a
 80068f6:	4798      	blx	r3
 80068f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80068fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80068fe:	4431      	add	r1, r6
 8006900:	4620      	mov	r0, r4
 8006902:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006906:	4798      	blx	r3
 8006908:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800690a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800690e:	b2b7      	uxth	r7, r6
 8006910:	4439      	add	r1, r7
 8006912:	4620      	mov	r0, r4
 8006914:	b2c9      	uxtb	r1, r1
 8006916:	4798      	blx	r3
 8006918:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800691a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800691e:	4431      	add	r1, r6
 8006920:	4620      	mov	r0, r4
 8006922:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006926:	4798      	blx	r3
 8006928:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800692a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800692e:	4439      	add	r1, r7
 8006930:	4620      	mov	r0, r4
 8006932:	b2c9      	uxtb	r1, r1
 8006934:	4798      	blx	r3
 8006936:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800693a:	4620      	mov	r0, r4
 800693c:	212b      	movs	r1, #43	; 0x2b
 800693e:	4798      	blx	r3
 8006940:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006942:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006946:	4429      	add	r1, r5
 8006948:	4620      	mov	r0, r4
 800694a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800694e:	4798      	blx	r3
 8006950:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006952:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006956:	b2ae      	uxth	r6, r5
 8006958:	4431      	add	r1, r6
 800695a:	4620      	mov	r0, r4
 800695c:	b2c9      	uxtb	r1, r1
 800695e:	4798      	blx	r3
 8006960:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006962:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006966:	4429      	add	r1, r5
 8006968:	4620      	mov	r0, r4
 800696a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800696e:	4798      	blx	r3
 8006970:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006972:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006976:	4431      	add	r1, r6
 8006978:	4620      	mov	r0, r4
 800697a:	b2c9      	uxtb	r1, r1
 800697c:	4798      	blx	r3
 800697e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006982:	4620      	mov	r0, r4
 8006984:	212c      	movs	r1, #44	; 0x2c
 8006986:	4798      	blx	r3
 8006988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800698a <_SetRect>:
 800698a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800698e:	4698      	mov	r8, r3
 8006990:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006992:	9f08      	ldr	r7, [sp, #32]
 8006994:	4604      	mov	r4, r0
 8006996:	4689      	mov	r9, r1
 8006998:	4615      	mov	r5, r2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d064      	beq.n	8006a68 <_SetRect+0xde>
 800699e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80069a2:	4798      	blx	r3
 80069a4:	463a      	mov	r2, r7
 80069a6:	4606      	mov	r6, r0
 80069a8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80069ac:	4641      	mov	r1, r8
 80069ae:	4620      	mov	r0, r4
 80069b0:	4798      	blx	r3
 80069b2:	462a      	mov	r2, r5
 80069b4:	4682      	mov	sl, r0
 80069b6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80069ba:	4649      	mov	r1, r9
 80069bc:	4620      	mov	r0, r4
 80069be:	4798      	blx	r3
 80069c0:	463a      	mov	r2, r7
 80069c2:	4605      	mov	r5, r0
 80069c4:	4641      	mov	r1, r8
 80069c6:	4620      	mov	r0, r4
 80069c8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80069cc:	4798      	blx	r3
 80069ce:	45b2      	cmp	sl, r6
 80069d0:	4607      	mov	r7, r0
 80069d2:	db02      	blt.n	80069da <_SetRect+0x50>
 80069d4:	4653      	mov	r3, sl
 80069d6:	46b2      	mov	sl, r6
 80069d8:	461e      	mov	r6, r3
 80069da:	42af      	cmp	r7, r5
 80069dc:	db02      	blt.n	80069e4 <_SetRect+0x5a>
 80069de:	463b      	mov	r3, r7
 80069e0:	462f      	mov	r7, r5
 80069e2:	461d      	mov	r5, r3
 80069e4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80069e8:	4620      	mov	r0, r4
 80069ea:	212a      	movs	r1, #42	; 0x2a
 80069ec:	4798      	blx	r3
 80069ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80069f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80069f4:	4451      	add	r1, sl
 80069f6:	4620      	mov	r0, r4
 80069f8:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80069fc:	4798      	blx	r3
 80069fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a00:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006a04:	4451      	add	r1, sl
 8006a06:	4620      	mov	r0, r4
 8006a08:	b2c9      	uxtb	r1, r1
 8006a0a:	4798      	blx	r3
 8006a0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a0e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006a12:	4431      	add	r1, r6
 8006a14:	4620      	mov	r0, r4
 8006a16:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006a1a:	4798      	blx	r3
 8006a1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006a22:	4431      	add	r1, r6
 8006a24:	4620      	mov	r0, r4
 8006a26:	b2c9      	uxtb	r1, r1
 8006a28:	4798      	blx	r3
 8006a2a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006a2e:	4620      	mov	r0, r4
 8006a30:	212b      	movs	r1, #43	; 0x2b
 8006a32:	4798      	blx	r3
 8006a34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006a36:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006a3a:	4439      	add	r1, r7
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006a42:	4798      	blx	r3
 8006a44:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006a46:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006a4a:	4439      	add	r1, r7
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	b2c9      	uxtb	r1, r1
 8006a50:	4798      	blx	r3
 8006a52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006a54:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006a58:	4429      	add	r1, r5
 8006a5a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4798      	blx	r3
 8006a62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006a64:	4429      	add	r1, r5
 8006a66:	e03f      	b.n	8006ae8 <_SetRect+0x15e>
 8006a68:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8006a6c:	212a      	movs	r1, #42	; 0x2a
 8006a6e:	4798      	blx	r3
 8006a70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006a76:	4449      	add	r1, r9
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006a7e:	4798      	blx	r3
 8006a80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006a86:	4449      	add	r1, r9
 8006a88:	4620      	mov	r0, r4
 8006a8a:	b2c9      	uxtb	r1, r1
 8006a8c:	4798      	blx	r3
 8006a8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a90:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006a94:	4441      	add	r1, r8
 8006a96:	4620      	mov	r0, r4
 8006a98:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006a9c:	4798      	blx	r3
 8006a9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006aa0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006aa4:	4441      	add	r1, r8
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	b2c9      	uxtb	r1, r1
 8006aaa:	4798      	blx	r3
 8006aac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	212b      	movs	r1, #43	; 0x2b
 8006ab4:	4798      	blx	r3
 8006ab6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ab8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006abc:	4429      	add	r1, r5
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006ac4:	4798      	blx	r3
 8006ac6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ac8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006acc:	4429      	add	r1, r5
 8006ace:	4620      	mov	r0, r4
 8006ad0:	b2c9      	uxtb	r1, r1
 8006ad2:	4798      	blx	r3
 8006ad4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ad6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006ada:	4439      	add	r1, r7
 8006adc:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	4798      	blx	r3
 8006ae4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ae6:	4439      	add	r1, r7
 8006ae8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006aec:	4620      	mov	r0, r4
 8006aee:	b2c9      	uxtb	r1, r1
 8006af0:	4798      	blx	r3
 8006af2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006af6:	4620      	mov	r0, r4
 8006af8:	212c      	movs	r1, #44	; 0x2c
 8006afa:	4798      	blx	r3
 8006afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b00 <_SetOrientation>:
 8006b00:	b513      	push	{r0, r1, r4, lr}
 8006b02:	4a0d      	ldr	r2, [pc, #52]	; (8006b38 <_SetOrientation+0x38>)
 8006b04:	4604      	mov	r4, r0
 8006b06:	6851      	ldr	r1, [r2, #4]
 8006b08:	6810      	ldr	r0, [r2, #0]
 8006b0a:	466b      	mov	r3, sp
 8006b0c:	c303      	stmia	r3!, {r0, r1}
 8006b0e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006b12:	4620      	mov	r0, r4
 8006b14:	2136      	movs	r1, #54	; 0x36
 8006b16:	4798      	blx	r3
 8006b18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b1a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8006b1c:	aa02      	add	r2, sp, #8
 8006b1e:	4413      	add	r3, r2
 8006b20:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8006b24:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8006b28:	4319      	orrs	r1, r3
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006b30:	b289      	uxth	r1, r1
 8006b32:	4798      	blx	r3
 8006b34:	b002      	add	sp, #8
 8006b36:	bd10      	pop	{r4, pc}
 8006b38:	080103d8 	.word	0x080103d8

08006b3c <_ReadPixel_16bpp_B8>:
 8006b3c:	b513      	push	{r0, r1, r4, lr}
 8006b3e:	4604      	mov	r4, r0
 8006b40:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8006b44:	202e      	movs	r0, #46	; 0x2e
 8006b46:	4798      	blx	r3
 8006b48:	6a21      	ldr	r1, [r4, #32]
 8006b4a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006b4e:	4668      	mov	r0, sp
 8006b50:	3103      	adds	r1, #3
 8006b52:	4798      	blx	r3
 8006b54:	6a22      	ldr	r2, [r4, #32]
 8006b56:	ab00      	add	r3, sp, #0
 8006b58:	4413      	add	r3, r2
 8006b5a:	f81d 2002 	ldrb.w	r2, [sp, r2]
 8006b5e:	7859      	ldrb	r1, [r3, #1]
 8006b60:	7898      	ldrb	r0, [r3, #2]
 8006b62:	08d2      	lsrs	r2, r2, #3
 8006b64:	0889      	lsrs	r1, r1, #2
 8006b66:	02d2      	lsls	r2, r2, #11
 8006b68:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8006b6c:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 8006b70:	b002      	add	sp, #8
 8006b72:	bd10      	pop	{r4, pc}

08006b74 <_ReadPixel_16bpp_B16_I>:
 8006b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b76:	4604      	mov	r4, r0
 8006b78:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8006b7c:	202e      	movs	r0, #46	; 0x2e
 8006b7e:	4798      	blx	r3
 8006b80:	6a21      	ldr	r1, [r4, #32]
 8006b82:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8006b86:	4668      	mov	r0, sp
 8006b88:	3102      	adds	r1, #2
 8006b8a:	4798      	blx	r3
 8006b8c:	6a23      	ldr	r3, [r4, #32]
 8006b8e:	a900      	add	r1, sp, #0
 8006b90:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 8006b94:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 8006b98:	8852      	ldrh	r2, [r2, #2]
 8006b9a:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 8006b9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8006ba2:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 8006ba6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8006baa:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8006bae:	b004      	add	sp, #16
 8006bb0:	bd10      	pop	{r4, pc}

08006bb2 <_SetReg_B8>:
 8006bb2:	b538      	push	{r3, r4, r5, lr}
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8006bbc:	0a08      	lsrs	r0, r1, #8
 8006bbe:	4798      	blx	r3
 8006bc0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8006bc4:	b2e8      	uxtb	r0, r5
 8006bc6:	4798      	blx	r3
 8006bc8:	bd38      	pop	{r3, r4, r5, pc}

08006bca <_SetReg_B16>:
 8006bca:	b508      	push	{r3, lr}
 8006bcc:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	4798      	blx	r3
 8006bd4:	bd08      	pop	{r3, pc}

08006bd6 <_WritePara_B8>:
 8006bd6:	b508      	push	{r3, lr}
 8006bd8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8006bdc:	b2c8      	uxtb	r0, r1
 8006bde:	4798      	blx	r3
 8006be0:	bd08      	pop	{r3, pc}

08006be2 <_WritePara_B16>:
 8006be2:	b508      	push	{r3, lr}
 8006be4:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8006be8:	4608      	mov	r0, r1
 8006bea:	4798      	blx	r3
 8006bec:	bd08      	pop	{r3, pc}
	...

08006bf0 <_SetInterface>:
 8006bf0:	2908      	cmp	r1, #8
 8006bf2:	d002      	beq.n	8006bfa <_SetInterface+0xa>
 8006bf4:	2910      	cmp	r1, #16
 8006bf6:	d005      	beq.n	8006c04 <_SetInterface+0x14>
 8006bf8:	4770      	bx	lr
 8006bfa:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <_SetInterface+0x24>)
 8006bfc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8006c00:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <_SetInterface+0x28>)
 8006c02:	e003      	b.n	8006c0c <_SetInterface+0x1c>
 8006c04:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <_SetInterface+0x2c>)
 8006c06:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <_SetInterface+0x30>)
 8006c0c:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	08006bb3 	.word	0x08006bb3
 8006c18:	08006bd7 	.word	0x08006bd7
 8006c1c:	08006bcb 	.word	0x08006bcb
 8006c20:	08006be3 	.word	0x08006be3

08006c24 <_ReadRect_16bpp_B8>:
 8006c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c26:	b085      	sub	sp, #20
 8006c28:	6884      	ldr	r4, [r0, #8]
 8006c2a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006c2c:	9700      	str	r7, [sp, #0]
 8006c2e:	1abd      	subs	r5, r7, r2
 8006c30:	1a58      	subs	r0, r3, r1
 8006c32:	3501      	adds	r5, #1
 8006c34:	fb00 5505 	mla	r5, r0, r5, r5
 8006c38:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006c3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c3e:	4620      	mov	r0, r4
 8006c40:	47b8      	blx	r7
 8006c42:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8006c46:	202e      	movs	r0, #46	; 0x2e
 8006c48:	4798      	blx	r3
 8006c4a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006c4e:	6a21      	ldr	r1, [r4, #32]
 8006c50:	a802      	add	r0, sp, #8
 8006c52:	4798      	blx	r3
 8006c54:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006c58:	a802      	add	r0, sp, #8
 8006c5a:	2103      	movs	r1, #3
 8006c5c:	4798      	blx	r3
 8006c5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006c62:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8006c66:	08db      	lsrs	r3, r3, #3
 8006c68:	0892      	lsrs	r2, r2, #2
 8006c6a:	02db      	lsls	r3, r3, #11
 8006c6c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006c70:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8006c74:	3d01      	subs	r5, #1
 8006c76:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8006c7a:	f826 3b02 	strh.w	r3, [r6], #2
 8006c7e:	d1e9      	bne.n	8006c54 <_ReadRect_16bpp_B8+0x30>
 8006c80:	b005      	add	sp, #20
 8006c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c84 <_ReadRect_16bpp_B16_I>:
 8006c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c86:	b087      	sub	sp, #28
 8006c88:	6884      	ldr	r4, [r0, #8]
 8006c8a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8006c8c:	9700      	str	r7, [sp, #0]
 8006c8e:	1abd      	subs	r5, r7, r2
 8006c90:	1a58      	subs	r0, r3, r1
 8006c92:	3501      	adds	r5, #1
 8006c94:	fb00 5505 	mla	r5, r0, r5, r5
 8006c98:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006c9c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	47b8      	blx	r7
 8006ca2:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8006ca6:	202e      	movs	r0, #46	; 0x2e
 8006ca8:	4798      	blx	r3
 8006caa:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8006cae:	6a21      	ldr	r1, [r4, #32]
 8006cb0:	a802      	add	r0, sp, #8
 8006cb2:	4798      	blx	r3
 8006cb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8006cb8:	a802      	add	r0, sp, #8
 8006cba:	2102      	movs	r1, #2
 8006cbc:	4798      	blx	r3
 8006cbe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8006cc2:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 8006cc6:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8006cca:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 8006cce:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8006cd2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8006cd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006cda:	3d01      	subs	r5, #1
 8006cdc:	f826 3b02 	strh.w	r3, [r6], #2
 8006ce0:	d1e8      	bne.n	8006cb4 <_ReadRect_16bpp_B16_I+0x30>
 8006ce2:	b007      	add	sp, #28
 8006ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006ce8 <GUIDRV_FlexColor_SetFunc66720>:
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	4604      	mov	r4, r0
 8006cec:	f000 fda6 	bl	800783c <GUIDRV_FlexColor__InitOnce>
 8006cf0:	68a3      	ldr	r3, [r4, #8]
 8006cf2:	4a12      	ldr	r2, [pc, #72]	; (8006d3c <GUIDRV_FlexColor_SetFunc66720+0x54>)
 8006cf4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8006cf8:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <GUIDRV_FlexColor_SetFunc66720+0x58>)
 8006cfa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006cfe:	4a11      	ldr	r2, [pc, #68]	; (8006d44 <GUIDRV_FlexColor_SetFunc66720+0x5c>)
 8006d00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006d04:	4a10      	ldr	r2, [pc, #64]	; (8006d48 <GUIDRV_FlexColor_SetFunc66720+0x60>)
 8006d06:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8006d10:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8006d14:	4a0d      	ldr	r2, [pc, #52]	; (8006d4c <GUIDRV_FlexColor_SetFunc66720+0x64>)
 8006d16:	490e      	ldr	r1, [pc, #56]	; (8006d50 <GUIDRV_FlexColor_SetFunc66720+0x68>)
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8006d1e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8006d20:	6809      	ldr	r1, [r1, #0]
 8006d22:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8006d26:	f022 0203 	bic.w	r2, r2, #3
 8006d2a:	490a      	ldr	r1, [pc, #40]	; (8006d54 <GUIDRV_FlexColor_SetFunc66720+0x6c>)
 8006d2c:	84da      	strh	r2, [r3, #38]	; 0x26
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <GUIDRV_FlexColor_SetFunc66720+0x70>)
 8006d30:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8006d34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	bf00      	nop
 8006d3c:	080068cb 	.word	0x080068cb
 8006d40:	0800698b 	.word	0x0800698b
 8006d44:	08006b01 	.word	0x08006b01
 8006d48:	08006b3d 	.word	0x08006b3d
 8006d4c:	20000194 	.word	0x20000194
 8006d50:	20000190 	.word	0x20000190
 8006d54:	08006c25 	.word	0x08006c25
 8006d58:	08006bf1 	.word	0x08006bf1

08006d5c <_ReadData>:
 8006d5c:	b508      	push	{r3, lr}
 8006d5e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8006d62:	4798      	blx	r3
 8006d64:	bd08      	pop	{r3, pc}

08006d66 <_WriteData>:
 8006d66:	b508      	push	{r3, lr}
 8006d68:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8006d6c:	b288      	uxth	r0, r1
 8006d6e:	4798      	blx	r3
 8006d70:	bd08      	pop	{r3, pc}
	...

08006d74 <_FillRect>:
 8006d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	4f3d      	ldr	r7, [pc, #244]	; (8006e70 <_FillRect+0xfc>)
 8006d7a:	6884      	ldr	r4, [r0, #8]
 8006d7c:	4682      	mov	sl, r0
 8006d7e:	6838      	ldr	r0, [r7, #0]
 8006d80:	7c00      	ldrb	r0, [r0, #16]
 8006d82:	f010 0f01 	tst.w	r0, #1
 8006d86:	b085      	sub	sp, #20
 8006d88:	460e      	mov	r6, r1
 8006d8a:	4615      	mov	r5, r2
 8006d8c:	4698      	mov	r8, r3
 8006d8e:	ebc1 0903 	rsb	r9, r1, r3
 8006d92:	d045      	beq.n	8006e20 <_FillRect+0xac>
 8006d94:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 8006d98:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006d9a:	4285      	cmp	r5, r0
 8006d9c:	dc65      	bgt.n	8006e6a <_FillRect+0xf6>
 8006d9e:	f8d4 c0c4 	ldr.w	ip, [r4, #196]	; 0xc4
 8006da2:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8006da4:	f1bc 0f00 	cmp.w	ip, #0
 8006da8:	d101      	bne.n	8006dae <_FillRect+0x3a>
 8006daa:	46b4      	mov	ip, r6
 8006dac:	e007      	b.n	8006dbe <_FillRect+0x4a>
 8006dae:	e88d 00a0 	stmia.w	sp, {r5, r7}
 8006db2:	4650      	mov	r0, sl
 8006db4:	4631      	mov	r1, r6
 8006db6:	462a      	mov	r2, r5
 8006db8:	4643      	mov	r3, r8
 8006dba:	47e0      	blx	ip
 8006dbc:	e011      	b.n	8006de2 <_FillRect+0x6e>
 8006dbe:	45c4      	cmp	ip, r8
 8006dc0:	dc0e      	bgt.n	8006de0 <_FillRect+0x6c>
 8006dc2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8006dc6:	f8cd c00c 	str.w	ip, [sp, #12]
 8006dca:	4661      	mov	r1, ip
 8006dcc:	4650      	mov	r0, sl
 8006dce:	462a      	mov	r2, r5
 8006dd0:	4798      	blx	r3
 8006dd2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006dd6:	f827 0b02 	strh.w	r0, [r7], #2
 8006dda:	f10c 0c01 	add.w	ip, ip, #1
 8006dde:	e7ee      	b.n	8006dbe <_FillRect+0x4a>
 8006de0:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8006de2:	1ebb      	subs	r3, r7, #2
 8006de4:	f109 0c01 	add.w	ip, r9, #1
 8006de8:	445f      	add	r7, fp
 8006dea:	42bb      	cmp	r3, r7
 8006dec:	d005      	beq.n	8006dfa <_FillRect+0x86>
 8006dee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006df0:	8859      	ldrh	r1, [r3, #2]
 8006df2:	404a      	eors	r2, r1
 8006df4:	f823 2f02 	strh.w	r2, [r3, #2]!
 8006df8:	e7f7      	b.n	8006dea <_FillRect+0x76>
 8006dfa:	9500      	str	r5, [sp, #0]
 8006dfc:	462a      	mov	r2, r5
 8006dfe:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006e02:	f8cd c00c 	str.w	ip, [sp, #12]
 8006e06:	4620      	mov	r0, r4
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4643      	mov	r3, r8
 8006e0c:	47b8      	blx	r7
 8006e0e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006e12:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8006e16:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006e18:	4661      	mov	r1, ip
 8006e1a:	4798      	blx	r3
 8006e1c:	3501      	adds	r5, #1
 8006e1e:	e7bb      	b.n	8006d98 <_FillRect+0x24>
 8006e20:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e22:	9000      	str	r0, [sp, #0]
 8006e24:	1a85      	subs	r5, r0, r2
 8006e26:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	47b0      	blx	r6
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6ea7      	ldr	r7, [r4, #104]	; 0x68
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	f109 0901 	add.w	r9, r9, #1
 8006e38:	f8d3 8000 	ldr.w	r8, [r3]
 8006e3c:	fb05 9509 	mla	r5, r5, r9, r9
 8006e40:	2301      	movs	r3, #1
 8006e42:	b195      	cbz	r5, 8006e6a <_FillRect+0xf6>
 8006e44:	2dfa      	cmp	r5, #250	; 0xfa
 8006e46:	bf34      	ite	cc
 8006e48:	462e      	movcc	r6, r5
 8006e4a:	26fa      	movcs	r6, #250	; 0xfa
 8006e4c:	b12b      	cbz	r3, 8006e5a <_FillRect+0xe6>
 8006e4e:	4638      	mov	r0, r7
 8006e50:	fa1f f188 	uxth.w	r1, r8
 8006e54:	4632      	mov	r2, r6
 8006e56:	f000 fe41 	bl	8007adc <GUI__memset16>
 8006e5a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8006e5e:	4638      	mov	r0, r7
 8006e60:	4631      	mov	r1, r6
 8006e62:	4798      	blx	r3
 8006e64:	1bad      	subs	r5, r5, r6
 8006e66:	2300      	movs	r3, #0
 8006e68:	e7eb      	b.n	8006e42 <_FillRect+0xce>
 8006e6a:	b005      	add	sp, #20
 8006e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e70:	200001b0 	.word	0x200001b0

08006e74 <_DrawBitmap>:
 8006e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	b08d      	sub	sp, #52	; 0x34
 8006e7a:	6885      	ldr	r5, [r0, #8]
 8006e7c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8006e7e:	9305      	str	r3, [sp, #20]
 8006e80:	1e7b      	subs	r3, r7, #1
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	9009      	str	r0, [sp, #36]	; 0x24
 8006e86:	9108      	str	r1, [sp, #32]
 8006e88:	920a      	str	r2, [sp, #40]	; 0x28
 8006e8a:	950b      	str	r5, [sp, #44]	; 0x2c
 8006e8c:	d903      	bls.n	8006e96 <_DrawBitmap+0x22>
 8006e8e:	2f04      	cmp	r7, #4
 8006e90:	d001      	beq.n	8006e96 <_DrawBitmap+0x22>
 8006e92:	2f08      	cmp	r7, #8
 8006e94:	d106      	bne.n	8006ea4 <_DrawBitmap+0x30>
 8006e96:	4b8f      	ldr	r3, [pc, #572]	; (80070d4 <_DrawBitmap+0x260>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	7c1b      	ldrb	r3, [r3, #16]
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d010      	beq.n	8006ec6 <_DrawBitmap+0x52>
 8006ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ea6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8006ea8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006eaa:	9908      	ldr	r1, [sp, #32]
 8006eac:	9b05      	ldr	r3, [sp, #20]
 8006eae:	443a      	add	r2, r7
 8006eb0:	4429      	add	r1, r5
 8006eb2:	3a01      	subs	r2, #1
 8006eb4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006eb6:	9200      	str	r2, [sp, #0]
 8006eb8:	440b      	add	r3, r1
 8006eba:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 8006ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	47a0      	blx	r4
 8006ec6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006eca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006ecc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8006ece:	ebc7 030b 	rsb	r3, r7, fp
 8006ed2:	42ab      	cmp	r3, r5
 8006ed4:	f280 8251 	bge.w	800737a <_DrawBitmap+0x506>
 8006ed8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8006eda:	1e7b      	subs	r3, r7, #1
 8006edc:	2b0f      	cmp	r3, #15
 8006ede:	f200 8245 	bhi.w	800736c <_DrawBitmap+0x4f8>
 8006ee2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006ee6:	0010      	.short	0x0010
 8006ee8:	024300b7 	.word	0x024300b7
 8006eec:	02430140 	.word	0x02430140
 8006ef0:	02430243 	.word	0x02430243
 8006ef4:	024301d7 	.word	0x024301d7
 8006ef8:	02430243 	.word	0x02430243
 8006efc:	02430243 	.word	0x02430243
 8006f00:	02430243 	.word	0x02430243
 8006f04:	023d      	.short	0x023d
 8006f06:	4b73      	ldr	r3, [pc, #460]	; (80070d4 <_DrawBitmap+0x260>)
 8006f08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68ac      	ldr	r4, [r5, #8]
 8006f0e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006f10:	7c1b      	ldrb	r3, [r3, #16]
 8006f12:	682f      	ldr	r7, [r5, #0]
 8006f14:	686d      	ldr	r5, [r5, #4]
 8006f16:	9507      	str	r5, [sp, #28]
 8006f18:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006f1c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	44aa      	add	sl, r5
 8006f26:	d01b      	beq.n	8006f60 <_DrawBitmap+0xec>
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d06e      	beq.n	800700a <_DrawBitmap+0x196>
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d06c      	beq.n	800700a <_DrawBitmap+0x196>
 8006f30:	9e05      	ldr	r6, [sp, #20]
 8006f32:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8006f36:	f898 1000 	ldrb.w	r1, [r8]
 8006f3a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8006f3e:	2280      	movs	r2, #128	; 0x80
 8006f40:	412a      	asrs	r2, r5
 8006f42:	4211      	tst	r1, r2
 8006f44:	bf16      	itet	ne
 8006f46:	9907      	ldrne	r1, [sp, #28]
 8006f48:	b2b8      	uxtheq	r0, r7
 8006f4a:	b288      	uxthne	r0, r1
 8006f4c:	3501      	adds	r5, #1
 8006f4e:	4798      	blx	r3
 8006f50:	2d08      	cmp	r5, #8
 8006f52:	bf04      	itt	eq
 8006f54:	f108 0801 	addeq.w	r8, r8, #1
 8006f58:	2500      	moveq	r5, #0
 8006f5a:	3e01      	subs	r6, #1
 8006f5c:	d1eb      	bne.n	8006f36 <_DrawBitmap+0xc2>
 8006f5e:	e205      	b.n	800736c <_DrawBitmap+0x4f8>
 8006f60:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006f62:	9506      	str	r5, [sp, #24]
 8006f64:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 8006f68:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006f6c:	f8cd a00c 	str.w	sl, [sp, #12]
 8006f70:	2500      	movs	r5, #0
 8006f72:	4656      	mov	r6, sl
 8006f74:	462b      	mov	r3, r5
 8006f76:	9f06      	ldr	r7, [sp, #24]
 8006f78:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8006f7c:	783a      	ldrb	r2, [r7, #0]
 8006f7e:	fa4c fc08 	asr.w	ip, ip, r8
 8006f82:	ea12 0c0c 	ands.w	ip, r2, ip
 8006f86:	d00b      	beq.n	8006fa0 <_DrawBitmap+0x12c>
 8006f88:	b913      	cbnz	r3, 8006f90 <_DrawBitmap+0x11c>
 8006f8a:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 8006f8e:	9603      	str	r6, [sp, #12]
 8006f90:	9f07      	ldr	r7, [sp, #28]
 8006f92:	f8a9 7000 	strh.w	r7, [r9]
 8006f96:	3501      	adds	r5, #1
 8006f98:	f109 0902 	add.w	r9, r9, #2
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e017      	b.n	8006fd0 <_DrawBitmap+0x15c>
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d114      	bne.n	8006fce <_DrawBitmap+0x15a>
 8006fa4:	f8cd b000 	str.w	fp, [sp]
 8006fa8:	f8cd c010 	str.w	ip, [sp, #16]
 8006fac:	4620      	mov	r0, r4
 8006fae:	9903      	ldr	r1, [sp, #12]
 8006fb0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006fb4:	465a      	mov	r2, fp
 8006fb6:	1e73      	subs	r3, r6, #1
 8006fb8:	47b8      	blx	r7
 8006fba:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8006fbe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4798      	blx	r3
 8006fc4:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006fc8:	4665      	mov	r5, ip
 8006fca:	4663      	mov	r3, ip
 8006fcc:	e000      	b.n	8006fd0 <_DrawBitmap+0x15c>
 8006fce:	4663      	mov	r3, ip
 8006fd0:	f108 0801 	add.w	r8, r8, #1
 8006fd4:	f1b8 0f08 	cmp.w	r8, #8
 8006fd8:	f106 0601 	add.w	r6, r6, #1
 8006fdc:	d104      	bne.n	8006fe8 <_DrawBitmap+0x174>
 8006fde:	9f06      	ldr	r7, [sp, #24]
 8006fe0:	3701      	adds	r7, #1
 8006fe2:	9706      	str	r7, [sp, #24]
 8006fe4:	f04f 0800 	mov.w	r8, #0
 8006fe8:	9a05      	ldr	r2, [sp, #20]
 8006fea:	4452      	add	r2, sl
 8006fec:	42b2      	cmp	r2, r6
 8006fee:	d1c2      	bne.n	8006f76 <_DrawBitmap+0x102>
 8006ff0:	9f05      	ldr	r7, [sp, #20]
 8006ff2:	1e7b      	subs	r3, r7, #1
 8006ff4:	4453      	add	r3, sl
 8006ff6:	2d00      	cmp	r5, #0
 8006ff8:	f000 81b8 	beq.w	800736c <_DrawBitmap+0x4f8>
 8006ffc:	f8cd b000 	str.w	fp, [sp]
 8007000:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007004:	9903      	ldr	r1, [sp, #12]
 8007006:	4620      	mov	r0, r4
 8007008:	e13d      	b.n	8007286 <_DrawBitmap+0x412>
 800700a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800700e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8007010:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007012:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007016:	782a      	ldrb	r2, [r5, #0]
 8007018:	2380      	movs	r3, #128	; 0x80
 800701a:	4133      	asrs	r3, r6
 800701c:	44d1      	add	r9, sl
 800701e:	421a      	tst	r2, r3
 8007020:	ebc8 0909 	rsb	r9, r8, r9
 8007024:	d00d      	beq.n	8007042 <_DrawBitmap+0x1ce>
 8007026:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800702a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800702c:	4649      	mov	r1, r9
 800702e:	465a      	mov	r2, fp
 8007030:	4798      	blx	r3
 8007032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007034:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 8007038:	4043      	eors	r3, r0
 800703a:	4649      	mov	r1, r9
 800703c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800703e:	465a      	mov	r2, fp
 8007040:	47b8      	blx	r7
 8007042:	3601      	adds	r6, #1
 8007044:	2e08      	cmp	r6, #8
 8007046:	bf04      	itt	eq
 8007048:	3501      	addeq	r5, #1
 800704a:	2600      	moveq	r6, #0
 800704c:	f1b8 0801 	subs.w	r8, r8, #1
 8007050:	d1df      	bne.n	8007012 <_DrawBitmap+0x19e>
 8007052:	e18b      	b.n	800736c <_DrawBitmap+0x4f8>
 8007054:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007056:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007058:	68ac      	ldr	r4, [r5, #8]
 800705a:	2f00      	cmp	r7, #0
 800705c:	f000 8186 	beq.w	800736c <_DrawBitmap+0x4f8>
 8007060:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <_DrawBitmap+0x260>)
 8007062:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f895 a000 	ldrb.w	sl, [r5]
 800706a:	7c1b      	ldrb	r3, [r3, #16]
 800706c:	f013 0303 	ands.w	r3, r3, #3
 8007070:	d011      	beq.n	8007096 <_DrawBitmap+0x222>
 8007072:	2b02      	cmp	r3, #2
 8007074:	f040 817a 	bne.w	800736c <_DrawBitmap+0x4f8>
 8007078:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800707a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800707e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007080:	9703      	str	r7, [sp, #12]
 8007082:	44a9      	add	r9, r5
 8007084:	46a8      	mov	r8, r5
 8007086:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007088:	9507      	str	r5, [sp, #28]
 800708a:	2500      	movs	r5, #0
 800708c:	f8cd 9018 	str.w	r9, [sp, #24]
 8007090:	464e      	mov	r6, r9
 8007092:	462b      	mov	r3, r5
 8007094:	e040      	b.n	8007118 <_DrawBitmap+0x2a4>
 8007096:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007098:	9e05      	ldr	r6, [sp, #20]
 800709a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800709c:	f1c5 0303 	rsb	r3, r5, #3
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	f1c3 0206 	rsb	r2, r3, #6
 80070a6:	21c0      	movs	r1, #192	; 0xc0
 80070a8:	fa41 f202 	asr.w	r2, r1, r2
 80070ac:	ea02 020a 	and.w	r2, r2, sl
 80070b0:	40da      	lsrs	r2, r3
 80070b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80070b4:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80070b8:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 80070bc:	3501      	adds	r5, #1
 80070be:	4798      	blx	r3
 80070c0:	2d04      	cmp	r5, #4
 80070c2:	d103      	bne.n	80070cc <_DrawBitmap+0x258>
 80070c4:	f897 a001 	ldrb.w	sl, [r7, #1]
 80070c8:	2500      	movs	r5, #0
 80070ca:	3701      	adds	r7, #1
 80070cc:	3e01      	subs	r6, #1
 80070ce:	d1e5      	bne.n	800709c <_DrawBitmap+0x228>
 80070d0:	e14c      	b.n	800736c <_DrawBitmap+0x4f8>
 80070d2:	bf00      	nop
 80070d4:	200001b0 	.word	0x200001b0
 80070d8:	b913      	cbnz	r3, 80070e0 <_DrawBitmap+0x26c>
 80070da:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 80070dc:	9703      	str	r7, [sp, #12]
 80070de:	9606      	str	r6, [sp, #24]
 80070e0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80070e2:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 80070e6:	9f03      	ldr	r7, [sp, #12]
 80070e8:	803b      	strh	r3, [r7, #0]
 80070ea:	3702      	adds	r7, #2
 80070ec:	3501      	adds	r5, #1
 80070ee:	9703      	str	r7, [sp, #12]
 80070f0:	2301      	movs	r3, #1
 80070f2:	f108 0801 	add.w	r8, r8, #1
 80070f6:	f1b8 0f04 	cmp.w	r8, #4
 80070fa:	f106 0601 	add.w	r6, r6, #1
 80070fe:	d106      	bne.n	800710e <_DrawBitmap+0x29a>
 8007100:	9f07      	ldr	r7, [sp, #28]
 8007102:	f897 a001 	ldrb.w	sl, [r7, #1]
 8007106:	3701      	adds	r7, #1
 8007108:	9707      	str	r7, [sp, #28]
 800710a:	f04f 0800 	mov.w	r8, #0
 800710e:	9a05      	ldr	r2, [sp, #20]
 8007110:	444a      	add	r2, r9
 8007112:	42b2      	cmp	r2, r6
 8007114:	f000 80ac 	beq.w	8007270 <_DrawBitmap+0x3fc>
 8007118:	f1c8 0203 	rsb	r2, r8, #3
 800711c:	0052      	lsls	r2, r2, #1
 800711e:	f1c2 0106 	rsb	r1, r2, #6
 8007122:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 8007126:	fa4c fc01 	asr.w	ip, ip, r1
 800712a:	ea0c 0c0a 	and.w	ip, ip, sl
 800712e:	fa3c fc02 	lsrs.w	ip, ip, r2
 8007132:	d1d1      	bne.n	80070d8 <_DrawBitmap+0x264>
 8007134:	2b01      	cmp	r3, #1
 8007136:	d114      	bne.n	8007162 <_DrawBitmap+0x2ee>
 8007138:	f8cd b000 	str.w	fp, [sp]
 800713c:	f8cd c010 	str.w	ip, [sp, #16]
 8007140:	4620      	mov	r0, r4
 8007142:	9906      	ldr	r1, [sp, #24]
 8007144:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007148:	465a      	mov	r2, fp
 800714a:	1e73      	subs	r3, r6, #1
 800714c:	47b8      	blx	r7
 800714e:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007152:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007154:	4629      	mov	r1, r5
 8007156:	4798      	blx	r3
 8007158:	f8dd c010 	ldr.w	ip, [sp, #16]
 800715c:	4665      	mov	r5, ip
 800715e:	4663      	mov	r3, ip
 8007160:	e7c7      	b.n	80070f2 <_DrawBitmap+0x27e>
 8007162:	4663      	mov	r3, ip
 8007164:	e7c5      	b.n	80070f2 <_DrawBitmap+0x27e>
 8007166:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007168:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800716a:	68ac      	ldr	r4, [r5, #8]
 800716c:	2f00      	cmp	r7, #0
 800716e:	f000 80fd 	beq.w	800736c <_DrawBitmap+0x4f8>
 8007172:	4b83      	ldr	r3, [pc, #524]	; (8007380 <_DrawBitmap+0x50c>)
 8007174:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f895 a000 	ldrb.w	sl, [r5]
 800717c:	7c1b      	ldrb	r3, [r3, #16]
 800717e:	f013 0303 	ands.w	r3, r3, #3
 8007182:	d011      	beq.n	80071a8 <_DrawBitmap+0x334>
 8007184:	2b02      	cmp	r3, #2
 8007186:	f040 80f1 	bne.w	800736c <_DrawBitmap+0x4f8>
 800718a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800718c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007190:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007192:	9703      	str	r7, [sp, #12]
 8007194:	44a9      	add	r9, r5
 8007196:	46a8      	mov	r8, r5
 8007198:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800719a:	9507      	str	r5, [sp, #28]
 800719c:	2500      	movs	r5, #0
 800719e:	f8cd 9018 	str.w	r9, [sp, #24]
 80071a2:	464e      	mov	r6, r9
 80071a4:	462b      	mov	r3, r5
 80071a6:	e03c      	b.n	8007222 <_DrawBitmap+0x3ae>
 80071a8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80071aa:	9e05      	ldr	r6, [sp, #20]
 80071ac:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80071ae:	f1c5 0301 	rsb	r3, r5, #1
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	f1c3 0204 	rsb	r2, r3, #4
 80071b8:	21f0      	movs	r1, #240	; 0xf0
 80071ba:	fa41 f202 	asr.w	r2, r1, r2
 80071be:	ea02 020a 	and.w	r2, r2, sl
 80071c2:	40da      	lsrs	r2, r3
 80071c4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80071c6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80071ca:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 80071ce:	3501      	adds	r5, #1
 80071d0:	4798      	blx	r3
 80071d2:	2d02      	cmp	r5, #2
 80071d4:	d103      	bne.n	80071de <_DrawBitmap+0x36a>
 80071d6:	f897 a001 	ldrb.w	sl, [r7, #1]
 80071da:	2500      	movs	r5, #0
 80071dc:	3701      	adds	r7, #1
 80071de:	3e01      	subs	r6, #1
 80071e0:	d1e5      	bne.n	80071ae <_DrawBitmap+0x33a>
 80071e2:	e0c3      	b.n	800736c <_DrawBitmap+0x4f8>
 80071e4:	b913      	cbnz	r3, 80071ec <_DrawBitmap+0x378>
 80071e6:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 80071e8:	9703      	str	r7, [sp, #12]
 80071ea:	9606      	str	r6, [sp, #24]
 80071ec:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80071ee:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 80071f2:	9f03      	ldr	r7, [sp, #12]
 80071f4:	803b      	strh	r3, [r7, #0]
 80071f6:	3702      	adds	r7, #2
 80071f8:	3501      	adds	r5, #1
 80071fa:	9703      	str	r7, [sp, #12]
 80071fc:	2301      	movs	r3, #1
 80071fe:	f108 0801 	add.w	r8, r8, #1
 8007202:	f1b8 0f02 	cmp.w	r8, #2
 8007206:	f106 0601 	add.w	r6, r6, #1
 800720a:	d106      	bne.n	800721a <_DrawBitmap+0x3a6>
 800720c:	9f07      	ldr	r7, [sp, #28]
 800720e:	f897 a001 	ldrb.w	sl, [r7, #1]
 8007212:	3701      	adds	r7, #1
 8007214:	9707      	str	r7, [sp, #28]
 8007216:	f04f 0800 	mov.w	r8, #0
 800721a:	9a05      	ldr	r2, [sp, #20]
 800721c:	444a      	add	r2, r9
 800721e:	42b2      	cmp	r2, r6
 8007220:	d026      	beq.n	8007270 <_DrawBitmap+0x3fc>
 8007222:	f1c8 0201 	rsb	r2, r8, #1
 8007226:	0092      	lsls	r2, r2, #2
 8007228:	f1c2 0104 	rsb	r1, r2, #4
 800722c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8007230:	fa4c fc01 	asr.w	ip, ip, r1
 8007234:	ea0c 0c0a 	and.w	ip, ip, sl
 8007238:	fa3c fc02 	lsrs.w	ip, ip, r2
 800723c:	d1d2      	bne.n	80071e4 <_DrawBitmap+0x370>
 800723e:	2b01      	cmp	r3, #1
 8007240:	d114      	bne.n	800726c <_DrawBitmap+0x3f8>
 8007242:	f8cd b000 	str.w	fp, [sp]
 8007246:	f8cd c010 	str.w	ip, [sp, #16]
 800724a:	4620      	mov	r0, r4
 800724c:	9906      	ldr	r1, [sp, #24]
 800724e:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007252:	465a      	mov	r2, fp
 8007254:	1e73      	subs	r3, r6, #1
 8007256:	47b8      	blx	r7
 8007258:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800725c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800725e:	4629      	mov	r1, r5
 8007260:	4798      	blx	r3
 8007262:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007266:	4665      	mov	r5, ip
 8007268:	4663      	mov	r3, ip
 800726a:	e7c8      	b.n	80071fe <_DrawBitmap+0x38a>
 800726c:	4663      	mov	r3, ip
 800726e:	e7c6      	b.n	80071fe <_DrawBitmap+0x38a>
 8007270:	9f05      	ldr	r7, [sp, #20]
 8007272:	1e7b      	subs	r3, r7, #1
 8007274:	444b      	add	r3, r9
 8007276:	2d00      	cmp	r5, #0
 8007278:	d078      	beq.n	800736c <_DrawBitmap+0x4f8>
 800727a:	f8cd b000 	str.w	fp, [sp]
 800727e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007282:	9906      	ldr	r1, [sp, #24]
 8007284:	4620      	mov	r0, r4
 8007286:	465a      	mov	r2, fp
 8007288:	47b0      	blx	r6
 800728a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800728e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007290:	4629      	mov	r1, r5
 8007292:	e06a      	b.n	800736a <_DrawBitmap+0x4f6>
 8007294:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007296:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007298:	68ac      	ldr	r4, [r5, #8]
 800729a:	2f00      	cmp	r7, #0
 800729c:	d066      	beq.n	800736c <_DrawBitmap+0x4f8>
 800729e:	4b38      	ldr	r3, [pc, #224]	; (8007380 <_DrawBitmap+0x50c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	7c1b      	ldrb	r3, [r3, #16]
 80072a4:	f013 0303 	ands.w	r3, r3, #3
 80072a8:	d009      	beq.n	80072be <_DrawBitmap+0x44a>
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d15e      	bne.n	800736c <_DrawBitmap+0x4f8>
 80072ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072b2:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 80072b6:	2600      	movs	r6, #0
 80072b8:	464f      	mov	r7, r9
 80072ba:	4633      	mov	r3, r6
 80072bc:	e022      	b.n	8007304 <_DrawBitmap+0x490>
 80072be:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80072c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072c2:	9f05      	ldr	r7, [sp, #20]
 80072c4:	443b      	add	r3, r7
 80072c6:	1b5b      	subs	r3, r3, r5
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dd4f      	ble.n	800736c <_DrawBitmap+0x4f8>
 80072cc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80072d0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80072d2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80072d6:	f837 0022 	ldrh.w	r0, [r7, r2, lsl #2]
 80072da:	4798      	blx	r3
 80072dc:	e7f0      	b.n	80072c0 <_DrawBitmap+0x44c>
 80072de:	b913      	cbnz	r3, 80072e6 <_DrawBitmap+0x472>
 80072e0:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 80072e4:	46b9      	mov	r9, r7
 80072e6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80072e8:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 80072ec:	f8a8 3000 	strh.w	r3, [r8]
 80072f0:	3601      	adds	r6, #1
 80072f2:	f108 0802 	add.w	r8, r8, #2
 80072f6:	2301      	movs	r3, #1
 80072f8:	9a08      	ldr	r2, [sp, #32]
 80072fa:	9d05      	ldr	r5, [sp, #20]
 80072fc:	3701      	adds	r7, #1
 80072fe:	442a      	add	r2, r5
 8007300:	42ba      	cmp	r2, r7
 8007302:	d01c      	beq.n	800733e <_DrawBitmap+0x4ca>
 8007304:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007306:	9808      	ldr	r0, [sp, #32]
 8007308:	1a2a      	subs	r2, r5, r0
 800730a:	f812 a007 	ldrb.w	sl, [r2, r7]
 800730e:	f1ba 0f00 	cmp.w	sl, #0
 8007312:	d1e4      	bne.n	80072de <_DrawBitmap+0x46a>
 8007314:	2b01      	cmp	r3, #1
 8007316:	d110      	bne.n	800733a <_DrawBitmap+0x4c6>
 8007318:	f8cd b000 	str.w	fp, [sp]
 800731c:	4620      	mov	r0, r4
 800731e:	4649      	mov	r1, r9
 8007320:	465a      	mov	r2, fp
 8007322:	1e7b      	subs	r3, r7, #1
 8007324:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8007328:	47a8      	blx	r5
 800732a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800732e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007330:	4631      	mov	r1, r6
 8007332:	4798      	blx	r3
 8007334:	4656      	mov	r6, sl
 8007336:	4653      	mov	r3, sl
 8007338:	e7de      	b.n	80072f8 <_DrawBitmap+0x484>
 800733a:	4653      	mov	r3, sl
 800733c:	e7dc      	b.n	80072f8 <_DrawBitmap+0x484>
 800733e:	9f08      	ldr	r7, [sp, #32]
 8007340:	1e6b      	subs	r3, r5, #1
 8007342:	443b      	add	r3, r7
 8007344:	b196      	cbz	r6, 800736c <_DrawBitmap+0x4f8>
 8007346:	f8cd b000 	str.w	fp, [sp]
 800734a:	4620      	mov	r0, r4
 800734c:	4649      	mov	r1, r9
 800734e:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8007352:	465a      	mov	r2, fp
 8007354:	47a8      	blx	r5
 8007356:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800735a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800735c:	4631      	mov	r1, r6
 800735e:	e004      	b.n	800736a <_DrawBitmap+0x4f6>
 8007360:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007362:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007364:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 8007368:	9905      	ldr	r1, [sp, #20]
 800736a:	4798      	blx	r3
 800736c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800736e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8007370:	442f      	add	r7, r5
 8007372:	9719      	str	r7, [sp, #100]	; 0x64
 8007374:	f10b 0b01 	add.w	fp, fp, #1
 8007378:	e5a7      	b.n	8006eca <_DrawBitmap+0x56>
 800737a:	b00d      	add	sp, #52	; 0x34
 800737c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007380:	200001b0 	.word	0x200001b0

08007384 <GUIDRV_FlexColor_SetMode16bppC0B16>:
 8007384:	b510      	push	{r4, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	f000 fa58 	bl	800783c <GUIDRV_FlexColor__InitOnce>
 800738c:	68a4      	ldr	r4, [r4, #8]
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 8007390:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8007394:	4b0f      	ldr	r3, [pc, #60]	; (80073d4 <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 8007396:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800739a:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 800739c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80073a0:	4b0e      	ldr	r3, [pc, #56]	; (80073dc <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 80073a2:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 80073a6:	4b0e      	ldr	r3, [pc, #56]	; (80073e0 <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 80073a8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 80073ac:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 80073ae:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 80073b2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80073b6:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 80073ba:	4620      	mov	r0, r4
 80073bc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80073c0:	2110      	movs	r1, #16
 80073c2:	4798      	blx	r3
 80073c4:	2310      	movs	r3, #16
 80073c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80073c8:	4b07      	ldr	r3, [pc, #28]	; (80073e8 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 80073ca:	6463      	str	r3, [r4, #68]	; 0x44
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	bf00      	nop
 80073d0:	08006e75 	.word	0x08006e75
 80073d4:	08006d75 	.word	0x08006d75
 80073d8:	0800778b 	.word	0x0800778b
 80073dc:	080076fb 	.word	0x080076fb
 80073e0:	08006d5d 	.word	0x08006d5d
 80073e4:	08006d67 	.word	0x08006d67
 80073e8:	08013588 	.word	0x08013588

080073ec <_Log2PhysX_X0Y0S0>:
 80073ec:	4608      	mov	r0, r1
 80073ee:	4770      	bx	lr

080073f0 <_Log2PhysX_X1Y0S0>:
 80073f0:	6800      	ldr	r0, [r0, #0]
 80073f2:	1a40      	subs	r0, r0, r1
 80073f4:	3801      	subs	r0, #1
 80073f6:	4770      	bx	lr

080073f8 <_Log2PhysX_X0Y1S0>:
 80073f8:	4608      	mov	r0, r1
 80073fa:	4770      	bx	lr

080073fc <_Log2PhysX_X1Y1S0>:
 80073fc:	6800      	ldr	r0, [r0, #0]
 80073fe:	1a40      	subs	r0, r0, r1
 8007400:	3801      	subs	r0, #1
 8007402:	4770      	bx	lr

08007404 <_Log2PhysX_X0Y0S1>:
 8007404:	4610      	mov	r0, r2
 8007406:	4770      	bx	lr

08007408 <_Log2PhysX_X1Y0S1>:
 8007408:	6840      	ldr	r0, [r0, #4]
 800740a:	1a80      	subs	r0, r0, r2
 800740c:	3801      	subs	r0, #1
 800740e:	4770      	bx	lr

08007410 <_Log2PhysX_X0Y1S1>:
 8007410:	4610      	mov	r0, r2
 8007412:	4770      	bx	lr

08007414 <_Log2PhysX_X1Y1S1>:
 8007414:	6840      	ldr	r0, [r0, #4]
 8007416:	1a80      	subs	r0, r0, r2
 8007418:	3801      	subs	r0, #1
 800741a:	4770      	bx	lr

0800741c <_Log2PhysY_X0Y0S0>:
 800741c:	4610      	mov	r0, r2
 800741e:	4770      	bx	lr

08007420 <_Log2PhysY_X1Y0S0>:
 8007420:	4610      	mov	r0, r2
 8007422:	4770      	bx	lr

08007424 <_Log2PhysY_X0Y1S0>:
 8007424:	6840      	ldr	r0, [r0, #4]
 8007426:	1a80      	subs	r0, r0, r2
 8007428:	3801      	subs	r0, #1
 800742a:	4770      	bx	lr

0800742c <_Log2PhysY_X1Y1S0>:
 800742c:	6840      	ldr	r0, [r0, #4]
 800742e:	1a80      	subs	r0, r0, r2
 8007430:	3801      	subs	r0, #1
 8007432:	4770      	bx	lr

08007434 <_Log2PhysY_X0Y0S1>:
 8007434:	4608      	mov	r0, r1
 8007436:	4770      	bx	lr

08007438 <_Log2PhysY_X1Y0S1>:
 8007438:	4608      	mov	r0, r1
 800743a:	4770      	bx	lr

0800743c <_Log2PhysY_X0Y1S1>:
 800743c:	6800      	ldr	r0, [r0, #0]
 800743e:	1a40      	subs	r0, r0, r1
 8007440:	3801      	subs	r0, #1
 8007442:	4770      	bx	lr

08007444 <_Log2PhysY_X1Y1S1>:
 8007444:	6800      	ldr	r0, [r0, #0]
 8007446:	1a40      	subs	r0, r0, r1
 8007448:	3801      	subs	r0, #1
 800744a:	4770      	bx	lr

0800744c <_SetPixelIndex>:
 800744c:	b510      	push	{r4, lr}
 800744e:	6884      	ldr	r4, [r0, #8]
 8007450:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8007454:	47a0      	blx	r4
 8007456:	bd10      	pop	{r4, pc}

08007458 <_GetPixelIndex>:
 8007458:	b508      	push	{r3, lr}
 800745a:	6883      	ldr	r3, [r0, #8]
 800745c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007460:	4798      	blx	r3
 8007462:	bd08      	pop	{r3, pc}

08007464 <_XorPixel>:
 8007464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007466:	4604      	mov	r4, r0
 8007468:	460f      	mov	r7, r1
 800746a:	4616      	mov	r6, r2
 800746c:	6885      	ldr	r5, [r0, #8]
 800746e:	f7ff fff3 	bl	8007458 <_GetPixelIndex>
 8007472:	9001      	str	r0, [sp, #4]
 8007474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007478:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800747a:	4620      	mov	r0, r4
 800747c:	4639      	mov	r1, r7
 800747e:	4632      	mov	r2, r6
 8007480:	ea8e 0303 	eor.w	r3, lr, r3
 8007484:	f7ff ffe2 	bl	800744c <_SetPixelIndex>
 8007488:	b003      	add	sp, #12
 800748a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800748c <_DrawHLine>:
 800748c:	b513      	push	{r0, r1, r4, lr}
 800748e:	6884      	ldr	r4, [r0, #8]
 8007490:	9200      	str	r2, [sp, #0]
 8007492:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 8007496:	47a0      	blx	r4
 8007498:	b002      	add	sp, #8
 800749a:	bd10      	pop	{r4, pc}

0800749c <_DrawVLine>:
 800749c:	b513      	push	{r0, r1, r4, lr}
 800749e:	6884      	ldr	r4, [r0, #8]
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 80074a6:	460b      	mov	r3, r1
 80074a8:	47a0      	blx	r4
 80074aa:	b002      	add	sp, #8
 80074ac:	bd10      	pop	{r4, pc}

080074ae <_FillRect>:
 80074ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074b0:	9c06      	ldr	r4, [sp, #24]
 80074b2:	6885      	ldr	r5, [r0, #8]
 80074b4:	9400      	str	r4, [sp, #0]
 80074b6:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 80074ba:	47a0      	blx	r4
 80074bc:	b003      	add	sp, #12
 80074be:	bd30      	pop	{r4, r5, pc}

080074c0 <_DrawBitmap>:
 80074c0:	b530      	push	{r4, r5, lr}
 80074c2:	b087      	sub	sp, #28
 80074c4:	6885      	ldr	r5, [r0, #8]
 80074c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074c8:	9400      	str	r4, [sp, #0]
 80074ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80074cc:	9401      	str	r4, [sp, #4]
 80074ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80074d0:	9402      	str	r4, [sp, #8]
 80074d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80074d4:	9403      	str	r4, [sp, #12]
 80074d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80074d8:	9404      	str	r4, [sp, #16]
 80074da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80074dc:	9405      	str	r4, [sp, #20]
 80074de:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 80074e2:	47a0      	blx	r4
 80074e4:	b007      	add	sp, #28
 80074e6:	bd30      	pop	{r4, r5, pc}

080074e8 <_GetDevFunc_SetRect>:
 80074e8:	4770      	bx	lr
	...

080074ec <_GetDevFunc_SetRectOutside>:
 80074ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074ee:	9e07      	ldr	r6, [sp, #28]
 80074f0:	6884      	ldr	r4, [r0, #8]
 80074f2:	4d0c      	ldr	r5, [pc, #48]	; (8007524 <_GetDevFunc_SetRectOutside+0x38>)
 80074f4:	b176      	cbz	r6, 8007514 <_GetDevFunc_SetRectOutside+0x28>
 80074f6:	6828      	ldr	r0, [r5, #0]
 80074f8:	b988      	cbnz	r0, 800751e <_GetDevFunc_SetRectOutside+0x32>
 80074fa:	9806      	ldr	r0, [sp, #24]
 80074fc:	9000      	str	r0, [sp, #0]
 80074fe:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007502:	4620      	mov	r0, r4
 8007504:	47b0      	blx	r6
 8007506:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800750a:	602b      	str	r3, [r5, #0]
 800750c:	4b06      	ldr	r3, [pc, #24]	; (8007528 <_GetDevFunc_SetRectOutside+0x3c>)
 800750e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8007512:	e004      	b.n	800751e <_GetDevFunc_SetRectOutside+0x32>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	b113      	cbz	r3, 800751e <_GetDevFunc_SetRectOutside+0x32>
 8007518:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800751c:	602e      	str	r6, [r5, #0]
 800751e:	b002      	add	sp, #8
 8007520:	bd70      	pop	{r4, r5, r6, pc}
 8007522:	bf00      	nop
 8007524:	20019264 	.word	0x20019264
 8007528:	080074e9 	.word	0x080074e9

0800752c <_ReadPixelCust_16bpp>:
 800752c:	b508      	push	{r3, lr}
 800752e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007530:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8007534:	6990      	ldr	r0, [r2, #24]
 8007536:	4798      	blx	r3
 8007538:	bd08      	pop	{r3, pc}

0800753a <_ReadPixelCust_18bpp>:
 800753a:	b508      	push	{r3, lr}
 800753c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800753e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8007542:	6990      	ldr	r0, [r2, #24]
 8007544:	4798      	blx	r3
 8007546:	bd08      	pop	{r3, pc}

08007548 <_ReadRectCust_16bpp>:
 8007548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800754c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800754e:	6884      	ldr	r4, [r0, #8]
 8007550:	9500      	str	r5, [sp, #0]
 8007552:	4617      	mov	r7, r2
 8007554:	4620      	mov	r0, r4
 8007556:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800755a:	4699      	mov	r9, r3
 800755c:	4688      	mov	r8, r1
 800755e:	1bed      	subs	r5, r5, r7
 8007560:	47b0      	blx	r6
 8007562:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007564:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8007568:	6988      	ldr	r0, [r1, #24]
 800756a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800756c:	ebc8 0809 	rsb	r8, r8, r9
 8007570:	1c6a      	adds	r2, r5, #1
 8007572:	fb08 2202 	mla	r2, r8, r2, r2
 8007576:	4798      	blx	r3
 8007578:	b003      	add	sp, #12
 800757a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800757e <_ReadRectCust_18bpp>:
 800757e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007582:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007584:	6884      	ldr	r4, [r0, #8]
 8007586:	9500      	str	r5, [sp, #0]
 8007588:	4617      	mov	r7, r2
 800758a:	4620      	mov	r0, r4
 800758c:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007590:	4699      	mov	r9, r3
 8007592:	4688      	mov	r8, r1
 8007594:	1bed      	subs	r5, r5, r7
 8007596:	47b0      	blx	r6
 8007598:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800759a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800759e:	6988      	ldr	r0, [r1, #24]
 80075a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075a2:	ebc8 0809 	rsb	r8, r8, r9
 80075a6:	1c6a      	adds	r2, r5, #1
 80075a8:	fb08 2202 	mla	r2, r8, r2, r2
 80075ac:	4798      	blx	r3
 80075ae:	b003      	add	sp, #12
 80075b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080075b4 <_GetDevFunc>:
 80075b4:	3901      	subs	r1, #1
 80075b6:	2917      	cmp	r1, #23
 80075b8:	d824      	bhi.n	8007604 <_GetDevFunc+0x50>
 80075ba:	e8df f001 	tbb	[pc, r1]
 80075be:	2310      	.short	0x2310
 80075c0:	23232323 	.word	0x23232323
 80075c4:	0c232323 	.word	0x0c232323
 80075c8:	23150e25 	.word	0x23150e25
 80075cc:	23232323 	.word	0x23232323
 80075d0:	1f232323 	.word	0x1f232323
 80075d4:	211a      	.short	0x211a
 80075d6:	480d      	ldr	r0, [pc, #52]	; (800760c <_GetDevFunc+0x58>)
 80075d8:	4770      	bx	lr
 80075da:	480d      	ldr	r0, [pc, #52]	; (8007610 <_GetDevFunc+0x5c>)
 80075dc:	4770      	bx	lr
 80075de:	6803      	ldr	r3, [r0, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 80075e6:	4770      	bx	lr
 80075e8:	6803      	ldr	r3, [r0, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80075f0:	4770      	bx	lr
 80075f2:	6803      	ldr	r3, [r0, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80075fa:	4770      	bx	lr
 80075fc:	4805      	ldr	r0, [pc, #20]	; (8007614 <_GetDevFunc+0x60>)
 80075fe:	4770      	bx	lr
 8007600:	4805      	ldr	r0, [pc, #20]	; (8007618 <_GetDevFunc+0x64>)
 8007602:	4770      	bx	lr
 8007604:	2000      	movs	r0, #0
 8007606:	4770      	bx	lr
 8007608:	4804      	ldr	r0, [pc, #16]	; (800761c <_GetDevFunc+0x68>)
 800760a:	4770      	bx	lr
 800760c:	0800796b 	.word	0x0800796b
 8007610:	0800790d 	.word	0x0800790d
 8007614:	08007871 	.word	0x08007871
 8007618:	080074ed 	.word	0x080074ed
 800761c:	08007957 	.word	0x08007957

08007620 <_GetDevProp>:
 8007620:	3901      	subs	r1, #1
 8007622:	6880      	ldr	r0, [r0, #8]
 8007624:	290d      	cmp	r1, #13
 8007626:	d823      	bhi.n	8007670 <_GetDevProp+0x50>
 8007628:	e8df f001 	tbb	[pc, r1]
 800762c:	0f0d0b09 	.word	0x0f0d0b09
 8007630:	11222222 	.word	0x11222222
 8007634:	13252507 	.word	0x13252507
 8007638:	1d18      	.short	0x1d18
 800763a:	2000      	movs	r0, #0
 800763c:	4770      	bx	lr
 800763e:	6800      	ldr	r0, [r0, #0]
 8007640:	4770      	bx	lr
 8007642:	6840      	ldr	r0, [r0, #4]
 8007644:	4770      	bx	lr
 8007646:	6880      	ldr	r0, [r0, #8]
 8007648:	4770      	bx	lr
 800764a:	68c0      	ldr	r0, [r0, #12]
 800764c:	4770      	bx	lr
 800764e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007650:	4770      	bx	lr
 8007652:	b188      	cbz	r0, 8007678 <_GetDevProp+0x58>
 8007654:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007656:	f000 0001 	and.w	r0, r0, #1
 800765a:	4770      	bx	lr
 800765c:	b160      	cbz	r0, 8007678 <_GetDevProp+0x58>
 800765e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007660:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8007664:	4770      	bx	lr
 8007666:	b138      	cbz	r0, 8007678 <_GetDevProp+0x58>
 8007668:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800766a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800766e:	4770      	bx	lr
 8007670:	f04f 30ff 	mov.w	r0, #4294967295
 8007674:	4770      	bx	lr
 8007676:	2001      	movs	r0, #1
 8007678:	4770      	bx	lr

0800767a <_GetDevData>:
 800767a:	6883      	ldr	r3, [r0, #8]
 800767c:	2901      	cmp	r1, #1
 800767e:	bf0c      	ite	eq
 8007680:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 8007682:	2000      	movne	r0, #0
 8007684:	4770      	bx	lr

08007686 <_GetRect>:
 8007686:	6883      	ldr	r3, [r0, #8]
 8007688:	2200      	movs	r2, #0
 800768a:	800a      	strh	r2, [r1, #0]
 800768c:	804a      	strh	r2, [r1, #2]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	3a01      	subs	r2, #1
 8007694:	3b01      	subs	r3, #1
 8007696:	808a      	strh	r2, [r1, #4]
 8007698:	80cb      	strh	r3, [r1, #6]
 800769a:	4770      	bx	lr

0800769c <GUIDRV_FlexColor__SetLog2Phys>:
 800769c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769e:	4d10      	ldr	r5, [pc, #64]	; (80076e0 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 80076a0:	462e      	mov	r6, r5
 80076a2:	4607      	mov	r7, r0
 80076a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80076a6:	b091      	sub	sp, #68	; 0x44
 80076a8:	466c      	mov	r4, sp
 80076aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076ac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80076b0:	3520      	adds	r5, #32
 80076b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80076b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076b8:	ac08      	add	r4, sp, #32
 80076ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80076c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80076c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c6:	aa10      	add	r2, sp, #64	; 0x40
 80076c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076cc:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80076d0:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80076d4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80076d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076dc:	b011      	add	sp, #68	; 0x44
 80076de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e0:	080103e0 	.word	0x080103e0

080076e4 <_SetOrg>:
 80076e4:	b507      	push	{r0, r1, r2, lr}
 80076e6:	6980      	ldr	r0, [r0, #24]
 80076e8:	e88d 0006 	stmia.w	sp, {r1, r2}
 80076ec:	2103      	movs	r1, #3
 80076ee:	466a      	mov	r2, sp
 80076f0:	f7fe f94a 	bl	8005988 <LCD_X_DisplayDriver>
 80076f4:	b003      	add	sp, #12
 80076f6:	f85d fb04 	ldr.w	pc, [sp], #4

080076fa <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 80076fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076fe:	6884      	ldr	r4, [r0, #8]
 8007700:	4698      	mov	r8, r3
 8007702:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007704:	079b      	lsls	r3, r3, #30
 8007706:	4689      	mov	r9, r1
 8007708:	4617      	mov	r7, r2
 800770a:	d532      	bpl.n	8007772 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 800770c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007710:	4620      	mov	r0, r4
 8007712:	4798      	blx	r3
 8007714:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8007718:	4606      	mov	r6, r0
 800771a:	463a      	mov	r2, r7
 800771c:	4620      	mov	r0, r4
 800771e:	4649      	mov	r1, r9
 8007720:	47a8      	blx	r5
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	69a2      	ldr	r2, [r4, #24]
 8007726:	429e      	cmp	r6, r3
 8007728:	bfac      	ite	ge
 800772a:	2300      	movge	r3, #0
 800772c:	2301      	movlt	r3, #1
 800772e:	4296      	cmp	r6, r2
 8007730:	bfd4      	ite	le
 8007732:	461a      	movle	r2, r3
 8007734:	f043 0201 	orrgt.w	r2, r3, #1
 8007738:	6963      	ldr	r3, [r4, #20]
 800773a:	4298      	cmp	r0, r3
 800773c:	bfac      	ite	ge
 800773e:	4613      	movge	r3, r2
 8007740:	f042 0301 	orrlt.w	r3, r2, #1
 8007744:	4605      	mov	r5, r0
 8007746:	b913      	cbnz	r3, 800774e <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 8007748:	69e3      	ldr	r3, [r4, #28]
 800774a:	4298      	cmp	r0, r3
 800774c:	dd0a      	ble.n	8007764 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 800774e:	6862      	ldr	r2, [r4, #4]
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	3a01      	subs	r2, #1
 8007754:	9200      	str	r2, [sp, #0]
 8007756:	2100      	movs	r1, #0
 8007758:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800775c:	4620      	mov	r0, r4
 800775e:	460a      	mov	r2, r1
 8007760:	3b01      	subs	r3, #1
 8007762:	47b8      	blx	r7
 8007764:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 8007768:	4620      	mov	r0, r4
 800776a:	4631      	mov	r1, r6
 800776c:	462a      	mov	r2, r5
 800776e:	47b8      	blx	r7
 8007770:	e003      	b.n	800777a <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 8007772:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 8007776:	4620      	mov	r0, r4
 8007778:	47a8      	blx	r5
 800777a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800777e:	4620      	mov	r0, r4
 8007780:	4641      	mov	r1, r8
 8007782:	4798      	blx	r3
 8007784:	b003      	add	sp, #12
 8007786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800778a <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800778a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800778c:	6884      	ldr	r4, [r0, #8]
 800778e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007790:	079b      	lsls	r3, r3, #30
 8007792:	460f      	mov	r7, r1
 8007794:	4616      	mov	r6, r2
 8007796:	d545      	bpl.n	8007824 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 8007798:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800779c:	4620      	mov	r0, r4
 800779e:	4798      	blx	r3
 80077a0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80077a4:	4632      	mov	r2, r6
 80077a6:	4605      	mov	r5, r0
 80077a8:	4639      	mov	r1, r7
 80077aa:	4620      	mov	r0, r4
 80077ac:	4798      	blx	r3
 80077ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80077b2:	4606      	mov	r6, r0
 80077b4:	b11b      	cbz	r3, 80077be <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 80077b6:	4620      	mov	r0, r4
 80077b8:	2101      	movs	r1, #1
 80077ba:	2200      	movs	r2, #0
 80077bc:	4798      	blx	r3
 80077be:	6923      	ldr	r3, [r4, #16]
 80077c0:	69a2      	ldr	r2, [r4, #24]
 80077c2:	429d      	cmp	r5, r3
 80077c4:	bfac      	ite	ge
 80077c6:	2300      	movge	r3, #0
 80077c8:	2301      	movlt	r3, #1
 80077ca:	4295      	cmp	r5, r2
 80077cc:	bfd4      	ite	le
 80077ce:	461a      	movle	r2, r3
 80077d0:	f043 0201 	orrgt.w	r2, r3, #1
 80077d4:	6963      	ldr	r3, [r4, #20]
 80077d6:	429e      	cmp	r6, r3
 80077d8:	bfac      	ite	ge
 80077da:	4613      	movge	r3, r2
 80077dc:	f042 0301 	orrlt.w	r3, r2, #1
 80077e0:	b913      	cbnz	r3, 80077e8 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 80077e2:	69e3      	ldr	r3, [r4, #28]
 80077e4:	429e      	cmp	r6, r3
 80077e6:	dd0a      	ble.n	80077fe <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 80077e8:	6862      	ldr	r2, [r4, #4]
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	3a01      	subs	r2, #1
 80077ee:	9200      	str	r2, [sp, #0]
 80077f0:	2100      	movs	r1, #0
 80077f2:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80077f6:	4620      	mov	r0, r4
 80077f8:	460a      	mov	r2, r1
 80077fa:	3b01      	subs	r3, #1
 80077fc:	47b8      	blx	r7
 80077fe:	4629      	mov	r1, r5
 8007800:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007804:	4620      	mov	r0, r4
 8007806:	4632      	mov	r2, r6
 8007808:	4798      	blx	r3
 800780a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800780e:	4620      	mov	r0, r4
 8007810:	4798      	blx	r3
 8007812:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007816:	4605      	mov	r5, r0
 8007818:	b16b      	cbz	r3, 8007836 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800781a:	4620      	mov	r0, r4
 800781c:	2100      	movs	r1, #0
 800781e:	2201      	movs	r2, #1
 8007820:	4798      	blx	r3
 8007822:	e008      	b.n	8007836 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8007824:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007828:	4620      	mov	r0, r4
 800782a:	4798      	blx	r3
 800782c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007830:	4620      	mov	r0, r4
 8007832:	4798      	blx	r3
 8007834:	4605      	mov	r5, r0
 8007836:	4628      	mov	r0, r5
 8007838:	b003      	add	sp, #12
 800783a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800783c <GUIDRV_FlexColor__InitOnce>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	6885      	ldr	r5, [r0, #8]
 8007840:	4604      	mov	r4, r0
 8007842:	b995      	cbnz	r5, 800786a <GUIDRV_FlexColor__InitOnce+0x2e>
 8007844:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8007848:	f001 fda6 	bl	8009398 <GUI_ALLOC_GetFixedBlock>
 800784c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8007850:	60a0      	str	r0, [r4, #8]
 8007852:	4629      	mov	r1, r5
 8007854:	f000 f970 	bl	8007b38 <GUI__memset>
 8007858:	68a3      	ldr	r3, [r4, #8]
 800785a:	2202      	movs	r2, #2
 800785c:	84da      	strh	r2, [r3, #38]	; 0x26
 800785e:	2201      	movs	r2, #1
 8007860:	621a      	str	r2, [r3, #32]
 8007862:	4a02      	ldr	r2, [pc, #8]	; (800786c <GUIDRV_FlexColor__InitOnce+0x30>)
 8007864:	641c      	str	r4, [r3, #64]	; 0x40
 8007866:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	0800769d 	.word	0x0800769d

08007870 <_SetDevFunc>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	4606      	mov	r6, r0
 8007874:	460d      	mov	r5, r1
 8007876:	4614      	mov	r4, r2
 8007878:	f7ff ffe0 	bl	800783c <GUIDRV_FlexColor__InitOnce>
 800787c:	68b3      	ldr	r3, [r6, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d03b      	beq.n	80078fa <_SetDevFunc+0x8a>
 8007882:	2d26      	cmp	r5, #38	; 0x26
 8007884:	d002      	beq.n	800788c <_SetDevFunc+0x1c>
 8007886:	2d27      	cmp	r5, #39	; 0x27
 8007888:	d016      	beq.n	80078b8 <_SetDevFunc+0x48>
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800788e:	2a10      	cmp	r2, #16
 8007890:	d002      	beq.n	8007898 <_SetDevFunc+0x28>
 8007892:	2a12      	cmp	r2, #18
 8007894:	d008      	beq.n	80078a8 <_SetDevFunc+0x38>
 8007896:	bd70      	pop	{r4, r5, r6, pc}
 8007898:	4a18      	ldr	r2, [pc, #96]	; (80078fc <_SetDevFunc+0x8c>)
 800789a:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800789e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80078a2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	4a15      	ldr	r2, [pc, #84]	; (8007900 <_SetDevFunc+0x90>)
 80078aa:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 80078ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80078b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ba:	2a10      	cmp	r2, #16
 80078bc:	d002      	beq.n	80078c4 <_SetDevFunc+0x54>
 80078be:	2a12      	cmp	r2, #18
 80078c0:	d00e      	beq.n	80078e0 <_SetDevFunc+0x70>
 80078c2:	bd70      	pop	{r4, r5, r6, pc}
 80078c4:	b13c      	cbz	r4, 80078d6 <_SetDevFunc+0x66>
 80078c6:	4a0f      	ldr	r2, [pc, #60]	; (8007904 <_SetDevFunc+0x94>)
 80078c8:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 80078cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80078d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80078d4:	bd70      	pop	{r4, r5, r6, pc}
 80078d6:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 80078da:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	b13c      	cbz	r4, 80078f2 <_SetDevFunc+0x82>
 80078e2:	4a09      	ldr	r2, [pc, #36]	; (8007908 <_SetDevFunc+0x98>)
 80078e4:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 80078e8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80078ec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
 80078f2:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 80078f6:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	0800752d 	.word	0x0800752d
 8007900:	0800753b 	.word	0x0800753b
 8007904:	08007549 	.word	0x08007549
 8007908:	0800757f 	.word	0x0800757f

0800790c <_GetDevFunc_Init>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4605      	mov	r5, r0
 8007910:	f7ff ff94 	bl	800783c <GUIDRV_FlexColor__InitOnce>
 8007914:	68ac      	ldr	r4, [r5, #8]
 8007916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800791a:	f001 fd3d 	bl	8009398 <GUI_ALLOC_GetFixedBlock>
 800791e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007920:	66a0      	str	r0, [r4, #104]	; 0x68
 8007922:	3307      	adds	r3, #7
 8007924:	10d8      	asrs	r0, r3, #3
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	4358      	muls	r0, r3
 800792a:	f001 fd35 	bl	8009398 <GUI_ALLOC_GetFixedBlock>
 800792e:	2101      	movs	r1, #1
 8007930:	2200      	movs	r2, #0
 8007932:	66e0      	str	r0, [r4, #108]	; 0x6c
 8007934:	69a8      	ldr	r0, [r5, #24]
 8007936:	f7fe f827 	bl	8005988 <LCD_X_DisplayDriver>
 800793a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800793e:	4605      	mov	r5, r0
 8007940:	4620      	mov	r0, r4
 8007942:	4798      	blx	r3
 8007944:	4620      	mov	r0, r4
 8007946:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800794a:	4798      	blx	r3
 800794c:	2d00      	cmp	r5, #0
 800794e:	bfd4      	ite	le
 8007950:	2000      	movle	r0, #0
 8007952:	2001      	movgt	r0, #1
 8007954:	bd38      	pop	{r3, r4, r5, pc}

08007956 <_GetDevFunc_SetSize>:
 8007956:	b570      	push	{r4, r5, r6, lr}
 8007958:	4604      	mov	r4, r0
 800795a:	460d      	mov	r5, r1
 800795c:	4616      	mov	r6, r2
 800795e:	f7ff ff6d 	bl	800783c <GUIDRV_FlexColor__InitOnce>
 8007962:	68a3      	ldr	r3, [r4, #8]
 8007964:	e883 0060 	stmia.w	r3, {r5, r6}
 8007968:	bd70      	pop	{r4, r5, r6, pc}

0800796a <_GetDevFunc_SetVSize>:
 800796a:	b570      	push	{r4, r5, r6, lr}
 800796c:	4604      	mov	r4, r0
 800796e:	460d      	mov	r5, r1
 8007970:	4616      	mov	r6, r2
 8007972:	f7ff ff63 	bl	800783c <GUIDRV_FlexColor__InitOnce>
 8007976:	68a3      	ldr	r3, [r4, #8]
 8007978:	609d      	str	r5, [r3, #8]
 800797a:	60de      	str	r6, [r3, #12]
 800797c:	bd70      	pop	{r4, r5, r6, pc}

0800797e <GUIDRV_FlexColor_Config>:
 800797e:	b538      	push	{r3, r4, r5, lr}
 8007980:	4605      	mov	r5, r0
 8007982:	460c      	mov	r4, r1
 8007984:	f7ff ff5a 	bl	800783c <GUIDRV_FlexColor__InitOnce>
 8007988:	68ab      	ldr	r3, [r5, #8]
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	62da      	str	r2, [r3, #44]	; 0x2c
 800798e:	6862      	ldr	r2, [r4, #4]
 8007990:	631a      	str	r2, [r3, #48]	; 0x30
 8007992:	68a2      	ldr	r2, [r4, #8]
 8007994:	635a      	str	r2, [r3, #52]	; 0x34
 8007996:	0752      	lsls	r2, r2, #29
 8007998:	d507      	bpl.n	80079aa <GUIDRV_FlexColor_Config+0x2c>
 800799a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	6059      	str	r1, [r3, #4]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	6899      	ldr	r1, [r3, #8]
 80079a6:	60d9      	str	r1, [r3, #12]
 80079a8:	609a      	str	r2, [r3, #8]
 80079aa:	89a2      	ldrh	r2, [r4, #12]
 80079ac:	849a      	strh	r2, [r3, #36]	; 0x24
 80079ae:	6922      	ldr	r2, [r4, #16]
 80079b0:	b112      	cbz	r2, 80079b8 <GUIDRV_FlexColor_Config+0x3a>
 80079b2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80079b6:	621a      	str	r2, [r3, #32]
 80079b8:	bd38      	pop	{r3, r4, r5, pc}

080079ba <GUIDRV_FlexColor_SetFunc>:
 80079ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079be:	4604      	mov	r4, r0
 80079c0:	461f      	mov	r7, r3
 80079c2:	4616      	mov	r6, r2
 80079c4:	4688      	mov	r8, r1
 80079c6:	f7ff ff39 	bl	800783c <GUIDRV_FlexColor__InitOnce>
 80079ca:	68a5      	ldr	r5, [r4, #8]
 80079cc:	4641      	mov	r1, r8
 80079ce:	2268      	movs	r2, #104	; 0x68
 80079d0:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 80079d4:	f008 fbf1 	bl	80101ba <memcpy>
 80079d8:	4620      	mov	r0, r4
 80079da:	47b0      	blx	r6
 80079dc:	4620      	mov	r0, r4
 80079de:	47b8      	blx	r7
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	4798      	blx	r3
 80079e6:	62a8      	str	r0, [r5, #40]	; 0x28
 80079e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080079ec <LCD_SetVSizeEx>:
 80079ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ee:	460d      	mov	r5, r1
 80079f0:	4614      	mov	r4, r2
 80079f2:	f000 fe2b 	bl	800864c <GUI_DEVICE__GetpDriver>
 80079f6:	9001      	str	r0, [sp, #4]
 80079f8:	b908      	cbnz	r0, 80079fe <LCD_SetVSizeEx+0x12>
 80079fa:	2001      	movs	r0, #1
 80079fc:	e00c      	b.n	8007a18 <LCD_SetVSizeEx+0x2c>
 80079fe:	68c3      	ldr	r3, [r0, #12]
 8007a00:	210a      	movs	r1, #10
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	a801      	add	r0, sp, #4
 8007a06:	4798      	blx	r3
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d0f5      	beq.n	80079fa <LCD_SetVSizeEx+0xe>
 8007a0e:	9801      	ldr	r0, [sp, #4]
 8007a10:	4629      	mov	r1, r5
 8007a12:	4622      	mov	r2, r4
 8007a14:	4798      	blx	r3
 8007a16:	2000      	movs	r0, #0
 8007a18:	b003      	add	sp, #12
 8007a1a:	bd30      	pop	{r4, r5, pc}

08007a1c <LCD_SetSizeEx>:
 8007a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a1e:	460d      	mov	r5, r1
 8007a20:	4614      	mov	r4, r2
 8007a22:	f000 fe13 	bl	800864c <GUI_DEVICE__GetpDriver>
 8007a26:	9001      	str	r0, [sp, #4]
 8007a28:	b908      	cbnz	r0, 8007a2e <LCD_SetSizeEx+0x12>
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	e00c      	b.n	8007a48 <LCD_SetSizeEx+0x2c>
 8007a2e:	68c3      	ldr	r3, [r0, #12]
 8007a30:	210b      	movs	r1, #11
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	a801      	add	r0, sp, #4
 8007a36:	4798      	blx	r3
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d0f5      	beq.n	8007a2a <LCD_SetSizeEx+0xe>
 8007a3e:	9801      	ldr	r0, [sp, #4]
 8007a40:	4629      	mov	r1, r5
 8007a42:	4622      	mov	r2, r4
 8007a44:	4798      	blx	r3
 8007a46:	2000      	movs	r0, #0
 8007a48:	b003      	add	sp, #12
 8007a4a:	bd30      	pop	{r4, r5, pc}

08007a4c <LCD_SetPosEx>:
 8007a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a4e:	460d      	mov	r5, r1
 8007a50:	4614      	mov	r4, r2
 8007a52:	f000 fdfb 	bl	800864c <GUI_DEVICE__GetpDriver>
 8007a56:	9001      	str	r0, [sp, #4]
 8007a58:	b908      	cbnz	r0, 8007a5e <LCD_SetPosEx+0x12>
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	e00c      	b.n	8007a78 <LCD_SetPosEx+0x2c>
 8007a5e:	68c3      	ldr	r3, [r0, #12]
 8007a60:	2103      	movs	r1, #3
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	a801      	add	r0, sp, #4
 8007a66:	4798      	blx	r3
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d0f5      	beq.n	8007a5a <LCD_SetPosEx+0xe>
 8007a6e:	9801      	ldr	r0, [sp, #4]
 8007a70:	4629      	mov	r1, r5
 8007a72:	4622      	mov	r2, r4
 8007a74:	4798      	blx	r3
 8007a76:	2000      	movs	r0, #0
 8007a78:	b003      	add	sp, #12
 8007a7a:	bd30      	pop	{r4, r5, pc}

08007a7c <LCD_SetLUTEntryEx>:
 8007a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a7e:	460d      	mov	r5, r1
 8007a80:	4614      	mov	r4, r2
 8007a82:	f000 fde3 	bl	800864c <GUI_DEVICE__GetpDriver>
 8007a86:	9001      	str	r0, [sp, #4]
 8007a88:	b908      	cbnz	r0, 8007a8e <LCD_SetLUTEntryEx+0x12>
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	e00c      	b.n	8007aa8 <LCD_SetLUTEntryEx+0x2c>
 8007a8e:	68c3      	ldr	r3, [r0, #12]
 8007a90:	2110      	movs	r1, #16
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	a801      	add	r0, sp, #4
 8007a96:	4798      	blx	r3
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d0f5      	beq.n	8007a8a <LCD_SetLUTEntryEx+0xe>
 8007a9e:	9801      	ldr	r0, [sp, #4]
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	4798      	blx	r3
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	b003      	add	sp, #12
 8007aaa:	bd30      	pop	{r4, r5, pc}

08007aac <LCD_GetPosEx>:
 8007aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aae:	460d      	mov	r5, r1
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	f000 fdcb 	bl	800864c <GUI_DEVICE__GetpDriver>
 8007ab6:	9001      	str	r0, [sp, #4]
 8007ab8:	b908      	cbnz	r0, 8007abe <LCD_GetPosEx+0x12>
 8007aba:	2001      	movs	r0, #1
 8007abc:	e00c      	b.n	8007ad8 <LCD_GetPosEx+0x2c>
 8007abe:	68c3      	ldr	r3, [r0, #12]
 8007ac0:	2104      	movs	r1, #4
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	a801      	add	r0, sp, #4
 8007ac6:	4798      	blx	r3
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0f5      	beq.n	8007aba <LCD_GetPosEx+0xe>
 8007ace:	9801      	ldr	r0, [sp, #4]
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	4798      	blx	r3
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	b003      	add	sp, #12
 8007ada:	bd30      	pop	{r4, r5, pc}

08007adc <GUI__memset16>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	0784      	lsls	r4, r0, #30
 8007ae0:	d502      	bpl.n	8007ae8 <GUI__memset16+0xc>
 8007ae2:	8001      	strh	r1, [r0, #0]
 8007ae4:	3a01      	subs	r2, #1
 8007ae6:	3002      	adds	r0, #2
 8007ae8:	0855      	lsrs	r5, r2, #1
 8007aea:	462b      	mov	r3, r5
 8007aec:	b305      	cbz	r5, 8007b30 <GUI__memset16+0x54>
 8007aee:	2d03      	cmp	r5, #3
 8007af0:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 8007af4:	dc02      	bgt.n	8007afc <GUI__memset16+0x20>
 8007af6:	4606      	mov	r6, r0
 8007af8:	461d      	mov	r5, r3
 8007afa:	e012      	b.n	8007b22 <GUI__memset16+0x46>
 8007afc:	4603      	mov	r3, r0
 8007afe:	462e      	mov	r6, r5
 8007b00:	3e04      	subs	r6, #4
 8007b02:	2e03      	cmp	r6, #3
 8007b04:	601c      	str	r4, [r3, #0]
 8007b06:	605c      	str	r4, [r3, #4]
 8007b08:	609c      	str	r4, [r3, #8]
 8007b0a:	60dc      	str	r4, [r3, #12]
 8007b0c:	f103 0310 	add.w	r3, r3, #16
 8007b10:	dcf6      	bgt.n	8007b00 <GUI__memset16+0x24>
 8007b12:	3d04      	subs	r5, #4
 8007b14:	08ab      	lsrs	r3, r5, #2
 8007b16:	1c5e      	adds	r6, r3, #1
 8007b18:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8007b1c:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 8007b20:	e7e9      	b.n	8007af6 <GUI__memset16+0x1a>
 8007b22:	b11d      	cbz	r5, 8007b2c <GUI__memset16+0x50>
 8007b24:	f846 4b04 	str.w	r4, [r6], #4
 8007b28:	3d01      	subs	r5, #1
 8007b2a:	e7fa      	b.n	8007b22 <GUI__memset16+0x46>
 8007b2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007b30:	07d3      	lsls	r3, r2, #31
 8007b32:	bf48      	it	mi
 8007b34:	8001      	strhmi	r1, [r0, #0]
 8007b36:	bd70      	pop	{r4, r5, r6, pc}

08007b38 <GUI__memset>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	b12a      	cbz	r2, 8007b48 <GUI__memset+0x10>
 8007b3c:	0783      	lsls	r3, r0, #30
 8007b3e:	d003      	beq.n	8007b48 <GUI__memset+0x10>
 8007b40:	f800 1b01 	strb.w	r1, [r0], #1
 8007b44:	3a01      	subs	r2, #1
 8007b46:	e7f8      	b.n	8007b3a <GUI__memset+0x2>
 8007b48:	0893      	lsrs	r3, r2, #2
 8007b4a:	d101      	bne.n	8007b50 <GUI__memset+0x18>
 8007b4c:	4402      	add	r2, r0
 8007b4e:	e017      	b.n	8007b80 <GUI__memset+0x48>
 8007b50:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8007b54:	f002 0203 	and.w	r2, r2, #3
 8007b58:	434c      	muls	r4, r1
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	dd06      	ble.n	8007b6e <GUI__memset+0x36>
 8007b60:	6004      	str	r4, [r0, #0]
 8007b62:	6044      	str	r4, [r0, #4]
 8007b64:	6084      	str	r4, [r0, #8]
 8007b66:	60c4      	str	r4, [r0, #12]
 8007b68:	3b04      	subs	r3, #4
 8007b6a:	3010      	adds	r0, #16
 8007b6c:	e7f5      	b.n	8007b5a <GUI__memset+0x22>
 8007b6e:	461e      	mov	r6, r3
 8007b70:	b11b      	cbz	r3, 8007b7a <GUI__memset+0x42>
 8007b72:	f845 4b04 	str.w	r4, [r5], #4
 8007b76:	3b01      	subs	r3, #1
 8007b78:	e7fa      	b.n	8007b70 <GUI__memset+0x38>
 8007b7a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8007b7e:	e7e5      	b.n	8007b4c <GUI__memset+0x14>
 8007b80:	4290      	cmp	r0, r2
 8007b82:	d002      	beq.n	8007b8a <GUI__memset+0x52>
 8007b84:	f800 1b01 	strb.w	r1, [r0], #1
 8007b88:	e7fa      	b.n	8007b80 <GUI__memset+0x48>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}

08007b8c <GUI_Delay>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4605      	mov	r5, r0
 8007b90:	f7fd fe84 	bl	800589c <GUI_X_GetTime>
 8007b94:	4405      	add	r5, r0
 8007b96:	f7fd fe81 	bl	800589c <GUI_X_GetTime>
 8007b9a:	1a2c      	subs	r4, r5, r0
 8007b9c:	2c00      	cmp	r4, #0
 8007b9e:	dd08      	ble.n	8007bb2 <GUI_Delay+0x26>
 8007ba0:	f000 fcbe 	bl	8008520 <GUI_Exec>
 8007ba4:	2c05      	cmp	r4, #5
 8007ba6:	bfb4      	ite	lt
 8007ba8:	4620      	movlt	r0, r4
 8007baa:	2005      	movge	r0, #5
 8007bac:	f7fd fe7c 	bl	80058a8 <GUI_X_Delay>
 8007bb0:	e7f1      	b.n	8007b96 <GUI_Delay+0xa>
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}

08007bb4 <GUI_TOUCH_Calibrate>:
 8007bb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007bb6:	2801      	cmp	r0, #1
 8007bb8:	9c08      	ldr	r4, [sp, #32]
 8007bba:	d845      	bhi.n	8007c48 <GUI_TOUCH_Calibrate+0x94>
 8007bbc:	4d25      	ldr	r5, [pc, #148]	; (8007c54 <GUI_TOUCH_Calibrate+0xa0>)
 8007bbe:	d00c      	beq.n	8007bda <GUI_TOUCH_Calibrate+0x26>
 8007bc0:	4e25      	ldr	r6, [pc, #148]	; (8007c58 <GUI_TOUCH_Calibrate+0xa4>)
 8007bc2:	e886 0006 	stmia.w	r6, {r1, r2}
 8007bc6:	6829      	ldr	r1, [r5, #0]
 8007bc8:	f001 0206 	and.w	r2, r1, #6
 8007bcc:	2a06      	cmp	r2, #6
 8007bce:	4a23      	ldr	r2, [pc, #140]	; (8007c5c <GUI_TOUCH_Calibrate+0xa8>)
 8007bd0:	d010      	beq.n	8007bf4 <GUI_TOUCH_Calibrate+0x40>
 8007bd2:	f001 0105 	and.w	r1, r1, #5
 8007bd6:	2901      	cmp	r1, #1
 8007bd8:	e00b      	b.n	8007bf2 <GUI_TOUCH_Calibrate+0x3e>
 8007bda:	4e21      	ldr	r6, [pc, #132]	; (8007c60 <GUI_TOUCH_Calibrate+0xac>)
 8007bdc:	e886 0006 	stmia.w	r6, {r1, r2}
 8007be0:	6829      	ldr	r1, [r5, #0]
 8007be2:	f001 0205 	and.w	r2, r1, #5
 8007be6:	2a05      	cmp	r2, #5
 8007be8:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <GUI_TOUCH_Calibrate+0xb0>)
 8007bea:	d003      	beq.n	8007bf4 <GUI_TOUCH_Calibrate+0x40>
 8007bec:	f001 0106 	and.w	r1, r1, #6
 8007bf0:	2902      	cmp	r1, #2
 8007bf2:	d102      	bne.n	8007bfa <GUI_TOUCH_Calibrate+0x46>
 8007bf4:	6014      	str	r4, [r2, #0]
 8007bf6:	6053      	str	r3, [r2, #4]
 8007bf8:	e001      	b.n	8007bfe <GUI_TOUCH_Calibrate+0x4a>
 8007bfa:	e882 0018 	stmia.w	r2, {r3, r4}
 8007bfe:	4b1a      	ldr	r3, [pc, #104]	; (8007c68 <GUI_TOUCH_Calibrate+0xb4>)
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	4102      	asrs	r2, r0
 8007c04:	07d2      	lsls	r2, r2, #31
 8007c06:	bf44      	itt	mi
 8007c08:	2200      	movmi	r2, #0
 8007c0a:	701a      	strbmi	r2, [r3, #0]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	fa02 f000 	lsl.w	r0, r2, r0
 8007c12:	781a      	ldrb	r2, [r3, #0]
 8007c14:	4310      	orrs	r0, r2
 8007c16:	b2c0      	uxtb	r0, r0
 8007c18:	2803      	cmp	r0, #3
 8007c1a:	7018      	strb	r0, [r3, #0]
 8007c1c:	d116      	bne.n	8007c4c <GUI_TOUCH_Calibrate+0x98>
 8007c1e:	4c13      	ldr	r4, [pc, #76]	; (8007c6c <GUI_TOUCH_Calibrate+0xb8>)
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	7c58      	ldrb	r0, [r3, #17]
 8007c24:	f004 ffb2 	bl	800cb8c <LCD_GetXSizeEx>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	7c58      	ldrb	r0, [r3, #17]
 8007c2e:	f004 ffb0 	bl	800cb92 <LCD_GetYSizeEx>
 8007c32:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <GUI_TOUCH_Calibrate+0xb0>)
 8007c34:	9002      	str	r0, [sp, #8]
 8007c36:	e88d 0028 	stmia.w	sp, {r3, r5}
 8007c3a:	4907      	ldr	r1, [pc, #28]	; (8007c58 <GUI_TOUCH_Calibrate+0xa4>)
 8007c3c:	4a08      	ldr	r2, [pc, #32]	; (8007c60 <GUI_TOUCH_Calibrate+0xac>)
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <GUI_TOUCH_Calibrate+0xa8>)
 8007c40:	2002      	movs	r0, #2
 8007c42:	f000 f8ff 	bl	8007e44 <GUI_TOUCH_CalcCoefficients>
 8007c46:	e002      	b.n	8007c4e <GUI_TOUCH_Calibrate+0x9a>
 8007c48:	2001      	movs	r0, #1
 8007c4a:	e000      	b.n	8007c4e <GUI_TOUCH_Calibrate+0x9a>
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	b004      	add	sp, #16
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	bf00      	nop
 8007c54:	2001927c 	.word	0x2001927c
 8007c58:	20019268 	.word	0x20019268
 8007c5c:	20019284 	.word	0x20019284
 8007c60:	20019290 	.word	0x20019290
 8007c64:	20019270 	.word	0x20019270
 8007c68:	20019278 	.word	0x20019278
 8007c6c:	200001b0 	.word	0x200001b0

08007c70 <GUI_TOUCH_Exec>:
 8007c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c72:	4c29      	ldr	r4, [pc, #164]	; (8007d18 <GUI_TOUCH_Exec+0xa8>)
 8007c74:	4d29      	ldr	r5, [pc, #164]	; (8007d1c <GUI_TOUCH_Exec+0xac>)
 8007c76:	7823      	ldrb	r3, [r4, #0]
 8007c78:	b087      	sub	sp, #28
 8007c7a:	4626      	mov	r6, r4
 8007c7c:	b943      	cbnz	r3, 8007c90 <GUI_TOUCH_Exec+0x20>
 8007c7e:	f7fd fe26 	bl	80058ce <GUI_TOUCH_X_MeasureY>
 8007c82:	6028      	str	r0, [r5, #0]
 8007c84:	f7fd fe1e 	bl	80058c4 <GUI_TOUCH_X_ActivateY>
 8007c88:	7823      	ldrb	r3, [r4, #0]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	7023      	strb	r3, [r4, #0]
 8007c8e:	e040      	b.n	8007d12 <GUI_TOUCH_Exec+0xa2>
 8007c90:	f7fd fe19 	bl	80058c6 <GUI_TOUCH_X_MeasureX>
 8007c94:	4c22      	ldr	r4, [pc, #136]	; (8007d20 <GUI_TOUCH_Exec+0xb0>)
 8007c96:	6020      	str	r0, [r4, #0]
 8007c98:	f7fd fe13 	bl	80058c2 <GUI_TOUCH_X_ActivateX>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	9302      	str	r3, [sp, #8]
 8007ca4:	f005 ff60 	bl	800db68 <GUI_TOUCH_GetLayer>
 8007ca8:	a902      	add	r1, sp, #8
 8007caa:	f88d 0015 	strb.w	r0, [sp, #21]
 8007cae:	a801      	add	r0, sp, #4
 8007cb0:	f000 f88a 	bl	8007dc8 <GUI_TOUCH_CalibratePoint>
 8007cb4:	4c1b      	ldr	r4, [pc, #108]	; (8007d24 <GUI_TOUCH_Exec+0xb4>)
 8007cb6:	b148      	cbz	r0, 8007ccc <GUI_TOUCH_Exec+0x5c>
 8007cb8:	7823      	ldrb	r3, [r4, #0]
 8007cba:	b343      	cbz	r3, 8007d0e <GUI_TOUCH_Exec+0x9e>
 8007cbc:	4b1a      	ldr	r3, [pc, #104]	; (8007d28 <GUI_TOUCH_Exec+0xb8>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	4b1a      	ldr	r3, [pc, #104]	; (8007d2c <GUI_TOUCH_Exec+0xbc>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	9304      	str	r3, [sp, #16]
 8007cc8:	2500      	movs	r5, #0
 8007cca:	e01a      	b.n	8007d02 <GUI_TOUCH_Exec+0x92>
 8007ccc:	4816      	ldr	r0, [pc, #88]	; (8007d28 <GUI_TOUCH_Exec+0xb8>)
 8007cce:	4917      	ldr	r1, [pc, #92]	; (8007d2c <GUI_TOUCH_Exec+0xbc>)
 8007cd0:	f894 c000 	ldrb.w	ip, [r4]
 8007cd4:	9a01      	ldr	r2, [sp, #4]
 8007cd6:	6807      	ldr	r7, [r0, #0]
 8007cd8:	9b02      	ldr	r3, [sp, #8]
 8007cda:	680d      	ldr	r5, [r1, #0]
 8007cdc:	f1bc 0f00 	cmp.w	ip, #0
 8007ce0:	d00a      	beq.n	8007cf8 <GUI_TOUCH_Exec+0x88>
 8007ce2:	1bd7      	subs	r7, r2, r7
 8007ce4:	1b5d      	subs	r5, r3, r5
 8007ce6:	2f00      	cmp	r7, #0
 8007ce8:	bfb8      	it	lt
 8007cea:	427f      	neglt	r7, r7
 8007cec:	2d00      	cmp	r5, #0
 8007cee:	bfb8      	it	lt
 8007cf0:	426d      	neglt	r5, r5
 8007cf2:	443d      	add	r5, r7
 8007cf4:	2d02      	cmp	r5, #2
 8007cf6:	dd0a      	ble.n	8007d0e <GUI_TOUCH_Exec+0x9e>
 8007cf8:	6002      	str	r2, [r0, #0]
 8007cfa:	9203      	str	r2, [sp, #12]
 8007cfc:	600b      	str	r3, [r1, #0]
 8007cfe:	9304      	str	r3, [sp, #16]
 8007d00:	2501      	movs	r5, #1
 8007d02:	a803      	add	r0, sp, #12
 8007d04:	f88d 5014 	strb.w	r5, [sp, #20]
 8007d08:	f000 fae8 	bl	80082dc <GUI_TOUCH_StoreStateEx>
 8007d0c:	7025      	strb	r5, [r4, #0]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	7033      	strb	r3, [r6, #0]
 8007d12:	b007      	add	sp, #28
 8007d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20019281 	.word	0x20019281
 8007d1c:	20019298 	.word	0x20019298
 8007d20:	2001928c 	.word	0x2001928c
 8007d24:	20019280 	.word	0x20019280
 8007d28:	2000019c 	.word	0x2000019c
 8007d2c:	20000198 	.word	0x20000198

08007d30 <GUI_TOUCH_TransformPoint>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	4b22      	ldr	r3, [pc, #136]	; (8007dbc <GUI_TOUCH_TransformPoint+0x8c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	ed2d 8b02 	vpush	{d8}
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460d      	mov	r5, r1
 8007d3e:	b3c3      	cbz	r3, 8007db2 <GUI_TOUCH_TransformPoint+0x82>
 8007d40:	edd0 7a00 	vldr	s15, [r0]
 8007d44:	4c1e      	ldr	r4, [pc, #120]	; (8007dc0 <GUI_TOUCH_TransformPoint+0x90>)
 8007d46:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007d4a:	edd1 7a00 	vldr	s15, [r1]
 8007d4e:	ed94 7a01 	vldr	s14, [r4, #4]
 8007d52:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8007d56:	edd4 7a00 	vldr	s15, [r4]
 8007d5a:	ee28 7a87 	vmul.f32	s14, s17, s14
 8007d5e:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007d62:	edd4 7a02 	vldr	s15, [r4, #8]
 8007d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d6a:	ee17 0a90 	vmov	r0, s15
 8007d6e:	f7f8 fbaf 	bl	80004d0 <__aeabi_f2d>
 8007d72:	2200      	movs	r2, #0
 8007d74:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <GUI_TOUCH_TransformPoint+0x94>)
 8007d76:	f7f8 fa4d 	bl	8000214 <__adddf3>
 8007d7a:	f7f8 fe13 	bl	80009a4 <__aeabi_d2iz>
 8007d7e:	edd4 7a04 	vldr	s15, [r4, #16]
 8007d82:	ed94 7a03 	vldr	s14, [r4, #12]
 8007d86:	6030      	str	r0, [r6, #0]
 8007d88:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007d8c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8007d90:	ed94 7a05 	vldr	s14, [r4, #20]
 8007d94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d98:	ee17 0a10 	vmov	r0, s14
 8007d9c:	f7f8 fb98 	bl	80004d0 <__aeabi_f2d>
 8007da0:	2200      	movs	r2, #0
 8007da2:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <GUI_TOUCH_TransformPoint+0x94>)
 8007da4:	f7f8 fa36 	bl	8000214 <__adddf3>
 8007da8:	f7f8 fdfc 	bl	80009a4 <__aeabi_d2iz>
 8007dac:	6028      	str	r0, [r5, #0]
 8007dae:	2000      	movs	r0, #0
 8007db0:	e000      	b.n	8007db4 <GUI_TOUCH_TransformPoint+0x84>
 8007db2:	2001      	movs	r0, #1
 8007db4:	ecbd 8b02 	vpop	{d8}
 8007db8:	bd70      	pop	{r4, r5, r6, pc}
 8007dba:	bf00      	nop
 8007dbc:	200192ac 	.word	0x200192ac
 8007dc0:	200192b0 	.word	0x200192b0
 8007dc4:	3fe00000 	.word	0x3fe00000

08007dc8 <GUI_TOUCH_CalibratePoint>:
 8007dc8:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <GUI_TOUCH_CalibratePoint+0x64>)
 8007dca:	6802      	ldr	r2, [r0, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	db27      	blt.n	8007e28 <GUI_TOUCH_CalibratePoint+0x60>
 8007dd8:	4e15      	ldr	r6, [pc, #84]	; (8007e30 <GUI_TOUCH_CalibratePoint+0x68>)
 8007dda:	680b      	ldr	r3, [r1, #0]
 8007ddc:	6836      	ldr	r6, [r6, #0]
 8007dde:	42b3      	cmp	r3, r6
 8007de0:	db22      	blt.n	8007e28 <GUI_TOUCH_CalibratePoint+0x60>
 8007de2:	4e14      	ldr	r6, [pc, #80]	; (8007e34 <GUI_TOUCH_CalibratePoint+0x6c>)
 8007de4:	6836      	ldr	r6, [r6, #0]
 8007de6:	42b2      	cmp	r2, r6
 8007de8:	dc1e      	bgt.n	8007e28 <GUI_TOUCH_CalibratePoint+0x60>
 8007dea:	4a13      	ldr	r2, [pc, #76]	; (8007e38 <GUI_TOUCH_CalibratePoint+0x70>)
 8007dec:	6812      	ldr	r2, [r2, #0]
 8007dee:	4293      	cmp	r3, r2
 8007df0:	dc1a      	bgt.n	8007e28 <GUI_TOUCH_CalibratePoint+0x60>
 8007df2:	f7ff ff9d 	bl	8007d30 <GUI_TOUCH_TransformPoint>
 8007df6:	b9c0      	cbnz	r0, 8007e2a <GUI_TOUCH_CalibratePoint+0x62>
 8007df8:	682a      	ldr	r2, [r5, #0]
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	da01      	bge.n	8007e02 <GUI_TOUCH_CalibratePoint+0x3a>
 8007dfe:	6028      	str	r0, [r5, #0]
 8007e00:	e006      	b.n	8007e10 <GUI_TOUCH_CalibratePoint+0x48>
 8007e02:	4b0e      	ldr	r3, [pc, #56]	; (8007e3c <GUI_TOUCH_CalibratePoint+0x74>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	bfa4      	itt	ge
 8007e0a:	f103 33ff 	addge.w	r3, r3, #4294967295
 8007e0e:	602b      	strge	r3, [r5, #0]
 8007e10:	6822      	ldr	r2, [r4, #0]
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	da01      	bge.n	8007e1a <GUI_TOUCH_CalibratePoint+0x52>
 8007e16:	2300      	movs	r3, #0
 8007e18:	e004      	b.n	8007e24 <GUI_TOUCH_CalibratePoint+0x5c>
 8007e1a:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <GUI_TOUCH_CalibratePoint+0x78>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	db03      	blt.n	8007e2a <GUI_TOUCH_CalibratePoint+0x62>
 8007e22:	3b01      	subs	r3, #1
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	2001      	movs	r0, #1
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	2001929c 	.word	0x2001929c
 8007e30:	200192a0 	.word	0x200192a0
 8007e34:	200192cc 	.word	0x200192cc
 8007e38:	200192c8 	.word	0x200192c8
 8007e3c:	200192a4 	.word	0x200192a4
 8007e40:	200192a8 	.word	0x200192a8

08007e44 <GUI_TOUCH_CalcCoefficients>:
 8007e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	ed2d 8b02 	vpush	{d8}
 8007e4c:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 800820c <GUI_TOUCH_CalcCoefficients+0x3c8>
 8007e50:	b08c      	sub	sp, #48	; 0x30
 8007e52:	2400      	movs	r4, #0
 8007e54:	2802      	cmp	r0, #2
 8007e56:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8007e58:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007e5a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8007e5e:	f8cc 4000 	str.w	r4, [ip]
 8007e62:	d135      	bne.n	8007ed0 <GUI_TOUCH_CalcCoefficients+0x8c>
 8007e64:	c912      	ldmia	r1, {r1, r4}
 8007e66:	6818      	ldr	r0, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	1a61      	subs	r1, r4, r1
 8007e6c:	1a1b      	subs	r3, r3, r0
 8007e6e:	ee00 1a10 	vmov	s0, r1
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eeb8 7ac0 	vcvt.f32.s32	s14, s0
 8007e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e7e:	ee05 0a10 	vmov	s10, r0
 8007e82:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007e86:	6850      	ldr	r0, [r2, #4]
 8007e88:	6812      	ldr	r2, [r2, #0]
 8007e8a:	4bdb      	ldr	r3, [pc, #876]	; (80081f8 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	1a82      	subs	r2, r0, r2
 8007e90:	6059      	str	r1, [r3, #4]
 8007e92:	60d9      	str	r1, [r3, #12]
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	eeb8 7ac5 	vcvt.f32.s32	s14, s10
 8007e9a:	ee06 2a10 	vmov	s12, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	edc3 7a00 	vstr	s15, [r3]
 8007ea4:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007ea8:	1a52      	subs	r2, r2, r1
 8007eaa:	edc3 7a02 	vstr	s15, [r3, #8]
 8007eae:	ee07 2a90 	vmov	s15, r2
 8007eb2:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 8007eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eba:	ee06 1a90 	vmov	s13, r1
 8007ebe:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007ec2:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 8007ec6:	edc3 7a04 	vstr	s15, [r3, #16]
 8007eca:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007ece:	e144      	b.n	800815a <GUI_TOUCH_CalcCoefficients+0x316>
 8007ed0:	f340 8148 	ble.w	8008164 <GUI_TOUCH_CalcCoefficients+0x320>
 8007ed4:	2803      	cmp	r0, #3
 8007ed6:	d128      	bne.n	8007f2a <GUI_TOUCH_CalcCoefficients+0xe6>
 8007ed8:	4620      	mov	r0, r4
 8007eda:	581d      	ldr	r5, [r3, r0]
 8007edc:	ee00 5a10 	vmov	s0, r5
 8007ee0:	583d      	ldr	r5, [r7, r0]
 8007ee2:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8007ee6:	ac00      	add	r4, sp, #0
 8007ee8:	ee00 5a10 	vmov	s0, r5
 8007eec:	580d      	ldr	r5, [r1, r0]
 8007eee:	4404      	add	r4, r0
 8007ef0:	edc4 7a00 	vstr	s15, [r4]
 8007ef4:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8007ef8:	ac03      	add	r4, sp, #12
 8007efa:	ee00 5a10 	vmov	s0, r5
 8007efe:	4404      	add	r4, r0
 8007f00:	5815      	ldr	r5, [r2, r0]
 8007f02:	edc4 7a00 	vstr	s15, [r4]
 8007f06:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8007f0a:	ac0c      	add	r4, sp, #48	; 0x30
 8007f0c:	4404      	add	r4, r0
 8007f0e:	ee00 5a10 	vmov	s0, r5
 8007f12:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8007f16:	ac0c      	add	r4, sp, #48	; 0x30
 8007f18:	4404      	add	r4, r0
 8007f1a:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8007f1e:	3004      	adds	r0, #4
 8007f20:	280c      	cmp	r0, #12
 8007f22:	ed44 7a03 	vstr	s15, [r4, #-12]
 8007f26:	d1d8      	bne.n	8007eda <GUI_TOUCH_CalcCoefficients+0x96>
 8007f28:	e09b      	b.n	8008062 <GUI_TOUCH_CalcCoefficients+0x21e>
 8007f2a:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007f2e:	44a1      	add	r9, r4
 8007f30:	f04f 0800 	mov.w	r8, #0
 8007f34:	f849 8c0c 	str.w	r8, [r9, #-12]
 8007f38:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007f3c:	44a1      	add	r9, r4
 8007f3e:	f849 8c18 	str.w	r8, [r9, #-24]
 8007f42:	f10d 090c 	add.w	r9, sp, #12
 8007f46:	44a1      	add	r9, r4
 8007f48:	f8c9 8000 	str.w	r8, [r9]
 8007f4c:	f10d 0900 	add.w	r9, sp, #0
 8007f50:	44a1      	add	r9, r4
 8007f52:	3404      	adds	r4, #4
 8007f54:	2c0c      	cmp	r4, #12
 8007f56:	f8c9 8000 	str.w	r8, [r9]
 8007f5a:	d1e6      	bne.n	8007f2a <GUI_TOUCH_CalcCoefficients+0xe6>
 8007f5c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8007f60:	eddd 7a05 	vldr	s15, [sp, #20]
 8007f64:	eddd 3a08 	vldr	s7, [sp, #32]
 8007f68:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 8007f6c:	eddd 1a00 	vldr	s3, [sp]
 8007f70:	eddd 5a01 	vldr	s11, [sp, #4]
 8007f74:	ed9d 2a04 	vldr	s4, [sp, #16]
 8007f78:	eddd 2a06 	vldr	s5, [sp, #24]
 8007f7c:	ed9d 3a07 	vldr	s6, [sp, #28]
 8007f80:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8007f84:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8007f88:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8007f8c:	2400      	movs	r4, #0
 8007f8e:	591d      	ldr	r5, [r3, r4]
 8007f90:	ee00 5a10 	vmov	s0, r5
 8007f94:	593d      	ldr	r5, [r7, r4]
 8007f96:	eeb8 6ac0 	vcvt.f32.s32	s12, s0
 8007f9a:	ee00 5a10 	vmov	s0, r5
 8007f9e:	590d      	ldr	r5, [r1, r4]
 8007fa0:	eef8 6ac0 	vcvt.f32.s32	s13, s0
 8007fa4:	ee00 5a10 	vmov	s0, r5
 8007fa8:	5915      	ldr	r5, [r2, r4]
 8007faa:	eef8 4ac0 	vcvt.f32.s32	s9, s0
 8007fae:	ee00 5a10 	vmov	s0, r5
 8007fb2:	eeb8 5ac0 	vcvt.f32.s32	s10, s0
 8007fb6:	eee6 2a24 	vfma.f32	s5, s12, s9
 8007fba:	3404      	adds	r4, #4
 8007fbc:	4544      	cmp	r4, r8
 8007fbe:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8007fc2:	eea6 3aa4 	vfma.f32	s6, s13, s9
 8007fc6:	eef0 4a60 	vmov.f32	s9, s1
 8007fca:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007fce:	eee6 1a06 	vfma.f32	s3, s12, s12
 8007fd2:	eee6 5a26 	vfma.f32	s11, s12, s13
 8007fd6:	eee6 4a05 	vfma.f32	s9, s12, s10
 8007fda:	eeb0 6a41 	vmov.f32	s12, s2
 8007fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe2:	ee34 4a05 	vadd.f32	s8, s8, s10
 8007fe6:	eea6 2aa6 	vfma.f32	s4, s13, s13
 8007fea:	eea6 6a85 	vfma.f32	s12, s13, s10
 8007fee:	d004      	beq.n	8007ffa <GUI_TOUCH_CalcCoefficients+0x1b6>
 8007ff0:	eef0 0a64 	vmov.f32	s1, s9
 8007ff4:	eeb0 1a46 	vmov.f32	s2, s12
 8007ff8:	e7c9      	b.n	8007f8e <GUI_TOUCH_CalcCoefficients+0x14a>
 8007ffa:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8007ffe:	ee05 0a10 	vmov	s10, r0
 8008002:	edcd 6a01 	vstr	s13, [sp, #4]
 8008006:	eef8 6ac5 	vcvt.f32.s32	s13, s10
 800800a:	eec1 1a87 	vdiv.f32	s3, s3, s14
 800800e:	eec5 5a87 	vdiv.f32	s11, s11, s14
 8008012:	ee82 2a27 	vdiv.f32	s4, s4, s15
 8008016:	eec2 2a87 	vdiv.f32	s5, s5, s14
 800801a:	ee83 3a27 	vdiv.f32	s6, s6, s15
 800801e:	eec4 4a87 	vdiv.f32	s9, s9, s14
 8008022:	ee86 6a27 	vdiv.f32	s12, s12, s15
 8008026:	ee87 7a26 	vdiv.f32	s14, s14, s13
 800802a:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 800802e:	eec3 3aa6 	vdiv.f32	s7, s7, s13
 8008032:	eec4 6a26 	vdiv.f32	s13, s8, s13
 8008036:	edcd 1a00 	vstr	s3, [sp]
 800803a:	edcd 5a03 	vstr	s11, [sp, #12]
 800803e:	ed8d 2a04 	vstr	s4, [sp, #16]
 8008042:	edcd 2a06 	vstr	s5, [sp, #24]
 8008046:	ed8d 3a07 	vstr	s6, [sp, #28]
 800804a:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800804e:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8008052:	ed8d 7a02 	vstr	s14, [sp, #8]
 8008056:	edcd 7a05 	vstr	s15, [sp, #20]
 800805a:	edcd 3a08 	vstr	s7, [sp, #32]
 800805e:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8008062:	ed9d 7a02 	vldr	s14, [sp, #8]
 8008066:	eddd 4a05 	vldr	s9, [sp, #20]
 800806a:	ed9d 6a01 	vldr	s12, [sp, #4]
 800806e:	ed9d 3a03 	vldr	s6, [sp, #12]
 8008072:	eddd 5a00 	vldr	s11, [sp]
 8008076:	eddd 2a04 	vldr	s5, [sp, #16]
 800807a:	ee76 6a47 	vsub.f32	s13, s12, s14
 800807e:	ee73 1a64 	vsub.f32	s3, s6, s9
 8008082:	ee35 2ac7 	vsub.f32	s4, s11, s14
 8008086:	ee32 1ae4 	vsub.f32	s2, s5, s9
 800808a:	ee61 7ae6 	vnmul.f32	s15, s3, s13
 800808e:	eee2 7a01 	vfma.f32	s15, s4, s2
 8008092:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809a:	d063      	beq.n	8008164 <GUI_TOUCH_CalcCoefficients+0x320>
 800809c:	ed9d 4a08 	vldr	s8, [sp, #32]
 80080a0:	eddd 0a07 	vldr	s1, [sp, #28]
 80080a4:	eddd 3a06 	vldr	s7, [sp, #24]
 80080a8:	4b53      	ldr	r3, [pc, #332]	; (80081f8 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80080aa:	ee30 8ac4 	vsub.f32	s16, s1, s8
 80080ae:	ee33 5ac4 	vsub.f32	s10, s7, s8
 80080b2:	ee21 0ac8 	vnmul.f32	s0, s3, s16
 80080b6:	eea5 0a01 	vfma.f32	s0, s10, s2
 80080ba:	ee26 5ac5 	vnmul.f32	s10, s13, s10
 80080be:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80080c2:	eea8 5a02 	vfma.f32	s10, s16, s4
 80080c6:	ed83 0a00 	vstr	s0, [r3]
 80080ca:	ee85 5a27 	vdiv.f32	s10, s10, s15
 80080ce:	ed83 5a01 	vstr	s10, [r3, #4]
 80080d2:	ee23 5ac7 	vnmul.f32	s10, s7, s14
 80080d6:	eea5 5a84 	vfma.f32	s10, s11, s8
 80080da:	ee24 4a46 	vnmul.f32	s8, s8, s12
 80080de:	ee22 5a85 	vmul.f32	s10, s5, s10
 80080e2:	eea7 4a20 	vfma.f32	s8, s14, s1
 80080e6:	eea3 5a04 	vfma.f32	s10, s6, s8
 80080ea:	ee20 4ae5 	vnmul.f32	s8, s1, s11
 80080ee:	eea6 4a23 	vfma.f32	s8, s12, s7
 80080f2:	eddd 3a0a 	vldr	s7, [sp, #40]	; 0x28
 80080f6:	eea4 5a84 	vfma.f32	s10, s9, s8
 80080fa:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 80080fe:	ee85 5a27 	vdiv.f32	s10, s10, s15
 8008102:	ed83 5a02 	vstr	s10, [r3, #8]
 8008106:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 800810a:	ee34 0a45 	vsub.f32	s0, s8, s10
 800810e:	ee73 0ac5 	vsub.f32	s1, s7, s10
 8008112:	ee66 6ac0 	vnmul.f32	s13, s13, s0
 8008116:	ee61 1ae0 	vnmul.f32	s3, s3, s1
 800811a:	eee0 6a82 	vfma.f32	s13, s1, s4
 800811e:	eee0 1a01 	vfma.f32	s3, s0, s2
 8008122:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 8008126:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 800812a:	edc3 6a04 	vstr	s13, [r3, #16]
 800812e:	ee64 6a47 	vnmul.f32	s13, s8, s14
 8008132:	edc3 1a03 	vstr	s3, [r3, #12]
 8008136:	eee5 6a85 	vfma.f32	s13, s11, s10
 800813a:	ee25 5a46 	vnmul.f32	s10, s10, s12
 800813e:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8008142:	eea7 5a23 	vfma.f32	s10, s14, s7
 8008146:	ee63 5ae5 	vnmul.f32	s11, s7, s11
 800814a:	eee3 6a05 	vfma.f32	s13, s6, s10
 800814e:	eee6 5a04 	vfma.f32	s11, s12, s8
 8008152:	eee4 6aa5 	vfma.f32	s13, s9, s11
 8008156:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 800815a:	edc3 7a05 	vstr	s15, [r3, #20]
 800815e:	2301      	movs	r3, #1
 8008160:	f8cc 3000 	str.w	r3, [ip]
 8008164:	f8dc 0000 	ldr.w	r0, [ip]
 8008168:	2800      	cmp	r0, #0
 800816a:	f000 80a7 	beq.w	80082bc <GUI_TOUCH_CalcCoefficients+0x478>
 800816e:	4b23      	ldr	r3, [pc, #140]	; (80081fc <GUI_TOUCH_CalcCoefficients+0x3b8>)
 8008170:	eddf 7a23 	vldr	s15, [pc, #140]	; 8008200 <GUI_TOUCH_CalcCoefficients+0x3bc>
 8008174:	601e      	str	r6, [r3, #0]
 8008176:	4b23      	ldr	r3, [pc, #140]	; (8008204 <GUI_TOUCH_CalcCoefficients+0x3c0>)
 8008178:	f8c3 a000 	str.w	sl, [r3]
 800817c:	4b1e      	ldr	r3, [pc, #120]	; (80081f8 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800817e:	ed93 7a00 	vldr	s14, [r3]
 8008182:	eeb4 7a67 	vcmp.f32	s14, s15
 8008186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800818a:	d012      	beq.n	80081b2 <GUI_TOUCH_CalcCoefficients+0x36e>
 800818c:	edd3 6a01 	vldr	s13, [r3, #4]
 8008190:	eee6 7ae7 	vfms.f32	s15, s13, s15
 8008194:	edd3 6a02 	vldr	s13, [r3, #8]
 8008198:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800819c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80081a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081a4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80081a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081ac:	ee17 1a90 	vmov	r1, s15
 80081b0:	e001      	b.n	80081b6 <GUI_TOUCH_CalcCoefficients+0x372>
 80081b2:	f04f 31ff 	mov.w	r1, #4294967295
 80081b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80081ba:	eddf 6a11 	vldr	s13, [pc, #68]	; 8008200 <GUI_TOUCH_CalcCoefficients+0x3bc>
 80081be:	4c12      	ldr	r4, [pc, #72]	; (8008208 <GUI_TOUCH_CalcCoefficients+0x3c4>)
 80081c0:	4a0d      	ldr	r2, [pc, #52]	; (80081f8 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80081c2:	6021      	str	r1, [r4, #0]
 80081c4:	eef4 7a66 	vcmp.f32	s15, s13
 80081c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081cc:	4627      	mov	r7, r4
 80081ce:	d01f      	beq.n	8008210 <GUI_TOUCH_CalcCoefficients+0x3cc>
 80081d0:	ed92 6a03 	vldr	s12, [r2, #12]
 80081d4:	eee6 6a66 	vfms.f32	s13, s12, s13
 80081d8:	ed92 6a05 	vldr	s12, [r2, #20]
 80081dc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80081e0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80081e4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80081e8:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 80081ec:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80081f0:	ee16 2a90 	vmov	r2, s13
 80081f4:	e00e      	b.n	8008214 <GUI_TOUCH_CalcCoefficients+0x3d0>
 80081f6:	bf00      	nop
 80081f8:	200192b0 	.word	0x200192b0
 80081fc:	200192a4 	.word	0x200192a4
 8008200:	00000000 	.word	0x00000000
 8008204:	200192a8 	.word	0x200192a8
 8008208:	2001929c 	.word	0x2001929c
 800820c:	200192ac 	.word	0x200192ac
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	4c2e      	ldr	r4, [pc, #184]	; (80082d0 <GUI_TOUCH_CalcCoefficients+0x48c>)
 8008216:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800821a:	3e01      	subs	r6, #1
 800821c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008224:	ee05 6a90 	vmov	s11, r6
 8008228:	6022      	str	r2, [r4, #0]
 800822a:	ee06 aa10 	vmov	s12, sl
 800822e:	4626      	mov	r6, r4
 8008230:	d016      	beq.n	8008260 <GUI_TOUCH_CalcCoefficients+0x41c>
 8008232:	ed93 5a01 	vldr	s10, [r3, #4]
 8008236:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 800823a:	eef8 6ae5 	vcvt.f32.s32	s13, s11
 800823e:	eee4 6ac5 	vfms.f32	s13, s9, s10
 8008242:	ed93 5a02 	vldr	s10, [r3, #8]
 8008246:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800824a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800824e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8008252:	ee86 7a87 	vdiv.f32	s14, s13, s14
 8008256:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800825a:	ee17 4a10 	vmov	r4, s14
 800825e:	e001      	b.n	8008264 <GUI_TOUCH_CalcCoefficients+0x420>
 8008260:	f04f 34ff 	mov.w	r4, #4294967295
 8008264:	4d1b      	ldr	r5, [pc, #108]	; (80082d4 <GUI_TOUCH_CalcCoefficients+0x490>)
 8008266:	eef5 7a40 	vcmp.f32	s15, #0.0
 800826a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800826e:	602c      	str	r4, [r5, #0]
 8008270:	46ac      	mov	ip, r5
 8008272:	d016      	beq.n	80082a2 <GUI_TOUCH_CalcCoefficients+0x45e>
 8008274:	edd3 6a03 	vldr	s13, [r3, #12]
 8008278:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800827c:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 8008280:	eea5 7ae6 	vfms.f32	s14, s11, s13
 8008284:	edd3 6a05 	vldr	s13, [r3, #20]
 8008288:	ee37 7a66 	vsub.f32	s14, s14, s13
 800828c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008290:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008294:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800829c:	ee17 3a90 	vmov	r3, s15
 80082a0:	e001      	b.n	80082a6 <GUI_TOUCH_CalcCoefficients+0x462>
 80082a2:	f04f 33ff 	mov.w	r3, #4294967295
 80082a6:	42a1      	cmp	r1, r4
 80082a8:	4d0b      	ldr	r5, [pc, #44]	; (80082d8 <GUI_TOUCH_CalcCoefficients+0x494>)
 80082aa:	bfc4      	itt	gt
 80082ac:	603c      	strgt	r4, [r7, #0]
 80082ae:	f8cc 1000 	strgt.w	r1, [ip]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	bfc4      	itt	gt
 80082b8:	6033      	strgt	r3, [r6, #0]
 80082ba:	602a      	strgt	r2, [r5, #0]
 80082bc:	f1d0 0001 	rsbs	r0, r0, #1
 80082c0:	bf38      	it	cc
 80082c2:	2000      	movcc	r0, #0
 80082c4:	b00c      	add	sp, #48	; 0x30
 80082c6:	ecbd 8b02 	vpop	{d8}
 80082ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ce:	bf00      	nop
 80082d0:	200192a0 	.word	0x200192a0
 80082d4:	200192cc 	.word	0x200192cc
 80082d8:	200192c8 	.word	0x200192c8

080082dc <GUI_TOUCH_StoreStateEx>:
 80082dc:	b530      	push	{r4, r5, lr}
 80082de:	4d0f      	ldr	r5, [pc, #60]	; (800831c <GUI_TOUCH_StoreStateEx+0x40>)
 80082e0:	b085      	sub	sp, #20
 80082e2:	4629      	mov	r1, r5
 80082e4:	220c      	movs	r2, #12
 80082e6:	4604      	mov	r4, r0
 80082e8:	f007 ff58 	bl	801019c <memcmp>
 80082ec:	b1a0      	cbz	r0, 8008318 <GUI_TOUCH_StoreStateEx+0x3c>
 80082ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80082f2:	4b0b      	ldr	r3, [pc, #44]	; (8008320 <GUI_TOUCH_StoreStateEx+0x44>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80082fa:	b153      	cbz	r3, 8008312 <GUI_TOUCH_StoreStateEx+0x36>
 80082fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008300:	ad01      	add	r5, sp, #4
 8008302:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008306:	4628      	mov	r0, r5
 8008308:	a902      	add	r1, sp, #8
 800830a:	4798      	blx	r3
 800830c:	b920      	cbnz	r0, 8008318 <GUI_TOUCH_StoreStateEx+0x3c>
 800830e:	4628      	mov	r0, r5
 8008310:	e000      	b.n	8008314 <GUI_TOUCH_StoreStateEx+0x38>
 8008312:	4620      	mov	r0, r4
 8008314:	f000 f83e 	bl	8008394 <GUI_PID_StoreState>
 8008318:	b005      	add	sp, #20
 800831a:	bd30      	pop	{r4, r5, pc}
 800831c:	200192d0 	.word	0x200192d0
 8008320:	200192dc 	.word	0x200192dc

08008324 <GUI_SetFont>:
 8008324:	4b03      	ldr	r3, [pc, #12]	; (8008334 <GUI_SetFont+0x10>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	69d9      	ldr	r1, [r3, #28]
 800832a:	b100      	cbz	r0, 800832e <GUI_SetFont+0xa>
 800832c:	61d8      	str	r0, [r3, #28]
 800832e:	4608      	mov	r0, r1
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	200001b0 	.word	0x200001b0

08008338 <GUI_SetBkColor>:
 8008338:	f005 b8b6 	b.w	800d4a8 <LCD_SetBkColor>

0800833c <GUI_SetColor>:
 800833c:	f005 b8bc 	b.w	800d4b8 <LCD_SetColor>

08008340 <GUI_PID_GetState>:
 8008340:	4a11      	ldr	r2, [pc, #68]	; (8008388 <GUI_PID_GetState+0x48>)
 8008342:	4912      	ldr	r1, [pc, #72]	; (800838c <GUI_PID_GetState+0x4c>)
 8008344:	6813      	ldr	r3, [r2, #0]
 8008346:	6809      	ldr	r1, [r1, #0]
 8008348:	428b      	cmp	r3, r1
 800834a:	b570      	push	{r4, r5, r6, lr}
 800834c:	4604      	mov	r4, r0
 800834e:	4616      	mov	r6, r2
 8008350:	4d0f      	ldr	r5, [pc, #60]	; (8008390 <GUI_PID_GetState+0x50>)
 8008352:	d109      	bne.n	8008368 <GUI_PID_GetState+0x28>
 8008354:	42ab      	cmp	r3, r5
 8008356:	bf06      	itte	eq
 8008358:	333c      	addeq	r3, #60	; 0x3c
 800835a:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 800835e:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 8008362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008366:	e00a      	b.n	800837e <GUI_PID_GetState+0x3e>
 8008368:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800836c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008370:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 8008374:	4293      	cmp	r3, r2
 8008376:	bf18      	it	ne
 8008378:	f103 050c 	addne.w	r5, r3, #12
 800837c:	6035      	str	r5, [r6, #0]
 800837e:	7a20      	ldrb	r0, [r4, #8]
 8008380:	3000      	adds	r0, #0
 8008382:	bf18      	it	ne
 8008384:	2001      	movne	r0, #1
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	200001a4 	.word	0x200001a4
 800838c:	200001a0 	.word	0x200001a0
 8008390:	200192e4 	.word	0x200192e4

08008394 <GUI_PID_StoreState>:
 8008394:	4a21      	ldr	r2, [pc, #132]	; (800841c <GUI_PID_StoreState+0x88>)
 8008396:	4922      	ldr	r1, [pc, #136]	; (8008420 <GUI_PID_StoreState+0x8c>)
 8008398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839c:	6011      	str	r1, [r2, #0]
 800839e:	4f21      	ldr	r7, [pc, #132]	; (8008424 <GUI_PID_StoreState+0x90>)
 80083a0:	4921      	ldr	r1, [pc, #132]	; (8008428 <GUI_PID_StoreState+0x94>)
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	680c      	ldr	r4, [r1, #0]
 80083a6:	4603      	mov	r3, r0
 80083a8:	4820      	ldr	r0, [pc, #128]	; (800842c <GUI_PID_StoreState+0x98>)
 80083aa:	4294      	cmp	r4, r2
 80083ac:	468c      	mov	ip, r1
 80083ae:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 80083b2:	d017      	beq.n	80083e4 <GUI_PID_StoreState+0x50>
 80083b4:	4282      	cmp	r2, r0
 80083b6:	bf14      	ite	ne
 80083b8:	f1a2 010c 	subne.w	r1, r2, #12
 80083bc:	4631      	moveq	r1, r6
 80083be:	7a1d      	ldrb	r5, [r3, #8]
 80083c0:	f891 8008 	ldrb.w	r8, [r1, #8]
 80083c4:	45a8      	cmp	r8, r5
 80083c6:	d10d      	bne.n	80083e4 <GUI_PID_StoreState+0x50>
 80083c8:	428c      	cmp	r4, r1
 80083ca:	d00b      	beq.n	80083e4 <GUI_PID_StoreState+0x50>
 80083cc:	4281      	cmp	r1, r0
 80083ce:	bf14      	ite	ne
 80083d0:	390c      	subne	r1, #12
 80083d2:	4917      	ldreq	r1, [pc, #92]	; (8008430 <GUI_PID_StoreState+0x9c>)
 80083d4:	7a09      	ldrb	r1, [r1, #8]
 80083d6:	42a9      	cmp	r1, r5
 80083d8:	d104      	bne.n	80083e4 <GUI_PID_StoreState+0x50>
 80083da:	4282      	cmp	r2, r0
 80083dc:	bf14      	ite	ne
 80083de:	3a0c      	subne	r2, #12
 80083e0:	4a13      	ldreq	r2, [pc, #76]	; (8008430 <GUI_PID_StoreState+0x9c>)
 80083e2:	603a      	str	r2, [r7, #0]
 80083e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083e8:	683d      	ldr	r5, [r7, #0]
 80083ea:	42b5      	cmp	r5, r6
 80083ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80083f0:	bf0c      	ite	eq
 80083f2:	4d0e      	ldreq	r5, [pc, #56]	; (800842c <GUI_PID_StoreState+0x98>)
 80083f4:	350c      	addne	r5, #12
 80083f6:	42ac      	cmp	r4, r5
 80083f8:	603d      	str	r5, [r7, #0]
 80083fa:	d105      	bne.n	8008408 <GUI_PID_StoreState+0x74>
 80083fc:	42b4      	cmp	r4, r6
 80083fe:	bf14      	ite	ne
 8008400:	340c      	addne	r4, #12
 8008402:	4c0a      	ldreq	r4, [pc, #40]	; (800842c <GUI_PID_StoreState+0x98>)
 8008404:	f8cc 4000 	str.w	r4, [ip]
 8008408:	4a0a      	ldr	r2, [pc, #40]	; (8008434 <GUI_PID_StoreState+0xa0>)
 800840a:	6812      	ldr	r2, [r2, #0]
 800840c:	b10a      	cbz	r2, 8008412 <GUI_PID_StoreState+0x7e>
 800840e:	4618      	mov	r0, r3
 8008410:	4790      	blx	r2
 8008412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008416:	f005 bacb 	b.w	800d9b0 <GUI_SignalEvent>
 800841a:	bf00      	nop
 800841c:	2001af24 	.word	0x2001af24
 8008420:	080097f5 	.word	0x080097f5
 8008424:	200001a0 	.word	0x200001a0
 8008428:	200001a4 	.word	0x200001a4
 800842c:	200192e4 	.word	0x200192e4
 8008430:	20019320 	.word	0x20019320
 8008434:	200192e0 	.word	0x200192e0

08008438 <GUI_PID_IsEmpty>:
 8008438:	4b03      	ldr	r3, [pc, #12]	; (8008448 <GUI_PID_IsEmpty+0x10>)
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	4b03      	ldr	r3, [pc, #12]	; (800844c <GUI_PID_IsEmpty+0x14>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	1ac3      	subs	r3, r0, r3
 8008442:	4258      	negs	r0, r3
 8008444:	4158      	adcs	r0, r3
 8008446:	4770      	bx	lr
 8008448:	200001a4 	.word	0x200001a4
 800844c:	200001a0 	.word	0x200001a0

08008450 <GUI_GetKey>:
 8008450:	4b02      	ldr	r3, [pc, #8]	; (800845c <GUI_GetKey+0xc>)
 8008452:	2200      	movs	r2, #0
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	2001932c 	.word	0x2001932c

08008460 <GUI_StoreKey>:
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <GUI_StoreKey+0xc>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	b902      	cbnz	r2, 8008468 <GUI_StoreKey+0x8>
 8008466:	6018      	str	r0, [r3, #0]
 8008468:	f005 baa2 	b.w	800d9b0 <GUI_SignalEvent>
 800846c:	2001932c 	.word	0x2001932c

08008470 <GUI_PollKeyMsg>:
 8008470:	4a0a      	ldr	r2, [pc, #40]	; (800849c <GUI_PollKeyMsg+0x2c>)
 8008472:	490b      	ldr	r1, [pc, #44]	; (80084a0 <GUI_PollKeyMsg+0x30>)
 8008474:	6813      	ldr	r3, [r2, #0]
 8008476:	6809      	ldr	r1, [r1, #0]
 8008478:	428b      	cmp	r3, r1
 800847a:	b510      	push	{r4, lr}
 800847c:	d00b      	beq.n	8008496 <GUI_PollKeyMsg+0x26>
 800847e:	4c09      	ldr	r4, [pc, #36]	; (80084a4 <GUI_PollKeyMsg+0x34>)
 8008480:	42a3      	cmp	r3, r4
 8008482:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008486:	bf14      	ite	ne
 8008488:	3308      	addne	r3, #8
 800848a:	3b50      	subeq	r3, #80	; 0x50
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	f001 fbf3 	bl	8009c78 <WM_OnKey>
 8008492:	2001      	movs	r0, #1
 8008494:	bd10      	pop	{r4, pc}
 8008496:	2000      	movs	r0, #0
 8008498:	bd10      	pop	{r4, pc}
 800849a:	bf00      	nop
 800849c:	200001ac 	.word	0x200001ac
 80084a0:	200001a8 	.word	0x200001a8
 80084a4:	20019380 	.word	0x20019380

080084a8 <GUI_FillRect>:
 80084a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084aa:	4c0f      	ldr	r4, [pc, #60]	; (80084e8 <GUI_FillRect+0x40>)
 80084ac:	6824      	ldr	r4, [r4, #0]
 80084ae:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80084b0:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80084b2:	1947      	adds	r7, r0, r5
 80084b4:	190e      	adds	r6, r1, r4
 80084b6:	4415      	add	r5, r2
 80084b8:	441c      	add	r4, r3
 80084ba:	4668      	mov	r0, sp
 80084bc:	f8ad 7000 	strh.w	r7, [sp]
 80084c0:	f8ad 5004 	strh.w	r5, [sp, #4]
 80084c4:	f8ad 6002 	strh.w	r6, [sp, #2]
 80084c8:	f8ad 4006 	strh.w	r4, [sp, #6]
 80084cc:	f002 fafa 	bl	800aac4 <WM__InitIVRSearch>
 80084d0:	b140      	cbz	r0, 80084e4 <GUI_FillRect+0x3c>
 80084d2:	4638      	mov	r0, r7
 80084d4:	4631      	mov	r1, r6
 80084d6:	462a      	mov	r2, r5
 80084d8:	4623      	mov	r3, r4
 80084da:	f004 fd1f 	bl	800cf1c <LCD_FillRect>
 80084de:	f002 fa2f 	bl	800a940 <WM__GetNextIVR>
 80084e2:	e7f5      	b.n	80084d0 <GUI_FillRect+0x28>
 80084e4:	b003      	add	sp, #12
 80084e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e8:	200001b0 	.word	0x200001b0

080084ec <GUI_Exec1>:
 80084ec:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <GUI_Exec1+0x2c>)
 80084ee:	b510      	push	{r4, lr}
 80084f0:	681c      	ldr	r4, [r3, #0]
 80084f2:	b11c      	cbz	r4, 80084fc <GUI_Exec1+0x10>
 80084f4:	47a0      	blx	r4
 80084f6:	1c04      	adds	r4, r0, #0
 80084f8:	bf18      	it	ne
 80084fa:	2401      	movne	r4, #1
 80084fc:	f002 fc08 	bl	800ad10 <WM_Exec>
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <GUI_Exec1+0x30>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2800      	cmp	r0, #0
 8008506:	bf18      	it	ne
 8008508:	2401      	movne	r4, #1
 800850a:	b11b      	cbz	r3, 8008514 <GUI_Exec1+0x28>
 800850c:	4798      	blx	r3
 800850e:	2800      	cmp	r0, #0
 8008510:	bf18      	it	ne
 8008512:	2401      	movne	r4, #1
 8008514:	4620      	mov	r0, r4
 8008516:	bd10      	pop	{r4, pc}
 8008518:	2001aefc 	.word	0x2001aefc
 800851c:	2001af14 	.word	0x2001af14

08008520 <GUI_Exec>:
 8008520:	b510      	push	{r4, lr}
 8008522:	2400      	movs	r4, #0
 8008524:	f7ff ffe2 	bl	80084ec <GUI_Exec1>
 8008528:	b108      	cbz	r0, 800852e <GUI_Exec+0xe>
 800852a:	2401      	movs	r4, #1
 800852c:	e7fa      	b.n	8008524 <GUI_Exec+0x4>
 800852e:	4620      	mov	r0, r4
 8008530:	bd10      	pop	{r4, pc}
	...

08008534 <GUI_DispStringAt>:
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <GUI_DispStringAt+0xc>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	8459      	strh	r1, [r3, #34]	; 0x22
 800853a:	849a      	strh	r2, [r3, #36]	; 0x24
 800853c:	f000 b802 	b.w	8008544 <GUI_DispString>
 8008540:	200001b0 	.word	0x200001b0

08008544 <GUI_DispString>:
 8008544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	4604      	mov	r4, r0
 800854a:	2800      	cmp	r0, #0
 800854c:	d079      	beq.n	8008642 <GUI_DispString+0xfe>
 800854e:	4d3e      	ldr	r5, [pc, #248]	; (8008648 <GUI_DispString+0x104>)
 8008550:	f000 fcba 	bl	8008ec8 <GUI_GetFontDistY>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	4680      	mov	r8, r0
 8008558:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 800855c:	f000 fc9c 	bl	8008e98 <GUI_GetYAdjust>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8008564:	b287      	uxth	r7, r0
 8008566:	1bd2      	subs	r2, r2, r7
 8008568:	849a      	strh	r2, [r3, #36]	; 0x24
 800856a:	7823      	ldrb	r3, [r4, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d05d      	beq.n	800862c <GUI_DispString+0xe8>
 8008570:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fbdd 	bl	8008d34 <GUI__GetLineNumChars>
 800857a:	4606      	mov	r6, r0
 800857c:	4631      	mov	r1, r6
 800857e:	4620      	mov	r0, r4
 8008580:	f000 fc06 	bl	8008d90 <GUI__GetLineDistX>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008588:	f002 0203 	and.w	r2, r2, #3
 800858c:	2a01      	cmp	r2, #1
 800858e:	d005      	beq.n	800859c <GUI_DispString+0x58>
 8008590:	2a02      	cmp	r2, #2
 8008592:	bf14      	ite	ne
 8008594:	2200      	movne	r2, #0
 8008596:	fb90 f2f2 	sdiveq	r2, r0, r2
 800859a:	e000      	b.n	800859e <GUI_DispString+0x5a>
 800859c:	4602      	mov	r2, r0
 800859e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80085a0:	1a8a      	subs	r2, r1, r2
 80085a2:	b292      	uxth	r2, r2
 80085a4:	b291      	uxth	r1, r2
 80085a6:	8459      	strh	r1, [r3, #34]	; 0x22
 80085a8:	fa1f fa80 	uxth.w	sl, r0
 80085ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80085ae:	f8ad 1000 	strh.w	r1, [sp]
 80085b2:	f10a 31ff 	add.w	r1, sl, #4294967295
 80085b6:	440a      	add	r2, r1
 80085b8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80085bc:	fa1f fb88 	uxth.w	fp, r8
 80085c0:	3b01      	subs	r3, #1
 80085c2:	445b      	add	r3, fp
 80085c4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80085c8:	4620      	mov	r0, r4
 80085ca:	4631      	mov	r1, r6
 80085cc:	466a      	mov	r2, sp
 80085ce:	f8ad 3006 	strh.w	r3, [sp, #6]
 80085d2:	f000 fc0d 	bl	8008df0 <GUI__DispLine>
 80085d6:	682b      	ldr	r3, [r5, #0]
 80085d8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80085dc:	849a      	strh	r2, [r3, #36]	; 0x24
 80085de:	4620      	mov	r0, r4
 80085e0:	4631      	mov	r1, r6
 80085e2:	f005 fa0b 	bl	800d9fc <GUI_UC__NumChars2NumBytes>
 80085e6:	5c23      	ldrb	r3, [r4, r0]
 80085e8:	2b0a      	cmp	r3, #10
 80085ea:	eb04 0200 	add.w	r2, r4, r0
 80085ee:	d001      	beq.n	80085f4 <GUI_DispString+0xb0>
 80085f0:	2b0d      	cmp	r3, #13
 80085f2:	d112      	bne.n	800861a <GUI_DispString+0xd6>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80085f8:	f001 0103 	and.w	r1, r1, #3
 80085fc:	3901      	subs	r1, #1
 80085fe:	2901      	cmp	r1, #1
 8008600:	bf8a      	itet	hi
 8008602:	8c19      	ldrhhi	r1, [r3, #32]
 8008604:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 8008608:	8459      	strhhi	r1, [r3, #34]	; 0x22
 800860a:	7811      	ldrb	r1, [r2, #0]
 800860c:	290a      	cmp	r1, #10
 800860e:	d10b      	bne.n	8008628 <GUI_DispString+0xe4>
 8008610:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8008612:	448b      	add	fp, r1
 8008614:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 8008618:	e006      	b.n	8008628 <GUI_DispString+0xe4>
 800861a:	4b0b      	ldr	r3, [pc, #44]	; (8008648 <GUI_DispString+0x104>)
 800861c:	f8bd 0000 	ldrh.w	r0, [sp]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4482      	add	sl, r0
 8008624:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 8008628:	7813      	ldrb	r3, [r2, #0]
 800862a:	b943      	cbnz	r3, 800863e <GUI_DispString+0xfa>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8008630:	4417      	add	r7, r2
 8008632:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008634:	849f      	strh	r7, [r3, #36]	; 0x24
 8008636:	f022 0203 	bic.w	r2, r2, #3
 800863a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800863c:	e001      	b.n	8008642 <GUI_DispString+0xfe>
 800863e:	1c54      	adds	r4, r2, #1
 8008640:	e793      	b.n	800856a <GUI_DispString+0x26>
 8008642:	b003      	add	sp, #12
 8008644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008648:	200001b0 	.word	0x200001b0

0800864c <GUI_DEVICE__GetpDriver>:
 800864c:	2801      	cmp	r0, #1
 800864e:	dc09      	bgt.n	8008664 <GUI_DEVICE__GetpDriver+0x18>
 8008650:	4b05      	ldr	r3, [pc, #20]	; (8008668 <GUI_DEVICE__GetpDriver+0x1c>)
 8008652:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008656:	b120      	cbz	r0, 8008662 <GUI_DEVICE__GetpDriver+0x16>
 8008658:	68c3      	ldr	r3, [r0, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	b11b      	cbz	r3, 8008666 <GUI_DEVICE__GetpDriver+0x1a>
 800865e:	6800      	ldr	r0, [r0, #0]
 8008660:	e7f9      	b.n	8008656 <GUI_DEVICE__GetpDriver+0xa>
 8008662:	4770      	bx	lr
 8008664:	2000      	movs	r0, #0
 8008666:	4770      	bx	lr
 8008668:	2001af18 	.word	0x2001af18

0800866c <GUI_DEVICE_Delete>:
 800866c:	f000 bd34 	b.w	80090d8 <GUI_ALLOC_FreeFixedBlock>

08008670 <GUI_DEVICE_Create>:
 8008670:	2b01      	cmp	r3, #1
 8008672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008674:	4606      	mov	r6, r0
 8008676:	460d      	mov	r5, r1
 8008678:	4617      	mov	r7, r2
 800867a:	461c      	mov	r4, r3
 800867c:	dd01      	ble.n	8008682 <GUI_DEVICE_Create+0x12>
 800867e:	2000      	movs	r0, #0
 8008680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008682:	201c      	movs	r0, #28
 8008684:	f000 fe88 	bl	8009398 <GUI_ALLOC_GetFixedBlock>
 8008688:	2800      	cmp	r0, #0
 800868a:	d0f8      	beq.n	800867e <GUI_DEVICE_Create+0xe>
 800868c:	b10d      	cbz	r5, 8008692 <GUI_DEVICE_Create+0x22>
 800868e:	6105      	str	r5, [r0, #16]
 8008690:	e009      	b.n	80086a6 <GUI_DEVICE_Create+0x36>
 8008692:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <GUI_DEVICE_Create+0x48>)
 8008694:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8008698:	b129      	cbz	r1, 80086a6 <GUI_DEVICE_Create+0x36>
 800869a:	680b      	ldr	r3, [r1, #0]
 800869c:	b10b      	cbz	r3, 80086a2 <GUI_DEVICE_Create+0x32>
 800869e:	4619      	mov	r1, r3
 80086a0:	e7fb      	b.n	800869a <GUI_DEVICE_Create+0x2a>
 80086a2:	690b      	ldr	r3, [r1, #16]
 80086a4:	6103      	str	r3, [r0, #16]
 80086a6:	2300      	movs	r3, #0
 80086a8:	6083      	str	r3, [r0, #8]
 80086aa:	6184      	str	r4, [r0, #24]
 80086ac:	8287      	strh	r7, [r0, #20]
 80086ae:	60c6      	str	r6, [r0, #12]
 80086b0:	6003      	str	r3, [r0, #0]
 80086b2:	6043      	str	r3, [r0, #4]
 80086b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b6:	bf00      	nop
 80086b8:	2001af18 	.word	0x2001af18

080086bc <GUI_DEVICE_Unlink>:
 80086bc:	4b09      	ldr	r3, [pc, #36]	; (80086e4 <GUI_DEVICE_Unlink+0x28>)
 80086be:	6982      	ldr	r2, [r0, #24]
 80086c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086c4:	4281      	cmp	r1, r0
 80086c6:	bf04      	itt	eq
 80086c8:	6801      	ldreq	r1, [r0, #0]
 80086ca:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 80086ce:	6843      	ldr	r3, [r0, #4]
 80086d0:	b10b      	cbz	r3, 80086d6 <GUI_DEVICE_Unlink+0x1a>
 80086d2:	6802      	ldr	r2, [r0, #0]
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	6802      	ldr	r2, [r0, #0]
 80086d8:	b102      	cbz	r2, 80086dc <GUI_DEVICE_Unlink+0x20>
 80086da:	6053      	str	r3, [r2, #4]
 80086dc:	2300      	movs	r3, #0
 80086de:	6003      	str	r3, [r0, #0]
 80086e0:	6043      	str	r3, [r0, #4]
 80086e2:	4770      	bx	lr
 80086e4:	2001af18 	.word	0x2001af18

080086e8 <GUI_DEVICE_Link>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	b338      	cbz	r0, 800873c <GUI_DEVICE_Link+0x54>
 80086ec:	6982      	ldr	r2, [r0, #24]
 80086ee:	2a01      	cmp	r2, #1
 80086f0:	dc24      	bgt.n	800873c <GUI_DEVICE_Link+0x54>
 80086f2:	4919      	ldr	r1, [pc, #100]	; (8008758 <GUI_DEVICE_Link+0x70>)
 80086f4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80086f8:	460d      	mov	r5, r1
 80086fa:	b913      	cbnz	r3, 8008702 <GUI_DEVICE_Link+0x1a>
 80086fc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8008700:	e01a      	b.n	8008738 <GUI_DEVICE_Link+0x50>
 8008702:	6859      	ldr	r1, [r3, #4]
 8008704:	b109      	cbz	r1, 800870a <GUI_DEVICE_Link+0x22>
 8008706:	460b      	mov	r3, r1
 8008708:	e7fb      	b.n	8008702 <GUI_DEVICE_Link+0x1a>
 800870a:	68c1      	ldr	r1, [r0, #12]
 800870c:	680e      	ldr	r6, [r1, #0]
 800870e:	68d9      	ldr	r1, [r3, #12]
 8008710:	680c      	ldr	r4, [r1, #0]
 8008712:	42b4      	cmp	r4, r6
 8008714:	dd03      	ble.n	800871e <GUI_DEVICE_Link+0x36>
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1f8      	bne.n	800870e <GUI_DEVICE_Link+0x26>
 800871c:	e00e      	b.n	800873c <GUI_DEVICE_Link+0x54>
 800871e:	d102      	bne.n	8008726 <GUI_DEVICE_Link+0x3e>
 8008720:	8a81      	ldrh	r1, [r0, #20]
 8008722:	2901      	cmp	r1, #1
 8008724:	d011      	beq.n	800874a <GUI_DEVICE_Link+0x62>
 8008726:	6859      	ldr	r1, [r3, #4]
 8008728:	b199      	cbz	r1, 8008752 <GUI_DEVICE_Link+0x6a>
 800872a:	6008      	str	r0, [r1, #0]
 800872c:	6041      	str	r1, [r0, #4]
 800872e:	6058      	str	r0, [r3, #4]
 8008730:	4298      	cmp	r0, r3
 8008732:	bf08      	it	eq
 8008734:	2300      	moveq	r3, #0
 8008736:	6003      	str	r3, [r0, #0]
 8008738:	2000      	movs	r0, #0
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	2001      	movs	r0, #1
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	68cb      	ldr	r3, [r1, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	42a3      	cmp	r3, r4
 8008746:	460b      	mov	r3, r1
 8008748:	dbed      	blt.n	8008726 <GUI_DEVICE_Link+0x3e>
 800874a:	6819      	ldr	r1, [r3, #0]
 800874c:	2900      	cmp	r1, #0
 800874e:	d1f7      	bne.n	8008740 <GUI_DEVICE_Link+0x58>
 8008750:	e7e9      	b.n	8008726 <GUI_DEVICE_Link+0x3e>
 8008752:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 8008756:	e7ea      	b.n	800872e <GUI_DEVICE_Link+0x46>
 8008758:	2001af18 	.word	0x2001af18

0800875c <GUI_DEVICE_CreateAndLink>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	461d      	mov	r5, r3
 8008760:	f7ff ff86 	bl	8008670 <GUI_DEVICE_Create>
 8008764:	4604      	mov	r4, r0
 8008766:	b148      	cbz	r0, 800877c <GUI_DEVICE_CreateAndLink+0x20>
 8008768:	f7ff ffbe 	bl	80086e8 <GUI_DEVICE_Link>
 800876c:	68e3      	ldr	r3, [r4, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	b923      	cbnz	r3, 800877c <GUI_DEVICE_CreateAndLink+0x20>
 8008772:	4b03      	ldr	r3, [pc, #12]	; (8008780 <GUI_DEVICE_CreateAndLink+0x24>)
 8008774:	3516      	adds	r5, #22
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800877c:	4620      	mov	r0, r4
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	200001b0 	.word	0x200001b0

08008784 <_OnExit>:
 8008784:	b510      	push	{r4, lr}
 8008786:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <_OnExit+0x20>)
 8008788:	4807      	ldr	r0, [pc, #28]	; (80087a8 <_OnExit+0x24>)
 800878a:	2400      	movs	r4, #0
 800878c:	4621      	mov	r1, r4
 800878e:	2270      	movs	r2, #112	; 0x70
 8008790:	601c      	str	r4, [r3, #0]
 8008792:	f7ff f9d1 	bl	8007b38 <GUI__memset>
 8008796:	4621      	mov	r1, r4
 8008798:	4804      	ldr	r0, [pc, #16]	; (80087ac <_OnExit+0x28>)
 800879a:	2208      	movs	r2, #8
 800879c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a0:	f7ff b9ca 	b.w	8007b38 <GUI__memset>
 80087a4:	20019404 	.word	0x20019404
 80087a8:	2001938c 	.word	0x2001938c
 80087ac:	2001af18 	.word	0x2001af18

080087b0 <_InitContext>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d19      	ldr	r5, [pc, #100]	; (8008818 <_InitContext+0x68>)
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80087ba:	f103 0208 	add.w	r2, r3, #8
 80087be:	639b      	str	r3, [r3, #56]	; 0x38
 80087c0:	641b      	str	r3, [r3, #64]	; 0x40
 80087c2:	6142      	str	r2, [r0, #20]
 80087c4:	7c5a      	ldrb	r2, [r3, #17]
 80087c6:	4b15      	ldr	r3, [pc, #84]	; (800881c <_InitContext+0x6c>)
 80087c8:	4604      	mov	r4, r0
 80087ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80087ce:	68c3      	ldr	r3, [r0, #12]
 80087d0:	f104 0108 	add.w	r1, r4, #8
 80087d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d6:	4798      	blx	r3
 80087d8:	4b11      	ldr	r3, [pc, #68]	; (8008820 <_InitContext+0x70>)
 80087da:	6663      	str	r3, [r4, #100]	; 0x64
 80087dc:	4b11      	ldr	r3, [pc, #68]	; (8008824 <_InitContext+0x74>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	61e3      	str	r3, [r4, #28]
 80087e2:	682b      	ldr	r3, [r5, #0]
 80087e4:	3308      	adds	r3, #8
 80087e6:	6163      	str	r3, [r4, #20]
 80087e8:	2301      	movs	r3, #1
 80087ea:	7623      	strb	r3, [r4, #24]
 80087ec:	f001 fa72 	bl	8009cd4 <WM_GetDesktopWindow>
 80087f0:	2303      	movs	r3, #3
 80087f2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80087f6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80087fa:	6323      	str	r3, [r4, #48]	; 0x30
 80087fc:	6363      	str	r3, [r4, #52]	; 0x34
 80087fe:	64a0      	str	r0, [r4, #72]	; 0x48
 8008800:	2000      	movs	r0, #0
 8008802:	f004 fe51 	bl	800d4a8 <LCD_SetBkColor>
 8008806:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800880a:	f004 fe55 	bl	800d4b8 <LCD_SetColor>
 800880e:	4b06      	ldr	r3, [pc, #24]	; (8008828 <_InitContext+0x78>)
 8008810:	4a06      	ldr	r2, [pc, #24]	; (800882c <_InitContext+0x7c>)
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	bd38      	pop	{r3, r4, r5, pc}
 8008816:	bf00      	nop
 8008818:	200001b0 	.word	0x200001b0
 800881c:	2001af18 	.word	0x2001af18
 8008820:	080134b4 	.word	0x080134b4
 8008824:	200001b4 	.word	0x200001b4
 8008828:	2001af10 	.word	0x2001af10
 800882c:	0801554c 	.word	0x0801554c

08008830 <GUI_SetDefaultFont>:
 8008830:	4b01      	ldr	r3, [pc, #4]	; (8008838 <GUI_SetDefaultFont+0x8>)
 8008832:	6018      	str	r0, [r3, #0]
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	200001b4 	.word	0x200001b4

0800883c <GUI_ClearRect>:
 800883c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	4607      	mov	r7, r0
 8008842:	2004      	movs	r0, #4
 8008844:	469a      	mov	sl, r3
 8008846:	460e      	mov	r6, r1
 8008848:	4691      	mov	r9, r2
 800884a:	f004 fae5 	bl	800ce18 <LCD_SetDrawMode>
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <GUI_ClearRect+0x60>)
 8008850:	681c      	ldr	r4, [r3, #0]
 8008852:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008854:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8008856:	442f      	add	r7, r5
 8008858:	4426      	add	r6, r4
 800885a:	4680      	mov	r8, r0
 800885c:	444d      	add	r5, r9
 800885e:	4454      	add	r4, sl
 8008860:	4668      	mov	r0, sp
 8008862:	f8ad 7000 	strh.w	r7, [sp]
 8008866:	f8ad 5004 	strh.w	r5, [sp, #4]
 800886a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800886e:	f8ad 4006 	strh.w	r4, [sp, #6]
 8008872:	f002 f927 	bl	800aac4 <WM__InitIVRSearch>
 8008876:	b928      	cbnz	r0, 8008884 <GUI_ClearRect+0x48>
 8008878:	4640      	mov	r0, r8
 800887a:	f004 facd 	bl	800ce18 <LCD_SetDrawMode>
 800887e:	b002      	add	sp, #8
 8008880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008884:	4638      	mov	r0, r7
 8008886:	4631      	mov	r1, r6
 8008888:	462a      	mov	r2, r5
 800888a:	4623      	mov	r3, r4
 800888c:	f004 fb46 	bl	800cf1c <LCD_FillRect>
 8008890:	f002 f856 	bl	800a940 <WM__GetNextIVR>
 8008894:	2800      	cmp	r0, #0
 8008896:	d1f5      	bne.n	8008884 <GUI_ClearRect+0x48>
 8008898:	e7ee      	b.n	8008878 <GUI_ClearRect+0x3c>
 800889a:	bf00      	nop
 800889c:	200001b0 	.word	0x200001b0

080088a0 <GUI_Clear>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	2000      	movs	r0, #0
 80088a4:	4601      	mov	r1, r0
 80088a6:	f005 fa5f 	bl	800dd68 <GUI_GotoXY>
 80088aa:	4804      	ldr	r0, [pc, #16]	; (80088bc <GUI_Clear+0x1c>)
 80088ac:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80088b0:	4601      	mov	r1, r0
 80088b2:	4613      	mov	r3, r2
 80088b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b8:	f7ff bfc0 	b.w	800883c <GUI_ClearRect>
 80088bc:	ffffc001 	.word	0xffffc001

080088c0 <GUI__RegisterExit>:
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <GUI__RegisterExit+0x20>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	605a      	str	r2, [r3, #4]
 80088d0:	4b03      	ldr	r3, [pc, #12]	; (80088e0 <GUI__RegisterExit+0x20>)
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	20019388 	.word	0x20019388

080088e4 <GUI__Config>:
 80088e4:	b508      	push	{r3, lr}
 80088e6:	4b08      	ldr	r3, [pc, #32]	; (8008908 <GUI__Config+0x24>)
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	b962      	cbnz	r2, 8008906 <GUI__Config+0x22>
 80088ec:	2201      	movs	r2, #1
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	f7fc ffc6 	bl	8005880 <GUI_X_Config>
 80088f4:	f7fc fff0 	bl	80058d8 <LCD_X_Config>
 80088f8:	4804      	ldr	r0, [pc, #16]	; (800890c <GUI__Config+0x28>)
 80088fa:	4b05      	ldr	r3, [pc, #20]	; (8008910 <GUI__Config+0x2c>)
 80088fc:	6003      	str	r3, [r0, #0]
 80088fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008902:	f7ff bfdd 	b.w	80088c0 <GUI__RegisterExit>
 8008906:	bd08      	pop	{r3, pc}
 8008908:	20019404 	.word	0x20019404
 800890c:	200193fc 	.word	0x200193fc
 8008910:	08008785 	.word	0x08008785

08008914 <GUI_Init>:
 8008914:	b590      	push	{r4, r7, lr}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	4b20      	ldr	r3, [pc, #128]	; (800899c <GUI_Init+0x88>)
 800891c:	4a1f      	ldr	r2, [pc, #124]	; (800899c <GUI_Init+0x88>)
 800891e:	6812      	ldr	r2, [r2, #0]
 8008920:	f022 0201 	bic.w	r2, r2, #1
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	4b1e      	ldr	r3, [pc, #120]	; (80089a0 <GUI_Init+0x8c>)
 8008928:	2201      	movs	r2, #1
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	4b1d      	ldr	r3, [pc, #116]	; (80089a4 <GUI_Init+0x90>)
 800892e:	4a1e      	ldr	r2, [pc, #120]	; (80089a8 <GUI_Init+0x94>)
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	4b1c      	ldr	r3, [pc, #112]	; (80089a4 <GUI_Init+0x90>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	4b1d      	ldr	r3, [pc, #116]	; (80089ac <GUI_Init+0x98>)
 8008938:	429a      	cmp	r2, r3
 800893a:	d000      	beq.n	800893e <GUI_Init+0x2a>
 800893c:	e7fe      	b.n	800893c <GUI_Init+0x28>
 800893e:	f7ff ffd1 	bl	80088e4 <GUI__Config>
 8008942:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <GUI_Init+0x9c>)
 8008944:	222e      	movs	r2, #46	; 0x2e
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	f7fc ffba 	bl	80058c0 <GUI_X_Init>
 800894c:	4819      	ldr	r0, [pc, #100]	; (80089b4 <GUI_Init+0xa0>)
 800894e:	f7ff ff2f 	bl	80087b0 <_InitContext>
 8008952:	f004 fd07 	bl	800d364 <emWin_LCD_Init>
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	f004 f984 	bl	800cc64 <LCD_GetXSizeDisplay>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d004      	beq.n	800896c <GUI_Init+0x58>
 8008962:	f004 f985 	bl	800cc70 <LCD_GetYSizeDisplay>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d109      	bne.n	8008980 <GUI_Init+0x6c>
 800896c:	f004 f966 	bl	800cc3c <LCD_GetXSizeMax>
 8008970:	4604      	mov	r4, r0
 8008972:	f004 f966 	bl	800cc42 <LCD_GetYSizeMax>
 8008976:	4603      	mov	r3, r0
 8008978:	4620      	mov	r0, r4
 800897a:	4619      	mov	r1, r3
 800897c:	f004 f968 	bl	800cc50 <LCD_SetDisplaySize>
 8008980:	2000      	movs	r0, #0
 8008982:	2100      	movs	r1, #0
 8008984:	f005 f8f6 	bl	800db74 <GUI_SetOrg>
 8008988:	f002 fada 	bl	800af40 <WM_Init>
 800898c:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <GUI_Init+0xa4>)
 800898e:	2201      	movs	r2, #1
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	bd90      	pop	{r4, r7, pc}
 800899c:	e0002000 	.word	0xe0002000
 80089a0:	40023008 	.word	0x40023008
 80089a4:	40023000 	.word	0x40023000
 80089a8:	f407a5c2 	.word	0xf407a5c2
 80089ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80089b0:	2001aeea 	.word	0x2001aeea
 80089b4:	2001938c 	.word	0x2001938c
 80089b8:	2001af08 	.word	0x2001af08

080089bc <GUIPROP__FindChar>:
 80089bc:	b138      	cbz	r0, 80089ce <GUIPROP__FindChar+0x12>
 80089be:	8803      	ldrh	r3, [r0, #0]
 80089c0:	428b      	cmp	r3, r1
 80089c2:	d802      	bhi.n	80089ca <GUIPROP__FindChar+0xe>
 80089c4:	8843      	ldrh	r3, [r0, #2]
 80089c6:	428b      	cmp	r3, r1
 80089c8:	d201      	bcs.n	80089ce <GUIPROP__FindChar+0x12>
 80089ca:	6880      	ldr	r0, [r0, #8]
 80089cc:	e7f6      	b.n	80089bc <GUIPROP__FindChar>
 80089ce:	4770      	bx	lr

080089d0 <GUIPROP_DispChar>:
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	4c38      	ldr	r4, [pc, #224]	; (8008ab8 <GUIPROP_DispChar+0xe8>)
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	4605      	mov	r5, r0
 80089e0:	b089      	sub	sp, #36	; 0x24
 80089e2:	69d8      	ldr	r0, [r3, #28]
 80089e4:	4629      	mov	r1, r5
 80089e6:	f7ff ffe9 	bl	80089bc <GUIPROP__FindChar>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d061      	beq.n	8008ab2 <GUIPROP_DispChar+0xe2>
 80089ee:	f8b0 8000 	ldrh.w	r8, [r0]
 80089f2:	6847      	ldr	r7, [r0, #4]
 80089f4:	ebc8 0805 	rsb	r8, r8, r5
 80089f8:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 80089fc:	4648      	mov	r0, r9
 80089fe:	f896 b002 	ldrb.w	fp, [r6, #2]
 8008a02:	f004 fa09 	bl	800ce18 <LCD_SetDrawMode>
 8008a06:	6825      	ldr	r5, [r4, #0]
 8008a08:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8008a0c:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 8008a10:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8008a14:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8008a18:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8008a1c:	9306      	str	r3, [sp, #24]
 8008a1e:	4682      	mov	sl, r0
 8008a20:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 8008a24:	f8cd c000 	str.w	ip, [sp]
 8008a28:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8008a2c:	f8cd e004 	str.w	lr, [sp, #4]
 8008a30:	f04f 0e01 	mov.w	lr, #1
 8008a34:	f8cd b00c 	str.w	fp, [sp, #12]
 8008a38:	f8cd e008 	str.w	lr, [sp, #8]
 8008a3c:	6873      	ldr	r3, [r6, #4]
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8008a42:	9b06      	ldr	r3, [sp, #24]
 8008a44:	9505      	str	r5, [sp, #20]
 8008a46:	f004 fb71 	bl	800d12c <LCD_DrawBitmap>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	69da      	ldr	r2, [r3, #28]
 8008a4e:	f892 b019 	ldrb.w	fp, [r2, #25]
 8008a52:	7e11      	ldrb	r1, [r2, #24]
 8008a54:	458b      	cmp	fp, r1
 8008a56:	d920      	bls.n	8008a9a <GUIPROP_DispChar+0xca>
 8008a58:	f1b9 0f02 	cmp.w	r9, #2
 8008a5c:	7ed5      	ldrb	r5, [r2, #27]
 8008a5e:	d01c      	beq.n	8008a9a <GUIPROP_DispChar+0xca>
 8008a60:	9107      	str	r1, [sp, #28]
 8008a62:	f005 f99e 	bl	800dda2 <GUI_GetColor>
 8008a66:	4681      	mov	r9, r0
 8008a68:	f005 f994 	bl	800dd94 <GUI_GetBkColor>
 8008a6c:	f7ff fc66 	bl	800833c <GUI_SetColor>
 8008a70:	6824      	ldr	r4, [r4, #0]
 8008a72:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 8008a76:	69e2      	ldr	r2, [r4, #28]
 8008a78:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8008a7c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8008a80:	7ed2      	ldrb	r2, [r2, #27]
 8008a82:	9907      	ldr	r1, [sp, #28]
 8008a84:	fb07 0202 	mla	r2, r7, r2, r0
 8008a88:	fb01 3105 	mla	r1, r1, r5, r3
 8008a8c:	fb0b 3305 	mla	r3, fp, r5, r3
 8008a90:	f004 fa44 	bl	800cf1c <LCD_FillRect>
 8008a94:	4648      	mov	r0, r9
 8008a96:	f7ff fc51 	bl	800833c <GUI_SetColor>
 8008a9a:	4650      	mov	r0, sl
 8008a9c:	f004 f9bc 	bl	800ce18 <LCD_SetDrawMode>
 8008aa0:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <GUIPROP_DispChar+0xe8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	69da      	ldr	r2, [r3, #28]
 8008aa6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8008aa8:	7e90      	ldrb	r0, [r2, #26]
 8008aaa:	7872      	ldrb	r2, [r6, #1]
 8008aac:	fb00 1202 	mla	r2, r0, r2, r1
 8008ab0:	845a      	strh	r2, [r3, #34]	; 0x22
 8008ab2:	b009      	add	sp, #36	; 0x24
 8008ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab8:	200001b0 	.word	0x200001b0

08008abc <GUIPROP_GetCharDistX>:
 8008abc:	4b0d      	ldr	r3, [pc, #52]	; (8008af4 <GUIPROP_GetCharDistX+0x38>)
 8008abe:	b570      	push	{r4, r5, r6, lr}
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69dd      	ldr	r5, [r3, #28]
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	69e8      	ldr	r0, [r5, #28]
 8008aca:	4631      	mov	r1, r6
 8008acc:	f7ff ff76 	bl	80089bc <GUIPROP__FindChar>
 8008ad0:	b170      	cbz	r0, 8008af0 <GUIPROP_GetCharDistX+0x34>
 8008ad2:	8803      	ldrh	r3, [r0, #0]
 8008ad4:	6842      	ldr	r2, [r0, #4]
 8008ad6:	1af6      	subs	r6, r6, r3
 8008ad8:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8008adc:	7858      	ldrb	r0, [r3, #1]
 8008ade:	7eab      	ldrb	r3, [r5, #26]
 8008ae0:	fb10 f003 	smulbb	r0, r0, r3
 8008ae4:	b124      	cbz	r4, 8008af0 <GUIPROP_GetCharDistX+0x34>
 8008ae6:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 8008aea:	fb12 f303 	smulbb	r3, r2, r3
 8008aee:	6023      	str	r3, [r4, #0]
 8008af0:	bd70      	pop	{r4, r5, r6, pc}
 8008af2:	bf00      	nop
 8008af4:	200001b0 	.word	0x200001b0

08008af8 <GUIPROP_GetFontInfo>:
 8008af8:	2301      	movs	r3, #1
 8008afa:	800b      	strh	r3, [r1, #0]
 8008afc:	4770      	bx	lr

08008afe <GUIPROP_IsInFont>:
 8008afe:	b508      	push	{r3, lr}
 8008b00:	69c0      	ldr	r0, [r0, #28]
 8008b02:	f7ff ff5b 	bl	80089bc <GUIPROP__FindChar>
 8008b06:	3000      	adds	r0, #0
 8008b08:	bf18      	it	ne
 8008b0a:	2001      	movne	r0, #1
 8008b0c:	bd08      	pop	{r3, pc}
	...

08008b10 <GUIMONO_DispChar>:
 8008b10:	4b52      	ldr	r3, [pc, #328]	; (8008c5c <GUIMONO_DispChar+0x14c>)
 8008b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	69d9      	ldr	r1, [r3, #28]
 8008b1a:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8008b1c:	69cc      	ldr	r4, [r1, #28]
 8008b1e:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 8008b20:	89a2      	ldrh	r2, [r4, #12]
 8008b22:	4290      	cmp	r0, r2
 8008b24:	b08b      	sub	sp, #44	; 0x2c
 8008b26:	d308      	bcc.n	8008b3a <GUIMONO_DispChar+0x2a>
 8008b28:	89e6      	ldrh	r6, [r4, #14]
 8008b2a:	4286      	cmp	r6, r0
 8008b2c:	d305      	bcc.n	8008b3a <GUIMONO_DispChar+0x2a>
 8008b2e:	f8d4 9000 	ldr.w	r9, [r4]
 8008b32:	1a82      	subs	r2, r0, r2
 8008b34:	f04f 3bff 	mov.w	fp, #4294967295
 8008b38:	e015      	b.n	8008b66 <GUIMONO_DispChar+0x56>
 8008b3a:	68a2      	ldr	r2, [r4, #8]
 8008b3c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	f000 8081 	beq.w	8008c48 <GUIMONO_DispChar+0x138>
 8008b46:	8816      	ldrh	r6, [r2, #0]
 8008b48:	42b0      	cmp	r0, r6
 8008b4a:	d37d      	bcc.n	8008c48 <GUIMONO_DispChar+0x138>
 8008b4c:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8008b50:	4584      	cmp	ip, r0
 8008b52:	d379      	bcc.n	8008c48 <GUIMONO_DispChar+0x138>
 8008b54:	6852      	ldr	r2, [r2, #4]
 8008b56:	1b80      	subs	r0, r0, r6
 8008b58:	b280      	uxth	r0, r0
 8008b5a:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8008b5e:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 8008b62:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8008b66:	1c50      	adds	r0, r2, #1
 8008b68:	d06e      	beq.n	8008c48 <GUIMONO_DispChar+0x138>
 8008b6a:	f891 8018 	ldrb.w	r8, [r1, #24]
 8008b6e:	7ca1      	ldrb	r1, [r4, #18]
 8008b70:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8008b74:	7c26      	ldrb	r6, [r4, #16]
 8008b76:	9206      	str	r2, [sp, #24]
 8008b78:	fb18 f101 	smulbb	r1, r8, r1
 8008b7c:	9107      	str	r1, [sp, #28]
 8008b7e:	fa0f f18a 	sxth.w	r1, sl
 8008b82:	4608      	mov	r0, r1
 8008b84:	9108      	str	r1, [sp, #32]
 8008b86:	f004 f947 	bl	800ce18 <LCD_SetDrawMode>
 8008b8a:	4934      	ldr	r1, [pc, #208]	; (8008c5c <GUIMONO_DispChar+0x14c>)
 8008b8c:	9009      	str	r0, [sp, #36]	; 0x24
 8008b8e:	680b      	ldr	r3, [r1, #0]
 8008b90:	9a06      	ldr	r2, [sp, #24]
 8008b92:	69d9      	ldr	r1, [r3, #28]
 8008b94:	7e88      	ldrb	r0, [r1, #26]
 8008b96:	9000      	str	r0, [sp, #0]
 8008b98:	7ec9      	ldrb	r1, [r1, #27]
 8008b9a:	9101      	str	r1, [sp, #4]
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	9102      	str	r1, [sp, #8]
 8008ba0:	7ca1      	ldrb	r1, [r4, #18]
 8008ba2:	9103      	str	r1, [sp, #12]
 8008ba4:	9907      	ldr	r1, [sp, #28]
 8008ba6:	fb01 9202 	mla	r2, r1, r2, r9
 8008baa:	9204      	str	r2, [sp, #16]
 8008bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bae:	9305      	str	r3, [sp, #20]
 8008bb0:	b23f      	sxth	r7, r7
 8008bb2:	b22d      	sxth	r5, r5
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4632      	mov	r2, r6
 8008bba:	4643      	mov	r3, r8
 8008bbc:	f004 fab6 	bl	800d12c <LCD_DrawBitmap>
 8008bc0:	f1bb 3fff 	cmp.w	fp, #4294967295
 8008bc4:	d01b      	beq.n	8008bfe <GUIMONO_DispChar+0xee>
 8008bc6:	f04a 0002 	orr.w	r0, sl, #2
 8008bca:	b200      	sxth	r0, r0
 8008bcc:	f004 f924 	bl	800ce18 <LCD_SetDrawMode>
 8008bd0:	4a22      	ldr	r2, [pc, #136]	; (8008c5c <GUIMONO_DispChar+0x14c>)
 8008bd2:	6813      	ldr	r3, [r2, #0]
 8008bd4:	69da      	ldr	r2, [r3, #28]
 8008bd6:	7e91      	ldrb	r1, [r2, #26]
 8008bd8:	9100      	str	r1, [sp, #0]
 8008bda:	7ed2      	ldrb	r2, [r2, #27]
 8008bdc:	9201      	str	r2, [sp, #4]
 8008bde:	2101      	movs	r1, #1
 8008be0:	9102      	str	r1, [sp, #8]
 8008be2:	9907      	ldr	r1, [sp, #28]
 8008be4:	7ca2      	ldrb	r2, [r4, #18]
 8008be6:	9203      	str	r2, [sp, #12]
 8008be8:	fb01 920b 	mla	r2, r1, fp, r9
 8008bec:	9204      	str	r2, [sp, #16]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4632      	mov	r2, r6
 8008bf8:	4643      	mov	r3, r8
 8008bfa:	f004 fa97 	bl	800d12c <LCD_DrawBitmap>
 8008bfe:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8008c5c <GUIMONO_DispChar+0x14c>
 8008c02:	f8d8 3000 	ldr.w	r3, [r8]
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	7e5a      	ldrb	r2, [r3, #25]
 8008c0a:	7e1b      	ldrb	r3, [r3, #24]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d917      	bls.n	8008c40 <GUIMONO_DispChar+0x130>
 8008c10:	9a08      	ldr	r2, [sp, #32]
 8008c12:	2a02      	cmp	r2, #2
 8008c14:	d014      	beq.n	8008c40 <GUIMONO_DispChar+0x130>
 8008c16:	f08a 0004 	eor.w	r0, sl, #4
 8008c1a:	b200      	sxth	r0, r0
 8008c1c:	f004 f8fc 	bl	800ce18 <LCD_SetDrawMode>
 8008c20:	f8d8 3000 	ldr.w	r3, [r8]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	f893 e018 	ldrb.w	lr, [r3, #24]
 8008c2a:	7ed9      	ldrb	r1, [r3, #27]
 8008c2c:	7e9a      	ldrb	r2, [r3, #26]
 8008c2e:	7e5b      	ldrb	r3, [r3, #25]
 8008c30:	4638      	mov	r0, r7
 8008c32:	fb0e 5101 	mla	r1, lr, r1, r5
 8008c36:	fb06 7202 	mla	r2, r6, r2, r7
 8008c3a:	442b      	add	r3, r5
 8008c3c:	f004 f96e 	bl	800cf1c <LCD_FillRect>
 8008c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c42:	b2d8      	uxtb	r0, r3
 8008c44:	f004 f8e8 	bl	800ce18 <LCD_SetDrawMode>
 8008c48:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <GUIMONO_DispChar+0x14c>)
 8008c4a:	7c61      	ldrb	r1, [r4, #17]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8008c50:	440a      	add	r2, r1
 8008c52:	845a      	strh	r2, [r3, #34]	; 0x22
 8008c54:	b00b      	add	sp, #44	; 0x2c
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5a:	bf00      	nop
 8008c5c:	200001b0 	.word	0x200001b0

08008c60 <GUIMONO_GetCharDistX>:
 8008c60:	4b04      	ldr	r3, [pc, #16]	; (8008c74 <GUIMONO_GetCharDistX+0x14>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	b109      	cbz	r1, 8008c6e <GUIMONO_GetCharDistX+0xe>
 8008c6a:	7c1a      	ldrb	r2, [r3, #16]
 8008c6c:	600a      	str	r2, [r1, #0]
 8008c6e:	7c58      	ldrb	r0, [r3, #17]
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	200001b0 	.word	0x200001b0

08008c78 <GUIMONO_GetFontInfo>:
 8008c78:	2302      	movs	r3, #2
 8008c7a:	800b      	strh	r3, [r1, #0]
 8008c7c:	4770      	bx	lr

08008c7e <GUIMONO_IsInFont>:
 8008c7e:	69c3      	ldr	r3, [r0, #28]
 8008c80:	899a      	ldrh	r2, [r3, #12]
 8008c82:	428a      	cmp	r2, r1
 8008c84:	d802      	bhi.n	8008c8c <GUIMONO_IsInFont+0xe>
 8008c86:	89da      	ldrh	r2, [r3, #14]
 8008c88:	428a      	cmp	r2, r1
 8008c8a:	d20f      	bcs.n	8008cac <GUIMONO_IsInFont+0x2e>
 8008c8c:	6898      	ldr	r0, [r3, #8]
 8008c8e:	b180      	cbz	r0, 8008cb2 <GUIMONO_IsInFont+0x34>
 8008c90:	8803      	ldrh	r3, [r0, #0]
 8008c92:	4299      	cmp	r1, r3
 8008c94:	d30c      	bcc.n	8008cb0 <GUIMONO_IsInFont+0x32>
 8008c96:	8842      	ldrh	r2, [r0, #2]
 8008c98:	428a      	cmp	r2, r1
 8008c9a:	d309      	bcc.n	8008cb0 <GUIMONO_IsInFont+0x32>
 8008c9c:	1ac9      	subs	r1, r1, r3
 8008c9e:	6842      	ldr	r2, [r0, #4]
 8008ca0:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8008ca4:	43c0      	mvns	r0, r0
 8008ca6:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8008caa:	4770      	bx	lr
 8008cac:	2001      	movs	r0, #1
 8008cae:	4770      	bx	lr
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	4770      	bx	lr

08008cb4 <_Log2VisBuffered>:
 8008cb4:	4770      	bx	lr
	...

08008cb8 <_DispLine>:
 8008cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cba:	4615      	mov	r5, r2
 8008cbc:	ab02      	add	r3, sp, #8
 8008cbe:	4a1a      	ldr	r2, [pc, #104]	; (8008d28 <_DispLine+0x70>)
 8008cc0:	f843 1d08 	str.w	r1, [r3, #-8]!
 8008cc4:	9001      	str	r0, [sp, #4]
 8008cc6:	6812      	ldr	r2, [r2, #0]
 8008cc8:	4c18      	ldr	r4, [pc, #96]	; (8008d2c <_DispLine+0x74>)
 8008cca:	4669      	mov	r1, sp
 8008ccc:	4790      	blx	r2
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	9001      	str	r0, [sp, #4]
 8008cd2:	6958      	ldr	r0, [r3, #20]
 8008cd4:	b958      	cbnz	r0, 8008cee <_DispLine+0x36>
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	f004 fc6a 	bl	800d5b0 <GUI__ManageCache>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	b1bb      	cbz	r3, 8008d14 <_DispLine+0x5c>
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	9801      	ldr	r0, [sp, #4]
 8008ce8:	9900      	ldr	r1, [sp, #0]
 8008cea:	4798      	blx	r3
 8008cec:	e017      	b.n	8008d1e <_DispLine+0x66>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	f004 ffd8 	bl	800dca4 <GUI_RectsIntersect>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d1ee      	bne.n	8008cd6 <_DispLine+0x1e>
 8008cf8:	e014      	b.n	8008d24 <_DispLine+0x6c>
 8008cfa:	a801      	add	r0, sp, #4
 8008cfc:	f004 fe6a 	bl	800d9d4 <GUI_UC__GetCharCodeInc>
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4605      	mov	r5, r0
 8008d08:	4798      	blx	r3
 8008d0a:	4b09      	ldr	r3, [pc, #36]	; (8008d30 <_DispLine+0x78>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	b10b      	cbz	r3, 8008d14 <_DispLine+0x5c>
 8008d10:	4628      	mov	r0, r5
 8008d12:	4798      	blx	r3
 8008d14:	9b00      	ldr	r3, [sp, #0]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	daed      	bge.n	8008cfa <_DispLine+0x42>
 8008d1e:	2000      	movs	r0, #0
 8008d20:	f004 fc46 	bl	800d5b0 <GUI__ManageCache>
 8008d24:	b003      	add	sp, #12
 8008d26:	bd30      	pop	{r4, r5, pc}
 8008d28:	200001b8 	.word	0x200001b8
 8008d2c:	200001b0 	.word	0x200001b0
 8008d30:	2001af04 	.word	0x2001af04

08008d34 <GUI__GetLineNumChars>:
 8008d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d36:	460d      	mov	r5, r1
 8008d38:	9001      	str	r0, [sp, #4]
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	b198      	cbz	r0, 8008d66 <GUI__GetLineNumChars+0x32>
 8008d3e:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <GUI__GetLineNumChars+0x38>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	b10b      	cbz	r3, 8008d4c <GUI__GetLineNumChars+0x18>
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	b90b      	cbnz	r3, 8008d50 <GUI__GetLineNumChars+0x1c>
 8008d4c:	2400      	movs	r4, #0
 8008d4e:	e008      	b.n	8008d62 <GUI__GetLineNumChars+0x2e>
 8008d50:	4798      	blx	r3
 8008d52:	e009      	b.n	8008d68 <GUI__GetLineNumChars+0x34>
 8008d54:	a801      	add	r0, sp, #4
 8008d56:	f004 fe3d 	bl	800d9d4 <GUI_UC__GetCharCodeInc>
 8008d5a:	b120      	cbz	r0, 8008d66 <GUI__GetLineNumChars+0x32>
 8008d5c:	280a      	cmp	r0, #10
 8008d5e:	d002      	beq.n	8008d66 <GUI__GetLineNumChars+0x32>
 8008d60:	3401      	adds	r4, #1
 8008d62:	42ac      	cmp	r4, r5
 8008d64:	dbf6      	blt.n	8008d54 <GUI__GetLineNumChars+0x20>
 8008d66:	4620      	mov	r0, r4
 8008d68:	b003      	add	sp, #12
 8008d6a:	bd30      	pop	{r4, r5, pc}
 8008d6c:	200001b0 	.word	0x200001b0

08008d70 <GUI__GetOverlap>:
 8008d70:	b513      	push	{r0, r1, r4, lr}
 8008d72:	a902      	add	r1, sp, #8
 8008d74:	2400      	movs	r4, #0
 8008d76:	f841 4d04 	str.w	r4, [r1, #-4]!
 8008d7a:	f000 f8b7 	bl	8008eec <GUI_GetCharDistXEx>
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	4283      	cmp	r3, r0
 8008d82:	bfcc      	ite	gt
 8008d84:	ebc0 0003 	rsbgt	r0, r0, r3
 8008d88:	4620      	movle	r0, r4
 8008d8a:	b002      	add	sp, #8
 8008d8c:	bd10      	pop	{r4, pc}
	...

08008d90 <GUI__GetLineDistX>:
 8008d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d92:	4a15      	ldr	r2, [pc, #84]	; (8008de8 <GUI__GetLineDistX+0x58>)
 8008d94:	9001      	str	r0, [sp, #4]
 8008d96:	ab02      	add	r3, sp, #8
 8008d98:	6812      	ldr	r2, [r2, #0]
 8008d9a:	f843 1d08 	str.w	r1, [r3, #-8]!
 8008d9e:	4669      	mov	r1, sp
 8008da0:	4790      	blx	r2
 8008da2:	9001      	str	r0, [sp, #4]
 8008da4:	b1f0      	cbz	r0, 8008de4 <GUI__GetLineDistX+0x54>
 8008da6:	4b11      	ldr	r3, [pc, #68]	; (8008dec <GUI__GetLineDistX+0x5c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	b10b      	cbz	r3, 8008db4 <GUI__GetLineDistX+0x24>
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	b913      	cbnz	r3, 8008dba <GUI__GetLineDistX+0x2a>
 8008db4:	2500      	movs	r5, #0
 8008db6:	462c      	mov	r4, r5
 8008db8:	e002      	b.n	8008dc0 <GUI__GetLineDistX+0x30>
 8008dba:	9900      	ldr	r1, [sp, #0]
 8008dbc:	4798      	blx	r3
 8008dbe:	e011      	b.n	8008de4 <GUI__GetLineDistX+0x54>
 8008dc0:	9b00      	ldr	r3, [sp, #0]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	db07      	blt.n	8008dda <GUI__GetLineDistX+0x4a>
 8008dca:	a801      	add	r0, sp, #4
 8008dcc:	f004 fe02 	bl	800d9d4 <GUI_UC__GetCharCodeInc>
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	f000 f881 	bl	8008ed8 <GUI_GetCharDistX>
 8008dd6:	4404      	add	r4, r0
 8008dd8:	e7f2      	b.n	8008dc0 <GUI__GetLineDistX+0x30>
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f7ff ffc8 	bl	8008d70 <GUI__GetOverlap>
 8008de0:	4420      	add	r0, r4
 8008de2:	e7ff      	b.n	8008de4 <GUI__GetLineDistX+0x54>
 8008de4:	b003      	add	sp, #12
 8008de6:	bd30      	pop	{r4, r5, pc}
 8008de8:	200001b8 	.word	0x200001b8
 8008dec:	200001b0 	.word	0x200001b0

08008df0 <GUI__DispLine>:
 8008df0:	4b27      	ldr	r3, [pc, #156]	; (8008e90 <GUI__DispLine+0xa0>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008df6:	4605      	mov	r5, r0
 8008df8:	460c      	mov	r4, r1
 8008dfa:	b163      	cbz	r3, 8008e16 <GUI__DispLine+0x26>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f001 fe61 	bl	800aac4 <WM__InitIVRSearch>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d041      	beq.n	8008e8a <GUI__DispLine+0x9a>
 8008e06:	4628      	mov	r0, r5
 8008e08:	4621      	mov	r1, r4
 8008e0a:	466a      	mov	r2, sp
 8008e0c:	f7ff ff54 	bl	8008cb8 <_DispLine>
 8008e10:	f001 fd96 	bl	800a940 <WM__GetNextIVR>
 8008e14:	e7f5      	b.n	8008e02 <GUI__DispLine+0x12>
 8008e16:	6810      	ldr	r0, [r2, #0]
 8008e18:	6851      	ldr	r1, [r2, #4]
 8008e1a:	4e1e      	ldr	r6, [pc, #120]	; (8008e94 <GUI__DispLine+0xa4>)
 8008e1c:	466b      	mov	r3, sp
 8008e1e:	c303      	stmia	r3!, {r0, r1}
 8008e20:	6833      	ldr	r3, [r6, #0]
 8008e22:	f8bd 1000 	ldrh.w	r1, [sp]
 8008e26:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8008e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e2e:	4411      	add	r1, r2
 8008e30:	f8ad 1000 	strh.w	r1, [sp]
 8008e34:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8008e38:	4419      	add	r1, r3
 8008e3a:	f8ad 1002 	strh.w	r1, [sp, #2]
 8008e3e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008e42:	440a      	add	r2, r1
 8008e44:	f8ad 2004 	strh.w	r2, [sp, #4]
 8008e48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008e4c:	4668      	mov	r0, sp
 8008e4e:	4413      	add	r3, r2
 8008e50:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008e54:	f001 fe36 	bl	800aac4 <WM__InitIVRSearch>
 8008e58:	6833      	ldr	r3, [r6, #0]
 8008e5a:	b940      	cbnz	r0, 8008e6e <GUI__DispLine+0x7e>
 8008e5c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8008e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e60:	1a8a      	subs	r2, r1, r2
 8008e62:	845a      	strh	r2, [r3, #34]	; 0x22
 8008e64:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8008e66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e68:	1a8a      	subs	r2, r1, r2
 8008e6a:	849a      	strh	r2, [r3, #36]	; 0x24
 8008e6c:	e00d      	b.n	8008e8a <GUI__DispLine+0x9a>
 8008e6e:	f8bd 2000 	ldrh.w	r2, [sp]
 8008e72:	845a      	strh	r2, [r3, #34]	; 0x22
 8008e74:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8008e78:	849a      	strh	r2, [r3, #36]	; 0x24
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	466a      	mov	r2, sp
 8008e80:	f7ff ff1a 	bl	8008cb8 <_DispLine>
 8008e84:	f001 fd5c 	bl	800a940 <WM__GetNextIVR>
 8008e88:	e7e6      	b.n	8008e58 <GUI__DispLine+0x68>
 8008e8a:	b002      	add	sp, #8
 8008e8c:	bd70      	pop	{r4, r5, r6, pc}
 8008e8e:	bf00      	nop
 8008e90:	2001aeec 	.word	0x2001aeec
 8008e94:	200001b0 	.word	0x200001b0

08008e98 <GUI_GetYAdjust>:
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <GUI_GetYAdjust+0x2c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e9e:	f002 020c 	and.w	r2, r2, #12
 8008ea2:	2a08      	cmp	r2, #8
 8008ea4:	d007      	beq.n	8008eb6 <GUI_GetYAdjust+0x1e>
 8008ea6:	2a0c      	cmp	r2, #12
 8008ea8:	d005      	beq.n	8008eb6 <GUI_GetYAdjust+0x1e>
 8008eaa:	2a04      	cmp	r2, #4
 8008eac:	d107      	bne.n	8008ebe <GUI_GetYAdjust+0x26>
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	7e18      	ldrb	r0, [r3, #24]
 8008eb2:	3801      	subs	r0, #1
 8008eb4:	4770      	bx	lr
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	7e18      	ldrb	r0, [r3, #24]
 8008eba:	0840      	lsrs	r0, r0, #1
 8008ebc:	4770      	bx	lr
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	200001b0 	.word	0x200001b0

08008ec8 <GUI_GetFontDistY>:
 8008ec8:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <GUI_GetFontDistY+0xc>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	7e58      	ldrb	r0, [r3, #25]
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	200001b0 	.word	0x200001b0

08008ed8 <GUI_GetCharDistX>:
 8008ed8:	b508      	push	{r3, lr}
 8008eda:	4b03      	ldr	r3, [pc, #12]	; (8008ee8 <GUI_GetCharDistX+0x10>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	4798      	blx	r3
 8008ee6:	bd08      	pop	{r3, pc}
 8008ee8:	200001b0 	.word	0x200001b0

08008eec <GUI_GetCharDistXEx>:
 8008eec:	b508      	push	{r3, lr}
 8008eee:	4b03      	ldr	r3, [pc, #12]	; (8008efc <GUI_GetCharDistXEx+0x10>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	4798      	blx	r3
 8008ef8:	bd08      	pop	{r3, pc}
 8008efa:	bf00      	nop
 8008efc:	200001b0 	.word	0x200001b0

08008f00 <_PushFreeBlock>:
 8008f00:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <_PushFreeBlock+0x20>)
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f06:	3201      	adds	r2, #1
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	605a      	str	r2, [r3, #4]
 8008f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f0e:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 8008f12:	6061      	str	r1, [r4, #4]
 8008f14:	2100      	movs	r1, #0
 8008f16:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8008f1a:	6258      	str	r0, [r3, #36]	; 0x24
 8008f1c:	bd10      	pop	{r4, pc}
 8008f1e:	bf00      	nop
 8008f20:	2001af28 	.word	0x2001af28

08008f24 <_OnExit>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4d0b      	ldr	r5, [pc, #44]	; (8008f54 <_OnExit+0x30>)
 8008f28:	2400      	movs	r4, #0
 8008f2a:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8008f2e:	4621      	mov	r1, r4
 8008f30:	2280      	movs	r2, #128	; 0x80
 8008f32:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 8008f36:	f7fe fdff 	bl	8007b38 <GUI__memset>
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	22c0      	movs	r2, #192	; 0xc0
 8008f40:	f7fe fdfa 	bl	8007b38 <GUI__memset>
 8008f44:	4621      	mov	r1, r4
 8008f46:	4804      	ldr	r0, [pc, #16]	; (8008f58 <_OnExit+0x34>)
 8008f48:	220c      	movs	r2, #12
 8008f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f4e:	f7fe bdf3 	b.w	8007b38 <GUI__memset>
 8008f52:	bf00      	nop
 8008f54:	2001af28 	.word	0x2001af28
 8008f58:	20019408 	.word	0x20019408

08008f5c <_RemoveFreeBlock>:
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	6842      	ldr	r2, [r0, #4]
 8008f60:	230f      	movs	r3, #15
 8008f62:	490d      	ldr	r1, [pc, #52]	; (8008f98 <_RemoveFreeBlock+0x3c>)
 8008f64:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 8008f68:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8008f6a:	42a2      	cmp	r2, r4
 8008f6c:	d203      	bcs.n	8008f76 <_RemoveFreeBlock+0x1a>
 8008f6e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008f72:	d2f6      	bcs.n	8008f62 <_RemoveFreeBlock+0x6>
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d80c      	bhi.n	8008f94 <_RemoveFreeBlock+0x38>
 8008f7a:	680c      	ldr	r4, [r1, #0]
 8008f7c:	1aa2      	subs	r2, r4, r2
 8008f7e:	600a      	str	r2, [r1, #0]
 8008f80:	6882      	ldr	r2, [r0, #8]
 8008f82:	68c0      	ldr	r0, [r0, #12]
 8008f84:	b102      	cbz	r2, 8008f88 <_RemoveFreeBlock+0x2c>
 8008f86:	6050      	str	r0, [r2, #4]
 8008f88:	b108      	cbz	r0, 8008f8e <_RemoveFreeBlock+0x32>
 8008f8a:	6002      	str	r2, [r0, #0]
 8008f8c:	bd10      	pop	{r4, pc}
 8008f8e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8008f92:	645a      	str	r2, [r3, #68]	; 0x44
 8008f94:	bd10      	pop	{r4, pc}
 8008f96:	bf00      	nop
 8008f98:	2001af28 	.word	0x2001af28

08008f9c <_AddFreeMemory>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	4e26      	ldr	r6, [pc, #152]	; (8009038 <_AddFreeMemory+0x9c>)
 8008fa0:	68f3      	ldr	r3, [r6, #12]
 8008fa2:	1e5a      	subs	r2, r3, #1
 8008fa4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	4413      	add	r3, r2
 8008faa:	1808      	adds	r0, r1, r0
 8008fac:	4298      	cmp	r0, r3
 8008fae:	460c      	mov	r4, r1
 8008fb0:	d805      	bhi.n	8008fbe <_AddFreeMemory+0x22>
 8008fb2:	594b      	ldr	r3, [r1, r5]
 8008fb4:	b91b      	cbnz	r3, 8008fbe <_AddFreeMemory+0x22>
 8008fb6:	6843      	ldr	r3, [r0, #4]
 8008fb8:	441d      	add	r5, r3
 8008fba:	f7ff ffcf 	bl	8008f5c <_RemoveFreeBlock>
 8008fbe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8008fc0:	429c      	cmp	r4, r3
 8008fc2:	d90a      	bls.n	8008fda <_AddFreeMemory+0x3e>
 8008fc4:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8008fc8:	1be7      	subs	r7, r4, r7
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	b92b      	cbnz	r3, 8008fda <_AddFreeMemory+0x3e>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	441d      	add	r5, r3
 8008fd4:	f7ff ffc2 	bl	8008f5c <_RemoveFreeBlock>
 8008fd8:	463c      	mov	r4, r7
 8008fda:	230f      	movs	r3, #15
 8008fdc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8008fe0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008fe2:	4295      	cmp	r5, r2
 8008fe4:	d203      	bcs.n	8008fee <_AddFreeMemory+0x52>
 8008fe6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008fea:	d2f7      	bcs.n	8008fdc <_AddFreeMemory+0x40>
 8008fec:	e022      	b.n	8009034 <_AddFreeMemory+0x98>
 8008fee:	2b0f      	cmp	r3, #15
 8008ff0:	d820      	bhi.n	8009034 <_AddFreeMemory+0x98>
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8008ff8:	1961      	adds	r1, r4, r5
 8008ffa:	6852      	ldr	r2, [r2, #4]
 8008ffc:	60a2      	str	r2, [r4, #8]
 8008ffe:	2000      	movs	r0, #0
 8009000:	e884 0021 	stmia.w	r4, {r0, r5}
 8009004:	6124      	str	r4, [r4, #16]
 8009006:	f841 5c04 	str.w	r5, [r1, #-4]
 800900a:	f104 0108 	add.w	r1, r4, #8
 800900e:	b102      	cbz	r2, 8009012 <_AddFreeMemory+0x76>
 8009010:	6051      	str	r1, [r2, #4]
 8009012:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8009016:	60e0      	str	r0, [r4, #12]
 8009018:	6059      	str	r1, [r3, #4]
 800901a:	6833      	ldr	r3, [r6, #0]
 800901c:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 8009020:	4a05      	ldr	r2, [pc, #20]	; (8009038 <_AddFreeMemory+0x9c>)
 8009022:	442b      	add	r3, r5
 8009024:	6033      	str	r3, [r6, #0]
 8009026:	b929      	cbnz	r1, 8009034 <_AddFreeMemory+0x98>
 8009028:	68d1      	ldr	r1, [r2, #12]
 800902a:	1acb      	subs	r3, r1, r3
 800902c:	6891      	ldr	r1, [r2, #8]
 800902e:	4299      	cmp	r1, r3
 8009030:	bf38      	it	cc
 8009032:	6093      	strcc	r3, [r2, #8]
 8009034:	4628      	mov	r0, r5
 8009036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009038:	2001af28 	.word	0x2001af28

0800903c <_RemoveHoles>:
 800903c:	4b25      	ldr	r3, [pc, #148]	; (80090d4 <_RemoveHoles+0x98>)
 800903e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009046:	3a01      	subs	r2, #1
 8009048:	4682      	mov	sl, r0
 800904a:	eb02 0904 	add.w	r9, r2, r4
 800904e:	469b      	mov	fp, r3
 8009050:	e894 0028 	ldmia.w	r4, {r3, r5}
 8009054:	2b00      	cmp	r3, #0
 8009056:	d133      	bne.n	80090c0 <_RemoveHoles+0x84>
 8009058:	eb04 0805 	add.w	r8, r4, r5
 800905c:	45c8      	cmp	r8, r9
 800905e:	d22f      	bcs.n	80090c0 <_RemoveHoles+0x84>
 8009060:	f854 c005 	ldr.w	ip, [r4, r5]
 8009064:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8009068:	f1bc 0f00 	cmp.w	ip, #0
 800906c:	d028      	beq.n	80090c0 <_RemoveHoles+0x84>
 800906e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8009072:	4f18      	ldr	r7, [pc, #96]	; (80090d4 <_RemoveHoles+0x98>)
 8009074:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d121      	bne.n	80090c0 <_RemoveHoles+0x84>
 800907c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907e:	4620      	mov	r0, r4
 8009080:	e88d 1008 	stmia.w	sp, {r3, ip}
 8009084:	f7ff ff6a 	bl	8008f5c <_RemoveFreeBlock>
 8009088:	f8d8 1000 	ldr.w	r1, [r8]
 800908c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800908e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009092:	4620      	mov	r0, r4
 8009094:	6054      	str	r4, [r2, #4]
 8009096:	4641      	mov	r1, r8
 8009098:	4632      	mov	r2, r6
 800909a:	f007 f899 	bl	80101d0 <memmove>
 800909e:	e89d 1008 	ldmia.w	sp, {r3, ip}
 80090a2:	459c      	cmp	ip, r3
 80090a4:	d102      	bne.n	80090ac <_RemoveHoles+0x70>
 80090a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a8:	1b5b      	subs	r3, r3, r5
 80090aa:	637b      	str	r3, [r7, #52]	; 0x34
 80090ac:	4628      	mov	r0, r5
 80090ae:	19a1      	adds	r1, r4, r6
 80090b0:	f7ff ff74 	bl	8008f9c <_AddFreeMemory>
 80090b4:	f1ba 0f00 	cmp.w	sl, #0
 80090b8:	d001      	beq.n	80090be <_RemoveHoles+0x82>
 80090ba:	4582      	cmp	sl, r0
 80090bc:	d905      	bls.n	80090ca <_RemoveHoles+0x8e>
 80090be:	4635      	mov	r5, r6
 80090c0:	442c      	add	r4, r5
 80090c2:	454c      	cmp	r4, r9
 80090c4:	d3c4      	bcc.n	8009050 <_RemoveHoles+0x14>
 80090c6:	2001      	movs	r0, #1
 80090c8:	e000      	b.n	80090cc <_RemoveHoles+0x90>
 80090ca:	2000      	movs	r0, #0
 80090cc:	b003      	add	sp, #12
 80090ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d2:	bf00      	nop
 80090d4:	2001af28 	.word	0x2001af28

080090d8 <GUI_ALLOC_FreeFixedBlock>:
 80090d8:	b128      	cbz	r0, 80090e6 <GUI_ALLOC_FreeFixedBlock+0xe>
 80090da:	4a03      	ldr	r2, [pc, #12]	; (80090e8 <GUI_ALLOC_FreeFixedBlock+0x10>)
 80090dc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80090de:	6003      	str	r3, [r0, #0]
 80090e0:	b103      	cbz	r3, 80090e4 <GUI_ALLOC_FreeFixedBlock+0xc>
 80090e2:	6058      	str	r0, [r3, #4]
 80090e4:	63d0      	str	r0, [r2, #60]	; 0x3c
 80090e6:	4770      	bx	lr
 80090e8:	2001af28 	.word	0x2001af28

080090ec <GUI_ALLOC_h2p>:
 80090ec:	b128      	cbz	r0, 80090fa <GUI_ALLOC_h2p+0xe>
 80090ee:	4b03      	ldr	r3, [pc, #12]	; (80090fc <GUI_ALLOC_h2p+0x10>)
 80090f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80090f6:	6840      	ldr	r0, [r0, #4]
 80090f8:	3008      	adds	r0, #8
 80090fa:	4770      	bx	lr
 80090fc:	2001af28 	.word	0x2001af28

08009100 <GUI_ALLOC_LockH>:
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <GUI_ALLOC_LockH+0x18>)
 8009102:	69d9      	ldr	r1, [r3, #28]
 8009104:	3101      	adds	r1, #1
 8009106:	61d9      	str	r1, [r3, #28]
 8009108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910a:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800910e:	3101      	adds	r1, #1
 8009110:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 8009114:	f7ff bfea 	b.w	80090ec <GUI_ALLOC_h2p>
 8009118:	2001af28 	.word	0x2001af28

0800911c <GUI_ALLOC_UnlockH>:
 800911c:	b530      	push	{r4, r5, lr}
 800911e:	6802      	ldr	r2, [r0, #0]
 8009120:	4b09      	ldr	r3, [pc, #36]	; (8009148 <GUI_ALLOC_UnlockH+0x2c>)
 8009122:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8009126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009128:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800912c:	2c01      	cmp	r4, #1
 800912e:	d903      	bls.n	8009138 <GUI_ALLOC_UnlockH+0x1c>
 8009130:	69dd      	ldr	r5, [r3, #28]
 8009132:	b10d      	cbz	r5, 8009138 <GUI_ALLOC_UnlockH+0x1c>
 8009134:	3d01      	subs	r5, #1
 8009136:	61dd      	str	r5, [r3, #28]
 8009138:	3c01      	subs	r4, #1
 800913a:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800913e:	2300      	movs	r3, #0
 8009140:	6003      	str	r3, [r0, #0]
 8009142:	4618      	mov	r0, r3
 8009144:	bd30      	pop	{r4, r5, pc}
 8009146:	bf00      	nop
 8009148:	2001af28 	.word	0x2001af28

0800914c <GUI_ALLOC_AssignMemory>:
 800914c:	4b02      	ldr	r3, [pc, #8]	; (8009158 <GUI_ALLOC_AssignMemory+0xc>)
 800914e:	f021 0103 	bic.w	r1, r1, #3
 8009152:	6018      	str	r0, [r3, #0]
 8009154:	6059      	str	r1, [r3, #4]
 8009156:	4770      	bx	lr
 8009158:	20019408 	.word	0x20019408

0800915c <GUI_ALLOC_Free>:
 800915c:	b510      	push	{r4, lr}
 800915e:	4604      	mov	r4, r0
 8009160:	b180      	cbz	r0, 8009184 <GUI_ALLOC_Free+0x28>
 8009162:	4b09      	ldr	r3, [pc, #36]	; (8009188 <GUI_ALLOC_Free+0x2c>)
 8009164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009166:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800916a:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d108      	bne.n	8009184 <GUI_ALLOC_Free+0x28>
 8009172:	6851      	ldr	r1, [r2, #4]
 8009174:	6848      	ldr	r0, [r1, #4]
 8009176:	f7ff ff11 	bl	8008f9c <_AddFreeMemory>
 800917a:	4620      	mov	r0, r4
 800917c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009180:	f7ff bebe 	b.w	8008f00 <_PushFreeBlock>
 8009184:	bd10      	pop	{r4, pc}
 8009186:	bf00      	nop
 8009188:	2001af28 	.word	0x2001af28

0800918c <_EnlargeBlocks>:
 800918c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009190:	4c22      	ldr	r4, [pc, #136]	; (800921c <_EnlargeBlocks+0x90>)
 8009192:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009194:	b93b      	cbnz	r3, 80091a6 <_EnlargeBlocks+0x1a>
 8009196:	4b22      	ldr	r3, [pc, #136]	; (8009220 <_EnlargeBlocks+0x94>)
 8009198:	689d      	ldr	r5, [r3, #8]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	3508      	adds	r5, #8
 800919e:	fbb3 f5f5 	udiv	r5, r3, r5
 80091a2:	3502      	adds	r5, #2
 80091a4:	e003      	b.n	80091ae <_EnlargeBlocks+0x22>
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	1d1d      	adds	r5, r3, #4
 80091aa:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80091ae:	00e8      	lsls	r0, r5, #3
 80091b0:	f000 f978 	bl	80094a4 <_Alloc>
 80091b4:	4680      	mov	r8, r0
 80091b6:	b360      	cbz	r0, 8009212 <_EnlargeBlocks+0x86>
 80091b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ba:	6922      	ldr	r2, [r4, #16]
 80091bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80091be:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 80091c2:	00d2      	lsls	r2, r2, #3
 80091c4:	685e      	ldr	r6, [r3, #4]
 80091c6:	3608      	adds	r6, #8
 80091c8:	4630      	mov	r0, r6
 80091ca:	f006 fff6 	bl	80101ba <memcpy>
 80091ce:	6922      	ldr	r2, [r4, #16]
 80091d0:	6366      	str	r6, [r4, #52]	; 0x34
 80091d2:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 80091d6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80091da:	3104      	adds	r1, #4
 80091dc:	4613      	mov	r3, r2
 80091de:	1e68      	subs	r0, r5, #1
 80091e0:	4283      	cmp	r3, r0
 80091e2:	f101 0108 	add.w	r1, r1, #8
 80091e6:	d203      	bcs.n	80091f0 <_EnlargeBlocks+0x64>
 80091e8:	3301      	adds	r3, #1
 80091ea:	f841 3c08 	str.w	r3, [r1, #-8]
 80091ee:	e7f6      	b.n	80091de <_EnlargeBlocks+0x52>
 80091f0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80091f4:	2600      	movs	r6, #0
 80091f6:	605e      	str	r6, [r3, #4]
 80091f8:	6863      	ldr	r3, [r4, #4]
 80091fa:	6262      	str	r2, [r4, #36]	; 0x24
 80091fc:	1a9b      	subs	r3, r3, r2
 80091fe:	442b      	add	r3, r5
 8009200:	6063      	str	r3, [r4, #4]
 8009202:	6125      	str	r5, [r4, #16]
 8009204:	4638      	mov	r0, r7
 8009206:	b13f      	cbz	r7, 8009218 <_EnlargeBlocks+0x8c>
 8009208:	f7ff ffa8 	bl	800915c <GUI_ALLOC_Free>
 800920c:	4630      	mov	r0, r6
 800920e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009212:	2001      	movs	r0, #1
 8009214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800921c:	2001af28 	.word	0x2001af28
 8009220:	20019408 	.word	0x20019408

08009224 <_InitOnce>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	4e58      	ldr	r6, [pc, #352]	; (8009388 <_InitOnce+0x164>)
 8009228:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800922c:	2900      	cmp	r1, #0
 800922e:	f040 80aa 	bne.w	8009386 <_InitOnce+0x162>
 8009232:	4d56      	ldr	r5, [pc, #344]	; (800938c <_InitOnce+0x168>)
 8009234:	686a      	ldr	r2, [r5, #4]
 8009236:	2301      	movs	r3, #1
 8009238:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800923c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8009240:	bf28      	it	cs
 8009242:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	0894      	lsrs	r4, r2, #2
 800924a:	2000      	movs	r0, #0
 800924c:	42a0      	cmp	r0, r4
 800924e:	d00c      	beq.n	800926a <_InitOnce+0x46>
 8009250:	1847      	adds	r7, r0, r1
 8009252:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009256:	fbb7 fefe 	udiv	lr, r7, lr
 800925a:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800925e:	ebce 0707 	rsb	r7, lr, r7
 8009262:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8009266:	3001      	adds	r0, #1
 8009268:	e7f0      	b.n	800924c <_InitOnce+0x28>
 800926a:	2000      	movs	r0, #0
 800926c:	42a0      	cmp	r0, r4
 800926e:	d016      	beq.n	800929e <_InitOnce+0x7a>
 8009270:	1847      	adds	r7, r0, r1
 8009272:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009276:	fbb7 fefe 	udiv	lr, r7, lr
 800927a:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800927e:	ebce 0e07 	rsb	lr, lr, r7
 8009282:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8009286:	4577      	cmp	r7, lr
 8009288:	d007      	beq.n	800929a <_InitOnce+0x76>
 800928a:	68aa      	ldr	r2, [r5, #8]
 800928c:	4b3f      	ldr	r3, [pc, #252]	; (800938c <_InitOnce+0x168>)
 800928e:	2a00      	cmp	r2, #0
 8009290:	d155      	bne.n	800933e <_InitOnce+0x11a>
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	0892      	lsrs	r2, r2, #2
 8009296:	609a      	str	r2, [r3, #8]
 8009298:	e051      	b.n	800933e <_InitOnce+0x11a>
 800929a:	3001      	adds	r0, #1
 800929c:	e7e6      	b.n	800926c <_InitOnce+0x48>
 800929e:	3101      	adds	r1, #1
 80092a0:	2902      	cmp	r1, #2
 80092a2:	d1d2      	bne.n	800924a <_InitOnce+0x26>
 80092a4:	0854      	lsrs	r4, r2, #1
 80092a6:	2100      	movs	r1, #0
 80092a8:	2000      	movs	r0, #0
 80092aa:	42a0      	cmp	r0, r4
 80092ac:	d00c      	beq.n	80092c8 <_InitOnce+0xa4>
 80092ae:	1847      	adds	r7, r0, r1
 80092b0:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80092b4:	fbb7 fefe 	udiv	lr, r7, lr
 80092b8:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 80092bc:	ebce 0707 	rsb	r7, lr, r7
 80092c0:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 80092c4:	3001      	adds	r0, #1
 80092c6:	e7f0      	b.n	80092aa <_InitOnce+0x86>
 80092c8:	2000      	movs	r0, #0
 80092ca:	42a0      	cmp	r0, r4
 80092cc:	d00f      	beq.n	80092ee <_InitOnce+0xca>
 80092ce:	1847      	adds	r7, r0, r1
 80092d0:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80092d4:	fbb7 fefe 	udiv	lr, r7, lr
 80092d8:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 80092dc:	ebce 0707 	rsb	r7, lr, r7
 80092e0:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 80092e4:	b2bf      	uxth	r7, r7
 80092e6:	45bc      	cmp	ip, r7
 80092e8:	d1cf      	bne.n	800928a <_InitOnce+0x66>
 80092ea:	3001      	adds	r0, #1
 80092ec:	e7ed      	b.n	80092ca <_InitOnce+0xa6>
 80092ee:	3101      	adds	r1, #1
 80092f0:	2902      	cmp	r1, #2
 80092f2:	d1d9      	bne.n	80092a8 <_InitOnce+0x84>
 80092f4:	2100      	movs	r1, #0
 80092f6:	2000      	movs	r0, #0
 80092f8:	4290      	cmp	r0, r2
 80092fa:	d007      	beq.n	800930c <_InitOnce+0xe8>
 80092fc:	1844      	adds	r4, r0, r1
 80092fe:	27ff      	movs	r7, #255	; 0xff
 8009300:	fbb4 f7f7 	udiv	r7, r4, r7
 8009304:	443c      	add	r4, r7
 8009306:	541c      	strb	r4, [r3, r0]
 8009308:	3001      	adds	r0, #1
 800930a:	e7f5      	b.n	80092f8 <_InitOnce+0xd4>
 800930c:	2000      	movs	r0, #0
 800930e:	4290      	cmp	r0, r2
 8009310:	d00b      	beq.n	800932a <_InitOnce+0x106>
 8009312:	1844      	adds	r4, r0, r1
 8009314:	27ff      	movs	r7, #255	; 0xff
 8009316:	fbb4 f7f7 	udiv	r7, r4, r7
 800931a:	443c      	add	r4, r7
 800931c:	5c1f      	ldrb	r7, [r3, r0]
 800931e:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8009322:	42a7      	cmp	r7, r4
 8009324:	d1b1      	bne.n	800928a <_InitOnce+0x66>
 8009326:	3001      	adds	r0, #1
 8009328:	e7f1      	b.n	800930e <_InitOnce+0xea>
 800932a:	3101      	adds	r1, #1
 800932c:	2902      	cmp	r1, #2
 800932e:	d1e2      	bne.n	80092f6 <_InitOnce+0xd2>
 8009330:	2100      	movs	r1, #0
 8009332:	4291      	cmp	r1, r2
 8009334:	d0a9      	beq.n	800928a <_InitOnce+0x66>
 8009336:	2000      	movs	r0, #0
 8009338:	5458      	strb	r0, [r3, r1]
 800933a:	3101      	adds	r1, #1
 800933c:	e7f9      	b.n	8009332 <_InitOnce+0x10e>
 800933e:	4814      	ldr	r0, [pc, #80]	; (8009390 <_InitOnce+0x16c>)
 8009340:	4b14      	ldr	r3, [pc, #80]	; (8009394 <_InitOnce+0x170>)
 8009342:	6003      	str	r3, [r0, #0]
 8009344:	f7ff fabc 	bl	80088c0 <GUI__RegisterExit>
 8009348:	235a      	movs	r3, #90	; 0x5a
 800934a:	6233      	str	r3, [r6, #32]
 800934c:	2300      	movs	r3, #0
 800934e:	2110      	movs	r1, #16
 8009350:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8009354:	4099      	lsls	r1, r3
 8009356:	3301      	adds	r3, #1
 8009358:	2b10      	cmp	r3, #16
 800935a:	4c0b      	ldr	r4, [pc, #44]	; (8009388 <_InitOnce+0x164>)
 800935c:	6411      	str	r1, [r2, #64]	; 0x40
 800935e:	d1f6      	bne.n	800934e <_InitOnce+0x12a>
 8009360:	6868      	ldr	r0, [r5, #4]
 8009362:	6829      	ldr	r1, [r5, #0]
 8009364:	63a1      	str	r1, [r4, #56]	; 0x38
 8009366:	2302      	movs	r3, #2
 8009368:	6123      	str	r3, [r4, #16]
 800936a:	f1a0 0314 	sub.w	r3, r0, #20
 800936e:	440b      	add	r3, r1
 8009370:	2501      	movs	r5, #1
 8009372:	6363      	str	r3, [r4, #52]	; 0x34
 8009374:	60e0      	str	r0, [r4, #12]
 8009376:	605d      	str	r5, [r3, #4]
 8009378:	6265      	str	r5, [r4, #36]	; 0x24
 800937a:	6065      	str	r5, [r4, #4]
 800937c:	f7ff fe0e 	bl	8008f9c <_AddFreeMemory>
 8009380:	f7ff ff04 	bl	800918c <_EnlargeBlocks>
 8009384:	6325      	str	r5, [r4, #48]	; 0x30
 8009386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009388:	2001af28 	.word	0x2001af28
 800938c:	20019408 	.word	0x20019408
 8009390:	20019414 	.word	0x20019414
 8009394:	08008f25 	.word	0x08008f25

08009398 <GUI_ALLOC_GetFixedBlock>:
 8009398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800939c:	4605      	mov	r5, r0
 800939e:	4e26      	ldr	r6, [pc, #152]	; (8009438 <GUI_ALLOC_GetFixedBlock+0xa0>)
 80093a0:	3503      	adds	r5, #3
 80093a2:	f7ff ff3f 	bl	8009224 <_InitOnce>
 80093a6:	f025 0503 	bic.w	r5, r5, #3
 80093aa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80093ac:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80093ae:	3504      	adds	r5, #4
 80093b0:	429d      	cmp	r5, r3
 80093b2:	bf38      	it	cc
 80093b4:	461d      	movcc	r5, r3
 80093b6:	4614      	mov	r4, r2
 80093b8:	b12c      	cbz	r4, 80093c6 <GUI_ALLOC_GetFixedBlock+0x2e>
 80093ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80093be:	42ab      	cmp	r3, r5
 80093c0:	d02c      	beq.n	800941c <GUI_ALLOC_GetFixedBlock+0x84>
 80093c2:	6824      	ldr	r4, [r4, #0]
 80093c4:	e7f8      	b.n	80093b8 <GUI_ALLOC_GetFixedBlock+0x20>
 80093c6:	68f3      	ldr	r3, [r6, #12]
 80093c8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80093ca:	eb02 0803 	add.w	r8, r2, r3
 80093ce:	f858 7c04 	ldr.w	r7, [r8, #-4]
 80093d2:	ebc7 0708 	rsb	r7, r7, r8
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	b133      	cbz	r3, 80093e8 <GUI_ALLOC_GetFixedBlock+0x50>
 80093da:	4620      	mov	r0, r4
 80093dc:	f7ff fe2e 	bl	800903c <_RemoveHoles>
 80093e0:	f858 7c04 	ldr.w	r7, [r8, #-4]
 80093e4:	ebc7 0708 	rsb	r7, r7, r8
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	bb13      	cbnz	r3, 8009432 <GUI_ALLOC_GetFixedBlock+0x9a>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	42ab      	cmp	r3, r5
 80093f0:	db1f      	blt.n	8009432 <GUI_ALLOC_GetFixedBlock+0x9a>
 80093f2:	4638      	mov	r0, r7
 80093f4:	1d1c      	adds	r4, r3, #4
 80093f6:	f7ff fdb1 	bl	8008f5c <_RemoveFreeBlock>
 80093fa:	68f3      	ldr	r3, [r6, #12]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	1b5b      	subs	r3, r3, r5
 8009400:	60f3      	str	r3, [r6, #12]
 8009402:	6973      	ldr	r3, [r6, #20]
 8009404:	1b64      	subs	r4, r4, r5
 8009406:	442b      	add	r3, r5
 8009408:	1b40      	subs	r0, r0, r5
 800940a:	443c      	add	r4, r7
 800940c:	6173      	str	r3, [r6, #20]
 800940e:	d002      	beq.n	8009416 <GUI_ALLOC_GetFixedBlock+0x7e>
 8009410:	4639      	mov	r1, r7
 8009412:	f7ff fdc3 	bl	8008f9c <_AddFreeMemory>
 8009416:	f844 5c04 	str.w	r5, [r4, #-4]
 800941a:	e00a      	b.n	8009432 <GUI_ALLOC_GetFixedBlock+0x9a>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	b10b      	cbz	r3, 8009424 <GUI_ALLOC_GetFixedBlock+0x8c>
 8009420:	6861      	ldr	r1, [r4, #4]
 8009422:	6059      	str	r1, [r3, #4]
 8009424:	6861      	ldr	r1, [r4, #4]
 8009426:	b101      	cbz	r1, 800942a <GUI_ALLOC_GetFixedBlock+0x92>
 8009428:	600b      	str	r3, [r1, #0]
 800942a:	42a2      	cmp	r2, r4
 800942c:	d101      	bne.n	8009432 <GUI_ALLOC_GetFixedBlock+0x9a>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	63f3      	str	r3, [r6, #60]	; 0x3c
 8009432:	4620      	mov	r0, r4
 8009434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009438:	2001af28 	.word	0x2001af28

0800943c <GUI_ALLOC_GetMaxSize>:
 800943c:	b508      	push	{r3, lr}
 800943e:	f7ff fef1 	bl	8009224 <_InitOnce>
 8009442:	2200      	movs	r2, #0
 8009444:	4b0b      	ldr	r3, [pc, #44]	; (8009474 <GUI_ALLOC_GetMaxSize+0x38>)
 8009446:	4413      	add	r3, r2
 8009448:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800944c:	b113      	cbz	r3, 8009454 <GUI_ALLOC_GetMaxSize+0x18>
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	2000      	movs	r0, #0
 8009452:	e00b      	b.n	800946c <GUI_ALLOC_GetMaxSize+0x30>
 8009454:	3a08      	subs	r2, #8
 8009456:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800945a:	d1f3      	bne.n	8009444 <GUI_ALLOC_GetMaxSize+0x8>
 800945c:	e7f8      	b.n	8009450 <GUI_ALLOC_GetMaxSize+0x14>
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	4290      	cmp	r0, r2
 8009464:	bf38      	it	cc
 8009466:	4610      	movcc	r0, r2
 8009468:	b113      	cbz	r3, 8009470 <GUI_ALLOC_GetMaxSize+0x34>
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1f6      	bne.n	800945e <GUI_ALLOC_GetMaxSize+0x22>
 8009470:	380c      	subs	r0, #12
 8009472:	bd08      	pop	{r3, pc}
 8009474:	2001af28 	.word	0x2001af28

08009478 <GUI_ALLOC_RequestSize>:
 8009478:	b508      	push	{r3, lr}
 800947a:	f7ff ffdf 	bl	800943c <GUI_ALLOC_GetMaxSize>
 800947e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8009482:	f04f 0364 	mov.w	r3, #100	; 0x64
 8009486:	4a06      	ldr	r2, [pc, #24]	; (80094a0 <GUI_ALLOC_RequestSize+0x28>)
 8009488:	d904      	bls.n	8009494 <GUI_ALLOC_RequestSize+0x1c>
 800948a:	fb90 f0f3 	sdiv	r0, r0, r3
 800948e:	6a13      	ldr	r3, [r2, #32]
 8009490:	4358      	muls	r0, r3
 8009492:	bd08      	pop	{r3, pc}
 8009494:	6a12      	ldr	r2, [r2, #32]
 8009496:	4350      	muls	r0, r2
 8009498:	fbb0 f0f3 	udiv	r0, r0, r3
 800949c:	bd08      	pop	{r3, pc}
 800949e:	bf00      	nop
 80094a0:	2001af28 	.word	0x2001af28

080094a4 <_Alloc>:
 80094a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a8:	4d38      	ldr	r5, [pc, #224]	; (800958c <_Alloc+0xe8>)
 80094aa:	4604      	mov	r4, r0
 80094ac:	f7ff feba 	bl	8009224 <_InitOnce>
 80094b0:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 80094b2:	682b      	ldr	r3, [r5, #0]
 80094b4:	42bc      	cmp	r4, r7
 80094b6:	bf24      	itt	cs
 80094b8:	1ce7      	addcs	r7, r4, #3
 80094ba:	f027 0703 	biccs.w	r7, r7, #3
 80094be:	370c      	adds	r7, #12
 80094c0:	429f      	cmp	r7, r3
 80094c2:	4c32      	ldr	r4, [pc, #200]	; (800958c <_Alloc+0xe8>)
 80094c4:	d83e      	bhi.n	8009544 <_Alloc+0xa0>
 80094c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80094c8:	6862      	ldr	r2, [r4, #4]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d90f      	bls.n	80094ee <_Alloc+0x4a>
 80094ce:	686b      	ldr	r3, [r5, #4]
 80094d0:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80094d2:	3b01      	subs	r3, #1
 80094d4:	606b      	str	r3, [r5, #4]
 80094d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80094d8:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80094dc:	eb03 0209 	add.w	r2, r3, r9
 80094e0:	6852      	ldr	r2, [r2, #4]
 80094e2:	626a      	str	r2, [r5, #36]	; 0x24
 80094e4:	2201      	movs	r2, #1
 80094e6:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 80094ea:	b956      	cbnz	r6, 8009502 <_Alloc+0x5e>
 80094ec:	e02a      	b.n	8009544 <_Alloc+0xa0>
 80094ee:	3b01      	subs	r3, #1
 80094f0:	6323      	str	r3, [r4, #48]	; 0x30
 80094f2:	f7ff fe4b 	bl	800918c <_EnlargeBlocks>
 80094f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80094f8:	3301      	adds	r3, #1
 80094fa:	6323      	str	r3, [r4, #48]	; 0x30
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d0e6      	beq.n	80094ce <_Alloc+0x2a>
 8009500:	e020      	b.n	8009544 <_Alloc+0xa0>
 8009502:	230f      	movs	r3, #15
 8009504:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8009508:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800950a:	4297      	cmp	r7, r2
 800950c:	d20c      	bcs.n	8009528 <_Alloc+0x84>
 800950e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009512:	d2f7      	bcs.n	8009504 <_Alloc+0x60>
 8009514:	e008      	b.n	8009528 <_Alloc+0x84>
 8009516:	6894      	ldr	r4, [r2, #8]
 8009518:	b12c      	cbz	r4, 8009526 <_Alloc+0x82>
 800951a:	6862      	ldr	r2, [r4, #4]
 800951c:	4297      	cmp	r7, r2
 800951e:	d914      	bls.n	800954a <_Alloc+0xa6>
 8009520:	68a2      	ldr	r2, [r4, #8]
 8009522:	2a00      	cmp	r2, #0
 8009524:	d1f7      	bne.n	8009516 <_Alloc+0x72>
 8009526:	3301      	adds	r3, #1
 8009528:	2b0f      	cmp	r3, #15
 800952a:	d803      	bhi.n	8009534 <_Alloc+0x90>
 800952c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8009530:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009532:	e7f6      	b.n	8009522 <_Alloc+0x7e>
 8009534:	4638      	mov	r0, r7
 8009536:	f7ff fd81 	bl	800903c <_RemoveHoles>
 800953a:	2800      	cmp	r0, #0
 800953c:	d0e1      	beq.n	8009502 <_Alloc+0x5e>
 800953e:	4630      	mov	r0, r6
 8009540:	f7ff fcde 	bl	8008f00 <_PushFreeBlock>
 8009544:	2000      	movs	r0, #0
 8009546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800954e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009550:	ebc7 0208 	rsb	r2, r7, r8
 8009554:	330c      	adds	r3, #12
 8009556:	4620      	mov	r0, r4
 8009558:	429a      	cmp	r2, r3
 800955a:	bf38      	it	cc
 800955c:	4647      	movcc	r7, r8
 800955e:	f7ff fcfd 	bl	8008f5c <_RemoveFreeBlock>
 8009562:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009564:	444b      	add	r3, r9
 8009566:	19e1      	adds	r1, r4, r7
 8009568:	605c      	str	r4, [r3, #4]
 800956a:	45b8      	cmp	r8, r7
 800956c:	f04f 0300 	mov.w	r3, #0
 8009570:	e884 00c0 	stmia.w	r4, {r6, r7}
 8009574:	60a3      	str	r3, [r4, #8]
 8009576:	6124      	str	r4, [r4, #16]
 8009578:	f841 7c04 	str.w	r7, [r1, #-4]
 800957c:	dd03      	ble.n	8009586 <_Alloc+0xe2>
 800957e:	ebc7 0008 	rsb	r0, r7, r8
 8009582:	f7ff fd0b 	bl	8008f9c <_AddFreeMemory>
 8009586:	4630      	mov	r0, r6
 8009588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958c:	2001af28 	.word	0x2001af28

08009590 <GUI_ALLOC_AllocNoInit>:
 8009590:	b108      	cbz	r0, 8009596 <GUI_ALLOC_AllocNoInit+0x6>
 8009592:	f7ff bf87 	b.w	80094a4 <_Alloc>
 8009596:	4770      	bx	lr

08009598 <GUI_DrawRect>:
 8009598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800959c:	4c1e      	ldr	r4, [pc, #120]	; (8009618 <GUI_DrawRect+0x80>)
 800959e:	f8d4 e000 	ldr.w	lr, [r4]
 80095a2:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 80095a6:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 80095aa:	1905      	adds	r5, r0, r4
 80095ac:	4414      	add	r4, r2
 80095ae:	f89e 2018 	ldrb.w	r2, [lr, #24]
 80095b2:	3a01      	subs	r2, #1
 80095b4:	b292      	uxth	r2, r2
 80095b6:	198f      	adds	r7, r1, r6
 80095b8:	441e      	add	r6, r3
 80095ba:	1aab      	subs	r3, r5, r2
 80095bc:	f8ad 3000 	strh.w	r3, [sp]
 80095c0:	1913      	adds	r3, r2, r4
 80095c2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80095c6:	4668      	mov	r0, sp
 80095c8:	1abb      	subs	r3, r7, r2
 80095ca:	4432      	add	r2, r6
 80095cc:	f8ad 3002 	strh.w	r3, [sp, #2]
 80095d0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80095d4:	f001 fa76 	bl	800aac4 <WM__InitIVRSearch>
 80095d8:	b1d0      	cbz	r0, 8009610 <GUI_DrawRect+0x78>
 80095da:	4628      	mov	r0, r5
 80095dc:	4639      	mov	r1, r7
 80095de:	4622      	mov	r2, r4
 80095e0:	f003 fc50 	bl	800ce84 <LCD_DrawHLine>
 80095e4:	f107 0901 	add.w	r9, r7, #1
 80095e8:	4628      	mov	r0, r5
 80095ea:	4631      	mov	r1, r6
 80095ec:	4622      	mov	r2, r4
 80095ee:	f106 38ff 	add.w	r8, r6, #4294967295
 80095f2:	f003 fc47 	bl	800ce84 <LCD_DrawHLine>
 80095f6:	4628      	mov	r0, r5
 80095f8:	4649      	mov	r1, r9
 80095fa:	4642      	mov	r2, r8
 80095fc:	f003 fc68 	bl	800ced0 <LCD_DrawVLine>
 8009600:	4620      	mov	r0, r4
 8009602:	4649      	mov	r1, r9
 8009604:	4642      	mov	r2, r8
 8009606:	f003 fc63 	bl	800ced0 <LCD_DrawVLine>
 800960a:	f001 f999 	bl	800a940 <WM__GetNextIVR>
 800960e:	e7e3      	b.n	80095d8 <GUI_DrawRect+0x40>
 8009610:	b003      	add	sp, #12
 8009612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009616:	bf00      	nop
 8009618:	200001b0 	.word	0x200001b0

0800961c <LCD_Index2Color_M565>:
 800961c:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 8009620:	4b06      	ldr	r3, [pc, #24]	; (800963c <LCD_Index2Color_M565+0x20>)
 8009622:	f000 021f 	and.w	r2, r0, #31
 8009626:	f3c0 1045 	ubfx	r0, r0, #5, #6
 800962a:	5c9a      	ldrb	r2, [r3, r2]
 800962c:	5c5b      	ldrb	r3, [r3, r1]
 800962e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8009632:	4a03      	ldr	r2, [pc, #12]	; (8009640 <LCD_Index2Color_M565+0x24>)
 8009634:	5c10      	ldrb	r0, [r2, r0]
 8009636:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800963a:	4770      	bx	lr
 800963c:	0801532c 	.word	0x0801532c
 8009640:	080152ec 	.word	0x080152ec

08009644 <_Color2Index_M565>:
 8009644:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8009648:	4b06      	ldr	r3, [pc, #24]	; (8009664 <_Color2Index_M565+0x20>)
 800964a:	b2c2      	uxtb	r2, r0
 800964c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009650:	5c9a      	ldrb	r2, [r3, r2]
 8009652:	5c5b      	ldrb	r3, [r3, r1]
 8009654:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8009658:	4a03      	ldr	r2, [pc, #12]	; (8009668 <_Color2Index_M565+0x24>)
 800965a:	5c10      	ldrb	r0, [r2, r0]
 800965c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	0801544c 	.word	0x0801544c
 8009668:	0801534c 	.word	0x0801534c

0800966c <_GetIndexMask_M565>:
 800966c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009670:	4770      	bx	lr
	...

08009674 <_Color2IndexBulk>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	4f0f      	ldr	r7, [pc, #60]	; (80096b4 <_Color2IndexBulk+0x40>)
 8009678:	683f      	ldr	r7, [r7, #0]
 800967a:	4606      	mov	r6, r0
 800967c:	460d      	mov	r5, r1
 800967e:	4614      	mov	r4, r2
 8009680:	469c      	mov	ip, r3
 8009682:	b10f      	cbz	r7, 8009688 <_Color2IndexBulk+0x14>
 8009684:	47b8      	blx	r7
 8009686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009688:	f856 2b04 	ldr.w	r2, [r6], #4
 800968c:	490a      	ldr	r1, [pc, #40]	; (80096b8 <_Color2IndexBulk+0x44>)
 800968e:	b2d3      	uxtb	r3, r2
 8009690:	3c01      	subs	r4, #1
 8009692:	5cc8      	ldrb	r0, [r1, r3]
 8009694:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8009698:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800969c:	5ccb      	ldrb	r3, [r1, r3]
 800969e:	4907      	ldr	r1, [pc, #28]	; (80096bc <_Color2IndexBulk+0x48>)
 80096a0:	5c8a      	ldrb	r2, [r1, r2]
 80096a2:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 80096a6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80096aa:	802b      	strh	r3, [r5, #0]
 80096ac:	4465      	add	r5, ip
 80096ae:	d1eb      	bne.n	8009688 <_Color2IndexBulk+0x14>
 80096b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20019420 	.word	0x20019420
 80096b8:	0801544c 	.word	0x0801544c
 80096bc:	0801534c 	.word	0x0801534c

080096c0 <_Index2ColorBulk>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	4e13      	ldr	r6, [pc, #76]	; (8009710 <_Index2ColorBulk+0x50>)
 80096c4:	6836      	ldr	r6, [r6, #0]
 80096c6:	4684      	mov	ip, r0
 80096c8:	4614      	mov	r4, r2
 80096ca:	461d      	mov	r5, r3
 80096cc:	b10e      	cbz	r6, 80096d2 <_Index2ColorBulk+0x12>
 80096ce:	47b0      	blx	r6
 80096d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d2:	1e50      	subs	r0, r2, #1
 80096d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80096d8:	3a01      	subs	r2, #1
 80096da:	fb03 c000 	mla	r0, r3, r0, ip
 80096de:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80096e2:	8802      	ldrh	r2, [r0, #0]
 80096e4:	4b0b      	ldr	r3, [pc, #44]	; (8009714 <_Index2ColorBulk+0x54>)
 80096e6:	f002 061f 	and.w	r6, r2, #31
 80096ea:	0ad7      	lsrs	r7, r2, #11
 80096ec:	5d9e      	ldrb	r6, [r3, r6]
 80096ee:	5ddb      	ldrb	r3, [r3, r7]
 80096f0:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80096f4:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80096f8:	4e07      	ldr	r6, [pc, #28]	; (8009718 <_Index2ColorBulk+0x58>)
 80096fa:	5cb2      	ldrb	r2, [r6, r2]
 80096fc:	3c01      	subs	r4, #1
 80096fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009702:	f841 3904 	str.w	r3, [r1], #-4
 8009706:	ebc5 0000 	rsb	r0, r5, r0
 800970a:	d1ea      	bne.n	80096e2 <_Index2ColorBulk+0x22>
 800970c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970e:	bf00      	nop
 8009710:	2001941c 	.word	0x2001941c
 8009714:	0801532c 	.word	0x0801532c
 8009718:	080152ec 	.word	0x080152ec

0800971c <WM__IsInModalArea>:
 800971c:	4b12      	ldr	r3, [pc, #72]	; (8009768 <WM__IsInModalArea+0x4c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	b570      	push	{r4, r5, r6, lr}
 8009724:	4604      	mov	r4, r0
 8009726:	da0f      	bge.n	8009748 <WM__IsInModalArea+0x2c>
 8009728:	4e10      	ldr	r6, [pc, #64]	; (800976c <WM__IsInModalArea+0x50>)
 800972a:	4d11      	ldr	r5, [pc, #68]	; (8009770 <WM__IsInModalArea+0x54>)
 800972c:	6833      	ldr	r3, [r6, #0]
 800972e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8009732:	4620      	mov	r0, r4
 8009734:	6859      	ldr	r1, [r3, #4]
 8009736:	f004 fc48 	bl	800dfca <WM__IsAncestor>
 800973a:	6833      	ldr	r3, [r6, #0]
 800973c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009740:	686a      	ldr	r2, [r5, #4]
 8009742:	686b      	ldr	r3, [r5, #4]
 8009744:	b942      	cbnz	r2, 8009758 <WM__IsInModalArea+0x3c>
 8009746:	e00c      	b.n	8009762 <WM__IsInModalArea+0x46>
 8009748:	4a0a      	ldr	r2, [pc, #40]	; (8009774 <WM__IsInModalArea+0x58>)
 800974a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800974e:	f004 fc3c 	bl	800dfca <WM__IsAncestor>
 8009752:	2800      	cmp	r0, #0
 8009754:	d1e8      	bne.n	8009728 <WM__IsInModalArea+0xc>
 8009756:	bd70      	pop	{r4, r5, r6, pc}
 8009758:	b918      	cbnz	r0, 8009762 <WM__IsInModalArea+0x46>
 800975a:	1ae3      	subs	r3, r4, r3
 800975c:	4258      	negs	r0, r3
 800975e:	4158      	adcs	r0, r3
 8009760:	bd70      	pop	{r4, r5, r6, pc}
 8009762:	2001      	movs	r0, #1
 8009764:	bd70      	pop	{r4, r5, r6, pc}
 8009766:	bf00      	nop
 8009768:	200001bc 	.word	0x200001bc
 800976c:	2001b040 	.word	0x2001b040
 8009770:	2001b008 	.word	0x2001b008
 8009774:	2001b020 	.word	0x2001b020

08009778 <WM__SendPIDMessage>:
 8009778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800977a:	4606      	mov	r6, r0
 800977c:	460c      	mov	r4, r1
 800977e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8009780:	b085      	sub	sp, #20
 8009782:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009786:	230d      	movs	r3, #13
 8009788:	9602      	str	r6, [sp, #8]
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	4637      	mov	r7, r6
 800978e:	4638      	mov	r0, r7
 8009790:	f000 fa8c 	bl	8009cac <WM_IsWindow>
 8009794:	b150      	cbz	r0, 80097ac <WM__SendPIDMessage+0x34>
 8009796:	4638      	mov	r0, r7
 8009798:	f000 fa8a 	bl	8009cb0 <WM_GetParent>
 800979c:	4607      	mov	r7, r0
 800979e:	2800      	cmp	r0, #0
 80097a0:	d0f5      	beq.n	800978e <WM__SendPIDMessage+0x16>
 80097a2:	4669      	mov	r1, sp
 80097a4:	9403      	str	r4, [sp, #12]
 80097a6:	f004 fbdb 	bl	800df60 <WM__SendMessageIfEnabled>
 80097aa:	e7f0      	b.n	800978e <WM__SendPIDMessage+0x16>
 80097ac:	4630      	mov	r0, r6
 80097ae:	4621      	mov	r1, r4
 80097b0:	f004 fbd6 	bl	800df60 <WM__SendMessageIfEnabled>
 80097b4:	b005      	add	sp, #20
 80097b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097b8 <WM__SendTouchMessage>:
 80097b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097ba:	68cc      	ldr	r4, [r1, #12]
 80097bc:	4606      	mov	r6, r0
 80097be:	460d      	mov	r5, r1
 80097c0:	b194      	cbz	r4, 80097e8 <WM__SendTouchMessage+0x30>
 80097c2:	f7ff fc9d 	bl	8009100 <GUI_ALLOC_LockH>
 80097c6:	ab02      	add	r3, sp, #8
 80097c8:	4602      	mov	r2, r0
 80097ca:	f843 0d04 	str.w	r0, [r3, #-4]!
 80097ce:	6821      	ldr	r1, [r4, #0]
 80097d0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80097d4:	1a09      	subs	r1, r1, r0
 80097d6:	6021      	str	r1, [r4, #0]
 80097d8:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80097dc:	6862      	ldr	r2, [r4, #4]
 80097de:	1a52      	subs	r2, r2, r1
 80097e0:	6062      	str	r2, [r4, #4]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fc9a 	bl	800911c <GUI_ALLOC_UnlockH>
 80097e8:	4630      	mov	r0, r6
 80097ea:	4629      	mov	r1, r5
 80097ec:	f7ff ffc4 	bl	8009778 <WM__SendPIDMessage>
 80097f0:	b002      	add	sp, #8
 80097f2:	bd70      	pop	{r4, r5, r6, pc}

080097f4 <WM_HandlePID>:
 80097f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	b097      	sub	sp, #92	; 0x5c
 80097fa:	ae06      	add	r6, sp, #24
 80097fc:	f04f 080c 	mov.w	r8, #12
 8009800:	2100      	movs	r1, #0
 8009802:	4642      	mov	r2, r8
 8009804:	4630      	mov	r0, r6
 8009806:	f006 fcfc 	bl	8010202 <memset>
 800980a:	f7fe fe15 	bl	8008438 <GUI_PID_IsEmpty>
 800980e:	b108      	cbz	r0, 8009814 <WM_HandlePID+0x20>
 8009810:	2000      	movs	r0, #0
 8009812:	e1aa      	b.n	8009b6a <WM_HandlePID+0x376>
 8009814:	ac09      	add	r4, sp, #36	; 0x24
 8009816:	4620      	mov	r0, r4
 8009818:	f7fe fd92 	bl	8008340 <GUI_PID_GetState>
 800981c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981e:	4dad      	ldr	r5, [pc, #692]	; (8009ad4 <WM_HandlePID+0x2e0>)
 8009820:	4fad      	ldr	r7, [pc, #692]	; (8009ad8 <WM_HandlePID+0x2e4>)
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	d112      	bne.n	800984c <WM_HandlePID+0x58>
 8009826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009828:	3301      	adds	r3, #1
 800982a:	d11e      	bne.n	800986a <WM_HandlePID+0x76>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8009832:	fb08 f803 	mul.w	r8, r8, r3
 8009836:	eb07 0308 	add.w	r3, r7, r8
 800983a:	7a19      	ldrb	r1, [r3, #8]
 800983c:	4291      	cmp	r1, r2
 800983e:	d0e7      	beq.n	8009810 <WM_HandlePID+0x1c>
 8009840:	f857 2008 	ldr.w	r2, [r7, r8]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	9209      	str	r2, [sp, #36]	; 0x24
 8009848:	930a      	str	r3, [sp, #40]	; 0x28
 800984a:	e00e      	b.n	800986a <WM_HandlePID+0x76>
 800984c:	2b00      	cmp	r3, #0
 800984e:	db0c      	blt.n	800986a <WM_HandlePID+0x76>
 8009850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009852:	2a00      	cmp	r2, #0
 8009854:	db09      	blt.n	800986a <WM_HandlePID+0x76>
 8009856:	49a1      	ldr	r1, [pc, #644]	; (8009adc <WM_HandlePID+0x2e8>)
 8009858:	f9b1 1000 	ldrsh.w	r1, [r1]
 800985c:	440b      	add	r3, r1
 800985e:	9309      	str	r3, [sp, #36]	; 0x24
 8009860:	4b9f      	ldr	r3, [pc, #636]	; (8009ae0 <WM_HandlePID+0x2ec>)
 8009862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009866:	441a      	add	r2, r3
 8009868:	920a      	str	r2, [sp, #40]	; 0x28
 800986a:	a804      	add	r0, sp, #16
 800986c:	f000 fa3e 	bl	8009cec <WM__AddCriticalHandle>
 8009870:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8009874:	2b01      	cmp	r3, #1
 8009876:	bf98      	it	ls
 8009878:	602b      	strls	r3, [r5, #0]
 800987a:	6828      	ldr	r0, [r5, #0]
 800987c:	a901      	add	r1, sp, #4
 800987e:	aa02      	add	r2, sp, #8
 8009880:	f004 f9d0 	bl	800dc24 <GUI_GetLayerPosEx>
 8009884:	9b01      	ldr	r3, [sp, #4]
 8009886:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009888:	990a      	ldr	r1, [sp, #40]	; 0x28
 800988a:	1ac0      	subs	r0, r0, r3
 800988c:	9b02      	ldr	r3, [sp, #8]
 800988e:	9009      	str	r0, [sp, #36]	; 0x24
 8009890:	1ac9      	subs	r1, r1, r3
 8009892:	682b      	ldr	r3, [r5, #0]
 8009894:	910a      	str	r1, [sp, #40]	; 0x28
 8009896:	220c      	movs	r2, #12
 8009898:	435a      	muls	r2, r3
 800989a:	18bb      	adds	r3, r7, r2
 800989c:	58ba      	ldr	r2, [r7, r2]
 800989e:	4282      	cmp	r2, r0
 80098a0:	d108      	bne.n	80098b4 <WM_HandlePID+0xc0>
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	428a      	cmp	r2, r1
 80098a6:	d105      	bne.n	80098b4 <WM_HandlePID+0xc0>
 80098a8:	7a1a      	ldrb	r2, [r3, #8]
 80098aa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80098ae:	429a      	cmp	r2, r3
 80098b0:	f000 8156 	beq.w	8009b60 <WM_HandlePID+0x36c>
 80098b4:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80098b8:	f004 fa7a 	bl	800ddb0 <GUI_CURSOR_SetPositionEx>
 80098bc:	4b89      	ldr	r3, [pc, #548]	; (8009ae4 <WM_HandlePID+0x2f0>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	b113      	cbz	r3, 80098c8 <WM_HandlePID+0xd4>
 80098c2:	4620      	mov	r0, r4
 80098c4:	2100      	movs	r1, #0
 80098c6:	4798      	blx	r3
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	4a87      	ldr	r2, [pc, #540]	; (8009ae8 <WM_HandlePID+0x2f4>)
 80098cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80098d0:	b918      	cbnz	r0, 80098da <WM_HandlePID+0xe6>
 80098d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098d6:	f000 f9b5 	bl	8009c44 <WM_Screen2hWin>
 80098da:	4b84      	ldr	r3, [pc, #528]	; (8009aec <WM_HandlePID+0x2f8>)
 80098dc:	9005      	str	r0, [sp, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	b113      	cbz	r3, 80098e8 <WM_HandlePID+0xf4>
 80098e2:	9905      	ldr	r1, [sp, #20]
 80098e4:	4620      	mov	r0, r4
 80098e6:	4798      	blx	r3
 80098e8:	4981      	ldr	r1, [pc, #516]	; (8009af0 <WM_HandlePID+0x2fc>)
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8009ad4 <WM_HandlePID+0x2e0>
 80098f0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80098f4:	4688      	mov	r8, r1
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	9805      	ldr	r0, [sp, #20]
 80098fa:	b312      	cbz	r2, 8009942 <WM_HandlePID+0x14e>
 80098fc:	4282      	cmp	r2, r0
 80098fe:	d020      	beq.n	8009942 <WM_HandlePID+0x14e>
 8009900:	6858      	ldr	r0, [r3, #4]
 8009902:	f7ff ff0b 	bl	800971c <WM__IsInModalArea>
 8009906:	b1e0      	cbz	r0, 8009942 <WM_HandlePID+0x14e>
 8009908:	f8d9 3000 	ldr.w	r3, [r9]
 800990c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8009910:	6858      	ldr	r0, [r3, #4]
 8009912:	f004 fb51 	bl	800dfb8 <WM__IsEnabled>
 8009916:	b1a0      	cbz	r0, 8009942 <WM_HandlePID+0x14e>
 8009918:	2312      	movs	r3, #18
 800991a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800991e:	9312      	str	r3, [sp, #72]	; 0x48
 8009920:	f8d9 3000 	ldr.w	r3, [r9]
 8009924:	9615      	str	r6, [sp, #84]	; 0x54
 8009926:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800992a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800992e:	6858      	ldr	r0, [r3, #4]
 8009930:	a912      	add	r1, sp, #72	; 0x48
 8009932:	f7ff ff41 	bl	80097b8 <WM__SendTouchMessage>
 8009936:	f8d9 3000 	ldr.w	r3, [r9]
 800993a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800993e:	2200      	movs	r2, #0
 8009940:	605a      	str	r2, [r3, #4]
 8009942:	9805      	ldr	r0, [sp, #20]
 8009944:	f7ff feea 	bl	800971c <WM__IsInModalArea>
 8009948:	b908      	cbnz	r0, 800994e <WM_HandlePID+0x15a>
 800994a:	2600      	movs	r6, #0
 800994c:	e0fb      	b.n	8009b46 <WM_HandlePID+0x352>
 800994e:	682b      	ldr	r3, [r5, #0]
 8009950:	9905      	ldr	r1, [sp, #20]
 8009952:	f8df a180 	ldr.w	sl, [pc, #384]	; 8009ad4 <WM_HandlePID+0x2e0>
 8009956:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8009ad8 <WM_HandlePID+0x2e4>
 800995a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800995e:	f04f 080c 	mov.w	r8, #12
 8009962:	fb08 7303 	mla	r3, r8, r3, r7
 8009966:	6051      	str	r1, [r2, #4]
 8009968:	7a1a      	ldrb	r2, [r3, #8]
 800996a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800996e:	429a      	cmp	r2, r3
 8009970:	d062      	beq.n	8009a38 <WM_HandlePID+0x244>
 8009972:	9b05      	ldr	r3, [sp, #20]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d05f      	beq.n	8009a38 <WM_HandlePID+0x244>
 8009978:	9805      	ldr	r0, [sp, #20]
 800997a:	f7ff fbc1 	bl	8009100 <GUI_ALLOC_LockH>
 800997e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8009982:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8009986:	f8da 3000 	ldr.w	r3, [sl]
 800998a:	9003      	str	r0, [sp, #12]
 800998c:	fb08 9303 	mla	r3, r8, r3, r9
 8009990:	7a1b      	ldrb	r3, [r3, #8]
 8009992:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8009996:	f9b0 2000 	ldrsh.w	r2, [r0]
 800999a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	930f      	str	r3, [sp, #60]	; 0x3c
 80099a0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80099a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a6:	eb0d 0008 	add.w	r0, sp, r8
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	9310      	str	r3, [sp, #64]	; 0x40
 80099ae:	f7ff fbb5 	bl	800911c <GUI_ALLOC_UnlockH>
 80099b2:	f8da e000 	ldr.w	lr, [sl]
 80099b6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8009af4 <WM_HandlePID+0x300>
 80099ba:	ab0f      	add	r3, sp, #60	; 0x3c
 80099bc:	9315      	str	r3, [sp, #84]	; 0x54
 80099be:	2311      	movs	r3, #17
 80099c0:	9312      	str	r3, [sp, #72]	; 0x48
 80099c2:	fb08 930e 	mla	r3, r8, lr, r9
 80099c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099ca:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80099ce:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80099d2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80099d6:	721a      	strb	r2, [r3, #8]
 80099d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80099dc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80099e0:	b133      	cbz	r3, 80099f0 <WM_HandlePID+0x1fc>
 80099e2:	eb0a 030e 	add.w	r3, sl, lr
 80099e6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80099ea:	9a05      	ldr	r2, [sp, #20]
 80099ec:	605a      	str	r2, [r3, #4]
 80099ee:	e000      	b.n	80099f2 <WM_HandlePID+0x1fe>
 80099f0:	4699      	mov	r9, r3
 80099f2:	eb0a 030e 	add.w	r3, sl, lr
 80099f6:	a912      	add	r1, sp, #72	; 0x48
 80099f8:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80099fc:	9805      	ldr	r0, [sp, #20]
 80099fe:	f004 faaf 	bl	800df60 <WM__SendMessageIfEnabled>
 8009a02:	682b      	ldr	r3, [r5, #0]
 8009a04:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 8009a08:	6851      	ldr	r1, [r2, #4]
 8009a0a:	458b      	cmp	fp, r1
 8009a0c:	bf1c      	itt	ne
 8009a0e:	6852      	ldrne	r2, [r2, #4]
 8009a10:	9205      	strne	r2, [sp, #20]
 8009a12:	220c      	movs	r2, #12
 8009a14:	fb02 7303 	mla	r3, r2, r3, r7
 8009a18:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8009a1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009a20:	f1b9 0f00 	cmp.w	r9, #0
 8009a24:	d008      	beq.n	8009a38 <WM_HandlePID+0x244>
 8009a26:	4648      	mov	r0, r9
 8009a28:	f000 f940 	bl	8009cac <WM_IsWindow>
 8009a2c:	b120      	cbz	r0, 8009a38 <WM_HandlePID+0x244>
 8009a2e:	682b      	ldr	r3, [r5, #0]
 8009a30:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8009a34:	f8c3 9004 	str.w	r9, [r3, #4]
 8009a38:	682a      	ldr	r2, [r5, #0]
 8009a3a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8009a3e:	210c      	movs	r1, #12
 8009a40:	4351      	muls	r1, r2
 8009a42:	1878      	adds	r0, r7, r1
 8009a44:	f890 8008 	ldrb.w	r8, [r0, #8]
 8009a48:	ea53 0808 	orrs.w	r8, r3, r8
 8009a4c:	d064      	beq.n	8009b18 <WM_HandlePID+0x324>
 8009a4e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8009af4 <WM_HandlePID+0x300>
 8009a52:	f44f 7e10 	mov.w	lr, #576	; 0x240
 8009a56:	00d2      	lsls	r2, r2, #3
 8009a58:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8009a5c:	eb08 0e02 	add.w	lr, r8, r2
 8009a60:	f8de 9004 	ldr.w	r9, [lr, #4]
 8009a64:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009a68:	45e1      	cmp	r9, ip
 8009a6a:	d01c      	beq.n	8009aa6 <WM_HandlePID+0x2b2>
 8009a6c:	f8de e004 	ldr.w	lr, [lr, #4]
 8009a70:	f1be 0f00 	cmp.w	lr, #0
 8009a74:	d017      	beq.n	8009aa6 <WM_HandlePID+0x2b2>
 8009a76:	b113      	cbz	r3, 8009a7e <WM_HandlePID+0x28a>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	9315      	str	r3, [sp, #84]	; 0x54
 8009a7c:	e009      	b.n	8009a92 <WM_HandlePID+0x29e>
 8009a7e:	f8df e058 	ldr.w	lr, [pc, #88]	; 8009ad8 <WM_HandlePID+0x2e4>
 8009a82:	f88d 3020 	strb.w	r3, [sp, #32]
 8009a86:	f85e 1001 	ldr.w	r1, [lr, r1]
 8009a8a:	9106      	str	r1, [sp, #24]
 8009a8c:	6841      	ldr	r1, [r0, #4]
 8009a8e:	9107      	str	r1, [sp, #28]
 8009a90:	9615      	str	r6, [sp, #84]	; 0x54
 8009a92:	4442      	add	r2, r8
 8009a94:	a912      	add	r1, sp, #72	; 0x48
 8009a96:	6850      	ldr	r0, [r2, #4]
 8009a98:	f7ff fe8e 	bl	80097b8 <WM__SendTouchMessage>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	605a      	str	r2, [r3, #4]
 8009aa6:	682b      	ldr	r3, [r5, #0]
 8009aa8:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 8009aac:	220c      	movs	r2, #12
 8009aae:	fb02 7203 	mla	r2, r2, r3, r7
 8009ab2:	f882 e008 	strb.w	lr, [r2, #8]
 8009ab6:	9a05      	ldr	r2, [sp, #20]
 8009ab8:	2a00      	cmp	r2, #0
 8009aba:	d043      	beq.n	8009b44 <WM_HandlePID+0x350>
 8009abc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009ac0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009ac4:	f1be 0f00 	cmp.w	lr, #0
 8009ac8:	d016      	beq.n	8009af8 <WM_HandlePID+0x304>
 8009aca:	9a05      	ldr	r2, [sp, #20]
 8009acc:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8009ad0:	e01b      	b.n	8009b0a <WM_HandlePID+0x316>
 8009ad2:	bf00      	nop
 8009ad4:	2001b040 	.word	0x2001b040
 8009ad8:	2001942c 	.word	0x2001942c
 8009adc:	2001af00 	.word	0x2001af00
 8009ae0:	2001aef4 	.word	0x2001aef4
 8009ae4:	20019424 	.word	0x20019424
 8009ae8:	2001b05c 	.word	0x2001b05c
 8009aec:	20019428 	.word	0x20019428
 8009af0:	2001afe8 	.word	0x2001afe8
 8009af4:	2001aff8 	.word	0x2001aff8
 8009af8:	4b1d      	ldr	r3, [pc, #116]	; (8009b70 <WM_HandlePID+0x37c>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	b10b      	cbz	r3, 8009b02 <WM_HandlePID+0x30e>
 8009afe:	f000 f853 	bl	8009ba8 <WM_ReleaseCapture>
 8009b02:	682b      	ldr	r3, [r5, #0]
 8009b04:	2200      	movs	r2, #0
 8009b06:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8009b0a:	605a      	str	r2, [r3, #4]
 8009b0c:	9805      	ldr	r0, [sp, #20]
 8009b0e:	9615      	str	r6, [sp, #84]	; 0x54
 8009b10:	a912      	add	r1, sp, #72	; 0x48
 8009b12:	f7ff fe51 	bl	80097b8 <WM__SendTouchMessage>
 8009b16:	e015      	b.n	8009b44 <WM_HandlePID+0x350>
 8009b18:	9b05      	ldr	r3, [sp, #20]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f43f af15 	beq.w	800994a <WM_HandlePID+0x156>
 8009b20:	9805      	ldr	r0, [sp, #20]
 8009b22:	f004 fa49 	bl	800dfb8 <WM__IsEnabled>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	f43f af0f 	beq.w	800994a <WM_HandlePID+0x156>
 8009b2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009b30:	2310      	movs	r3, #16
 8009b32:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009b36:	9805      	ldr	r0, [sp, #20]
 8009b38:	9312      	str	r3, [sp, #72]	; 0x48
 8009b3a:	a912      	add	r1, sp, #72	; 0x48
 8009b3c:	9615      	str	r6, [sp, #84]	; 0x54
 8009b3e:	f7ff fe3b 	bl	80097b8 <WM__SendTouchMessage>
 8009b42:	e702      	b.n	800994a <WM_HandlePID+0x156>
 8009b44:	2601      	movs	r6, #1
 8009b46:	682b      	ldr	r3, [r5, #0]
 8009b48:	220c      	movs	r2, #12
 8009b4a:	fb02 7703 	mla	r7, r2, r3, r7
 8009b4e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009b52:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8009b56:	4620      	mov	r0, r4
 8009b58:	4619      	mov	r1, r3
 8009b5a:	f000 f883 	bl	8009c64 <WM_PID__SetPrevState>
 8009b5e:	e000      	b.n	8009b62 <WM_HandlePID+0x36e>
 8009b60:	2600      	movs	r6, #0
 8009b62:	a804      	add	r0, sp, #16
 8009b64:	f000 f8ca 	bl	8009cfc <WM__RemoveCriticalHandle>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	b017      	add	sp, #92	; 0x5c
 8009b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b70:	2001b044 	.word	0x2001b044

08009b74 <WM__ReleaseCapture>:
 8009b74:	b530      	push	{r4, r5, lr}
 8009b76:	4d0a      	ldr	r5, [pc, #40]	; (8009ba0 <WM__ReleaseCapture+0x2c>)
 8009b78:	4c0a      	ldr	r4, [pc, #40]	; (8009ba4 <WM__ReleaseCapture+0x30>)
 8009b7a:	682b      	ldr	r3, [r5, #0]
 8009b7c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8009b80:	b085      	sub	sp, #20
 8009b82:	b150      	cbz	r0, 8009b9a <WM__ReleaseCapture+0x26>
 8009b84:	a904      	add	r1, sp, #16
 8009b86:	2318      	movs	r3, #24
 8009b88:	f841 3d10 	str.w	r3, [r1, #-16]!
 8009b8c:	4669      	mov	r1, sp
 8009b8e:	f004 f9f5 	bl	800df7c <WM__SendMessage>
 8009b92:	682b      	ldr	r3, [r5, #0]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8009b9a:	b005      	add	sp, #20
 8009b9c:	bd30      	pop	{r4, r5, pc}
 8009b9e:	bf00      	nop
 8009ba0:	2001b040 	.word	0x2001b040
 8009ba4:	2001b05c 	.word	0x2001b05c

08009ba8 <WM_ReleaseCapture>:
 8009ba8:	f7ff bfe4 	b.w	8009b74 <WM__ReleaseCapture>

08009bac <WM__IsInWindow>:
 8009bac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009bae:	f013 0302 	ands.w	r3, r3, #2
 8009bb2:	d012      	beq.n	8009bda <WM__IsInWindow+0x2e>
 8009bb4:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009bb8:	4299      	cmp	r1, r3
 8009bba:	db10      	blt.n	8009bde <WM__IsInWindow+0x32>
 8009bbc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	dc0c      	bgt.n	8009bde <WM__IsInWindow+0x32>
 8009bc4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	db08      	blt.n	8009bde <WM__IsInWindow+0x32>
 8009bcc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009bd0:	4282      	cmp	r2, r0
 8009bd2:	bfcc      	ite	gt
 8009bd4:	2000      	movgt	r0, #0
 8009bd6:	2001      	movle	r0, #1
 8009bd8:	4770      	bx	lr
 8009bda:	4618      	mov	r0, r3
 8009bdc:	4770      	bx	lr
 8009bde:	2000      	movs	r0, #0
 8009be0:	4770      	bx	lr

08009be2 <_Screen2hWin>:
 8009be2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009be6:	460e      	mov	r6, r1
 8009be8:	4617      	mov	r7, r2
 8009bea:	4698      	mov	r8, r3
 8009bec:	4605      	mov	r5, r0
 8009bee:	b320      	cbz	r0, 8009c3a <_Screen2hWin+0x58>
 8009bf0:	f7ff fa86 	bl	8009100 <GUI_ALLOC_LockH>
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	4642      	mov	r2, r8
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	9001      	str	r0, [sp, #4]
 8009bfc:	f7ff ffd6 	bl	8009bac <WM__IsInWindow>
 8009c00:	4681      	mov	r9, r0
 8009c02:	b920      	cbnz	r0, 8009c0e <_Screen2hWin+0x2c>
 8009c04:	a801      	add	r0, sp, #4
 8009c06:	f7ff fa89 	bl	800911c <GUI_ALLOC_UnlockH>
 8009c0a:	4648      	mov	r0, r9
 8009c0c:	e016      	b.n	8009c3c <_Screen2hWin+0x5a>
 8009c0e:	69e4      	ldr	r4, [r4, #28]
 8009c10:	b91c      	cbnz	r4, 8009c1a <_Screen2hWin+0x38>
 8009c12:	a801      	add	r0, sp, #4
 8009c14:	f7ff fa82 	bl	800911c <GUI_ALLOC_UnlockH>
 8009c18:	e00f      	b.n	8009c3a <_Screen2hWin+0x58>
 8009c1a:	42b4      	cmp	r4, r6
 8009c1c:	d0f9      	beq.n	8009c12 <_Screen2hWin+0x30>
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4631      	mov	r1, r6
 8009c22:	463a      	mov	r2, r7
 8009c24:	4643      	mov	r3, r8
 8009c26:	f7ff ffdc 	bl	8009be2 <_Screen2hWin>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	bf18      	it	ne
 8009c2e:	4605      	movne	r5, r0
 8009c30:	4620      	mov	r0, r4
 8009c32:	f7ff fa5b 	bl	80090ec <GUI_ALLOC_h2p>
 8009c36:	6a04      	ldr	r4, [r0, #32]
 8009c38:	e7ea      	b.n	8009c10 <_Screen2hWin+0x2e>
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	b003      	add	sp, #12
 8009c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08009c44 <WM_Screen2hWin>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <WM_Screen2hWin+0x1c>)
 8009c48:	460c      	mov	r4, r1
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	f000 f837 	bl	8009cc0 <WM_GetDesktopWindowEx>
 8009c52:	462a      	mov	r2, r5
 8009c54:	4623      	mov	r3, r4
 8009c56:	2100      	movs	r1, #0
 8009c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c5c:	f7ff bfc1 	b.w	8009be2 <_Screen2hWin>
 8009c60:	2001b040 	.word	0x2001b040

08009c64 <WM_PID__SetPrevState>:
 8009c64:	4b03      	ldr	r3, [pc, #12]	; (8009c74 <WM_PID__SetPrevState+0x10>)
 8009c66:	220c      	movs	r2, #12
 8009c68:	fb02 3301 	mla	r3, r2, r1, r3
 8009c6c:	c807      	ldmia	r0, {r0, r1, r2}
 8009c6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009c72:	4770      	bx	lr
 8009c74:	20019444 	.word	0x20019444

08009c78 <WM_OnKey>:
 8009c78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009c7a:	4a0a      	ldr	r2, [pc, #40]	; (8009ca4 <WM_OnKey+0x2c>)
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	6810      	ldr	r0, [r2, #0]
 8009c80:	4a09      	ldr	r2, [pc, #36]	; (8009ca8 <WM_OnKey+0x30>)
 8009c82:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8009c86:	b148      	cbz	r0, 8009c9c <WM_OnKey+0x24>
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	230e      	movs	r3, #14
 8009c8c:	9101      	str	r1, [sp, #4]
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	a902      	add	r1, sp, #8
 8009c92:	ab00      	add	r3, sp, #0
 8009c94:	9305      	str	r3, [sp, #20]
 8009c96:	f004 f971 	bl	800df7c <WM__SendMessage>
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	b007      	add	sp, #28
 8009c9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ca2:	bf00      	nop
 8009ca4:	2001b040 	.word	0x2001b040
 8009ca8:	2001b030 	.word	0x2001b030

08009cac <WM_IsWindow>:
 8009cac:	f000 bb54 	b.w	800a358 <WM__IsWindow>

08009cb0 <WM_GetParent>:
 8009cb0:	b508      	push	{r3, lr}
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	b110      	cbz	r0, 8009cbc <WM_GetParent+0xc>
 8009cb6:	f7ff fa19 	bl	80090ec <GUI_ALLOC_h2p>
 8009cba:	6983      	ldr	r3, [r0, #24]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	bd08      	pop	{r3, pc}

08009cc0 <WM_GetDesktopWindowEx>:
 8009cc0:	2801      	cmp	r0, #1
 8009cc2:	bf9a      	itte	ls
 8009cc4:	4b02      	ldrls	r3, [pc, #8]	; (8009cd0 <WM_GetDesktopWindowEx+0x10>)
 8009cc6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8009cca:	2000      	movhi	r0, #0
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	2001b020 	.word	0x2001b020

08009cd4 <WM_GetDesktopWindow>:
 8009cd4:	4b03      	ldr	r3, [pc, #12]	; (8009ce4 <WM_GetDesktopWindow+0x10>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	7c5a      	ldrb	r2, [r3, #17]
 8009cda:	4b03      	ldr	r3, [pc, #12]	; (8009ce8 <WM_GetDesktopWindow+0x14>)
 8009cdc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	200001b0 	.word	0x200001b0
 8009ce8:	2001b020 	.word	0x2001b020

08009cec <WM__AddCriticalHandle>:
 8009cec:	4b02      	ldr	r3, [pc, #8]	; (8009cf8 <WM__AddCriticalHandle+0xc>)
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	6002      	str	r2, [r0, #0]
 8009cf2:	6018      	str	r0, [r3, #0]
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	2001b054 	.word	0x2001b054

08009cfc <WM__RemoveCriticalHandle>:
 8009cfc:	4a09      	ldr	r2, [pc, #36]	; (8009d24 <WM__RemoveCriticalHandle+0x28>)
 8009cfe:	6813      	ldr	r3, [r2, #0]
 8009d00:	b510      	push	{r4, lr}
 8009d02:	4614      	mov	r4, r2
 8009d04:	b16b      	cbz	r3, 8009d22 <WM__RemoveCriticalHandle+0x26>
 8009d06:	2200      	movs	r2, #0
 8009d08:	4283      	cmp	r3, r0
 8009d0a:	d105      	bne.n	8009d18 <WM__RemoveCriticalHandle+0x1c>
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	b10a      	cbz	r2, 8009d14 <WM__RemoveCriticalHandle+0x18>
 8009d10:	6013      	str	r3, [r2, #0]
 8009d12:	bd10      	pop	{r4, pc}
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	bd10      	pop	{r4, pc}
 8009d18:	6819      	ldr	r1, [r3, #0]
 8009d1a:	b111      	cbz	r1, 8009d22 <WM__RemoveCriticalHandle+0x26>
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	460b      	mov	r3, r1
 8009d20:	e7f2      	b.n	8009d08 <WM__RemoveCriticalHandle+0xc>
 8009d22:	bd10      	pop	{r4, pc}
 8009d24:	2001b054 	.word	0x2001b054

08009d28 <_OnExit>:
 8009d28:	4a0a      	ldr	r2, [pc, #40]	; (8009d54 <_OnExit+0x2c>)
 8009d2a:	490b      	ldr	r1, [pc, #44]	; (8009d58 <_OnExit+0x30>)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	7013      	strb	r3, [r2, #0]
 8009d30:	4a0a      	ldr	r2, [pc, #40]	; (8009d5c <_OnExit+0x34>)
 8009d32:	600b      	str	r3, [r1, #0]
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	4a0a      	ldr	r2, [pc, #40]	; (8009d60 <_OnExit+0x38>)
 8009d38:	604b      	str	r3, [r1, #4]
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	4a09      	ldr	r2, [pc, #36]	; (8009d64 <_OnExit+0x3c>)
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	6053      	str	r3, [r2, #4]
 8009d42:	4a09      	ldr	r2, [pc, #36]	; (8009d68 <_OnExit+0x40>)
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	4a09      	ldr	r2, [pc, #36]	; (8009d6c <_OnExit+0x44>)
 8009d48:	6013      	str	r3, [r2, #0]
 8009d4a:	4a09      	ldr	r2, [pc, #36]	; (8009d70 <_OnExit+0x48>)
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	4a09      	ldr	r2, [pc, #36]	; (8009d74 <_OnExit+0x4c>)
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	4770      	bx	lr
 8009d54:	20019484 	.word	0x20019484
 8009d58:	2001b030 	.word	0x2001b030
 8009d5c:	2001945c 	.word	0x2001945c
 8009d60:	2001b054 	.word	0x2001b054
 8009d64:	2001b05c 	.word	0x2001b05c
 8009d68:	2001b068 	.word	0x2001b068
 8009d6c:	2001b01c 	.word	0x2001b01c
 8009d70:	2001b048 	.word	0x2001b048
 8009d74:	2001b058 	.word	0x2001b058

08009d78 <_Paint1>:
 8009d78:	b510      	push	{r4, lr}
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	f7ff f9b6 	bl	80090ec <GUI_ALLOC_h2p>
 8009d80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009d82:	4a04      	ldr	r2, [pc, #16]	; (8009d94 <_Paint1+0x1c>)
 8009d84:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009d88:	4b03      	ldr	r3, [pc, #12]	; (8009d98 <_Paint1+0x20>)
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	bf08      	it	eq
 8009d8e:	4613      	moveq	r3, r2
 8009d90:	4798      	blx	r3
 8009d92:	bd10      	pop	{r4, pc}
 8009d94:	0800abd5 	.word	0x0800abd5
 8009d98:	0800b1a5 	.word	0x0800b1a5

08009d9c <_Findy1>:
 8009d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9e:	4605      	mov	r5, r0
 8009da0:	b085      	sub	sp, #20
 8009da2:	460c      	mov	r4, r1
 8009da4:	4616      	mov	r6, r2
 8009da6:	2d00      	cmp	r5, #0
 8009da8:	d04c      	beq.n	8009e44 <_Findy1+0xa8>
 8009daa:	4628      	mov	r0, r5
 8009dac:	f7ff f9a8 	bl	8009100 <GUI_ALLOC_LockH>
 8009db0:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8009db2:	9001      	str	r0, [sp, #4]
 8009db4:	07bb      	lsls	r3, r7, #30
 8009db6:	4601      	mov	r1, r0
 8009db8:	d53d      	bpl.n	8009e36 <_Findy1+0x9a>
 8009dba:	ad02      	add	r5, sp, #8
 8009dbc:	b126      	cbz	r6, 8009dc8 <_Findy1+0x2c>
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	4632      	mov	r2, r6
 8009dc2:	f003 fbfd 	bl	800d5c0 <GUI__IntersectRects>
 8009dc6:	e002      	b.n	8009dce <_Findy1+0x32>
 8009dc8:	c803      	ldmia	r0, {r0, r1}
 8009dca:	e885 0003 	stmia.w	r5, {r0, r1}
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	f003 ff67 	bl	800dca4 <GUI_RectsIntersect>
 8009dd6:	b370      	cbz	r0, 8009e36 <_Findy1+0x9a>
 8009dd8:	f017 0f01 	tst.w	r7, #1
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	d11e      	bne.n	8009e1e <_Findy1+0x82>
 8009de0:	b13e      	cbz	r6, 8009df2 <_Findy1+0x56>
 8009de2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009de6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	bfa8      	it	ge
 8009dee:	4613      	movge	r3, r2
 8009df0:	e001      	b.n	8009df6 <_Findy1+0x5a>
 8009df2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009df6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8009e00:	dd06      	ble.n	8009e10 <_Findy1+0x74>
 8009e02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009e06:	b219      	sxth	r1, r3
 8009e08:	428a      	cmp	r2, r1
 8009e0a:	db14      	blt.n	8009e36 <_Findy1+0x9a>
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	e004      	b.n	8009e1a <_Findy1+0x7e>
 8009e10:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009e14:	b219      	sxth	r1, r3
 8009e16:	428a      	cmp	r2, r1
 8009e18:	dd0d      	ble.n	8009e36 <_Findy1+0x9a>
 8009e1a:	80e3      	strh	r3, [r4, #6]
 8009e1c:	e00b      	b.n	8009e36 <_Findy1+0x9a>
 8009e1e:	69df      	ldr	r7, [r3, #28]
 8009e20:	b14f      	cbz	r7, 8009e36 <_Findy1+0x9a>
 8009e22:	4638      	mov	r0, r7
 8009e24:	4621      	mov	r1, r4
 8009e26:	462a      	mov	r2, r5
 8009e28:	f7ff ffb8 	bl	8009d9c <_Findy1>
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	f7ff f95d 	bl	80090ec <GUI_ALLOC_h2p>
 8009e32:	6a07      	ldr	r7, [r0, #32]
 8009e34:	e7f4      	b.n	8009e20 <_Findy1+0x84>
 8009e36:	a804      	add	r0, sp, #16
 8009e38:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8009e3c:	6a1d      	ldr	r5, [r3, #32]
 8009e3e:	f7ff f96d 	bl	800911c <GUI_ALLOC_UnlockH>
 8009e42:	e7b0      	b.n	8009da6 <_Findy1+0xa>
 8009e44:	b005      	add	sp, #20
 8009e46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e48 <_Findx0>:
 8009e48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	460f      	mov	r7, r1
 8009e50:	4690      	mov	r8, r2
 8009e52:	2500      	movs	r5, #0
 8009e54:	2c00      	cmp	r4, #0
 8009e56:	d037      	beq.n	8009ec8 <_Findx0+0x80>
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f7ff f951 	bl	8009100 <GUI_ALLOC_LockH>
 8009e5e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009e60:	9001      	str	r0, [sp, #4]
 8009e62:	07b2      	lsls	r2, r6, #30
 8009e64:	4601      	mov	r1, r0
 8009e66:	d528      	bpl.n	8009eba <_Findx0+0x72>
 8009e68:	ac02      	add	r4, sp, #8
 8009e6a:	f1b8 0f00 	cmp.w	r8, #0
 8009e6e:	d004      	beq.n	8009e7a <_Findx0+0x32>
 8009e70:	4620      	mov	r0, r4
 8009e72:	4642      	mov	r2, r8
 8009e74:	f003 fba4 	bl	800d5c0 <GUI__IntersectRects>
 8009e78:	e002      	b.n	8009e80 <_Findx0+0x38>
 8009e7a:	c803      	ldmia	r0, {r0, r1}
 8009e7c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009e80:	4638      	mov	r0, r7
 8009e82:	4621      	mov	r1, r4
 8009e84:	f003 ff0e 	bl	800dca4 <GUI_RectsIntersect>
 8009e88:	b1b8      	cbz	r0, 8009eba <_Findx0+0x72>
 8009e8a:	07f3      	lsls	r3, r6, #31
 8009e8c:	d405      	bmi.n	8009e9a <_Findx0+0x52>
 8009e8e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009e92:	3301      	adds	r3, #1
 8009e94:	803b      	strh	r3, [r7, #0]
 8009e96:	2501      	movs	r5, #1
 8009e98:	e00f      	b.n	8009eba <_Findx0+0x72>
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	69de      	ldr	r6, [r3, #28]
 8009e9e:	b166      	cbz	r6, 8009eba <_Findx0+0x72>
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	f7ff ffcf 	bl	8009e48 <_Findx0>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	4630      	mov	r0, r6
 8009eae:	bf18      	it	ne
 8009eb0:	2501      	movne	r5, #1
 8009eb2:	f7ff f91b 	bl	80090ec <GUI_ALLOC_h2p>
 8009eb6:	6a06      	ldr	r6, [r0, #32]
 8009eb8:	e7f1      	b.n	8009e9e <_Findx0+0x56>
 8009eba:	a804      	add	r0, sp, #16
 8009ebc:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8009ec0:	6a1c      	ldr	r4, [r3, #32]
 8009ec2:	f7ff f92b 	bl	800911c <GUI_ALLOC_UnlockH>
 8009ec6:	e7c5      	b.n	8009e54 <_Findx0+0xc>
 8009ec8:	4628      	mov	r0, r5
 8009eca:	b004      	add	sp, #16
 8009ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ed0 <_Findx1>:
 8009ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	460e      	mov	r6, r1
 8009ed8:	4617      	mov	r7, r2
 8009eda:	2c00      	cmp	r4, #0
 8009edc:	d031      	beq.n	8009f42 <_Findx1+0x72>
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f7ff f90e 	bl	8009100 <GUI_ALLOC_LockH>
 8009ee4:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8009ee6:	9001      	str	r0, [sp, #4]
 8009ee8:	07aa      	lsls	r2, r5, #30
 8009eea:	4601      	mov	r1, r0
 8009eec:	d522      	bpl.n	8009f34 <_Findx1+0x64>
 8009eee:	ac02      	add	r4, sp, #8
 8009ef0:	b127      	cbz	r7, 8009efc <_Findx1+0x2c>
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	463a      	mov	r2, r7
 8009ef6:	f003 fb63 	bl	800d5c0 <GUI__IntersectRects>
 8009efa:	e002      	b.n	8009f02 <_Findx1+0x32>
 8009efc:	c803      	ldmia	r0, {r0, r1}
 8009efe:	e884 0003 	stmia.w	r4, {r0, r1}
 8009f02:	4630      	mov	r0, r6
 8009f04:	4621      	mov	r1, r4
 8009f06:	f003 fecd 	bl	800dca4 <GUI_RectsIntersect>
 8009f0a:	b198      	cbz	r0, 8009f34 <_Findx1+0x64>
 8009f0c:	07eb      	lsls	r3, r5, #31
 8009f0e:	d404      	bmi.n	8009f1a <_Findx1+0x4a>
 8009f10:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	80b3      	strh	r3, [r6, #4]
 8009f18:	e00c      	b.n	8009f34 <_Findx1+0x64>
 8009f1a:	9b01      	ldr	r3, [sp, #4]
 8009f1c:	69dd      	ldr	r5, [r3, #28]
 8009f1e:	b14d      	cbz	r5, 8009f34 <_Findx1+0x64>
 8009f20:	4628      	mov	r0, r5
 8009f22:	4631      	mov	r1, r6
 8009f24:	4622      	mov	r2, r4
 8009f26:	f7ff ffd3 	bl	8009ed0 <_Findx1>
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f7ff f8de 	bl	80090ec <GUI_ALLOC_h2p>
 8009f30:	6a05      	ldr	r5, [r0, #32]
 8009f32:	e7f4      	b.n	8009f1e <_Findx1+0x4e>
 8009f34:	a804      	add	r0, sp, #16
 8009f36:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8009f3a:	6a1c      	ldr	r4, [r3, #32]
 8009f3c:	f7ff f8ee 	bl	800911c <GUI_ALLOC_UnlockH>
 8009f40:	e7cb      	b.n	8009eda <_Findx1+0xa>
 8009f42:	b005      	add	sp, #20
 8009f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009f48 <_Paint1Trans>:
 8009f48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f4c:	4d21      	ldr	r5, [pc, #132]	; (8009fd4 <_Paint1Trans+0x8c>)
 8009f4e:	682b      	ldr	r3, [r5, #0]
 8009f50:	4606      	mov	r6, r0
 8009f52:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009f54:	f7ff f8d4 	bl	8009100 <GUI_ALLOC_LockH>
 8009f58:	9000      	str	r0, [sp, #0]
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7ff f8d0 	bl	8009100 <GUI_ALLOC_LockH>
 8009f60:	ac02      	add	r4, sp, #8
 8009f62:	4601      	mov	r1, r0
 8009f64:	9001      	str	r0, [sp, #4]
 8009f66:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8009f6a:	3008      	adds	r0, #8
 8009f6c:	f003 fe9a 	bl	800dca4 <GUI_RectsIntersect>
 8009f70:	4607      	mov	r7, r0
 8009f72:	b328      	cbz	r0, 8009fc0 <_Paint1Trans+0x78>
 8009f74:	9901      	ldr	r1, [sp, #4]
 8009f76:	9a00      	ldr	r2, [sp, #0]
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	4c17      	ldr	r4, [pc, #92]	; (8009fd8 <_Paint1Trans+0x90>)
 8009f7c:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8009f7e:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8009f82:	f101 0008 	add.w	r0, r1, #8
 8009f86:	3208      	adds	r2, #8
 8009f88:	f003 fb1a 	bl	800d5c0 <GUI__IntersectRects>
 8009f8c:	4668      	mov	r0, sp
 8009f8e:	f7ff f8c5 	bl	800911c <GUI_ALLOC_UnlockH>
 8009f92:	9a01      	ldr	r2, [sp, #4]
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	f9b2 1000 	ldrsh.w	r1, [r2]
 8009f9a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009f9e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8009fa0:	651a      	str	r2, [r3, #80]	; 0x50
 8009fa2:	a801      	add	r0, sp, #4
 8009fa4:	6026      	str	r6, [r4, #0]
 8009fa6:	f7ff f8b9 	bl	800911c <GUI_ALLOC_UnlockH>
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff fee4 	bl	8009d78 <_Paint1>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	6023      	str	r3, [r4, #0]
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	651f      	str	r7, [r3, #80]	; 0x50
 8009fb8:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8009fbc:	2701      	movs	r7, #1
 8009fbe:	e005      	b.n	8009fcc <_Paint1Trans+0x84>
 8009fc0:	4668      	mov	r0, sp
 8009fc2:	f7ff f8ab 	bl	800911c <GUI_ALLOC_UnlockH>
 8009fc6:	a801      	add	r0, sp, #4
 8009fc8:	f7ff f8a8 	bl	800911c <GUI_ALLOC_UnlockH>
 8009fcc:	4638      	mov	r0, r7
 8009fce:	b002      	add	sp, #8
 8009fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd4:	200001b0 	.word	0x200001b0
 8009fd8:	2001b01c 	.word	0x2001b01c

08009fdc <_PaintTransChildren>:
 8009fdc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	f7ff f88d 	bl	8009100 <GUI_ALLOC_LockH>
 8009fe6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009fe8:	9001      	str	r0, [sp, #4]
 8009fea:	079b      	lsls	r3, r3, #30
 8009fec:	d405      	bmi.n	8009ffa <_PaintTransChildren+0x1e>
 8009fee:	a801      	add	r0, sp, #4
 8009ff0:	f7ff f894 	bl	800911c <GUI_ALLOC_UnlockH>
 8009ff4:	b002      	add	sp, #8
 8009ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffa:	69c4      	ldr	r4, [r0, #28]
 8009ffc:	2c00      	cmp	r4, #0
 8009ffe:	d0f6      	beq.n	8009fee <_PaintTransChildren+0x12>
 800a000:	4620      	mov	r0, r4
 800a002:	f7ff f87d 	bl	8009100 <GUI_ALLOC_LockH>
 800a006:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a008:	ad02      	add	r5, sp, #8
 800a00a:	f003 0303 	and.w	r3, r3, #3
 800a00e:	2b03      	cmp	r3, #3
 800a010:	f845 0d08 	str.w	r0, [r5, #-8]!
 800a014:	d137      	bne.n	800a086 <_PaintTransChildren+0xaa>
 800a016:	9901      	ldr	r1, [sp, #4]
 800a018:	3108      	adds	r1, #8
 800a01a:	f003 fe43 	bl	800dca4 <GUI_RectsIntersect>
 800a01e:	2800      	cmp	r0, #0
 800a020:	d031      	beq.n	800a086 <_PaintTransChildren+0xaa>
 800a022:	a802      	add	r0, sp, #8
 800a024:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800a028:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 800a02c:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 800a030:	899f      	ldrh	r7, [r3, #12]
 800a032:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 800a036:	f7ff f871 	bl	800911c <GUI_ALLOC_UnlockH>
 800a03a:	4668      	mov	r0, sp
 800a03c:	f7ff f86e 	bl	800911c <GUI_ALLOC_UnlockH>
 800a040:	4620      	mov	r0, r4
 800a042:	f7ff ff81 	bl	8009f48 <_Paint1Trans>
 800a046:	b170      	cbz	r0, 800a066 <_PaintTransChildren+0x8a>
 800a048:	4620      	mov	r0, r4
 800a04a:	f7ff f84f 	bl	80090ec <GUI_ALLOC_h2p>
 800a04e:	9000      	str	r0, [sp, #0]
 800a050:	4620      	mov	r0, r4
 800a052:	f7ff ffc3 	bl	8009fdc <_PaintTransChildren>
 800a056:	4620      	mov	r0, r4
 800a058:	f7ff f848 	bl	80090ec <GUI_ALLOC_h2p>
 800a05c:	9000      	str	r0, [sp, #0]
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff f844 	bl	80090ec <GUI_ALLOC_h2p>
 800a064:	9001      	str	r0, [sp, #4]
 800a066:	4630      	mov	r0, r6
 800a068:	f7ff f84a 	bl	8009100 <GUI_ALLOC_LockH>
 800a06c:	9001      	str	r0, [sp, #4]
 800a06e:	4620      	mov	r0, r4
 800a070:	f7ff f846 	bl	8009100 <GUI_ALLOC_LockH>
 800a074:	9b01      	ldr	r3, [sp, #4]
 800a076:	9000      	str	r0, [sp, #0]
 800a078:	f8a3 9008 	strh.w	r9, [r3, #8]
 800a07c:	f8a3 800a 	strh.w	r8, [r3, #10]
 800a080:	819f      	strh	r7, [r3, #12]
 800a082:	f8a3 a00e 	strh.w	sl, [r3, #14]
 800a086:	9b00      	ldr	r3, [sp, #0]
 800a088:	4668      	mov	r0, sp
 800a08a:	6a1c      	ldr	r4, [r3, #32]
 800a08c:	f7ff f846 	bl	800911c <GUI_ALLOC_UnlockH>
 800a090:	e7b4      	b.n	8009ffc <_PaintTransChildren+0x20>
	...

0800a094 <WM__PaintWinAndOverlays>:
 800a094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a096:	4604      	mov	r4, r0
 800a098:	f7ff f832 	bl	8009100 <GUI_ALLOC_LockH>
 800a09c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a09e:	9001      	str	r0, [sp, #4]
 800a0a0:	f640 0301 	movw	r3, #2049	; 0x801
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d005      	beq.n	800a0b6 <WM__PaintWinAndOverlays+0x22>
 800a0aa:	a801      	add	r0, sp, #4
 800a0ac:	f7ff f836 	bl	800911c <GUI_ALLOC_UnlockH>
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f7ff fe61 	bl	8009d78 <_Paint1>
 800a0b6:	4b14      	ldr	r3, [pc, #80]	; (800a108 <WM__PaintWinAndOverlays+0x74>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	b313      	cbz	r3, 800a102 <WM__PaintWinAndOverlays+0x6e>
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f7ff ff8d 	bl	8009fdc <_PaintTransChildren>
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7ff f812 	bl	80090ec <GUI_ALLOC_h2p>
 800a0c8:	6985      	ldr	r5, [r0, #24]
 800a0ca:	6a04      	ldr	r4, [r0, #32]
 800a0cc:	b1cd      	cbz	r5, 800a102 <WM__PaintWinAndOverlays+0x6e>
 800a0ce:	b194      	cbz	r4, 800a0f6 <WM__PaintWinAndOverlays+0x62>
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f7ff f80b 	bl	80090ec <GUI_ALLOC_h2p>
 800a0d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a0d8:	f003 0303 	and.w	r3, r3, #3
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d102      	bne.n	800a0e6 <WM__PaintWinAndOverlays+0x52>
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f7ff ff31 	bl	8009f48 <_Paint1Trans>
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f7ff ff78 	bl	8009fdc <_PaintTransChildren>
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f7fe fffd 	bl	80090ec <GUI_ALLOC_h2p>
 800a0f2:	6a04      	ldr	r4, [r0, #32]
 800a0f4:	e7eb      	b.n	800a0ce <WM__PaintWinAndOverlays+0x3a>
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f7fe fff8 	bl	80090ec <GUI_ALLOC_h2p>
 800a0fc:	6a04      	ldr	r4, [r0, #32]
 800a0fe:	6985      	ldr	r5, [r0, #24]
 800a100:	e7e4      	b.n	800a0cc <WM__PaintWinAndOverlays+0x38>
 800a102:	b003      	add	sp, #12
 800a104:	bd30      	pop	{r4, r5, pc}
 800a106:	bf00      	nop
 800a108:	2001b068 	.word	0x2001b068

0800a10c <_cbPaintMemDev>:
 800a10c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	4d17      	ldr	r5, [pc, #92]	; (800a170 <_cbPaintMemDev+0x64>)
 800a112:	682b      	ldr	r3, [r5, #0]
 800a114:	4606      	mov	r6, r0
 800a116:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a118:	f7fe fff2 	bl	8009100 <GUI_ALLOC_LockH>
 800a11c:	682a      	ldr	r2, [r5, #0]
 800a11e:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 800a122:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 800a126:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 800a12a:	89c7      	ldrh	r7, [r0, #14]
 800a12c:	ac02      	add	r4, sp, #8
 800a12e:	3208      	adds	r2, #8
 800a130:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a134:	f100 0308 	add.w	r3, r0, #8
 800a138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a13c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a140:	4620      	mov	r0, r4
 800a142:	f7fe ffeb 	bl	800911c <GUI_ALLOC_UnlockH>
 800a146:	6830      	ldr	r0, [r6, #0]
 800a148:	f7ff ffa4 	bl	800a094 <WM__PaintWinAndOverlays>
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a150:	f7fe ffd6 	bl	8009100 <GUI_ALLOC_LockH>
 800a154:	9001      	str	r0, [sp, #4]
 800a156:	f8a0 a008 	strh.w	sl, [r0, #8]
 800a15a:	f8a0 900a 	strh.w	r9, [r0, #10]
 800a15e:	f8a0 800c 	strh.w	r8, [r0, #12]
 800a162:	81c7      	strh	r7, [r0, #14]
 800a164:	4620      	mov	r0, r4
 800a166:	f7fe ffd9 	bl	800911c <GUI_ALLOC_UnlockH>
 800a16a:	b002      	add	sp, #8
 800a16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a170:	200001b0 	.word	0x200001b0

0800a174 <WM__ClipAtParentBorders>:
 800a174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a176:	4607      	mov	r7, r0
 800a178:	460d      	mov	r5, r1
 800a17a:	4628      	mov	r0, r5
 800a17c:	f7fe ffc0 	bl	8009100 <GUI_ALLOC_LockH>
 800a180:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a182:	ac02      	add	r4, sp, #8
 800a184:	f013 0602 	ands.w	r6, r3, #2
 800a188:	4601      	mov	r1, r0
 800a18a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a18e:	d104      	bne.n	800a19a <WM__ClipAtParentBorders+0x26>
 800a190:	4620      	mov	r0, r4
 800a192:	f7fe ffc3 	bl	800911c <GUI_ALLOC_UnlockH>
 800a196:	4630      	mov	r0, r6
 800a198:	e016      	b.n	800a1c8 <WM__ClipAtParentBorders+0x54>
 800a19a:	4638      	mov	r0, r7
 800a19c:	f003 fa42 	bl	800d624 <GUI__IntersectRect>
 800a1a0:	9b01      	ldr	r3, [sp, #4]
 800a1a2:	699e      	ldr	r6, [r3, #24]
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	b956      	cbnz	r6, 800a1be <WM__ClipAtParentBorders+0x4a>
 800a1a8:	f7fe ffb8 	bl	800911c <GUI_ALLOC_UnlockH>
 800a1ac:	4b07      	ldr	r3, [pc, #28]	; (800a1cc <WM__ClipAtParentBorders+0x58>)
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	4295      	cmp	r5, r2
 800a1b2:	d008      	beq.n	800a1c6 <WM__ClipAtParentBorders+0x52>
 800a1b4:	6858      	ldr	r0, [r3, #4]
 800a1b6:	1a2b      	subs	r3, r5, r0
 800a1b8:	4258      	negs	r0, r3
 800a1ba:	4158      	adcs	r0, r3
 800a1bc:	e004      	b.n	800a1c8 <WM__ClipAtParentBorders+0x54>
 800a1be:	f7fe ffad 	bl	800911c <GUI_ALLOC_UnlockH>
 800a1c2:	4635      	mov	r5, r6
 800a1c4:	e7d9      	b.n	800a17a <WM__ClipAtParentBorders+0x6>
 800a1c6:	2001      	movs	r0, #1
 800a1c8:	b003      	add	sp, #12
 800a1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1cc:	2001b020 	.word	0x2001b020

0800a1d0 <WM__InsertWindowIntoList>:
 800a1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	460d      	mov	r5, r1
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	d049      	beq.n	800a270 <WM__InsertWindowIntoList+0xa0>
 800a1dc:	f7fe ff90 	bl	8009100 <GUI_ALLOC_LockH>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	6203      	str	r3, [r0, #32]
 800a1e4:	6185      	str	r5, [r0, #24]
 800a1e6:	9001      	str	r0, [sp, #4]
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	f7fe ff89 	bl	8009100 <GUI_ALLOC_LockH>
 800a1ee:	9b01      	ldr	r3, [sp, #4]
 800a1f0:	69c5      	ldr	r5, [r0, #28]
 800a1f2:	9002      	str	r0, [sp, #8]
 800a1f4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800a1f6:	b92d      	cbnz	r5, 800a204 <WM__InsertWindowIntoList+0x34>
 800a1f8:	61c4      	str	r4, [r0, #28]
 800a1fa:	a801      	add	r0, sp, #4
 800a1fc:	f7fe ff8e 	bl	800911c <GUI_ALLOC_UnlockH>
 800a200:	a802      	add	r0, sp, #8
 800a202:	e033      	b.n	800a26c <WM__InsertWindowIntoList+0x9c>
 800a204:	4628      	mov	r0, r5
 800a206:	f7fe ff7b 	bl	8009100 <GUI_ALLOC_LockH>
 800a20a:	ae04      	add	r6, sp, #16
 800a20c:	f007 0708 	and.w	r7, r7, #8
 800a210:	f846 0d04 	str.w	r0, [r6, #-4]!
 800a214:	b977      	cbnz	r7, 800a234 <WM__InsertWindowIntoList+0x64>
 800a216:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a218:	071a      	lsls	r2, r3, #28
 800a21a:	d50b      	bpl.n	800a234 <WM__InsertWindowIntoList+0x64>
 800a21c:	9b01      	ldr	r3, [sp, #4]
 800a21e:	621d      	str	r5, [r3, #32]
 800a220:	9b02      	ldr	r3, [sp, #8]
 800a222:	a801      	add	r0, sp, #4
 800a224:	61dc      	str	r4, [r3, #28]
 800a226:	f7fe ff79 	bl	800911c <GUI_ALLOC_UnlockH>
 800a22a:	a802      	add	r0, sp, #8
 800a22c:	f7fe ff76 	bl	800911c <GUI_ALLOC_UnlockH>
 800a230:	4630      	mov	r0, r6
 800a232:	e01b      	b.n	800a26c <WM__InsertWindowIntoList+0x9c>
 800a234:	a802      	add	r0, sp, #8
 800a236:	f7fe ff71 	bl	800911c <GUI_ALLOC_UnlockH>
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7fe ff6e 	bl	800911c <GUI_ALLOC_UnlockH>
 800a240:	4628      	mov	r0, r5
 800a242:	f7fe ff53 	bl	80090ec <GUI_ALLOC_h2p>
 800a246:	9003      	str	r0, [sp, #12]
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	6a1d      	ldr	r5, [r3, #32]
 800a24c:	b90d      	cbnz	r5, 800a252 <WM__InsertWindowIntoList+0x82>
 800a24e:	621c      	str	r4, [r3, #32]
 800a250:	e00b      	b.n	800a26a <WM__InsertWindowIntoList+0x9a>
 800a252:	4628      	mov	r0, r5
 800a254:	f7fe ff4a 	bl	80090ec <GUI_ALLOC_h2p>
 800a258:	2f00      	cmp	r7, #0
 800a25a:	d1f4      	bne.n	800a246 <WM__InsertWindowIntoList+0x76>
 800a25c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a25e:	071b      	lsls	r3, r3, #28
 800a260:	d5f1      	bpl.n	800a246 <WM__InsertWindowIntoList+0x76>
 800a262:	9b03      	ldr	r3, [sp, #12]
 800a264:	621c      	str	r4, [r3, #32]
 800a266:	9b01      	ldr	r3, [sp, #4]
 800a268:	621d      	str	r5, [r3, #32]
 800a26a:	a801      	add	r0, sp, #4
 800a26c:	f7fe ff56 	bl	800911c <GUI_ALLOC_UnlockH>
 800a270:	b005      	add	sp, #20
 800a272:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a274 <WM__RemoveWindowFromList>:
 800a274:	b570      	push	{r4, r5, r6, lr}
 800a276:	4604      	mov	r4, r0
 800a278:	f7fe ff38 	bl	80090ec <GUI_ALLOC_h2p>
 800a27c:	4605      	mov	r5, r0
 800a27e:	6980      	ldr	r0, [r0, #24]
 800a280:	b1a8      	cbz	r0, 800a2ae <WM__RemoveWindowFromList+0x3a>
 800a282:	f7fe ff33 	bl	80090ec <GUI_ALLOC_h2p>
 800a286:	69c3      	ldr	r3, [r0, #28]
 800a288:	42a3      	cmp	r3, r4
 800a28a:	4606      	mov	r6, r0
 800a28c:	d105      	bne.n	800a29a <WM__RemoveWindowFromList+0x26>
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe ff2c 	bl	80090ec <GUI_ALLOC_h2p>
 800a294:	6a03      	ldr	r3, [r0, #32]
 800a296:	61f3      	str	r3, [r6, #28]
 800a298:	bd70      	pop	{r4, r5, r6, pc}
 800a29a:	b143      	cbz	r3, 800a2ae <WM__RemoveWindowFromList+0x3a>
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fe ff25 	bl	80090ec <GUI_ALLOC_h2p>
 800a2a2:	6a03      	ldr	r3, [r0, #32]
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d1f8      	bne.n	800a29a <WM__RemoveWindowFromList+0x26>
 800a2a8:	6a2b      	ldr	r3, [r5, #32]
 800a2aa:	6203      	str	r3, [r0, #32]
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
 800a2ae:	bd70      	pop	{r4, r5, r6, pc}

0800a2b0 <WM__Client2Screen>:
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a2b8:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a2bc:	f003 bd18 	b.w	800dcf0 <GUI_MoveRect>

0800a2c0 <_SetClipRectUserIntersect>:
 800a2c0:	4b11      	ldr	r3, [pc, #68]	; (800a308 <_SetClipRectUserIntersect+0x48>)
 800a2c2:	b530      	push	{r4, r5, lr}
 800a2c4:	681c      	ldr	r4, [r3, #0]
 800a2c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a2c8:	b085      	sub	sp, #20
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	b1ba      	cbz	r2, 800a2fe <_SetClipRectUserIntersect+0x3e>
 800a2ce:	6810      	ldr	r0, [r2, #0]
 800a2d0:	6851      	ldr	r1, [r2, #4]
 800a2d2:	ab02      	add	r3, sp, #8
 800a2d4:	c303      	stmia	r3!, {r0, r1}
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	; (800a30c <_SetClipRectUserIntersect+0x4c>)
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	b900      	cbnz	r0, 800a2de <_SetClipRectUserIntersect+0x1e>
 800a2dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a2de:	f7fe ff0f 	bl	8009100 <GUI_ALLOC_LockH>
 800a2e2:	ac04      	add	r4, sp, #16
 800a2e4:	a902      	add	r1, sp, #8
 800a2e6:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800a2ea:	f7ff ffe1 	bl	800a2b0 <WM__Client2Screen>
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f7fe ff14 	bl	800911c <GUI_ALLOC_UnlockH>
 800a2f4:	a802      	add	r0, sp, #8
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	f003 f994 	bl	800d624 <GUI__IntersectRect>
 800a2fc:	a802      	add	r0, sp, #8
 800a2fe:	f002 fc0d 	bl	800cb1c <LCD_SetClipRectEx>
 800a302:	b005      	add	sp, #20
 800a304:	bd30      	pop	{r4, r5, pc}
 800a306:	bf00      	nop
 800a308:	200001b0 	.word	0x200001b0
 800a30c:	2001b01c 	.word	0x2001b01c

0800a310 <WM__ActivateClipRect>:
 800a310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a312:	4b0e      	ldr	r3, [pc, #56]	; (800a34c <WM__ActivateClipRect+0x3c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800a31a:	b10a      	cbz	r2, 800a320 <WM__ActivateClipRect+0x10>
 800a31c:	480c      	ldr	r0, [pc, #48]	; (800a350 <WM__ActivateClipRect+0x40>)
 800a31e:	e011      	b.n	800a344 <WM__ActivateClipRect+0x34>
 800a320:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a322:	f7fe feed 	bl	8009100 <GUI_ALLOC_LockH>
 800a326:	9001      	str	r0, [sp, #4]
 800a328:	c803      	ldmia	r0, {r0, r1}
 800a32a:	ac02      	add	r4, sp, #8
 800a32c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a330:	a801      	add	r0, sp, #4
 800a332:	f7fe fef3 	bl	800911c <GUI_ALLOC_UnlockH>
 800a336:	4b07      	ldr	r3, [pc, #28]	; (800a354 <WM__ActivateClipRect+0x44>)
 800a338:	6819      	ldr	r1, [r3, #0]
 800a33a:	b111      	cbz	r1, 800a342 <WM__ActivateClipRect+0x32>
 800a33c:	4620      	mov	r0, r4
 800a33e:	f7ff ff19 	bl	800a174 <WM__ClipAtParentBorders>
 800a342:	4620      	mov	r0, r4
 800a344:	f7ff ffbc 	bl	800a2c0 <_SetClipRectUserIntersect>
 800a348:	b004      	add	sp, #16
 800a34a:	bd10      	pop	{r4, pc}
 800a34c:	200001b0 	.word	0x200001b0
 800a350:	20019468 	.word	0x20019468
 800a354:	2001b01c 	.word	0x2001b01c

0800a358 <WM__IsWindow>:
 800a358:	4b06      	ldr	r3, [pc, #24]	; (800a374 <WM__IsWindow+0x1c>)
 800a35a:	b510      	push	{r4, lr}
 800a35c:	4604      	mov	r4, r0
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	b128      	cbz	r0, 800a36e <WM__IsWindow+0x16>
 800a362:	42a0      	cmp	r0, r4
 800a364:	d004      	beq.n	800a370 <WM__IsWindow+0x18>
 800a366:	f7fe fec1 	bl	80090ec <GUI_ALLOC_h2p>
 800a36a:	6940      	ldr	r0, [r0, #20]
 800a36c:	e7f8      	b.n	800a360 <WM__IsWindow+0x8>
 800a36e:	bd10      	pop	{r4, pc}
 800a370:	2001      	movs	r0, #1
 800a372:	bd10      	pop	{r4, pc}
 800a374:	2001b03c 	.word	0x2001b03c

0800a378 <WM__InvalidateDrawAndDescs>:
 800a378:	b513      	push	{r0, r1, r4, lr}
 800a37a:	4604      	mov	r4, r0
 800a37c:	b300      	cbz	r0, 800a3c0 <WM__InvalidateDrawAndDescs+0x48>
 800a37e:	f7fe febf 	bl	8009100 <GUI_ALLOC_LockH>
 800a382:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a384:	9001      	str	r0, [sp, #4]
 800a386:	0793      	lsls	r3, r2, #30
 800a388:	d517      	bpl.n	800a3ba <WM__InvalidateDrawAndDescs+0x42>
 800a38a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a38c:	b140      	cbz	r0, 800a3a0 <WM__InvalidateDrawAndDescs+0x28>
 800a38e:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <WM__InvalidateDrawAndDescs+0x4c>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	42a3      	cmp	r3, r4
 800a394:	d004      	beq.n	800a3a0 <WM__InvalidateDrawAndDescs+0x28>
 800a396:	f002 fad3 	bl	800c940 <GUI_MEMDEV_Delete>
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	625a      	str	r2, [r3, #36]	; 0x24
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f003 ff1c 	bl	800e1de <WM_GetFirstChild>
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	b13c      	cbz	r4, 800a3ba <WM__InvalidateDrawAndDescs+0x42>
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f7ff ffe4 	bl	800a378 <WM__InvalidateDrawAndDescs>
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f7fe fe9b 	bl	80090ec <GUI_ALLOC_h2p>
 800a3b6:	6a04      	ldr	r4, [r0, #32]
 800a3b8:	e7f6      	b.n	800a3a8 <WM__InvalidateDrawAndDescs+0x30>
 800a3ba:	a801      	add	r0, sp, #4
 800a3bc:	f7fe feae 	bl	800911c <GUI_ALLOC_UnlockH>
 800a3c0:	b002      	add	sp, #8
 800a3c2:	bd10      	pop	{r4, pc}
 800a3c4:	2001b064 	.word	0x2001b064

0800a3c8 <WM__RectIsNZ>:
 800a3c8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a3cc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	dc08      	bgt.n	800a3e6 <WM__RectIsNZ+0x1e>
 800a3d4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a3d8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	bfcc      	ite	gt
 800a3e0:	2000      	movgt	r0, #0
 800a3e2:	2001      	movle	r0, #1
 800a3e4:	4770      	bx	lr
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	4770      	bx	lr
	...

0800a3ec <_Invalidate1Abs>:
 800a3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	4617      	mov	r7, r2
 800a3f6:	f7fe fe79 	bl	80090ec <GUI_ALLOC_h2p>
 800a3fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a3fc:	9001      	str	r0, [sp, #4]
 800a3fe:	07a3      	lsls	r3, r4, #30
 800a400:	d534      	bpl.n	800a46c <_Invalidate1Abs+0x80>
 800a402:	4628      	mov	r0, r5
 800a404:	f7ff ffe0 	bl	800a3c8 <WM__RectIsNZ>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d02f      	beq.n	800a46c <_Invalidate1Abs+0x80>
 800a40c:	f640 0301 	movw	r3, #2049	; 0x801
 800a410:	4023      	ands	r3, r4
 800a412:	2b01      	cmp	r3, #1
 800a414:	d02a      	beq.n	800a46c <_Invalidate1Abs+0x80>
 800a416:	4630      	mov	r0, r6
 800a418:	f7fe fe72 	bl	8009100 <GUI_ALLOC_LockH>
 800a41c:	ac02      	add	r4, sp, #8
 800a41e:	4602      	mov	r2, r0
 800a420:	9001      	str	r0, [sp, #4]
 800a422:	4629      	mov	r1, r5
 800a424:	4620      	mov	r0, r4
 800a426:	f003 f8cb 	bl	800d5c0 <GUI__IntersectRects>
 800a42a:	4620      	mov	r0, r4
 800a42c:	f7ff ffcc 	bl	800a3c8 <WM__RectIsNZ>
 800a430:	b1c8      	cbz	r0, 800a466 <_Invalidate1Abs+0x7a>
 800a432:	9b01      	ldr	r3, [sp, #4]
 800a434:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800a436:	f244 0120 	movw	r1, #16416	; 0x4020
 800a43a:	4031      	ands	r1, r6
 800a43c:	f103 0508 	add.w	r5, r3, #8
 800a440:	b129      	cbz	r1, 800a44e <_Invalidate1Abs+0x62>
 800a442:	4628      	mov	r0, r5
 800a444:	4629      	mov	r1, r5
 800a446:	4622      	mov	r2, r4
 800a448:	f003 fc62 	bl	800dd10 <GUI_MergeRect>
 800a44c:	e00b      	b.n	800a466 <_Invalidate1Abs+0x7a>
 800a44e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a452:	433e      	orrs	r6, r7
 800a454:	e885 0003 	stmia.w	r5, {r0, r1}
 800a458:	629e      	str	r6, [r3, #40]	; 0x28
 800a45a:	4b05      	ldr	r3, [pc, #20]	; (800a470 <_Invalidate1Abs+0x84>)
 800a45c:	881a      	ldrh	r2, [r3, #0]
 800a45e:	3201      	adds	r2, #1
 800a460:	801a      	strh	r2, [r3, #0]
 800a462:	f003 faa5 	bl	800d9b0 <GUI_SignalEvent>
 800a466:	a801      	add	r0, sp, #4
 800a468:	f7fe fe58 	bl	800911c <GUI_ALLOC_UnlockH>
 800a46c:	b005      	add	sp, #20
 800a46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a470:	2001b038 	.word	0x2001b038

0800a474 <WM__Invalidate1Abs>:
 800a474:	2220      	movs	r2, #32
 800a476:	f7ff bfb9 	b.w	800a3ec <_Invalidate1Abs>

0800a47a <WM_InvalidateWindowAndDescsEx>:
 800a47a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47c:	460f      	mov	r7, r1
 800a47e:	b085      	sub	sp, #20
 800a480:	4615      	mov	r5, r2
 800a482:	4606      	mov	r6, r0
 800a484:	b348      	cbz	r0, 800a4da <WM_InvalidateWindowAndDescsEx+0x60>
 800a486:	f7fe fe3b 	bl	8009100 <GUI_ALLOC_LockH>
 800a48a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a48c:	ac04      	add	r4, sp, #16
 800a48e:	079b      	lsls	r3, r3, #30
 800a490:	4602      	mov	r2, r0
 800a492:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800a496:	d403      	bmi.n	800a4a0 <WM_InvalidateWindowAndDescsEx+0x26>
 800a498:	4620      	mov	r0, r4
 800a49a:	f7fe fe3f 	bl	800911c <GUI_ALLOC_UnlockH>
 800a49e:	e01c      	b.n	800a4da <WM_InvalidateWindowAndDescsEx+0x60>
 800a4a0:	a802      	add	r0, sp, #8
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f003 f88c 	bl	800d5c0 <GUI__IntersectRects>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d0f5      	beq.n	800a498 <WM_InvalidateWindowAndDescsEx+0x1e>
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f7fe fe35 	bl	800911c <GUI_ALLOC_UnlockH>
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	a902      	add	r1, sp, #8
 800a4b6:	462a      	mov	r2, r5
 800a4b8:	f7ff ff98 	bl	800a3ec <_Invalidate1Abs>
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f003 fe8e 	bl	800e1de <WM_GetFirstChild>
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	b14c      	cbz	r4, 800a4da <WM_InvalidateWindowAndDescsEx+0x60>
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	a902      	add	r1, sp, #8
 800a4ca:	462a      	mov	r2, r5
 800a4cc:	f7ff ffd5 	bl	800a47a <WM_InvalidateWindowAndDescsEx>
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f7fe fe0b 	bl	80090ec <GUI_ALLOC_h2p>
 800a4d6:	6a04      	ldr	r4, [r0, #32]
 800a4d8:	e7f4      	b.n	800a4c4 <WM_InvalidateWindowAndDescsEx+0x4a>
 800a4da:	b005      	add	sp, #20
 800a4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4de <WM__InvalidateRect>:
 800a4de:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a4e2:	4680      	mov	r8, r0
 800a4e4:	4617      	mov	r7, r2
 800a4e6:	461d      	mov	r5, r3
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	2900      	cmp	r1, #0
 800a4ec:	d030      	beq.n	800a550 <WM__InvalidateRect+0x72>
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	f7fe fe06 	bl	8009100 <GUI_ALLOC_LockH>
 800a4f4:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800a4f6:	9001      	str	r0, [sp, #4]
 800a4f8:	07b3      	lsls	r3, r6, #30
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	d525      	bpl.n	800a54a <WM__InvalidateRect+0x6c>
 800a4fe:	a802      	add	r0, sp, #8
 800a500:	4641      	mov	r1, r8
 800a502:	f003 f85d 	bl	800d5c0 <GUI__IntersectRects>
 800a506:	b300      	cbz	r0, 800a54a <WM__InvalidateRect+0x6c>
 800a508:	f640 0301 	movw	r3, #2049	; 0x801
 800a50c:	4033      	ands	r3, r6
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d107      	bne.n	800a522 <WM__InvalidateRect+0x44>
 800a512:	9b01      	ldr	r3, [sp, #4]
 800a514:	a802      	add	r0, sp, #8
 800a516:	6999      	ldr	r1, [r3, #24]
 800a518:	6a1a      	ldr	r2, [r3, #32]
 800a51a:	462b      	mov	r3, r5
 800a51c:	f7ff ffdf 	bl	800a4de <WM__InvalidateRect>
 800a520:	e004      	b.n	800a52c <WM__InvalidateRect+0x4e>
 800a522:	4620      	mov	r0, r4
 800a524:	a902      	add	r1, sp, #8
 800a526:	462a      	mov	r2, r5
 800a528:	f7ff ff60 	bl	800a3ec <_Invalidate1Abs>
 800a52c:	9b01      	ldr	r3, [sp, #4]
 800a52e:	69dc      	ldr	r4, [r3, #28]
 800a530:	b15c      	cbz	r4, 800a54a <WM__InvalidateRect+0x6c>
 800a532:	42bc      	cmp	r4, r7
 800a534:	d009      	beq.n	800a54a <WM__InvalidateRect+0x6c>
 800a536:	4620      	mov	r0, r4
 800a538:	a902      	add	r1, sp, #8
 800a53a:	462a      	mov	r2, r5
 800a53c:	f7ff ff9d 	bl	800a47a <WM_InvalidateWindowAndDescsEx>
 800a540:	4620      	mov	r0, r4
 800a542:	f7fe fdd3 	bl	80090ec <GUI_ALLOC_h2p>
 800a546:	6a04      	ldr	r4, [r0, #32]
 800a548:	e7f2      	b.n	800a530 <WM__InvalidateRect+0x52>
 800a54a:	a801      	add	r0, sp, #4
 800a54c:	f7fe fde6 	bl	800911c <GUI_ALLOC_UnlockH>
 800a550:	b004      	add	sp, #16
 800a552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a556 <WM__InvalidateParent>:
 800a556:	b570      	push	{r4, r5, r6, lr}
 800a558:	4605      	mov	r5, r0
 800a55a:	4608      	mov	r0, r1
 800a55c:	460c      	mov	r4, r1
 800a55e:	4616      	mov	r6, r2
 800a560:	f7fe fdc4 	bl	80090ec <GUI_ALLOC_h2p>
 800a564:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a566:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a56a:	4628      	mov	r0, r5
 800a56c:	4621      	mov	r1, r4
 800a56e:	4632      	mov	r2, r6
 800a570:	bf0c      	ite	eq
 800a572:	2320      	moveq	r3, #32
 800a574:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800a578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a57c:	f7ff bfaf 	b.w	800a4de <WM__InvalidateRect>

0800a580 <WM__InvalidateRectEx>:
 800a580:	2320      	movs	r3, #32
 800a582:	f7ff bfac 	b.w	800a4de <WM__InvalidateRect>

0800a586 <WM__DetachWindow>:
 800a586:	b513      	push	{r0, r1, r4, lr}
 800a588:	4604      	mov	r4, r0
 800a58a:	f7fe fdb9 	bl	8009100 <GUI_ALLOC_LockH>
 800a58e:	6981      	ldr	r1, [r0, #24]
 800a590:	9001      	str	r0, [sp, #4]
 800a592:	b141      	cbz	r1, 800a5a6 <WM__DetachWindow+0x20>
 800a594:	6a02      	ldr	r2, [r0, #32]
 800a596:	f7ff fff3 	bl	800a580 <WM__InvalidateRectEx>
 800a59a:	4620      	mov	r0, r4
 800a59c:	f7ff fe6a 	bl	800a274 <WM__RemoveWindowFromList>
 800a5a0:	9b01      	ldr	r3, [sp, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	619a      	str	r2, [r3, #24]
 800a5a6:	a801      	add	r0, sp, #4
 800a5a8:	f7fe fdb8 	bl	800911c <GUI_ALLOC_UnlockH>
 800a5ac:	b002      	add	sp, #8
 800a5ae:	bd10      	pop	{r4, pc}

0800a5b0 <WM__SendMsgNoData>:
 800a5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5b2:	ab04      	add	r3, sp, #16
 800a5b4:	9001      	str	r0, [sp, #4]
 800a5b6:	f843 1d10 	str.w	r1, [r3, #-16]!
 800a5ba:	4669      	mov	r1, sp
 800a5bc:	f003 fcde 	bl	800df7c <WM__SendMessage>
 800a5c0:	b005      	add	sp, #20
 800a5c2:	f85d fb04 	ldr.w	pc, [sp], #4

0800a5c6 <WM__GetClientRectWin>:
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	800b      	strh	r3, [r1, #0]
 800a5ca:	8882      	ldrh	r2, [r0, #4]
 800a5cc:	804b      	strh	r3, [r1, #2]
 800a5ce:	8803      	ldrh	r3, [r0, #0]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	808b      	strh	r3, [r1, #4]
 800a5d4:	88c2      	ldrh	r2, [r0, #6]
 800a5d6:	8843      	ldrh	r3, [r0, #2]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	80cb      	strh	r3, [r1, #6]
 800a5dc:	4770      	bx	lr

0800a5de <WM_InvalidateRect>:
 800a5de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5e0:	460f      	mov	r7, r1
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d033      	beq.n	800a652 <WM_InvalidateRect+0x74>
 800a5ea:	f7fe fd89 	bl	8009100 <GUI_ALLOC_LockH>
 800a5ee:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800a5f0:	9001      	str	r0, [sp, #4]
 800a5f2:	07b2      	lsls	r2, r6, #30
 800a5f4:	d52a      	bpl.n	800a64c <WM_InvalidateRect+0x6e>
 800a5f6:	c803      	ldmia	r0, {r0, r1}
 800a5f8:	ac04      	add	r4, sp, #16
 800a5fa:	03f3      	lsls	r3, r6, #15
 800a5fc:	e884 0003 	stmia.w	r4, {r0, r1}
 800a600:	d502      	bpl.n	800a608 <WM_InvalidateRect+0x2a>
 800a602:	4628      	mov	r0, r5
 800a604:	f7ff feb8 	bl	800a378 <WM__InvalidateDrawAndDescs>
 800a608:	b15f      	cbz	r7, 800a622 <WM_InvalidateRect+0x44>
 800a60a:	6838      	ldr	r0, [r7, #0]
 800a60c:	6879      	ldr	r1, [r7, #4]
 800a60e:	ab02      	add	r3, sp, #8
 800a610:	c303      	stmia	r3!, {r0, r1}
 800a612:	9801      	ldr	r0, [sp, #4]
 800a614:	a902      	add	r1, sp, #8
 800a616:	f7ff fe4b 	bl	800a2b0 <WM__Client2Screen>
 800a61a:	4620      	mov	r0, r4
 800a61c:	a902      	add	r1, sp, #8
 800a61e:	f003 f801 	bl	800d624 <GUI__IntersectRect>
 800a622:	4620      	mov	r0, r4
 800a624:	4629      	mov	r1, r5
 800a626:	f7ff fda5 	bl	800a174 <WM__ClipAtParentBorders>
 800a62a:	b178      	cbz	r0, 800a64c <WM_InvalidateRect+0x6e>
 800a62c:	f640 0301 	movw	r3, #2049	; 0x801
 800a630:	4033      	ands	r3, r6
 800a632:	2b01      	cmp	r3, #1
 800a634:	d106      	bne.n	800a644 <WM_InvalidateRect+0x66>
 800a636:	9b01      	ldr	r3, [sp, #4]
 800a638:	4620      	mov	r0, r4
 800a63a:	6999      	ldr	r1, [r3, #24]
 800a63c:	6a1a      	ldr	r2, [r3, #32]
 800a63e:	f7ff ff9f 	bl	800a580 <WM__InvalidateRectEx>
 800a642:	e003      	b.n	800a64c <WM_InvalidateRect+0x6e>
 800a644:	4628      	mov	r0, r5
 800a646:	4621      	mov	r1, r4
 800a648:	f7ff ff14 	bl	800a474 <WM__Invalidate1Abs>
 800a64c:	a801      	add	r0, sp, #4
 800a64e:	f7fe fd65 	bl	800911c <GUI_ALLOC_UnlockH>
 800a652:	b007      	add	sp, #28
 800a654:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a656 <WM_InvalidateWindow>:
 800a656:	2100      	movs	r1, #0
 800a658:	f7ff bfc1 	b.w	800a5de <WM_InvalidateRect>

0800a65c <WM__GetTopLevelLayer>:
 800a65c:	b510      	push	{r4, lr}
 800a65e:	4604      	mov	r4, r0
 800a660:	f7fe fd44 	bl	80090ec <GUI_ALLOC_h2p>
 800a664:	6980      	ldr	r0, [r0, #24]
 800a666:	2800      	cmp	r0, #0
 800a668:	d1f9      	bne.n	800a65e <WM__GetTopLevelLayer+0x2>
 800a66a:	4b05      	ldr	r3, [pc, #20]	; (800a680 <WM__GetTopLevelLayer+0x24>)
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	4294      	cmp	r4, r2
 800a670:	d005      	beq.n	800a67e <WM__GetTopLevelLayer+0x22>
 800a672:	6858      	ldr	r0, [r3, #4]
 800a674:	4284      	cmp	r4, r0
 800a676:	bf14      	ite	ne
 800a678:	f04f 30ff 	movne.w	r0, #4294967295
 800a67c:	2001      	moveq	r0, #1
 800a67e:	bd10      	pop	{r4, pc}
 800a680:	2001b020 	.word	0x2001b020

0800a684 <WM__SelectTopLevelLayer>:
 800a684:	b508      	push	{r3, lr}
 800a686:	f7ff ffe9 	bl	800a65c <WM__GetTopLevelLayer>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	db03      	blt.n	800a696 <WM__SelectTopLevelLayer+0x12>
 800a68e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a692:	f003 bad1 	b.w	800dc38 <GUI_SelectLayer>
 800a696:	bd08      	pop	{r3, pc}

0800a698 <WM_SelectWindow>:
 800a698:	4a0d      	ldr	r2, [pc, #52]	; (800a6d0 <WM_SelectWindow+0x38>)
 800a69a:	6813      	ldr	r3, [r2, #0]
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	4616      	mov	r6, r2
 800a6a4:	b908      	cbnz	r0, 800a6aa <WM_SelectWindow+0x12>
 800a6a6:	4a0b      	ldr	r2, [pc, #44]	; (800a6d4 <WM_SelectWindow+0x3c>)
 800a6a8:	6814      	ldr	r4, [r2, #0]
 800a6aa:	649c      	str	r4, [r3, #72]	; 0x48
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f7ff ffe9 	bl	800a684 <WM__SelectTopLevelLayer>
 800a6b2:	f002 fe47 	bl	800d344 <LCD_SetClipRectMax>
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f7fe fd18 	bl	80090ec <GUI_ALLOC_h2p>
 800a6bc:	6833      	ldr	r3, [r6, #0]
 800a6be:	f9b0 1000 	ldrsh.w	r1, [r0]
 800a6c2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a6c6:	64d9      	str	r1, [r3, #76]	; 0x4c
 800a6c8:	651a      	str	r2, [r3, #80]	; 0x50
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	bd70      	pop	{r4, r5, r6, pc}
 800a6ce:	bf00      	nop
 800a6d0:	200001b0 	.word	0x200001b0
 800a6d4:	2001b03c 	.word	0x2001b03c

0800a6d8 <WM_CreateWindowAsChild>:
 800a6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6de:	469b      	mov	fp, r3
 800a6e0:	4b4b      	ldr	r3, [pc, #300]	; (800a810 <WM_CreateWindowAsChild+0x138>)
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	4688      	mov	r8, r1
 800a6e6:	4692      	mov	sl, r2
 800a6e8:	681e      	ldr	r6, [r3, #0]
 800a6ea:	bb65      	cbnz	r5, 800a746 <WM_CreateWindowAsChild+0x6e>
 800a6ec:	4b49      	ldr	r3, [pc, #292]	; (800a814 <WM_CreateWindowAsChild+0x13c>)
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	b363      	cbz	r3, 800a74c <WM_CreateWindowAsChild+0x74>
 800a6f2:	4b49      	ldr	r3, [pc, #292]	; (800a818 <WM_CreateWindowAsChild+0x140>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	7c5a      	ldrb	r2, [r3, #17]
 800a6f8:	4b48      	ldr	r3, [pc, #288]	; (800a81c <WM_CreateWindowAsChild+0x144>)
 800a6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	d024      	beq.n	800a74c <WM_CreateWindowAsChild+0x74>
 800a702:	b31b      	cbz	r3, 800a74c <WM_CreateWindowAsChild+0x74>
 800a704:	461d      	mov	r5, r3
 800a706:	4628      	mov	r0, r5
 800a708:	f7fe fcfa 	bl	8009100 <GUI_ALLOC_LockH>
 800a70c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a710:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800a714:	9001      	str	r0, [sp, #4]
 800a716:	4417      	add	r7, r2
 800a718:	4498      	add	r8, r3
 800a71a:	f1ba 0f00 	cmp.w	sl, #0
 800a71e:	d105      	bne.n	800a72c <WM_CreateWindowAsChild+0x54>
 800a720:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800a724:	ebc2 0a0a 	rsb	sl, r2, sl
 800a728:	f10a 0a01 	add.w	sl, sl, #1
 800a72c:	f1bb 0f00 	cmp.w	fp, #0
 800a730:	d105      	bne.n	800a73e <WM_CreateWindowAsChild+0x66>
 800a732:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800a736:	ebc3 0b0b 	rsb	fp, r3, fp
 800a73a:	f10b 0b01 	add.w	fp, fp, #1
 800a73e:	a801      	add	r0, sp, #4
 800a740:	f7fe fcec 	bl	800911c <GUI_ALLOC_UnlockH>
 800a744:	e002      	b.n	800a74c <WM_CreateWindowAsChild+0x74>
 800a746:	1c6b      	adds	r3, r5, #1
 800a748:	d1dd      	bne.n	800a706 <WM_CreateWindowAsChild+0x2e>
 800a74a:	2500      	movs	r5, #0
 800a74c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a74e:	302c      	adds	r0, #44	; 0x2c
 800a750:	f003 fb62 	bl	800de18 <GUI_ALLOC_AllocZero>
 800a754:	4604      	mov	r4, r0
 800a756:	2800      	cmp	r0, #0
 800a758:	d056      	beq.n	800a808 <WM_CreateWindowAsChild+0x130>
 800a75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a75c:	431e      	orrs	r6, r3
 800a75e:	4b2d      	ldr	r3, [pc, #180]	; (800a814 <WM_CreateWindowAsChild+0x13c>)
 800a760:	881a      	ldrh	r2, [r3, #0]
 800a762:	3201      	adds	r2, #1
 800a764:	801a      	strh	r2, [r3, #0]
 800a766:	f7fe fccb 	bl	8009100 <GUI_ALLOC_LockH>
 800a76a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a76c:	6103      	str	r3, [r0, #16]
 800a76e:	f10d 0908 	add.w	r9, sp, #8
 800a772:	4b2b      	ldr	r3, [pc, #172]	; (800a820 <WM_CreateWindowAsChild+0x148>)
 800a774:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a776:	f849 0d08 	str.w	r0, [r9, #-8]!
 800a77a:	4033      	ands	r3, r6
 800a77c:	8007      	strh	r7, [r0, #0]
 800a77e:	f8a0 8002 	strh.w	r8, [r0, #2]
 800a782:	4457      	add	r7, sl
 800a784:	44d8      	add	r8, fp
 800a786:	4313      	orrs	r3, r2
 800a788:	3f01      	subs	r7, #1
 800a78a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a78e:	6283      	str	r3, [r0, #40]	; 0x28
 800a790:	8087      	strh	r7, [r0, #4]
 800a792:	f8a0 8006 	strh.w	r8, [r0, #6]
 800a796:	4668      	mov	r0, sp
 800a798:	f7fe fcc0 	bl	800911c <GUI_ALLOC_UnlockH>
 800a79c:	4b21      	ldr	r3, [pc, #132]	; (800a824 <WM_CreateWindowAsChild+0x14c>)
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	b148      	cbz	r0, 800a7b6 <WM_CreateWindowAsChild+0xde>
 800a7a2:	f7fe fca3 	bl	80090ec <GUI_ALLOC_h2p>
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f7fe fc9f 	bl	80090ec <GUI_ALLOC_h2p>
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	6143      	str	r3, [r0, #20]
 800a7b2:	617c      	str	r4, [r7, #20]
 800a7b4:	e000      	b.n	800a7b8 <WM_CreateWindowAsChild+0xe0>
 800a7b6:	601c      	str	r4, [r3, #0]
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f7ff fd08 	bl	800a1d0 <WM__InsertWindowIntoList>
 800a7c0:	06b5      	lsls	r5, r6, #26
 800a7c2:	d502      	bpl.n	800a7ca <WM_CreateWindowAsChild+0xf2>
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f7ff ff67 	bl	800a698 <WM_SelectWindow>
 800a7ca:	07f0      	lsls	r0, r6, #31
 800a7cc:	d503      	bpl.n	800a7d6 <WM_CreateWindowAsChild+0xfe>
 800a7ce:	4b16      	ldr	r3, [pc, #88]	; (800a828 <WM_CreateWindowAsChild+0x150>)
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	3201      	adds	r2, #1
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	0671      	lsls	r1, r6, #25
 800a7d8:	d502      	bpl.n	800a7e0 <WM_CreateWindowAsChild+0x108>
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f003 fd18 	bl	800e210 <WM_BringToBottom>
 800a7e0:	07b2      	lsls	r2, r6, #30
 800a7e2:	d50d      	bpl.n	800a800 <WM_CreateWindowAsChild+0x128>
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f7fe fc8b 	bl	8009100 <GUI_ALLOC_LockH>
 800a7ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a7ec:	9000      	str	r0, [sp, #0]
 800a7ee:	f043 0302 	orr.w	r3, r3, #2
 800a7f2:	6283      	str	r3, [r0, #40]	; 0x28
 800a7f4:	4668      	mov	r0, sp
 800a7f6:	f7fe fc91 	bl	800911c <GUI_ALLOC_UnlockH>
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f7ff ff2b 	bl	800a656 <WM_InvalidateWindow>
 800a800:	4620      	mov	r0, r4
 800a802:	2101      	movs	r1, #1
 800a804:	f7ff fed4 	bl	800a5b0 <WM__SendMsgNoData>
 800a808:	4620      	mov	r0, r4
 800a80a:	b003      	add	sp, #12
 800a80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a810:	2001b048 	.word	0x2001b048
 800a814:	2001b018 	.word	0x2001b018
 800a818:	200001b0 	.word	0x200001b0
 800a81c:	2001b020 	.word	0x2001b020
 800a820:	003f3f9f 	.word	0x003f3f9f
 800a824:	2001b03c 	.word	0x2001b03c
 800a828:	2001b068 	.word	0x2001b068

0800a82c <WM_DeleteWindow>:
 800a82c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a82e:	4604      	mov	r4, r0
 800a830:	2800      	cmp	r0, #0
 800a832:	d06e      	beq.n	800a912 <WM_DeleteWindow+0xe6>
 800a834:	f7ff fd90 	bl	800a358 <WM__IsWindow>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d06a      	beq.n	800a912 <WM_DeleteWindow+0xe6>
 800a83c:	4620      	mov	r0, r4
 800a83e:	f7ff ff0d 	bl	800a65c <WM__GetTopLevelLayer>
 800a842:	210b      	movs	r1, #11
 800a844:	4605      	mov	r5, r0
 800a846:	4620      	mov	r0, r4
 800a848:	f7ff feb2 	bl	800a5b0 <WM__SendMsgNoData>
 800a84c:	4620      	mov	r0, r4
 800a84e:	f003 fbe0 	bl	800e012 <WM__DeleteAssocTimer>
 800a852:	4620      	mov	r0, r4
 800a854:	f7fe fc54 	bl	8009100 <GUI_ALLOC_LockH>
 800a858:	9001      	str	r0, [sp, #4]
 800a85a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a85c:	b108      	cbz	r0, 800a862 <WM_DeleteWindow+0x36>
 800a85e:	f002 f86f 	bl	800c940 <GUI_MEMDEV_Delete>
 800a862:	4b2d      	ldr	r3, [pc, #180]	; (800a918 <WM_DeleteWindow+0xec>)
 800a864:	4a2d      	ldr	r2, [pc, #180]	; (800a91c <WM_DeleteWindow+0xf0>)
 800a866:	2100      	movs	r1, #0
 800a868:	6019      	str	r1, [r3, #0]
 800a86a:	4b2d      	ldr	r3, [pc, #180]	; (800a920 <WM_DeleteWindow+0xf4>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a872:	42a0      	cmp	r0, r4
 800a874:	bf08      	it	eq
 800a876:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800a87a:	4a2a      	ldr	r2, [pc, #168]	; (800a924 <WM_DeleteWindow+0xf8>)
 800a87c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a880:	42a1      	cmp	r1, r4
 800a882:	bf04      	itt	eq
 800a884:	2100      	moveq	r1, #0
 800a886:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800a88a:	4b27      	ldr	r3, [pc, #156]	; (800a928 <WM_DeleteWindow+0xfc>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	b12b      	cbz	r3, 800a89c <WM_DeleteWindow+0x70>
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	42a2      	cmp	r2, r4
 800a894:	bf04      	itt	eq
 800a896:	2200      	moveq	r2, #0
 800a898:	605a      	streq	r2, [r3, #4]
 800a89a:	e7f7      	b.n	800a88c <WM_DeleteWindow+0x60>
 800a89c:	4620      	mov	r0, r4
 800a89e:	2107      	movs	r1, #7
 800a8a0:	f003 fc8b 	bl	800e1ba <WM_NotifyParent>
 800a8a4:	9e01      	ldr	r6, [sp, #4]
 800a8a6:	69f0      	ldr	r0, [r6, #28]
 800a8a8:	f7ff ffc0 	bl	800a82c <WM_DeleteWindow>
 800a8ac:	69f3      	ldr	r3, [r6, #28]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1f9      	bne.n	800a8a6 <WM_DeleteWindow+0x7a>
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f7ff fe67 	bl	800a586 <WM__DetachWindow>
 800a8b8:	4b1c      	ldr	r3, [pc, #112]	; (800a92c <WM_DeleteWindow+0x100>)
 800a8ba:	6818      	ldr	r0, [r3, #0]
 800a8bc:	b150      	cbz	r0, 800a8d4 <WM_DeleteWindow+0xa8>
 800a8be:	f7fe fc15 	bl	80090ec <GUI_ALLOC_h2p>
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	6940      	ldr	r0, [r0, #20]
 800a8c6:	42a0      	cmp	r0, r4
 800a8c8:	d1f8      	bne.n	800a8bc <WM_DeleteWindow+0x90>
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f7fe fc0e 	bl	80090ec <GUI_ALLOC_h2p>
 800a8d0:	6943      	ldr	r3, [r0, #20]
 800a8d2:	6173      	str	r3, [r6, #20]
 800a8d4:	9b01      	ldr	r3, [sp, #4]
 800a8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d8:	07da      	lsls	r2, r3, #31
 800a8da:	d503      	bpl.n	800a8e4 <WM_DeleteWindow+0xb8>
 800a8dc:	4a14      	ldr	r2, [pc, #80]	; (800a930 <WM_DeleteWindow+0x104>)
 800a8de:	6811      	ldr	r1, [r2, #0]
 800a8e0:	3901      	subs	r1, #1
 800a8e2:	6011      	str	r1, [r2, #0]
 800a8e4:	069b      	lsls	r3, r3, #26
 800a8e6:	d503      	bpl.n	800a8f0 <WM_DeleteWindow+0xc4>
 800a8e8:	4b12      	ldr	r3, [pc, #72]	; (800a934 <WM_DeleteWindow+0x108>)
 800a8ea:	881a      	ldrh	r2, [r3, #0]
 800a8ec:	3a01      	subs	r2, #1
 800a8ee:	801a      	strh	r2, [r3, #0]
 800a8f0:	a801      	add	r0, sp, #4
 800a8f2:	f7fe fc13 	bl	800911c <GUI_ALLOC_UnlockH>
 800a8f6:	4b10      	ldr	r3, [pc, #64]	; (800a938 <WM_DeleteWindow+0x10c>)
 800a8f8:	881a      	ldrh	r2, [r3, #0]
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	3a01      	subs	r2, #1
 800a8fe:	801a      	strh	r2, [r3, #0]
 800a900:	f7fe fc2c 	bl	800915c <GUI_ALLOC_Free>
 800a904:	2d00      	cmp	r5, #0
 800a906:	db04      	blt.n	800a912 <WM_DeleteWindow+0xe6>
 800a908:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <WM_DeleteWindow+0x110>)
 800a90a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a90e:	f7ff fec3 	bl	800a698 <WM_SelectWindow>
 800a912:	b002      	add	sp, #8
 800a914:	bd70      	pop	{r4, r5, r6, pc}
 800a916:	bf00      	nop
 800a918:	20019478 	.word	0x20019478
 800a91c:	2001b030 	.word	0x2001b030
 800a920:	2001b040 	.word	0x2001b040
 800a924:	2001b05c 	.word	0x2001b05c
 800a928:	2001b054 	.word	0x2001b054
 800a92c:	2001b03c 	.word	0x2001b03c
 800a930:	2001b068 	.word	0x2001b068
 800a934:	2001b038 	.word	0x2001b038
 800a938:	2001b018 	.word	0x2001b018
 800a93c:	2001b020 	.word	0x2001b020

0800a940 <WM__GetNextIVR>:
 800a940:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a944:	4f5d      	ldr	r7, [pc, #372]	; (800aabc <WM__GetNextIVR+0x17c>)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800a94c:	2800      	cmp	r0, #0
 800a94e:	f000 80b2 	beq.w	800aab6 <WM__GetNextIVR+0x176>
 800a952:	4b5b      	ldr	r3, [pc, #364]	; (800aac0 <WM__GetNextIVR+0x180>)
 800a954:	695a      	ldr	r2, [r3, #20]
 800a956:	2a01      	cmp	r2, #1
 800a958:	461c      	mov	r4, r3
 800a95a:	dd03      	ble.n	800a964 <WM__GetNextIVR+0x24>
 800a95c:	3a01      	subs	r2, #1
 800a95e:	615a      	str	r2, [r3, #20]
 800a960:	2000      	movs	r0, #0
 800a962:	e0a8      	b.n	800aab6 <WM__GetNextIVR+0x176>
 800a964:	f104 0608 	add.w	r6, r4, #8
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a96e:	3301      	adds	r3, #1
 800a970:	ad02      	add	r5, sp, #8
 800a972:	6123      	str	r3, [r4, #16]
 800a974:	e885 0003 	stmia.w	r5, {r0, r1}
 800a978:	b923      	cbnz	r3, 800a984 <WM__GetNextIVR+0x44>
 800a97a:	8823      	ldrh	r3, [r4, #0]
 800a97c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a980:	8863      	ldrh	r3, [r4, #2]
 800a982:	e011      	b.n	800a9a8 <WM__GetNextIVR+0x68>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	8962      	ldrh	r2, [r4, #10]
 800a988:	f8ad 200a 	strh.w	r2, [sp, #10]
 800a98c:	3301      	adds	r3, #1
 800a98e:	b29b      	uxth	r3, r3
 800a990:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800a994:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a998:	b21b      	sxth	r3, r3
 800a99a:	429a      	cmp	r2, r3
 800a99c:	da06      	bge.n	800a9ac <WM__GetNextIVR+0x6c>
 800a99e:	8823      	ldrh	r3, [r4, #0]
 800a9a0:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a9a4:	89e3      	ldrh	r3, [r4, #14]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	f8ad 300a 	strh.w	r3, [sp, #10]
 800a9ac:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800a9b0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800a9b4:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800aac0 <WM__GetNextIVR+0x180>
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	dd04      	ble.n	800a9c6 <WM__GetNextIVR+0x86>
 800a9bc:	6963      	ldr	r3, [r4, #20]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	6163      	str	r3, [r4, #20]
 800a9c4:	e077      	b.n	800aab6 <WM__GetNextIVR+0x176>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a9ca:	f7fe fb99 	bl	8009100 <GUI_ALLOC_LockH>
 800a9ce:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800a9d2:	f9b8 3000 	ldrsh.w	r3, [r8]
 800a9d6:	9001      	str	r0, [sp, #4]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d11c      	bne.n	800aa16 <WM__GetNextIVR+0xd6>
 800a9dc:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a9e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a9e4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800a9e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a9ec:	4b33      	ldr	r3, [pc, #204]	; (800aabc <WM__GetNextIVR+0x17c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9f2:	b15a      	cbz	r2, 800aa0c <WM__GetNextIVR+0xcc>
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	f7fe fb79 	bl	80090ec <GUI_ALLOC_h2p>
 800a9fa:	4680      	mov	r8, r0
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	6a00      	ldr	r0, [r0, #32]
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7ff f9cb 	bl	8009d9c <_Findy1>
 800aa06:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800aa0a:	e7f2      	b.n	800a9f2 <WM__GetNextIVR+0xb2>
 800aa0c:	9b01      	ldr	r3, [sp, #4]
 800aa0e:	4629      	mov	r1, r5
 800aa10:	69d8      	ldr	r0, [r3, #28]
 800aa12:	f7ff f9c3 	bl	8009d9c <_Findy1>
 800aa16:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800aa1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa22:	b16a      	cbz	r2, 800aa40 <WM__GetNextIVR+0x100>
 800aa24:	4610      	mov	r0, r2
 800aa26:	f7fe fb61 	bl	80090ec <GUI_ALLOC_h2p>
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	4680      	mov	r8, r0
 800aa2e:	2200      	movs	r2, #0
 800aa30:	6a00      	ldr	r0, [r0, #32]
 800aa32:	f7ff fa09 	bl	8009e48 <_Findx0>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d1ed      	bne.n	800aa16 <WM__GetNextIVR+0xd6>
 800aa3a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800aa3e:	e7f0      	b.n	800aa22 <WM__GetNextIVR+0xe2>
 800aa40:	9b01      	ldr	r3, [sp, #4]
 800aa42:	4629      	mov	r1, r5
 800aa44:	69d8      	ldr	r0, [r3, #28]
 800aa46:	f7ff f9ff 	bl	8009e48 <_Findx0>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d1e3      	bne.n	800aa16 <WM__GetNextIVR+0xd6>
 800aa4e:	88a3      	ldrh	r3, [r4, #4]
 800aa50:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800aa54:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aa58:	b21b      	sxth	r3, r3
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	dd07      	ble.n	800aa6e <WM__GetNextIVR+0x12e>
 800aa5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aa62:	e886 0003 	stmia.w	r6, {r0, r1}
 800aa66:	a801      	add	r0, sp, #4
 800aa68:	f7fe fb58 	bl	800911c <GUI_ALLOC_UnlockH>
 800aa6c:	e797      	b.n	800a99e <WM__GetNextIVR+0x5e>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa72:	b152      	cbz	r2, 800aa8a <WM__GetNextIVR+0x14a>
 800aa74:	4610      	mov	r0, r2
 800aa76:	f7fe fb39 	bl	80090ec <GUI_ALLOC_h2p>
 800aa7a:	4607      	mov	r7, r0
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	6a00      	ldr	r0, [r0, #32]
 800aa80:	4629      	mov	r1, r5
 800aa82:	f7ff fa25 	bl	8009ed0 <_Findx1>
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	e7f3      	b.n	800aa72 <WM__GetNextIVR+0x132>
 800aa8a:	af04      	add	r7, sp, #16
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800aa92:	69d8      	ldr	r0, [r3, #28]
 800aa94:	f7ff fa1c 	bl	8009ed0 <_Findx1>
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f7fe fb3f 	bl	800911c <GUI_ALLOC_UnlockH>
 800aa9e:	6923      	ldr	r3, [r4, #16]
 800aaa0:	f644 6220 	movw	r2, #20000	; 0x4e20
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	dc89      	bgt.n	800a9bc <WM__GetNextIVR+0x7c>
 800aaa8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aaac:	e886 0003 	stmia.w	r6, {r0, r1}
 800aab0:	f7ff fc2e 	bl	800a310 <WM__ActivateClipRect>
 800aab4:	2001      	movs	r0, #1
 800aab6:	b004      	add	sp, #16
 800aab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aabc:	200001b0 	.word	0x200001b0
 800aac0:	20019460 	.word	0x20019460

0800aac4 <WM__InitIVRSearch>:
 800aac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac8:	4f39      	ldr	r7, [pc, #228]	; (800abb0 <WM__InitIVRSearch+0xec>)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800aad0:	b086      	sub	sp, #24
 800aad2:	4606      	mov	r6, r0
 800aad4:	b912      	cbnz	r2, 800aadc <WM__InitIVRSearch+0x18>
 800aad6:	f7ff fc1b 	bl	800a310 <WM__ActivateClipRect>
 800aada:	e064      	b.n	800aba6 <WM__InitIVRSearch+0xe2>
 800aadc:	4d35      	ldr	r5, [pc, #212]	; (800abb4 <WM__InitIVRSearch+0xf0>)
 800aade:	696a      	ldr	r2, [r5, #20]
 800aae0:	3201      	adds	r2, #1
 800aae2:	2a01      	cmp	r2, #1
 800aae4:	616a      	str	r2, [r5, #20]
 800aae6:	462c      	mov	r4, r5
 800aae8:	dc5d      	bgt.n	800aba6 <WM__InitIVRSearch+0xe2>
 800aaea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800aaec:	f7fe fb08 	bl	8009100 <GUI_ALLOC_LockH>
 800aaf0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf4:	612a      	str	r2, [r5, #16]
 800aaf6:	4a30      	ldr	r2, [pc, #192]	; (800abb8 <WM__InitIVRSearch+0xf4>)
 800aaf8:	9000      	str	r0, [sp, #0]
 800aafa:	7812      	ldrb	r2, [r2, #0]
 800aafc:	b12a      	cbz	r2, 800ab0a <WM__InitIVRSearch+0x46>
 800aafe:	f100 0308 	add.w	r3, r0, #8
 800ab02:	aa02      	add	r2, sp, #8
 800ab04:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab08:	e005      	b.n	800ab16 <WM__InitIVRSearch+0x52>
 800ab0a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ab0c:	f012 0802 	ands.w	r8, r2, #2
 800ab10:	d00a      	beq.n	800ab28 <WM__InitIVRSearch+0x64>
 800ab12:	c803      	ldmia	r0, {r0, r1}
 800ab14:	aa02      	add	r2, sp, #8
 800ab16:	e882 0003 	stmia.w	r2, {r0, r1}
 800ab1a:	ad02      	add	r5, sp, #8
 800ab1c:	b166      	cbz	r6, 800ab38 <WM__InitIVRSearch+0x74>
 800ab1e:	4628      	mov	r0, r5
 800ab20:	4631      	mov	r1, r6
 800ab22:	f002 fd7f 	bl	800d624 <GUI__IntersectRect>
 800ab26:	e007      	b.n	800ab38 <WM__InitIVRSearch+0x74>
 800ab28:	696b      	ldr	r3, [r5, #20]
 800ab2a:	4668      	mov	r0, sp
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	616b      	str	r3, [r5, #20]
 800ab30:	f7fe faf4 	bl	800911c <GUI_ALLOC_UnlockH>
 800ab34:	4640      	mov	r0, r8
 800ab36:	e037      	b.n	800aba8 <WM__InitIVRSearch+0xe4>
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	4e20      	ldr	r6, [pc, #128]	; (800abbc <WM__InitIVRSearch+0xf8>)
 800ab3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab3e:	b1c2      	cbz	r2, 800ab72 <WM__InitIVRSearch+0xae>
 800ab40:	9b00      	ldr	r3, [sp, #0]
 800ab42:	6810      	ldr	r0, [r2, #0]
 800ab44:	6851      	ldr	r1, [r2, #4]
 800ab46:	9301      	str	r3, [sp, #4]
 800ab48:	ab04      	add	r3, sp, #16
 800ab4a:	c303      	stmia	r3!, {r0, r1}
 800ab4c:	6833      	ldr	r3, [r6, #0]
 800ab4e:	b133      	cbz	r3, 800ab5e <WM__InitIVRSearch+0x9a>
 800ab50:	a801      	add	r0, sp, #4
 800ab52:	f7fe fae3 	bl	800911c <GUI_ALLOC_UnlockH>
 800ab56:	6830      	ldr	r0, [r6, #0]
 800ab58:	f7fe fad2 	bl	8009100 <GUI_ALLOC_LockH>
 800ab5c:	9001      	str	r0, [sp, #4]
 800ab5e:	9801      	ldr	r0, [sp, #4]
 800ab60:	a904      	add	r1, sp, #16
 800ab62:	f7ff fba5 	bl	800a2b0 <WM__Client2Screen>
 800ab66:	4628      	mov	r0, r5
 800ab68:	a904      	add	r1, sp, #16
 800ab6a:	f002 fd5b 	bl	800d624 <GUI__IntersectRect>
 800ab6e:	a801      	add	r0, sp, #4
 800ab70:	e000      	b.n	800ab74 <WM__InitIVRSearch+0xb0>
 800ab72:	4668      	mov	r0, sp
 800ab74:	f7fe fad2 	bl	800911c <GUI_ALLOC_UnlockH>
 800ab78:	6831      	ldr	r1, [r6, #0]
 800ab7a:	b119      	cbz	r1, 800ab84 <WM__InitIVRSearch+0xc0>
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f7ff faf9 	bl	800a174 <WM__ClipAtParentBorders>
 800ab82:	b128      	cbz	r0, 800ab90 <WM__InitIVRSearch+0xcc>
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	4628      	mov	r0, r5
 800ab88:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ab8a:	f7ff faf3 	bl	800a174 <WM__ClipAtParentBorders>
 800ab8e:	b918      	cbnz	r0, 800ab98 <WM__InitIVRSearch+0xd4>
 800ab90:	6963      	ldr	r3, [r4, #20]
 800ab92:	3b01      	subs	r3, #1
 800ab94:	6163      	str	r3, [r4, #20]
 800ab96:	e007      	b.n	800aba8 <WM__InitIVRSearch+0xe4>
 800ab98:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ab9c:	e884 0003 	stmia.w	r4, {r0, r1}
 800aba0:	f7ff fece 	bl	800a940 <WM__GetNextIVR>
 800aba4:	e000      	b.n	800aba8 <WM__InitIVRSearch+0xe4>
 800aba6:	2001      	movs	r0, #1
 800aba8:	b006      	add	sp, #24
 800abaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abae:	bf00      	nop
 800abb0:	200001b0 	.word	0x200001b0
 800abb4:	20019460 	.word	0x20019460
 800abb8:	2001b045 	.word	0x2001b045
 800abbc:	2001b01c 	.word	0x2001b01c

0800abc0 <WM_SetDefault>:
 800abc0:	b508      	push	{r3, lr}
 800abc2:	f002 fff3 	bl	800dbac <GL_SetDefault>
 800abc6:	4b02      	ldr	r3, [pc, #8]	; (800abd0 <WM_SetDefault+0x10>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2200      	movs	r2, #0
 800abcc:	645a      	str	r2, [r3, #68]	; 0x44
 800abce:	bd08      	pop	{r3, pc}
 800abd0:	200001b0 	.word	0x200001b0

0800abd4 <WM__Paint1>:
 800abd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd6:	b089      	sub	sp, #36	; 0x24
 800abd8:	4604      	mov	r4, r0
 800abda:	f7fe fa91 	bl	8009100 <GUI_ALLOC_LockH>
 800abde:	6907      	ldr	r7, [r0, #16]
 800abe0:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800abe2:	9001      	str	r0, [sp, #4]
 800abe4:	3008      	adds	r0, #8
 800abe6:	c803      	ldmia	r0, {r0, r1}
 800abe8:	ad02      	add	r5, sp, #8
 800abea:	e885 0003 	stmia.w	r5, {r0, r1}
 800abee:	a801      	add	r0, sp, #4
 800abf0:	f7fe fa94 	bl	800911c <GUI_ALLOC_UnlockH>
 800abf4:	2f00      	cmp	r7, #0
 800abf6:	d031      	beq.n	800ac5c <WM__Paint1+0x88>
 800abf8:	07b3      	lsls	r3, r6, #30
 800abfa:	d52f      	bpl.n	800ac5c <WM__Paint1+0x88>
 800abfc:	4620      	mov	r0, r4
 800abfe:	212e      	movs	r1, #46	; 0x2e
 800ac00:	f003 fa5e 	bl	800e0c0 <WM_SendMessageNoPara>
 800ac04:	4b16      	ldr	r3, [pc, #88]	; (800ac60 <WM__Paint1+0x8c>)
 800ac06:	781a      	ldrb	r2, [r3, #0]
 800ac08:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 800ac0c:	f102 0201 	add.w	r2, r2, #1
 800ac10:	701a      	strb	r2, [r3, #0]
 800ac12:	461e      	mov	r6, r3
 800ac14:	d00a      	beq.n	800ac2c <WM__Paint1+0x58>
 800ac16:	230f      	movs	r3, #15
 800ac18:	9405      	str	r4, [sp, #20]
 800ac1a:	9304      	str	r3, [sp, #16]
 800ac1c:	9507      	str	r5, [sp, #28]
 800ac1e:	f7ff ffcf 	bl	800abc0 <WM_SetDefault>
 800ac22:	4620      	mov	r0, r4
 800ac24:	a904      	add	r1, sp, #16
 800ac26:	f003 f9a9 	bl	800df7c <WM__SendMessage>
 800ac2a:	e010      	b.n	800ac4e <WM__Paint1+0x7a>
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f7ff ff49 	bl	800aac4 <WM__InitIVRSearch>
 800ac32:	b160      	cbz	r0, 800ac4e <WM__Paint1+0x7a>
 800ac34:	230f      	movs	r3, #15
 800ac36:	9304      	str	r3, [sp, #16]
 800ac38:	9405      	str	r4, [sp, #20]
 800ac3a:	9507      	str	r5, [sp, #28]
 800ac3c:	f7ff ffc0 	bl	800abc0 <WM_SetDefault>
 800ac40:	4620      	mov	r0, r4
 800ac42:	a904      	add	r1, sp, #16
 800ac44:	f003 f99a 	bl	800df7c <WM__SendMessage>
 800ac48:	f7ff fe7a 	bl	800a940 <WM__GetNextIVR>
 800ac4c:	e7f1      	b.n	800ac32 <WM__Paint1+0x5e>
 800ac4e:	7833      	ldrb	r3, [r6, #0]
 800ac50:	4620      	mov	r0, r4
 800ac52:	3b01      	subs	r3, #1
 800ac54:	212f      	movs	r1, #47	; 0x2f
 800ac56:	7033      	strb	r3, [r6, #0]
 800ac58:	f003 fa32 	bl	800e0c0 <WM_SendMessageNoPara>
 800ac5c:	b009      	add	sp, #36	; 0x24
 800ac5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac60:	2001b045 	.word	0x2001b045

0800ac64 <WM__Paint>:
 800ac64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac66:	b089      	sub	sp, #36	; 0x24
 800ac68:	ac06      	add	r4, sp, #24
 800ac6a:	9003      	str	r0, [sp, #12]
 800ac6c:	f7fe fa48 	bl	8009100 <GUI_ALLOC_LockH>
 800ac70:	f100 0208 	add.w	r2, r0, #8
 800ac74:	4603      	mov	r3, r0
 800ac76:	9005      	str	r0, [sp, #20]
 800ac78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac7c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800ac7e:	699e      	ldr	r6, [r3, #24]
 800ac80:	691f      	ldr	r7, [r3, #16]
 800ac82:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac86:	a805      	add	r0, sp, #20
 800ac88:	f7fe fa48 	bl	800911c <GUI_ALLOC_UnlockH>
 800ac8c:	f244 0320 	movw	r3, #16416	; 0x4020
 800ac90:	402b      	ands	r3, r5
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d034      	beq.n	800ad00 <WM__Paint+0x9c>
 800ac96:	b1bf      	cbz	r7, 800acc8 <WM__Paint+0x64>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	9903      	ldr	r1, [sp, #12]
 800ac9c:	f7ff fa6a 	bl	800a174 <WM__ClipAtParentBorders>
 800aca0:	b190      	cbz	r0, 800acc8 <WM__Paint+0x64>
 800aca2:	9803      	ldr	r0, [sp, #12]
 800aca4:	f7ff fcf8 	bl	800a698 <WM_SelectWindow>
 800aca8:	0769      	lsls	r1, r5, #29
 800acaa:	d50f      	bpl.n	800accc <WM__Paint+0x68>
 800acac:	b126      	cbz	r6, 800acb8 <WM__Paint+0x54>
 800acae:	f005 0501 	and.w	r5, r5, #1
 800acb2:	f085 0501 	eor.w	r5, r5, #1
 800acb6:	e000      	b.n	800acba <WM__Paint+0x56>
 800acb8:	2501      	movs	r5, #1
 800acba:	9500      	str	r5, [sp, #0]
 800acbc:	4620      	mov	r0, r4
 800acbe:	4912      	ldr	r1, [pc, #72]	; (800ad08 <WM__Paint+0xa4>)
 800acc0:	aa03      	add	r2, sp, #12
 800acc2:	2300      	movs	r3, #0
 800acc4:	f000 facc 	bl	800b260 <GUI_MEMDEV_Draw>
 800acc8:	2400      	movs	r4, #0
 800acca:	e003      	b.n	800acd4 <WM__Paint+0x70>
 800accc:	9803      	ldr	r0, [sp, #12]
 800acce:	f7ff f9e1 	bl	800a094 <WM__PaintWinAndOverlays>
 800acd2:	2401      	movs	r4, #1
 800acd4:	9803      	ldr	r0, [sp, #12]
 800acd6:	f7fe fa13 	bl	8009100 <GUI_ALLOC_LockH>
 800acda:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800acdc:	9005      	str	r0, [sp, #20]
 800acde:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800ace2:	f023 0320 	bic.w	r3, r3, #32
 800ace6:	0492      	lsls	r2, r2, #18
 800ace8:	bf48      	it	mi
 800acea:	f043 0304 	orrmi.w	r3, r3, #4
 800acee:	6283      	str	r3, [r0, #40]	; 0x28
 800acf0:	a805      	add	r0, sp, #20
 800acf2:	f7fe fa13 	bl	800911c <GUI_ALLOC_UnlockH>
 800acf6:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <WM__Paint+0xa8>)
 800acf8:	881a      	ldrh	r2, [r3, #0]
 800acfa:	3a01      	subs	r2, #1
 800acfc:	801a      	strh	r2, [r3, #0]
 800acfe:	e000      	b.n	800ad02 <WM__Paint+0x9e>
 800ad00:	461c      	mov	r4, r3
 800ad02:	4620      	mov	r0, r4
 800ad04:	b009      	add	sp, #36	; 0x24
 800ad06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad08:	0800a10d 	.word	0x0800a10d
 800ad0c:	2001b038 	.word	0x2001b038

0800ad10 <WM_Exec>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	4b4c      	ldr	r3, [pc, #304]	; (800ae48 <WM_Exec+0x138>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	b09f      	sub	sp, #124	; 0x7c
 800ad1a:	b103      	cbz	r3, 800ad1e <WM_Exec+0xe>
 800ad1c:	4798      	blx	r3
 800ad1e:	2600      	movs	r6, #0
 800ad20:	4d4a      	ldr	r5, [pc, #296]	; (800ae4c <WM_Exec+0x13c>)
 800ad22:	682b      	ldr	r3, [r5, #0]
 800ad24:	b1db      	cbz	r3, 800ad5e <WM_Exec+0x4e>
 800ad26:	4b4a      	ldr	r3, [pc, #296]	; (800ae50 <WM_Exec+0x140>)
 800ad28:	681c      	ldr	r4, [r3, #0]
 800ad2a:	b1bc      	cbz	r4, 800ad5c <WM_Exec+0x4c>
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f7fe f9e7 	bl	8009100 <GUI_ALLOC_LockH>
 800ad32:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ad34:	6947      	ldr	r7, [r0, #20]
 800ad36:	ab1e      	add	r3, sp, #120	; 0x78
 800ad38:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800ad3c:	f843 0d70 	str.w	r0, [r3, #-112]!
 800ad40:	d007      	beq.n	800ad52 <WM_Exec+0x42>
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe f9ea 	bl	800911c <GUI_ALLOC_UnlockH>
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f7ff fd6f 	bl	800a82c <WM_DeleteWindow>
 800ad4e:	463c      	mov	r4, r7
 800ad50:	e7eb      	b.n	800ad2a <WM_Exec+0x1a>
 800ad52:	4618      	mov	r0, r3
 800ad54:	463c      	mov	r4, r7
 800ad56:	f7fe f9e1 	bl	800911c <GUI_ALLOC_UnlockH>
 800ad5a:	e7e6      	b.n	800ad2a <WM_Exec+0x1a>
 800ad5c:	602c      	str	r4, [r5, #0]
 800ad5e:	4b3d      	ldr	r3, [pc, #244]	; (800ae54 <WM_Exec+0x144>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <WM_Exec+0x56>
 800ad64:	4798      	blx	r3
 800ad66:	4b3c      	ldr	r3, [pc, #240]	; (800ae58 <WM_Exec+0x148>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	b92b      	cbnz	r3, 800ad78 <WM_Exec+0x68>
 800ad6c:	4f3b      	ldr	r7, [pc, #236]	; (800ae5c <WM_Exec+0x14c>)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ad74:	b143      	cbz	r3, 800ad88 <WM_Exec+0x78>
 800ad76:	e003      	b.n	800ad80 <WM_Exec+0x70>
 800ad78:	4798      	blx	r3
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d0f6      	beq.n	800ad6c <WM_Exec+0x5c>
 800ad7e:	e058      	b.n	800ae32 <WM_Exec+0x122>
 800ad80:	f7fd fb76 	bl	8008470 <GUI_PollKeyMsg>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d154      	bne.n	800ae32 <WM_Exec+0x122>
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 800ad8e:	b14d      	cbz	r5, 800ada4 <WM_Exec+0x94>
 800ad90:	4b33      	ldr	r3, [pc, #204]	; (800ae60 <WM_Exec+0x150>)
 800ad92:	881d      	ldrh	r5, [r3, #0]
 800ad94:	b135      	cbz	r5, 800ada4 <WM_Exec+0x94>
 800ad96:	4b33      	ldr	r3, [pc, #204]	; (800ae64 <WM_Exec+0x154>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d04b      	beq.n	800ae36 <WM_Exec+0x126>
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4798      	blx	r3
 800ada2:	2501      	movs	r5, #1
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800adaa:	b913      	cbnz	r3, 800adb2 <WM_Exec+0xa2>
 800adac:	2d00      	cmp	r5, #0
 800adae:	d137      	bne.n	800ae20 <WM_Exec+0x110>
 800adb0:	e045      	b.n	800ae3e <WM_Exec+0x12e>
 800adb2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800ae60 <WM_Exec+0x150>
 800adb6:	f8b8 3000 	ldrh.w	r3, [r8]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0f6      	beq.n	800adac <WM_Exec+0x9c>
 800adbe:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800ae68 <WM_Exec+0x158>
 800adc2:	f8d9 4000 	ldr.w	r4, [r9]
 800adc6:	b90c      	cbnz	r4, 800adcc <WM_Exec+0xbc>
 800adc8:	4b21      	ldr	r3, [pc, #132]	; (800ae50 <WM_Exec+0x140>)
 800adca:	681c      	ldr	r4, [r3, #0]
 800adcc:	a802      	add	r0, sp, #8
 800adce:	f002 ff55 	bl	800dc7c <GUI_SaveContext_W>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 800add8:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800addc:	b914      	cbnz	r4, 800ade4 <WM_Exec+0xd4>
 800adde:	2400      	movs	r4, #0
 800ade0:	e00d      	b.n	800adfe <WM_Exec+0xee>
 800ade2:	b963      	cbnz	r3, 800adfe <WM_Exec+0xee>
 800ade4:	4620      	mov	r0, r4
 800ade6:	f7ff ff3d 	bl	800ac64 <WM__Paint>
 800adea:	4603      	mov	r3, r0
 800adec:	4620      	mov	r0, r4
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	f7fe f97c 	bl	80090ec <GUI_ALLOC_h2p>
 800adf4:	6944      	ldr	r4, [r0, #20]
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	2c00      	cmp	r4, #0
 800adfa:	d1f2      	bne.n	800ade2 <WM_Exec+0xd2>
 800adfc:	e7ef      	b.n	800adde <WM_Exec+0xce>
 800adfe:	4658      	mov	r0, fp
 800ae00:	f8c9 4000 	str.w	r4, [r9]
 800ae04:	f7fd fa9a 	bl	800833c <GUI_SetColor>
 800ae08:	4650      	mov	r0, sl
 800ae0a:	f7fd fa95 	bl	8008338 <GUI_SetBkColor>
 800ae0e:	a802      	add	r0, sp, #8
 800ae10:	f002 ff3e 	bl	800dc90 <GUI_RestoreContext>
 800ae14:	f8b8 3000 	ldrh.w	r3, [r8]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d0c7      	beq.n	800adac <WM_Exec+0x9c>
 800ae1c:	2601      	movs	r6, #1
 800ae1e:	e7c1      	b.n	800ada4 <WM_Exec+0x94>
 800ae20:	4b10      	ldr	r3, [pc, #64]	; (800ae64 <WM_Exec+0x154>)
 800ae22:	6818      	ldr	r0, [r3, #0]
 800ae24:	b110      	cbz	r0, 800ae2c <WM_Exec+0x11c>
 800ae26:	6843      	ldr	r3, [r0, #4]
 800ae28:	4798      	blx	r3
 800ae2a:	e008      	b.n	800ae3e <WM_Exec+0x12e>
 800ae2c:	f002 fbc0 	bl	800d5b0 <GUI__ManageCache>
 800ae30:	e005      	b.n	800ae3e <WM_Exec+0x12e>
 800ae32:	2601      	movs	r6, #1
 800ae34:	e774      	b.n	800ad20 <WM_Exec+0x10>
 800ae36:	2001      	movs	r0, #1
 800ae38:	f002 fbba 	bl	800d5b0 <GUI__ManageCache>
 800ae3c:	e7b1      	b.n	800ada2 <WM_Exec+0x92>
 800ae3e:	4630      	mov	r0, r6
 800ae40:	b01f      	add	sp, #124	; 0x7c
 800ae42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae46:	bf00      	nop
 800ae48:	2001b02c 	.word	0x2001b02c
 800ae4c:	2001945c 	.word	0x2001945c
 800ae50:	2001b03c 	.word	0x2001b03c
 800ae54:	2001b028 	.word	0x2001b028
 800ae58:	2001af24 	.word	0x2001af24
 800ae5c:	200001b0 	.word	0x200001b0
 800ae60:	2001b038 	.word	0x2001b038
 800ae64:	2001b058 	.word	0x2001b058
 800ae68:	20019478 	.word	0x20019478

0800ae6c <WM_Activate>:
 800ae6c:	4b02      	ldr	r3, [pc, #8]	; (800ae78 <WM_Activate+0xc>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800ae76:	4770      	bx	lr
 800ae78:	200001b0 	.word	0x200001b0

0800ae7c <WM_Deactivate>:
 800ae7c:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <WM_Deactivate+0x10>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800ae86:	f002 ba5d 	b.w	800d344 <LCD_SetClipRectMax>
 800ae8a:	bf00      	nop
 800ae8c:	200001b0 	.word	0x200001b0

0800ae90 <WM_DefaultProc>:
 800ae90:	b510      	push	{r4, lr}
 800ae92:	4604      	mov	r4, r0
 800ae94:	6840      	ldr	r0, [r0, #4]
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	68e1      	ldr	r1, [r4, #12]
 800ae9a:	2b17      	cmp	r3, #23
 800ae9c:	d00f      	beq.n	800aebe <WM_DefaultProc+0x2e>
 800ae9e:	dc06      	bgt.n	800aeae <WM_DefaultProc+0x1e>
 800aea0:	2b0e      	cmp	r3, #14
 800aea2:	d00e      	beq.n	800aec2 <WM_DefaultProc+0x32>
 800aea4:	2b14      	cmp	r3, #20
 800aea6:	d114      	bne.n	800aed2 <WM_DefaultProc+0x42>
 800aea8:	f003 f9a1 	bl	800e1ee <WM__GetClientRectEx>
 800aeac:	e011      	b.n	800aed2 <WM_DefaultProc+0x42>
 800aeae:	2b22      	cmp	r3, #34	; 0x22
 800aeb0:	d00c      	beq.n	800aecc <WM_DefaultProc+0x3c>
 800aeb2:	2b28      	cmp	r3, #40	; 0x28
 800aeb4:	d10d      	bne.n	800aed2 <WM_DefaultProc+0x42>
 800aeb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeba:	f7ff bbcc 	b.w	800a656 <WM_InvalidateWindow>
 800aebe:	60e0      	str	r0, [r4, #12]
 800aec0:	bd10      	pop	{r4, pc}
 800aec2:	4621      	mov	r1, r4
 800aec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aec8:	f003 b8ec 	b.w	800e0a4 <WM_SendToParent>
 800aecc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800aed0:	e000      	b.n	800aed4 <WM_DefaultProc+0x44>
 800aed2:	2300      	movs	r3, #0
 800aed4:	60e3      	str	r3, [r4, #12]
 800aed6:	bd10      	pop	{r4, pc}

0800aed8 <_cbBackWin>:
 800aed8:	6803      	ldr	r3, [r0, #0]
 800aeda:	2b0e      	cmp	r3, #14
 800aedc:	b510      	push	{r4, lr}
 800aede:	4604      	mov	r4, r0
 800aee0:	d002      	beq.n	800aee8 <_cbBackWin+0x10>
 800aee2:	2b0f      	cmp	r3, #15
 800aee4:	d009      	beq.n	800aefa <_cbBackWin+0x22>
 800aee6:	e020      	b.n	800af2a <_cbBackWin+0x52>
 800aee8:	68c3      	ldr	r3, [r0, #12]
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	2a01      	cmp	r2, #1
 800aeee:	d121      	bne.n	800af34 <_cbBackWin+0x5c>
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef6:	f7fd bab3 	b.w	8008460 <GUI_StoreKey>
 800aefa:	4a0f      	ldr	r2, [pc, #60]	; (800af38 <_cbBackWin+0x60>)
 800aefc:	6843      	ldr	r3, [r0, #4]
 800aefe:	6811      	ldr	r1, [r2, #0]
 800af00:	428b      	cmp	r3, r1
 800af02:	d006      	beq.n	800af12 <_cbBackWin+0x3a>
 800af04:	6852      	ldr	r2, [r2, #4]
 800af06:	4293      	cmp	r3, r2
 800af08:	bf14      	ite	ne
 800af0a:	f04f 33ff 	movne.w	r3, #4294967295
 800af0e:	2301      	moveq	r3, #1
 800af10:	e000      	b.n	800af14 <_cbBackWin+0x3c>
 800af12:	2300      	movs	r3, #0
 800af14:	4a09      	ldr	r2, [pc, #36]	; (800af3c <_cbBackWin+0x64>)
 800af16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800af1a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800af1e:	4298      	cmp	r0, r3
 800af20:	d003      	beq.n	800af2a <_cbBackWin+0x52>
 800af22:	f7fd fa09 	bl	8008338 <GUI_SetBkColor>
 800af26:	f7fd fcbb 	bl	80088a0 <GUI_Clear>
 800af2a:	4620      	mov	r0, r4
 800af2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af30:	f7ff bfae 	b.w	800ae90 <WM_DefaultProc>
 800af34:	bd10      	pop	{r4, pc}
 800af36:	bf00      	nop
 800af38:	2001b020 	.word	0x2001b020
 800af3c:	2001b04c 	.word	0x2001b04c

0800af40 <WM_Init>:
 800af40:	b530      	push	{r4, r5, lr}
 800af42:	4b2b      	ldr	r3, [pc, #172]	; (800aff0 <WM_Init+0xb0>)
 800af44:	7818      	ldrb	r0, [r3, #0]
 800af46:	b085      	sub	sp, #20
 800af48:	461d      	mov	r5, r3
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d14d      	bne.n	800afea <WM_Init+0xaa>
 800af4e:	4b29      	ldr	r3, [pc, #164]	; (800aff4 <WM_Init+0xb4>)
 800af50:	6018      	str	r0, [r3, #0]
 800af52:	4b29      	ldr	r3, [pc, #164]	; (800aff8 <WM_Init+0xb8>)
 800af54:	6018      	str	r0, [r3, #0]
 800af56:	4b29      	ldr	r3, [pc, #164]	; (800affc <WM_Init+0xbc>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6458      	str	r0, [r3, #68]	; 0x44
 800af5c:	4b28      	ldr	r3, [pc, #160]	; (800b000 <WM_Init+0xc0>)
 800af5e:	8018      	strh	r0, [r3, #0]
 800af60:	4b28      	ldr	r3, [pc, #160]	; (800b004 <WM_Init+0xc4>)
 800af62:	4604      	mov	r4, r0
 800af64:	8018      	strh	r0, [r3, #0]
 800af66:	4620      	mov	r0, r4
 800af68:	f7fd fb70 	bl	800864c <GUI_DEVICE__GetpDriver>
 800af6c:	b1c0      	cbz	r0, 800afa0 <WM_Init+0x60>
 800af6e:	f04f 32ff 	mov.w	r2, #4294967295
 800af72:	2302      	movs	r3, #2
 800af74:	e88d 000c 	stmia.w	sp, {r2, r3}
 800af78:	2000      	movs	r0, #0
 800af7a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800af7e:	4b22      	ldr	r3, [pc, #136]	; (800b008 <WM_Init+0xc8>)
 800af80:	9302      	str	r3, [sp, #8]
 800af82:	9003      	str	r0, [sp, #12]
 800af84:	4613      	mov	r3, r2
 800af86:	4601      	mov	r1, r0
 800af88:	f7ff fba6 	bl	800a6d8 <WM_CreateWindowAsChild>
 800af8c:	4b1f      	ldr	r3, [pc, #124]	; (800b00c <WM_Init+0xcc>)
 800af8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800af92:	4b1f      	ldr	r3, [pc, #124]	; (800b010 <WM_Init+0xd0>)
 800af94:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800af98:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800af9c:	f7ff fb5b 	bl	800a656 <WM_InvalidateWindow>
 800afa0:	3401      	adds	r4, #1
 800afa2:	2c02      	cmp	r4, #2
 800afa4:	d1df      	bne.n	800af66 <WM_Init+0x26>
 800afa6:	481b      	ldr	r0, [pc, #108]	; (800b014 <WM_Init+0xd4>)
 800afa8:	f7fe fea0 	bl	8009cec <WM__AddCriticalHandle>
 800afac:	481a      	ldr	r0, [pc, #104]	; (800b018 <WM_Init+0xd8>)
 800afae:	f7fe fe9d 	bl	8009cec <WM__AddCriticalHandle>
 800afb2:	481a      	ldr	r0, [pc, #104]	; (800b01c <WM_Init+0xdc>)
 800afb4:	f7fe fe9a 	bl	8009cec <WM__AddCriticalHandle>
 800afb8:	4819      	ldr	r0, [pc, #100]	; (800b020 <WM_Init+0xe0>)
 800afba:	f7fe fe97 	bl	8009cec <WM__AddCriticalHandle>
 800afbe:	4819      	ldr	r0, [pc, #100]	; (800b024 <WM_Init+0xe4>)
 800afc0:	f7fe fe94 	bl	8009cec <WM__AddCriticalHandle>
 800afc4:	4818      	ldr	r0, [pc, #96]	; (800b028 <WM_Init+0xe8>)
 800afc6:	f7fe fe91 	bl	8009cec <WM__AddCriticalHandle>
 800afca:	4b10      	ldr	r3, [pc, #64]	; (800b00c <WM_Init+0xcc>)
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	f7ff fb63 	bl	800a698 <WM_SelectWindow>
 800afd2:	f7ff ff4b 	bl	800ae6c <WM_Activate>
 800afd6:	2301      	movs	r3, #1
 800afd8:	702b      	strb	r3, [r5, #0]
 800afda:	4814      	ldr	r0, [pc, #80]	; (800b02c <WM_Init+0xec>)
 800afdc:	4b14      	ldr	r3, [pc, #80]	; (800b030 <WM_Init+0xf0>)
 800afde:	6003      	str	r3, [r0, #0]
 800afe0:	b005      	add	sp, #20
 800afe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afe6:	f7fd bc6b 	b.w	80088c0 <GUI__RegisterExit>
 800afea:	b005      	add	sp, #20
 800afec:	bd30      	pop	{r4, r5, pc}
 800afee:	bf00      	nop
 800aff0:	20019484 	.word	0x20019484
 800aff4:	2001b03c 	.word	0x2001b03c
 800aff8:	20019478 	.word	0x20019478
 800affc:	200001b0 	.word	0x200001b0
 800b000:	2001b038 	.word	0x2001b038
 800b004:	2001b018 	.word	0x2001b018
 800b008:	0800aed9 	.word	0x0800aed9
 800b00c:	2001b020 	.word	0x2001b020
 800b010:	2001b04c 	.word	0x2001b04c
 800b014:	2001b008 	.word	0x2001b008
 800b018:	2001aff8 	.word	0x2001aff8
 800b01c:	2001afe8 	.word	0x2001afe8
 800b020:	2001b010 	.word	0x2001b010
 800b024:	2001b000 	.word	0x2001b000
 800b028:	2001aff0 	.word	0x2001aff0
 800b02c:	2001947c 	.word	0x2001947c
 800b030:	08009d29 	.word	0x08009d29

0800b034 <_CreateStaticDevice>:
 800b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	b087      	sub	sp, #28
 800b03a:	4604      	mov	r4, r0
 800b03c:	f7fe f860 	bl	8009100 <GUI_ALLOC_LockH>
 800b040:	af06      	add	r7, sp, #24
 800b042:	f8b0 8000 	ldrh.w	r8, [r0]
 800b046:	8886      	ldrh	r6, [r0, #4]
 800b048:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800b04c:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 800b050:	f847 0d04 	str.w	r0, [r7, #-4]!
 800b054:	fa0f f888 	sxth.w	r8, r8
 800b058:	b236      	sxth	r6, r6
 800b05a:	ebc8 0606 	rsb	r6, r8, r6
 800b05e:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800b062:	3601      	adds	r6, #1
 800b064:	4638      	mov	r0, r7
 800b066:	fa0f f989 	sxth.w	r9, r9
 800b06a:	fa0f f58b 	sxth.w	r5, fp
 800b06e:	f7fe f855 	bl	800911c <GUI_ALLOC_UnlockH>
 800b072:	ebc9 0505 	rsb	r5, r9, r5
 800b076:	2e00      	cmp	r6, #0
 800b078:	f105 0501 	add.w	r5, r5, #1
 800b07c:	dd4d      	ble.n	800b11a <_CreateStaticDevice+0xe6>
 800b07e:	2d00      	cmp	r5, #0
 800b080:	dd4b      	ble.n	800b11a <_CreateStaticDevice+0xe6>
 800b082:	f1ba 0f00 	cmp.w	sl, #0
 800b086:	d04a      	beq.n	800b11e <_CreateStaticDevice+0xea>
 800b088:	4650      	mov	r0, sl
 800b08a:	f7fe f839 	bl	8009100 <GUI_ALLOC_LockH>
 800b08e:	ab06      	add	r3, sp, #24
 800b090:	8886      	ldrh	r6, [r0, #4]
 800b092:	f843 0d08 	str.w	r0, [r3, #-8]!
 800b096:	88c5      	ldrh	r5, [r0, #6]
 800b098:	b236      	sxth	r6, r6
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe f83e 	bl	800911c <GUI_ALLOC_UnlockH>
 800b0a0:	4546      	cmp	r6, r8
 800b0a2:	d102      	bne.n	800b0aa <_CreateStaticDevice+0x76>
 800b0a4:	b22d      	sxth	r5, r5
 800b0a6:	454d      	cmp	r5, r9
 800b0a8:	d032      	beq.n	800b110 <_CreateStaticDevice+0xdc>
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	4641      	mov	r1, r8
 800b0ae:	464a      	mov	r2, r9
 800b0b0:	f000 f886 	bl	800b1c0 <GUI_MEMDEV_SetOrg>
 800b0b4:	e02c      	b.n	800b110 <_CreateStaticDevice+0xdc>
 800b0b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b0b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0bc:	6283      	str	r3, [r0, #40]	; 0x28
 800b0be:	4638      	mov	r0, r7
 800b0c0:	f7fe f82c 	bl	800911c <GUI_ALLOC_UnlockH>
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	f001 fc99 	bl	800c9fc <GUI_MEMDEV_Select>
 800b0ca:	4607      	mov	r7, r0
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	f002 fd8d 	bl	800dbec <GUI__AlphaPreserveTrans>
 800b0d2:	4640      	mov	r0, r8
 800b0d4:	f000 f8b4 	bl	800b240 <GUI_MEMDEV_GetDataPtr>
 800b0d8:	4b2d      	ldr	r3, [pc, #180]	; (800b190 <_CreateStaticDevice+0x15c>)
 800b0da:	fb05 f206 	mul.w	r2, r5, r6
 800b0de:	7819      	ldrb	r1, [r3, #0]
 800b0e0:	4d2c      	ldr	r5, [pc, #176]	; (800b194 <_CreateStaticDevice+0x160>)
 800b0e2:	4e2d      	ldr	r6, [pc, #180]	; (800b198 <_CreateStaticDevice+0x164>)
 800b0e4:	0092      	lsls	r2, r2, #2
 800b0e6:	f7fc fd27 	bl	8007b38 <GUI__memset>
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f8d5 8000 	ldr.w	r8, [r5]
 800b0f0:	6034      	str	r4, [r6, #0]
 800b0f2:	f003 f86c 	bl	800e1ce <WM_GetWindowOrgX>
 800b0f6:	6028      	str	r0, [r5, #0]
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f7ff fd6b 	bl	800abd4 <WM__Paint1>
 800b0fe:	2000      	movs	r0, #0
 800b100:	f8c5 8000 	str.w	r8, [r5]
 800b104:	6030      	str	r0, [r6, #0]
 800b106:	f002 fd71 	bl	800dbec <GUI__AlphaPreserveTrans>
 800b10a:	4638      	mov	r0, r7
 800b10c:	f001 fc76 	bl	800c9fc <GUI_MEMDEV_Select>
 800b110:	4620      	mov	r0, r4
 800b112:	f7fd ffeb 	bl	80090ec <GUI_ALLOC_h2p>
 800b116:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b118:	e037      	b.n	800b18a <_CreateStaticDevice+0x156>
 800b11a:	2000      	movs	r0, #0
 800b11c:	e035      	b.n	800b18a <_CreateStaticDevice+0x156>
 800b11e:	f7fe fdd9 	bl	8009cd4 <WM_GetDesktopWindow>
 800b122:	4284      	cmp	r4, r0
 800b124:	d112      	bne.n	800b14c <_CreateStaticDevice+0x118>
 800b126:	f001 fd43 	bl	800cbb0 <LCD_GetXSize>
 800b12a:	4682      	mov	sl, r0
 800b12c:	f001 fd48 	bl	800cbc0 <LCD_GetYSize>
 800b130:	4556      	cmp	r6, sl
 800b132:	dc02      	bgt.n	800b13a <_CreateStaticDevice+0x106>
 800b134:	4285      	cmp	r5, r0
 800b136:	dd09      	ble.n	800b14c <_CreateStaticDevice+0x118>
 800b138:	e000      	b.n	800b13c <_CreateStaticDevice+0x108>
 800b13a:	4656      	mov	r6, sl
 800b13c:	4285      	cmp	r5, r0
 800b13e:	bfa8      	it	ge
 800b140:	4605      	movge	r5, r0
 800b142:	4631      	mov	r1, r6
 800b144:	4620      	mov	r0, r4
 800b146:	462a      	mov	r2, r5
 800b148:	f002 ff88 	bl	800e05c <WM_SetSize>
 800b14c:	4b13      	ldr	r3, [pc, #76]	; (800b19c <_CreateStaticDevice+0x168>)
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	f04f 0a01 	mov.w	sl, #1
 800b154:	4b12      	ldr	r3, [pc, #72]	; (800b1a0 <_CreateStaticDevice+0x16c>)
 800b156:	9302      	str	r3, [sp, #8]
 800b158:	4640      	mov	r0, r8
 800b15a:	4649      	mov	r1, r9
 800b15c:	4632      	mov	r2, r6
 800b15e:	462b      	mov	r3, r5
 800b160:	f8cd a000 	str.w	sl, [sp]
 800b164:	f001 fb54 	bl	800c810 <GUI_MEMDEV__CreateFixed>
 800b168:	4680      	mov	r8, r0
 800b16a:	4620      	mov	r0, r4
 800b16c:	f7fd ffc8 	bl	8009100 <GUI_ALLOC_LockH>
 800b170:	9005      	str	r0, [sp, #20]
 800b172:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800b176:	f1b8 0f00 	cmp.w	r8, #0
 800b17a:	d19c      	bne.n	800b0b6 <_CreateStaticDevice+0x82>
 800b17c:	4638      	mov	r0, r7
 800b17e:	f7fd ffcd 	bl	800911c <GUI_ALLOC_UnlockH>
 800b182:	4620      	mov	r0, r4
 800b184:	f7ff fd26 	bl	800abd4 <WM__Paint1>
 800b188:	4640      	mov	r0, r8
 800b18a:	b007      	add	sp, #28
 800b18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b190:	200001c0 	.word	0x200001c0
 800b194:	2001aef0 	.word	0x2001aef0
 800b198:	2001b064 	.word	0x2001b064
 800b19c:	08013514 	.word	0x08013514
 800b1a0:	0801555c 	.word	0x0801555c

0800b1a4 <GUI_MEMDEV_Paint1Static>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	2405      	movs	r4, #5
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	f7ff ff42 	bl	800b034 <_CreateStaticDevice>
 800b1b0:	b910      	cbnz	r0, 800b1b8 <GUI_MEMDEV_Paint1Static+0x14>
 800b1b2:	3c01      	subs	r4, #1
 800b1b4:	d1f9      	bne.n	800b1aa <GUI_MEMDEV_Paint1Static+0x6>
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1bc:	f003 bd36 	b.w	800ec2c <GUI_MEMDEV_Write>

0800b1c0 <GUI_MEMDEV_SetOrg>:
 800b1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1c2:	460d      	mov	r5, r1
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	b918      	cbnz	r0, 800b1d0 <GUI_MEMDEV_SetOrg+0x10>
 800b1c8:	4b11      	ldr	r3, [pc, #68]	; (800b210 <GUI_MEMDEV_SetOrg+0x50>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b1ce:	b1e8      	cbz	r0, 800b20c <GUI_MEMDEV_SetOrg+0x4c>
 800b1d0:	f7fd ff96 	bl	8009100 <GUI_ALLOC_LockH>
 800b1d4:	b2a4      	uxth	r4, r4
 800b1d6:	b2ad      	uxth	r5, r5
 800b1d8:	80c4      	strh	r4, [r0, #6]
 800b1da:	8085      	strh	r5, [r0, #4]
 800b1dc:	9000      	str	r0, [sp, #0]
 800b1de:	f002 f8b1 	bl	800d344 <LCD_SetClipRectMax>
 800b1e2:	9b00      	ldr	r3, [sp, #0]
 800b1e4:	6958      	ldr	r0, [r3, #20]
 800b1e6:	b170      	cbz	r0, 800b206 <GUI_MEMDEV_SetOrg+0x46>
 800b1e8:	f7fd ff8a 	bl	8009100 <GUI_ALLOC_LockH>
 800b1ec:	9b00      	ldr	r3, [sp, #0]
 800b1ee:	9001      	str	r0, [sp, #4]
 800b1f0:	891a      	ldrh	r2, [r3, #8]
 800b1f2:	895b      	ldrh	r3, [r3, #10]
 800b1f4:	8082      	strh	r2, [r0, #4]
 800b1f6:	80c3      	strh	r3, [r0, #6]
 800b1f8:	b112      	cbz	r2, 800b200 <GUI_MEMDEV_SetOrg+0x40>
 800b1fa:	b10b      	cbz	r3, 800b200 <GUI_MEMDEV_SetOrg+0x40>
 800b1fc:	8005      	strh	r5, [r0, #0]
 800b1fe:	8044      	strh	r4, [r0, #2]
 800b200:	a801      	add	r0, sp, #4
 800b202:	f7fd ff8b 	bl	800911c <GUI_ALLOC_UnlockH>
 800b206:	4668      	mov	r0, sp
 800b208:	f7fd ff88 	bl	800911c <GUI_ALLOC_UnlockH>
 800b20c:	b003      	add	sp, #12
 800b20e:	bd30      	pop	{r4, r5, pc}
 800b210:	200001b0 	.word	0x200001b0

0800b214 <GUI_MEMDEV_GetYSize>:
 800b214:	b513      	push	{r0, r1, r4, lr}
 800b216:	b920      	cbnz	r0, 800b222 <GUI_MEMDEV_GetYSize+0xe>
 800b218:	4b08      	ldr	r3, [pc, #32]	; (800b23c <GUI_MEMDEV_GetYSize+0x28>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b21e:	4604      	mov	r4, r0
 800b220:	b148      	cbz	r0, 800b236 <GUI_MEMDEV_GetYSize+0x22>
 800b222:	f7fd ff6d 	bl	8009100 <GUI_ALLOC_LockH>
 800b226:	ab02      	add	r3, sp, #8
 800b228:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800b22c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b230:	4618      	mov	r0, r3
 800b232:	f7fd ff73 	bl	800911c <GUI_ALLOC_UnlockH>
 800b236:	4620      	mov	r0, r4
 800b238:	b002      	add	sp, #8
 800b23a:	bd10      	pop	{r4, pc}
 800b23c:	200001b0 	.word	0x200001b0

0800b240 <GUI_MEMDEV_GetDataPtr>:
 800b240:	b513      	push	{r0, r1, r4, lr}
 800b242:	b150      	cbz	r0, 800b25a <GUI_MEMDEV_GetDataPtr+0x1a>
 800b244:	f7fd ff5c 	bl	8009100 <GUI_ALLOC_LockH>
 800b248:	4604      	mov	r4, r0
 800b24a:	a802      	add	r0, sp, #8
 800b24c:	f840 4d04 	str.w	r4, [r0, #-4]!
 800b250:	f7fd ff64 	bl	800911c <GUI_ALLOC_UnlockH>
 800b254:	f104 0018 	add.w	r0, r4, #24
 800b258:	e7ff      	b.n	800b25a <GUI_MEMDEV_GetDataPtr+0x1a>
 800b25a:	b002      	add	sp, #8
 800b25c:	bd10      	pop	{r4, pc}
	...

0800b260 <GUI_MEMDEV_Draw>:
 800b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	461e      	mov	r6, r3
 800b266:	b089      	sub	sp, #36	; 0x24
 800b268:	4b4e      	ldr	r3, [pc, #312]	; (800b3a4 <GUI_MEMDEV_Draw+0x144>)
 800b26a:	9204      	str	r2, [sp, #16]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	9103      	str	r1, [sp, #12]
 800b270:	7c54      	ldrb	r4, [r2, #17]
 800b272:	4a4d      	ldr	r2, [pc, #308]	; (800b3a8 <GUI_MEMDEV_Draw+0x148>)
 800b274:	5712      	ldrsb	r2, [r2, r4]
 800b276:	2a01      	cmp	r2, #1
 800b278:	4605      	mov	r5, r0
 800b27a:	469b      	mov	fp, r3
 800b27c:	4620      	mov	r0, r4
 800b27e:	dd06      	ble.n	800b28e <GUI_MEMDEV_Draw+0x2e>
 800b280:	f001 fc84 	bl	800cb8c <LCD_GetXSizeEx>
 800b284:	4607      	mov	r7, r0
 800b286:	4620      	mov	r0, r4
 800b288:	f001 fc83 	bl	800cb92 <LCD_GetYSizeEx>
 800b28c:	e005      	b.n	800b29a <GUI_MEMDEV_Draw+0x3a>
 800b28e:	f001 fc83 	bl	800cb98 <LCD_GetVXSizeEx>
 800b292:	4607      	mov	r7, r0
 800b294:	4620      	mov	r0, r4
 800b296:	f001 fc82 	bl	800cb9e <LCD_GetVYSizeEx>
 800b29a:	4604      	mov	r4, r0
 800b29c:	b325      	cbz	r5, 800b2e8 <GUI_MEMDEV_Draw+0x88>
 800b29e:	a806      	add	r0, sp, #24
 800b2a0:	a907      	add	r1, sp, #28
 800b2a2:	f002 fd69 	bl	800dd78 <GUI_GetOrg>
 800b2a6:	9b06      	ldr	r3, [sp, #24]
 800b2a8:	f9b5 a000 	ldrsh.w	sl, [r5]
 800b2ac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800b2b0:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800b2b4:	441f      	add	r7, r3
 800b2b6:	9b07      	ldr	r3, [sp, #28]
 800b2b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2bc:	3f01      	subs	r7, #1
 800b2be:	4297      	cmp	r7, r2
 800b2c0:	bfd4      	ite	le
 800b2c2:	ebca 0707 	rsble	r7, sl, r7
 800b2c6:	ebca 0702 	rsbgt	r7, sl, r2
 800b2ca:	441c      	add	r4, r3
 800b2cc:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800b2d0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800b2d4:	3c01      	subs	r4, #1
 800b2d6:	4294      	cmp	r4, r2
 800b2d8:	bfd4      	ite	le
 800b2da:	ebc8 0404 	rsble	r4, r8, r4
 800b2de:	ebc8 0402 	rsbgt	r4, r8, r2
 800b2e2:	3701      	adds	r7, #1
 800b2e4:	3401      	adds	r4, #1
 800b2e6:	e001      	b.n	800b2ec <GUI_MEMDEV_Draw+0x8c>
 800b2e8:	46a8      	mov	r8, r5
 800b2ea:	46aa      	mov	sl, r5
 800b2ec:	b906      	cbnz	r6, 800b2f0 <GUI_MEMDEV_Draw+0x90>
 800b2ee:	4266      	negs	r6, r4
 800b2f0:	2f00      	cmp	r7, #0
 800b2f2:	dd52      	ble.n	800b39a <GUI_MEMDEV_Draw+0x13a>
 800b2f4:	2c00      	cmp	r4, #0
 800b2f6:	dd50      	ble.n	800b39a <GUI_MEMDEV_Draw+0x13a>
 800b2f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	4650      	mov	r0, sl
 800b2fe:	4641      	mov	r1, r8
 800b300:	463a      	mov	r2, r7
 800b302:	4633      	mov	r3, r6
 800b304:	f001 fb3e 	bl	800c984 <GUI_MEMDEV_CreateEx>
 800b308:	4605      	mov	r5, r0
 800b30a:	b920      	cbnz	r0, 800b316 <GUI_MEMDEV_Draw+0xb6>
 800b30c:	9804      	ldr	r0, [sp, #16]
 800b30e:	9b03      	ldr	r3, [sp, #12]
 800b310:	4798      	blx	r3
 800b312:	2001      	movs	r0, #1
 800b314:	e042      	b.n	800b39c <GUI_MEMDEV_Draw+0x13c>
 800b316:	f7ff ff7d 	bl	800b214 <GUI_MEMDEV_GetYSize>
 800b31a:	42a0      	cmp	r0, r4
 800b31c:	4606      	mov	r6, r0
 800b31e:	d006      	beq.n	800b32e <GUI_MEMDEV_Draw+0xce>
 800b320:	f8db 3000 	ldr.w	r3, [fp]
 800b324:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b326:	b110      	cbz	r0, 800b32e <GUI_MEMDEV_Draw+0xce>
 800b328:	2132      	movs	r1, #50	; 0x32
 800b32a:	f002 fe05 	bl	800df38 <WM__SendMessageNoPara>
 800b32e:	4628      	mov	r0, r5
 800b330:	f001 fb64 	bl	800c9fc <GUI_MEMDEV_Select>
 800b334:	4273      	negs	r3, r6
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	46a1      	mov	r9, r4
 800b33a:	2700      	movs	r7, #0
 800b33c:	45b1      	cmp	r9, r6
 800b33e:	da03      	bge.n	800b348 <GUI_MEMDEV_Draw+0xe8>
 800b340:	4628      	mov	r0, r5
 800b342:	4649      	mov	r1, r9
 800b344:	f003 fd72 	bl	800ee2c <GUI_MEMDEV_ReduceYSize>
 800b348:	b147      	cbz	r7, 800b35c <GUI_MEMDEV_Draw+0xfc>
 800b34a:	4628      	mov	r0, r5
 800b34c:	4651      	mov	r1, sl
 800b34e:	eb07 0208 	add.w	r2, r7, r8
 800b352:	f7ff ff35 	bl	800b1c0 <GUI_MEMDEV_SetOrg>
 800b356:	4628      	mov	r0, r5
 800b358:	f003 fd7e 	bl	800ee58 <GUI_MEMDEV_Clear>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	9804      	ldr	r0, [sp, #16]
 800b360:	4798      	blx	r3
 800b362:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <GUI_MEMDEV_Draw+0x14c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	b10b      	cbz	r3, 800b36c <GUI_MEMDEV_Draw+0x10c>
 800b368:	2000      	movs	r0, #0
 800b36a:	4798      	blx	r3
 800b36c:	4628      	mov	r0, r5
 800b36e:	f001 fbbd 	bl	800caec <GUI_MEMDEV_CopyToLCD>
 800b372:	4437      	add	r7, r6
 800b374:	9b05      	ldr	r3, [sp, #20]
 800b376:	42a7      	cmp	r7, r4
 800b378:	4499      	add	r9, r3
 800b37a:	dbdf      	blt.n	800b33c <GUI_MEMDEV_Draw+0xdc>
 800b37c:	4628      	mov	r0, r5
 800b37e:	f001 fadf 	bl	800c940 <GUI_MEMDEV_Delete>
 800b382:	2000      	movs	r0, #0
 800b384:	f001 fb3a 	bl	800c9fc <GUI_MEMDEV_Select>
 800b388:	42a6      	cmp	r6, r4
 800b38a:	d006      	beq.n	800b39a <GUI_MEMDEV_Draw+0x13a>
 800b38c:	f8db 3000 	ldr.w	r3, [fp]
 800b390:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b392:	b110      	cbz	r0, 800b39a <GUI_MEMDEV_Draw+0x13a>
 800b394:	2133      	movs	r1, #51	; 0x33
 800b396:	f002 fdcf 	bl	800df38 <WM__SendMessageNoPara>
 800b39a:	2000      	movs	r0, #0
 800b39c:	b009      	add	sp, #36	; 0x24
 800b39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200001b0 	.word	0x200001b0
 800b3a8:	2001aee8 	.word	0x2001aee8
 800b3ac:	20019488 	.word	0x20019488

0800b3b0 <_GetDevData>:
 800b3b0:	4802      	ldr	r0, [pc, #8]	; (800b3bc <_GetDevData+0xc>)
 800b3b2:	2901      	cmp	r1, #1
 800b3b4:	bf18      	it	ne
 800b3b6:	2000      	movne	r0, #0
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	08013514 	.word	0x08013514

0800b3c0 <_GetDevFunc>:
 800b3c0:	4802      	ldr	r0, [pc, #8]	; (800b3cc <_GetDevFunc+0xc>)
 800b3c2:	2916      	cmp	r1, #22
 800b3c4:	bf18      	it	ne
 800b3c6:	2000      	movne	r0, #0
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	0800ea3d 	.word	0x0800ea3d

0800b3d0 <_GetDevProp>:
 800b3d0:	2908      	cmp	r1, #8
 800b3d2:	bf0c      	ite	eq
 800b3d4:	2020      	moveq	r0, #32
 800b3d6:	2000      	movne	r0, #0
 800b3d8:	4770      	bx	lr

0800b3da <_SetOrg>:
 800b3da:	b508      	push	{r3, lr}
 800b3dc:	6800      	ldr	r0, [r0, #0]
 800b3de:	68c3      	ldr	r3, [r0, #12]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	4798      	blx	r3
 800b3e4:	bd08      	pop	{r3, pc}

0800b3e6 <_GetRect>:
 800b3e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3e8:	6880      	ldr	r0, [r0, #8]
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	f7fd fe88 	bl	8009100 <GUI_ALLOC_LockH>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	a802      	add	r0, sp, #8
 800b3f4:	8899      	ldrh	r1, [r3, #4]
 800b3f6:	88da      	ldrh	r2, [r3, #6]
 800b3f8:	891d      	ldrh	r5, [r3, #8]
 800b3fa:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b3fe:	895b      	ldrh	r3, [r3, #10]
 800b400:	8021      	strh	r1, [r4, #0]
 800b402:	8062      	strh	r2, [r4, #2]
 800b404:	4429      	add	r1, r5
 800b406:	441a      	add	r2, r3
 800b408:	3901      	subs	r1, #1
 800b40a:	3a01      	subs	r2, #1
 800b40c:	80a1      	strh	r1, [r4, #4]
 800b40e:	80e2      	strh	r2, [r4, #6]
 800b410:	f7fd fe84 	bl	800911c <GUI_ALLOC_UnlockH>
 800b414:	b003      	add	sp, #12
 800b416:	bd30      	pop	{r4, r5, pc}

0800b418 <_XY2PTR>:
 800b418:	4b0e      	ldr	r3, [pc, #56]	; (800b454 <_XY2PTR+0x3c>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b41e:	4605      	mov	r5, r0
 800b420:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b422:	460e      	mov	r6, r1
 800b424:	f7fd fe6c 	bl	8009100 <GUI_ALLOC_LockH>
 800b428:	4603      	mov	r3, r0
 800b42a:	a802      	add	r0, sp, #8
 800b42c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800b430:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b434:	f103 0118 	add.w	r1, r3, #24
 800b438:	1b36      	subs	r6, r6, r4
 800b43a:	68dc      	ldr	r4, [r3, #12]
 800b43c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b440:	fb04 1406 	mla	r4, r4, r6, r1
 800b444:	1aed      	subs	r5, r5, r3
 800b446:	f7fd fe69 	bl	800911c <GUI_ALLOC_UnlockH>
 800b44a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b44e:	4620      	mov	r0, r4
 800b450:	b002      	add	sp, #8
 800b452:	bd70      	pop	{r4, r5, r6, pc}
 800b454:	200001b0 	.word	0x200001b0

0800b458 <_GetPixelIndex>:
 800b458:	b508      	push	{r3, lr}
 800b45a:	4608      	mov	r0, r1
 800b45c:	4611      	mov	r1, r2
 800b45e:	f7ff ffdb 	bl	800b418 <_XY2PTR>
 800b462:	6800      	ldr	r0, [r0, #0]
 800b464:	bd08      	pop	{r3, pc}
	...

0800b468 <_XorPixel>:
 800b468:	4b15      	ldr	r3, [pc, #84]	; (800b4c0 <_XorPixel+0x58>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b46e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b470:	4615      	mov	r5, r2
 800b472:	460e      	mov	r6, r1
 800b474:	f7fd fe44 	bl	8009100 <GUI_ALLOC_LockH>
 800b478:	4629      	mov	r1, r5
 800b47a:	9000      	str	r0, [sp, #0]
 800b47c:	4630      	mov	r0, r6
 800b47e:	f7ff ffcb 	bl	800b418 <_XY2PTR>
 800b482:	9b00      	ldr	r3, [sp, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	4604      	mov	r4, r0
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	4798      	blx	r3
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	4058      	eors	r0, r3
 800b492:	9b00      	ldr	r3, [sp, #0]
 800b494:	6020      	str	r0, [r4, #0]
 800b496:	6958      	ldr	r0, [r3, #20]
 800b498:	b160      	cbz	r0, 800b4b4 <_XorPixel+0x4c>
 800b49a:	f7fd fe31 	bl	8009100 <GUI_ALLOC_LockH>
 800b49e:	ac02      	add	r4, sp, #8
 800b4a0:	6883      	ldr	r3, [r0, #8]
 800b4a2:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4631      	mov	r1, r6
 800b4aa:	462a      	mov	r2, r5
 800b4ac:	4798      	blx	r3
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7fd fe34 	bl	800911c <GUI_ALLOC_UnlockH>
 800b4b4:	4668      	mov	r0, sp
 800b4b6:	f7fd fe31 	bl	800911c <GUI_ALLOC_UnlockH>
 800b4ba:	b002      	add	sp, #8
 800b4bc:	bd70      	pop	{r4, r5, r6, pc}
 800b4be:	bf00      	nop
 800b4c0:	200001b0 	.word	0x200001b0

0800b4c4 <_SetPixelIndex>:
 800b4c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4c6:	461c      	mov	r4, r3
 800b4c8:	4b10      	ldr	r3, [pc, #64]	; (800b50c <_SetPixelIndex+0x48>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b4ce:	460e      	mov	r6, r1
 800b4d0:	4615      	mov	r5, r2
 800b4d2:	f7fd fe15 	bl	8009100 <GUI_ALLOC_LockH>
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	9000      	str	r0, [sp, #0]
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f7ff ff9c 	bl	800b418 <_XY2PTR>
 800b4e0:	9b00      	ldr	r3, [sp, #0]
 800b4e2:	6004      	str	r4, [r0, #0]
 800b4e4:	6958      	ldr	r0, [r3, #20]
 800b4e6:	b160      	cbz	r0, 800b502 <_SetPixelIndex+0x3e>
 800b4e8:	f7fd fe0a 	bl	8009100 <GUI_ALLOC_LockH>
 800b4ec:	ac02      	add	r4, sp, #8
 800b4ee:	6883      	ldr	r3, [r0, #8]
 800b4f0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4631      	mov	r1, r6
 800b4f8:	462a      	mov	r2, r5
 800b4fa:	4798      	blx	r3
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f7fd fe0d 	bl	800911c <GUI_ALLOC_UnlockH>
 800b502:	4668      	mov	r0, sp
 800b504:	f7fd fe0a 	bl	800911c <GUI_ALLOC_UnlockH>
 800b508:	b002      	add	sp, #8
 800b50a:	bd70      	pop	{r4, r5, r6, pc}
 800b50c:	200001b0 	.word	0x200001b0

0800b510 <_DrawVLine>:
 800b510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b514:	4d2c      	ldr	r5, [pc, #176]	; (800b5c8 <_DrawVLine+0xb8>)
 800b516:	461e      	mov	r6, r3
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b51c:	460f      	mov	r7, r1
 800b51e:	4614      	mov	r4, r2
 800b520:	f7fd fdee 	bl	8009100 <GUI_ALLOC_LockH>
 800b524:	9000      	str	r0, [sp, #0]
 800b526:	6940      	ldr	r0, [r0, #20]
 800b528:	46a9      	mov	r9, r5
 800b52a:	b108      	cbz	r0, 800b530 <_DrawVLine+0x20>
 800b52c:	f7fd fde8 	bl	8009100 <GUI_ALLOC_LockH>
 800b530:	9001      	str	r0, [sp, #4]
 800b532:	4621      	mov	r1, r4
 800b534:	4638      	mov	r0, r7
 800b536:	f7ff ff6f 	bl	800b418 <_XY2PTR>
 800b53a:	f8d9 2000 	ldr.w	r2, [r9]
 800b53e:	9b00      	ldr	r3, [sp, #0]
 800b540:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b542:	7c12      	ldrb	r2, [r2, #16]
 800b544:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b548:	f8d1 9000 	ldr.w	r9, [r1]
 800b54c:	07d2      	lsls	r2, r2, #31
 800b54e:	4605      	mov	r5, r0
 800b550:	d51f      	bpl.n	800b592 <_DrawVLine+0x82>
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	4798      	blx	r3
 800b55a:	4680      	mov	r8, r0
 800b55c:	9801      	ldr	r0, [sp, #4]
 800b55e:	b128      	cbz	r0, 800b56c <_DrawVLine+0x5c>
 800b560:	6882      	ldr	r2, [r0, #8]
 800b562:	4639      	mov	r1, r7
 800b564:	f8d2 c000 	ldr.w	ip, [r2]
 800b568:	4622      	mov	r2, r4
 800b56a:	47e0      	blx	ip
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	ea83 0308 	eor.w	r3, r3, r8
 800b572:	602b      	str	r3, [r5, #0]
 800b574:	9b00      	ldr	r3, [sp, #0]
 800b576:	3401      	adds	r4, #1
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	42b4      	cmp	r4, r6
 800b57c:	441d      	add	r5, r3
 800b57e:	dded      	ble.n	800b55c <_DrawVLine+0x4c>
 800b580:	4668      	mov	r0, sp
 800b582:	f7fd fdcb 	bl	800911c <GUI_ALLOC_UnlockH>
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	b1d3      	cbz	r3, 800b5c0 <_DrawVLine+0xb0>
 800b58a:	a801      	add	r0, sp, #4
 800b58c:	f7fd fdc6 	bl	800911c <GUI_ALLOC_UnlockH>
 800b590:	e016      	b.n	800b5c0 <_DrawVLine+0xb0>
 800b592:	9b01      	ldr	r3, [sp, #4]
 800b594:	b163      	cbz	r3, 800b5b0 <_DrawVLine+0xa0>
 800b596:	9801      	ldr	r0, [sp, #4]
 800b598:	6883      	ldr	r3, [r0, #8]
 800b59a:	4622      	mov	r2, r4
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4639      	mov	r1, r7
 800b5a0:	3401      	adds	r4, #1
 800b5a2:	4798      	blx	r3
 800b5a4:	42b4      	cmp	r4, r6
 800b5a6:	f8c5 9000 	str.w	r9, [r5]
 800b5aa:	4445      	add	r5, r8
 800b5ac:	ddf3      	ble.n	800b596 <_DrawVLine+0x86>
 800b5ae:	e7e7      	b.n	800b580 <_DrawVLine+0x70>
 800b5b0:	1b34      	subs	r4, r6, r4
 800b5b2:	3401      	adds	r4, #1
 800b5b4:	3c01      	subs	r4, #1
 800b5b6:	f8c5 9000 	str.w	r9, [r5]
 800b5ba:	4445      	add	r5, r8
 800b5bc:	d1fa      	bne.n	800b5b4 <_DrawVLine+0xa4>
 800b5be:	e7df      	b.n	800b580 <_DrawVLine+0x70>
 800b5c0:	b003      	add	sp, #12
 800b5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5c6:	bf00      	nop
 800b5c8:	200001b0 	.word	0x200001b0

0800b5cc <_FillRect>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b680 <_FillRect+0xb4>
 800b5d4:	4614      	mov	r4, r2
 800b5d6:	f8db 2000 	ldr.w	r2, [fp]
 800b5da:	b085      	sub	sp, #20
 800b5dc:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800b5de:	460f      	mov	r7, r1
 800b5e0:	461d      	mov	r5, r3
 800b5e2:	f7fd fd8d 	bl	8009100 <GUI_ALLOC_LockH>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	9002      	str	r0, [sp, #8]
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	f7ff ff14 	bl	800b418 <_XY2PTR>
 800b5f0:	9a02      	ldr	r2, [sp, #8]
 800b5f2:	f8db 3000 	ldr.w	r3, [fp]
 800b5f6:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800b5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fc:	4606      	mov	r6, r0
 800b5fe:	6950      	ldr	r0, [r2, #20]
 800b600:	f8d3 a000 	ldr.w	sl, [r3]
 800b604:	1bed      	subs	r5, r5, r7
 800b606:	3501      	adds	r5, #1
 800b608:	b338      	cbz	r0, 800b65a <_FillRect+0x8e>
 800b60a:	f7fd fd79 	bl	8009100 <GUI_ALLOC_LockH>
 800b60e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b610:	f10d 0810 	add.w	r8, sp, #16
 800b614:	1b13      	subs	r3, r2, r4
 800b616:	f848 0d04 	str.w	r0, [r8, #-4]!
 800b61a:	3301      	adds	r3, #1
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	4639      	mov	r1, r7
 800b620:	4622      	mov	r2, r4
 800b622:	462b      	mov	r3, r5
 800b624:	f003 fbec 	bl	800ee00 <GUI_USAGE_AddRect>
 800b628:	4640      	mov	r0, r8
 800b62a:	f7fd fd77 	bl	800911c <GUI_ALLOC_UnlockH>
 800b62e:	e014      	b.n	800b65a <_FillRect+0x8e>
 800b630:	f8db 3000 	ldr.w	r3, [fp]
 800b634:	7c1b      	ldrb	r3, [r3, #16]
 800b636:	07db      	lsls	r3, r3, #31
 800b638:	d513      	bpl.n	800b662 <_FillRect+0x96>
 800b63a:	9b02      	ldr	r3, [sp, #8]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	4798      	blx	r3
 800b644:	4632      	mov	r2, r6
 800b646:	462b      	mov	r3, r5
 800b648:	6811      	ldr	r1, [r2, #0]
 800b64a:	3b01      	subs	r3, #1
 800b64c:	ea81 0100 	eor.w	r1, r1, r0
 800b650:	f842 1b04 	str.w	r1, [r2], #4
 800b654:	d1f8      	bne.n	800b648 <_FillRect+0x7c>
 800b656:	444e      	add	r6, r9
 800b658:	3401      	adds	r4, #1
 800b65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b65c:	429c      	cmp	r4, r3
 800b65e:	dde7      	ble.n	800b630 <_FillRect+0x64>
 800b660:	e008      	b.n	800b674 <_FillRect+0xa8>
 800b662:	2d00      	cmp	r5, #0
 800b664:	ddf7      	ble.n	800b656 <_FillRect+0x8a>
 800b666:	462b      	mov	r3, r5
 800b668:	4632      	mov	r2, r6
 800b66a:	3b01      	subs	r3, #1
 800b66c:	f842 ab04 	str.w	sl, [r2], #4
 800b670:	d1fb      	bne.n	800b66a <_FillRect+0x9e>
 800b672:	e7f0      	b.n	800b656 <_FillRect+0x8a>
 800b674:	a802      	add	r0, sp, #8
 800b676:	f7fd fd51 	bl	800911c <GUI_ALLOC_UnlockH>
 800b67a:	b005      	add	sp, #20
 800b67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b680:	200001b0 	.word	0x200001b0

0800b684 <_DrawHLine>:
 800b684:	b507      	push	{r0, r1, r2, lr}
 800b686:	9200      	str	r2, [sp, #0]
 800b688:	f7ff ffa0 	bl	800b5cc <_FillRect>
 800b68c:	b003      	add	sp, #12
 800b68e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b694 <_DrawBitmap>:
 800b694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b698:	4c9d      	ldr	r4, [pc, #628]	; (800b910 <_DrawBitmap+0x27c>)
 800b69a:	469a      	mov	sl, r3
 800b69c:	6823      	ldr	r3, [r4, #0]
 800b69e:	b091      	sub	sp, #68	; 0x44
 800b6a0:	4680      	mov	r8, r0
 800b6a2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b6a4:	9207      	str	r2, [sp, #28]
 800b6a6:	460e      	mov	r6, r1
 800b6a8:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800b6ac:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	f000 8387 	beq.w	800bdc2 <_DrawBitmap+0x72e>
 800b6b4:	f7fd fd24 	bl	8009100 <GUI_ALLOC_LockH>
 800b6b8:	900e      	str	r0, [sp, #56]	; 0x38
 800b6ba:	6940      	ldr	r0, [r0, #20]
 800b6bc:	b108      	cbz	r0, 800b6c2 <_DrawBitmap+0x2e>
 800b6be:	f7fd fd1f 	bl	8009100 <GUI_ALLOC_LockH>
 800b6c2:	900f      	str	r0, [sp, #60]	; 0x3c
 800b6c4:	a810      	add	r0, sp, #64	; 0x40
 800b6c6:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	930a      	str	r3, [sp, #40]	; 0x28
 800b6ce:	f7fd fd25 	bl	800911c <GUI_ALLOC_UnlockH>
 800b6d2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b6d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b6d6:	4437      	add	r7, r6
 800b6d8:	9704      	str	r7, [sp, #16]
 800b6da:	b150      	cbz	r0, 800b6f2 <_DrawBitmap+0x5e>
 800b6dc:	6823      	ldr	r3, [r4, #0]
 800b6de:	7c1b      	ldrb	r3, [r3, #16]
 800b6e0:	079c      	lsls	r4, r3, #30
 800b6e2:	d406      	bmi.n	800b6f2 <_DrawBitmap+0x5e>
 800b6e4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b6e6:	9700      	str	r7, [sp, #0]
 800b6e8:	9904      	ldr	r1, [sp, #16]
 800b6ea:	9a07      	ldr	r2, [sp, #28]
 800b6ec:	4653      	mov	r3, sl
 800b6ee:	f003 fb87 	bl	800ee00 <GUI_USAGE_AddRect>
 800b6f2:	9804      	ldr	r0, [sp, #16]
 800b6f4:	9907      	ldr	r1, [sp, #28]
 800b6f6:	f7ff fe8f 	bl	800b418 <_XY2PTR>
 800b6fa:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b6fc:	2f17      	cmp	r7, #23
 800b6fe:	4606      	mov	r6, r0
 800b700:	dd64      	ble.n	800b7cc <_DrawBitmap+0x138>
 800b702:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800b706:	9706      	str	r7, [sp, #24]
 800b708:	f04f 0900 	mov.w	r9, #0
 800b70c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b70e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b710:	45b9      	cmp	r9, r7
 800b712:	da57      	bge.n	800b7c4 <_DrawBitmap+0x130>
 800b714:	b130      	cbz	r0, 800b724 <_DrawBitmap+0x90>
 800b716:	6883      	ldr	r3, [r0, #8]
 800b718:	9a07      	ldr	r2, [sp, #28]
 800b71a:	685c      	ldr	r4, [r3, #4]
 800b71c:	9904      	ldr	r1, [sp, #16]
 800b71e:	444a      	add	r2, r9
 800b720:	4653      	mov	r3, sl
 800b722:	47a0      	blx	r4
 800b724:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b728:	68d8      	ldr	r0, [r3, #12]
 800b72a:	b128      	cbz	r0, 800b738 <_DrawBitmap+0xa4>
 800b72c:	4630      	mov	r0, r6
 800b72e:	4659      	mov	r1, fp
 800b730:	9a06      	ldr	r2, [sp, #24]
 800b732:	f004 fd42 	bl	80101ba <memcpy>
 800b736:	e03e      	b.n	800b7b6 <_DrawBitmap+0x122>
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	4798      	blx	r3
 800b73c:	0e00      	lsrs	r0, r0, #24
 800b73e:	9005      	str	r0, [sp, #20]
 800b740:	4635      	mov	r5, r6
 800b742:	4657      	mov	r7, sl
 800b744:	465c      	mov	r4, fp
 800b746:	463b      	mov	r3, r7
 800b748:	4622      	mov	r2, r4
 800b74a:	f04f 0c00 	mov.w	ip, #0
 800b74e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b752:	9805      	ldr	r0, [sp, #20]
 800b754:	0e09      	lsrs	r1, r1, #24
 800b756:	4281      	cmp	r1, r0
 800b758:	9805      	ldr	r0, [sp, #20]
 800b75a:	bf08      	it	eq
 800b75c:	f10c 0c01 	addeq.w	ip, ip, #1
 800b760:	4281      	cmp	r1, r0
 800b762:	f103 33ff 	add.w	r3, r3, #4294967295
 800b766:	d014      	beq.n	800b792 <_DrawBitmap+0xfe>
 800b768:	f1bc 0f00 	cmp.w	ip, #0
 800b76c:	d014      	beq.n	800b798 <_DrawBitmap+0x104>
 800b76e:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800b772:	4628      	mov	r0, r5
 800b774:	4621      	mov	r1, r4
 800b776:	461a      	mov	r2, r3
 800b778:	9303      	str	r3, [sp, #12]
 800b77a:	f8cd c008 	str.w	ip, [sp, #8]
 800b77e:	f004 fd1c 	bl	80101ba <memcpy>
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b788:	441d      	add	r5, r3
 800b78a:	441c      	add	r4, r3
 800b78c:	ebcc 0707 	rsb	r7, ip, r7
 800b790:	e00f      	b.n	800b7b2 <_DrawBitmap+0x11e>
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1db      	bne.n	800b74e <_DrawBitmap+0xba>
 800b796:	e7e7      	b.n	800b768 <_DrawBitmap+0xd4>
 800b798:	6820      	ldr	r0, [r4, #0]
 800b79a:	0e02      	lsrs	r2, r0, #24
 800b79c:	2aff      	cmp	r2, #255	; 0xff
 800b79e:	d005      	beq.n	800b7ac <_DrawBitmap+0x118>
 800b7a0:	43d2      	mvns	r2, r2
 800b7a2:	6829      	ldr	r1, [r5, #0]
 800b7a4:	b2d2      	uxtb	r2, r2
 800b7a6:	f001 ff5b 	bl	800d660 <GUI__MixColors>
 800b7aa:	6028      	str	r0, [r5, #0]
 800b7ac:	3504      	adds	r5, #4
 800b7ae:	3404      	adds	r4, #4
 800b7b0:	3f01      	subs	r7, #1
 800b7b2:	2f00      	cmp	r7, #0
 800b7b4:	d1c7      	bne.n	800b746 <_DrawBitmap+0xb2>
 800b7b6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b7b8:	44bb      	add	fp, r7
 800b7ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b7bc:	f109 0901 	add.w	r9, r9, #1
 800b7c0:	443e      	add	r6, r7
 800b7c2:	e7a3      	b.n	800b70c <_DrawBitmap+0x78>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	f040 82f9 	bne.w	800bdbc <_DrawBitmap+0x728>
 800b7ca:	e2fa      	b.n	800bdc2 <_DrawBitmap+0x72e>
 800b7cc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b7ce:	2f10      	cmp	r7, #16
 800b7d0:	d137      	bne.n	800b842 <_DrawBitmap+0x1ae>
 800b7d2:	1f06      	subs	r6, r0, #4
 800b7d4:	2500      	movs	r5, #0
 800b7d6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b7d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b7da:	42bd      	cmp	r5, r7
 800b7dc:	f280 80a0 	bge.w	800b920 <_DrawBitmap+0x28c>
 800b7e0:	9f07      	ldr	r7, [sp, #28]
 800b7e2:	442f      	add	r7, r5
 800b7e4:	b13c      	cbz	r4, 800b7f6 <_DrawBitmap+0x162>
 800b7e6:	68a3      	ldr	r3, [r4, #8]
 800b7e8:	9904      	ldr	r1, [sp, #16]
 800b7ea:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	463a      	mov	r2, r7
 800b7f2:	4653      	mov	r3, sl
 800b7f4:	47e0      	blx	ip
 800b7f6:	f1ab 0302 	sub.w	r3, fp, #2
 800b7fa:	9306      	str	r3, [sp, #24]
 800b7fc:	9605      	str	r6, [sp, #20]
 800b7fe:	46d1      	mov	r9, sl
 800b800:	9904      	ldr	r1, [sp, #16]
 800b802:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b806:	9a06      	ldr	r2, [sp, #24]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800b80e:	9206      	str	r2, [sp, #24]
 800b810:	4451      	add	r1, sl
 800b812:	ebc9 0101 	rsb	r1, r9, r1
 800b816:	9103      	str	r1, [sp, #12]
 800b818:	4798      	blx	r3
 800b81a:	9b05      	ldr	r3, [sp, #20]
 800b81c:	9903      	ldr	r1, [sp, #12]
 800b81e:	f843 0f04 	str.w	r0, [r3, #4]!
 800b822:	9305      	str	r3, [sp, #20]
 800b824:	b124      	cbz	r4, 800b830 <_DrawBitmap+0x19c>
 800b826:	68a3      	ldr	r3, [r4, #8]
 800b828:	4620      	mov	r0, r4
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	463a      	mov	r2, r7
 800b82e:	4798      	blx	r3
 800b830:	f1b9 0901 	subs.w	r9, r9, #1
 800b834:	d1e4      	bne.n	800b800 <_DrawBitmap+0x16c>
 800b836:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b838:	44bb      	add	fp, r7
 800b83a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b83c:	3501      	adds	r5, #1
 800b83e:	443e      	add	r6, r7
 800b840:	e7c9      	b.n	800b7d6 <_DrawBitmap+0x142>
 800b842:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b844:	2f08      	cmp	r7, #8
 800b846:	f100 0604 	add.w	r6, r0, #4
 800b84a:	d16d      	bne.n	800b928 <_DrawBitmap+0x294>
 800b84c:	9f07      	ldr	r7, [sp, #28]
 800b84e:	9907      	ldr	r1, [sp, #28]
 800b850:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b852:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b854:	1a7b      	subs	r3, r7, r1
 800b856:	4293      	cmp	r3, r2
 800b858:	f1a6 0004 	sub.w	r0, r6, #4
 800b85c:	da60      	bge.n	800b920 <_DrawBitmap+0x28c>
 800b85e:	4b2c      	ldr	r3, [pc, #176]	; (800b910 <_DrawBitmap+0x27c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	7c1b      	ldrb	r3, [r3, #16]
 800b864:	b36d      	cbz	r5, 800b8c2 <_DrawBitmap+0x22e>
 800b866:	f013 0303 	ands.w	r3, r3, #3
 800b86a:	d005      	beq.n	800b878 <_DrawBitmap+0x1e4>
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d151      	bne.n	800b914 <_DrawBitmap+0x280>
 800b870:	46b1      	mov	r9, r6
 800b872:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b876:	e01c      	b.n	800b8b2 <_DrawBitmap+0x21e>
 800b878:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800b87c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b880:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800b884:	3301      	adds	r3, #1
 800b886:	4553      	cmp	r3, sl
 800b888:	d1f6      	bne.n	800b878 <_DrawBitmap+0x1e4>
 800b88a:	e043      	b.n	800b914 <_DrawBitmap+0x280>
 800b88c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b890:	f849 3c04 	str.w	r3, [r9, #-4]
 800b894:	b12c      	cbz	r4, 800b8a2 <_DrawBitmap+0x20e>
 800b896:	68a3      	ldr	r3, [r4, #8]
 800b898:	4620      	mov	r0, r4
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4641      	mov	r1, r8
 800b89e:	463a      	mov	r2, r7
 800b8a0:	4798      	blx	r3
 800b8a2:	9b04      	ldr	r3, [sp, #16]
 800b8a4:	f108 0801 	add.w	r8, r8, #1
 800b8a8:	4453      	add	r3, sl
 800b8aa:	4543      	cmp	r3, r8
 800b8ac:	f109 0904 	add.w	r9, r9, #4
 800b8b0:	d030      	beq.n	800b914 <_DrawBitmap+0x280>
 800b8b2:	9804      	ldr	r0, [sp, #16]
 800b8b4:	ebc0 030b 	rsb	r3, r0, fp
 800b8b8:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d0f0      	beq.n	800b8a2 <_DrawBitmap+0x20e>
 800b8c0:	e7e4      	b.n	800b88c <_DrawBitmap+0x1f8>
 800b8c2:	f013 0303 	ands.w	r3, r3, #3
 800b8c6:	d005      	beq.n	800b8d4 <_DrawBitmap+0x240>
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d123      	bne.n	800b914 <_DrawBitmap+0x280>
 800b8cc:	46b1      	mov	r9, r6
 800b8ce:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b8d2:	e015      	b.n	800b900 <_DrawBitmap+0x26c>
 800b8d4:	4659      	mov	r1, fp
 800b8d6:	4652      	mov	r2, sl
 800b8d8:	f004 fc6f 	bl	80101ba <memcpy>
 800b8dc:	e01a      	b.n	800b914 <_DrawBitmap+0x280>
 800b8de:	f849 3c04 	str.w	r3, [r9, #-4]
 800b8e2:	b12c      	cbz	r4, 800b8f0 <_DrawBitmap+0x25c>
 800b8e4:	68a3      	ldr	r3, [r4, #8]
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4641      	mov	r1, r8
 800b8ec:	463a      	mov	r2, r7
 800b8ee:	4798      	blx	r3
 800b8f0:	9b04      	ldr	r3, [sp, #16]
 800b8f2:	f108 0801 	add.w	r8, r8, #1
 800b8f6:	4453      	add	r3, sl
 800b8f8:	4543      	cmp	r3, r8
 800b8fa:	f109 0904 	add.w	r9, r9, #4
 800b8fe:	d009      	beq.n	800b914 <_DrawBitmap+0x280>
 800b900:	9904      	ldr	r1, [sp, #16]
 800b902:	ebc1 030b 	rsb	r3, r1, fp
 800b906:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d0f0      	beq.n	800b8f0 <_DrawBitmap+0x25c>
 800b90e:	e7e6      	b.n	800b8de <_DrawBitmap+0x24a>
 800b910:	200001b0 	.word	0x200001b0
 800b914:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b918:	4493      	add	fp, r2
 800b91a:	3701      	adds	r7, #1
 800b91c:	441e      	add	r6, r3
 800b91e:	e796      	b.n	800b84e <_DrawBitmap+0x1ba>
 800b920:	2c00      	cmp	r4, #0
 800b922:	f040 824b 	bne.w	800bdbc <_DrawBitmap+0x728>
 800b926:	e24c      	b.n	800bdc2 <_DrawBitmap+0x72e>
 800b928:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b92a:	4bb2      	ldr	r3, [pc, #712]	; (800bbf4 <_DrawBitmap+0x560>)
 800b92c:	9609      	str	r6, [sp, #36]	; 0x24
 800b92e:	007f      	lsls	r7, r7, #1
 800b930:	970c      	str	r7, [sp, #48]	; 0x30
 800b932:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b934:	00bf      	lsls	r7, r7, #2
 800b936:	970d      	str	r7, [sp, #52]	; 0x34
 800b938:	9f07      	ldr	r7, [sp, #28]
 800b93a:	9705      	str	r7, [sp, #20]
 800b93c:	2d00      	cmp	r5, #0
 800b93e:	bf08      	it	eq
 800b940:	461d      	moveq	r5, r3
 800b942:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b944:	9807      	ldr	r0, [sp, #28]
 800b946:	1f3c      	subs	r4, r7, #4
 800b948:	9f05      	ldr	r7, [sp, #20]
 800b94a:	1a3b      	subs	r3, r7, r0
 800b94c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b94e:	42bb      	cmp	r3, r7
 800b950:	f280 8232 	bge.w	800bdb8 <_DrawBitmap+0x724>
 800b954:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b956:	2f02      	cmp	r7, #2
 800b958:	f000 80ad 	beq.w	800bab6 <_DrawBitmap+0x422>
 800b95c:	2f04      	cmp	r7, #4
 800b95e:	f000 814f 	beq.w	800bc00 <_DrawBitmap+0x56c>
 800b962:	2f01      	cmp	r7, #1
 800b964:	f040 821e 	bne.w	800bda4 <_DrawBitmap+0x710>
 800b968:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800bbfc <_DrawBitmap+0x568>
 800b96c:	f8d9 3000 	ldr.w	r3, [r9]
 800b970:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b972:	f7fd fbc5 	bl	8009100 <GUI_ALLOC_LockH>
 800b976:	f89b 3000 	ldrb.w	r3, [fp]
 800b97a:	4a9f      	ldr	r2, [pc, #636]	; (800bbf8 <_DrawBitmap+0x564>)
 800b97c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b97e:	5cd6      	ldrb	r6, [r2, r3]
 800b980:	f8d9 3000 	ldr.w	r3, [r9]
 800b984:	900e      	str	r0, [sp, #56]	; 0x38
 800b986:	7c1b      	ldrb	r3, [r3, #16]
 800b988:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800b98c:	f003 0303 	and.w	r3, r3, #3
 800b990:	2b02      	cmp	r3, #2
 800b992:	4657      	mov	r7, sl
 800b994:	f1c1 0808 	rsb	r8, r1, #8
 800b998:	fa46 f601 	asr.w	r6, r6, r1
 800b99c:	d020      	beq.n	800b9e0 <_DrawBitmap+0x34c>
 800b99e:	2b03      	cmp	r3, #3
 800b9a0:	d061      	beq.n	800ba66 <_DrawBitmap+0x3d2>
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d05f      	beq.n	800ba66 <_DrawBitmap+0x3d2>
 800b9a6:	465a      	mov	r2, fp
 800b9a8:	4547      	cmp	r7, r8
 800b9aa:	bf38      	it	cc
 800b9ac:	46b8      	movcc	r8, r7
 800b9ae:	ebc8 0707 	rsb	r7, r8, r7
 800b9b2:	4643      	mov	r3, r8
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	f006 0001 	and.w	r0, r6, #1
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800b9c0:	f841 0b04 	str.w	r0, [r1], #4
 800b9c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b9c8:	d1f5      	bne.n	800b9b6 <_DrawBitmap+0x322>
 800b9ca:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800b9ce:	2f00      	cmp	r7, #0
 800b9d0:	d06d      	beq.n	800baae <_DrawBitmap+0x41a>
 800b9d2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b9d6:	4988      	ldr	r1, [pc, #544]	; (800bbf8 <_DrawBitmap+0x564>)
 800b9d8:	f04f 0808 	mov.w	r8, #8
 800b9dc:	5cce      	ldrb	r6, [r1, r3]
 800b9de:	e7e3      	b.n	800b9a8 <_DrawBitmap+0x314>
 800b9e0:	686b      	ldr	r3, [r5, #4]
 800b9e2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800b9e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9e8:	f8cd b020 	str.w	fp, [sp, #32]
 800b9ec:	4547      	cmp	r7, r8
 800b9ee:	bf38      	it	cc
 800b9f0:	46b8      	movcc	r8, r7
 800b9f2:	ebc8 0707 	rsb	r7, r8, r7
 800b9f6:	f1bc 0f00 	cmp.w	ip, #0
 800b9fa:	d026      	beq.n	800ba4a <_DrawBitmap+0x3b6>
 800b9fc:	b91e      	cbnz	r6, 800ba06 <_DrawBitmap+0x372>
 800b9fe:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ba02:	44c1      	add	r9, r8
 800ba04:	e025      	b.n	800ba52 <_DrawBitmap+0x3be>
 800ba06:	07f0      	lsls	r0, r6, #31
 800ba08:	d50c      	bpl.n	800ba24 <_DrawBitmap+0x390>
 800ba0a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800ba0e:	9a05      	ldr	r2, [sp, #20]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f8cd c008 	str.w	ip, [sp, #8]
 800ba16:	4660      	mov	r0, ip
 800ba18:	4649      	mov	r1, r9
 800ba1a:	4798      	blx	r3
 800ba1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba1e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	f1b8 0801 	subs.w	r8, r8, #1
 800ba28:	f109 0901 	add.w	r9, r9, #1
 800ba2c:	f104 0404 	add.w	r4, r4, #4
 800ba30:	d00f      	beq.n	800ba52 <_DrawBitmap+0x3be>
 800ba32:	0876      	lsrs	r6, r6, #1
 800ba34:	e7e2      	b.n	800b9fc <_DrawBitmap+0x368>
 800ba36:	07f1      	lsls	r1, r6, #31
 800ba38:	bf44      	itt	mi
 800ba3a:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800ba3c:	6023      	strmi	r3, [r4, #0]
 800ba3e:	f1b8 0801 	subs.w	r8, r8, #1
 800ba42:	f104 0404 	add.w	r4, r4, #4
 800ba46:	d004      	beq.n	800ba52 <_DrawBitmap+0x3be>
 800ba48:	0876      	lsrs	r6, r6, #1
 800ba4a:	2e00      	cmp	r6, #0
 800ba4c:	d1f3      	bne.n	800ba36 <_DrawBitmap+0x3a2>
 800ba4e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ba52:	b367      	cbz	r7, 800baae <_DrawBitmap+0x41a>
 800ba54:	9808      	ldr	r0, [sp, #32]
 800ba56:	4a68      	ldr	r2, [pc, #416]	; (800bbf8 <_DrawBitmap+0x564>)
 800ba58:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ba5c:	9008      	str	r0, [sp, #32]
 800ba5e:	5cd6      	ldrb	r6, [r2, r3]
 800ba60:	f04f 0808 	mov.w	r8, #8
 800ba64:	e7c2      	b.n	800b9ec <_DrawBitmap+0x358>
 800ba66:	6803      	ldr	r3, [r0, #0]
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	4798      	blx	r3
 800ba6e:	4659      	mov	r1, fp
 800ba70:	4547      	cmp	r7, r8
 800ba72:	bf38      	it	cc
 800ba74:	46b8      	movcc	r8, r7
 800ba76:	ebc8 0707 	rsb	r7, r8, r7
 800ba7a:	1d23      	adds	r3, r4, #4
 800ba7c:	46c6      	mov	lr, r8
 800ba7e:	07f2      	lsls	r2, r6, #31
 800ba80:	d504      	bpl.n	800ba8c <_DrawBitmap+0x3f8>
 800ba82:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800ba86:	4042      	eors	r2, r0
 800ba88:	f843 2c04 	str.w	r2, [r3, #-4]
 800ba8c:	f1be 0e01 	subs.w	lr, lr, #1
 800ba90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ba94:	f103 0304 	add.w	r3, r3, #4
 800ba98:	d1f1      	bne.n	800ba7e <_DrawBitmap+0x3ea>
 800ba9a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ba9e:	b137      	cbz	r7, 800baae <_DrawBitmap+0x41a>
 800baa0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800baa4:	4a54      	ldr	r2, [pc, #336]	; (800bbf8 <_DrawBitmap+0x564>)
 800baa6:	f04f 0808 	mov.w	r8, #8
 800baaa:	5cd6      	ldrb	r6, [r2, r3]
 800baac:	e7e0      	b.n	800ba70 <_DrawBitmap+0x3dc>
 800baae:	a80e      	add	r0, sp, #56	; 0x38
 800bab0:	f7fd fb34 	bl	800911c <GUI_ALLOC_UnlockH>
 800bab4:	e176      	b.n	800bda4 <_DrawBitmap+0x710>
 800bab6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baba:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800babe:	f1c7 0604 	rsb	r6, r7, #4
 800bac2:	f89b 7000 	ldrb.w	r7, [fp]
 800bac6:	409f      	lsls	r7, r3
 800bac8:	4b4c      	ldr	r3, [pc, #304]	; (800bbfc <_DrawBitmap+0x568>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	7c1b      	ldrb	r3, [r3, #16]
 800bace:	f003 0303 	and.w	r3, r3, #3
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	b2f6      	uxtb	r6, r6
 800bad6:	b2ff      	uxtb	r7, r7
 800bad8:	d066      	beq.n	800bba8 <_DrawBitmap+0x514>
 800bada:	d308      	bcc.n	800baee <_DrawBitmap+0x45a>
 800badc:	2b02      	cmp	r3, #2
 800bade:	f040 8161 	bne.w	800bda4 <_DrawBitmap+0x710>
 800bae2:	9804      	ldr	r0, [sp, #16]
 800bae4:	f8cd b020 	str.w	fp, [sp, #32]
 800bae8:	46d0      	mov	r8, sl
 800baea:	9006      	str	r0, [sp, #24]
 800baec:	e03e      	b.n	800bb6c <_DrawBitmap+0x4d8>
 800baee:	465a      	mov	r2, fp
 800baf0:	4653      	mov	r3, sl
 800baf2:	429e      	cmp	r6, r3
 800baf4:	bfc8      	it	gt
 800baf6:	b2de      	uxtbgt	r6, r3
 800baf8:	1b9b      	subs	r3, r3, r6
 800bafa:	4631      	mov	r1, r6
 800bafc:	4620      	mov	r0, r4
 800bafe:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800bb02:	3901      	subs	r1, #1
 800bb04:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800bb08:	f840 cb04 	str.w	ip, [r0], #4
 800bb0c:	00bf      	lsls	r7, r7, #2
 800bb0e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800bb12:	b2ff      	uxtb	r7, r7
 800bb14:	d1f3      	bne.n	800bafe <_DrawBitmap+0x46a>
 800bb16:	3e01      	subs	r6, #1
 800bb18:	b2f6      	uxtb	r6, r6
 800bb1a:	3601      	adds	r6, #1
 800bb1c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 813f 	beq.w	800bda4 <_DrawBitmap+0x710>
 800bb26:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800bb2a:	2604      	movs	r6, #4
 800bb2c:	e7e1      	b.n	800baf2 <_DrawBitmap+0x45e>
 800bb2e:	9906      	ldr	r1, [sp, #24]
 800bb30:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800bb34:	4449      	add	r1, r9
 800bb36:	d122      	bne.n	800bb7e <_DrawBitmap+0x4ea>
 800bb38:	f109 0901 	add.w	r9, r9, #1
 800bb3c:	fa5f f289 	uxtb.w	r2, r9
 800bb40:	00bf      	lsls	r7, r7, #2
 800bb42:	4296      	cmp	r6, r2
 800bb44:	b2ff      	uxtb	r7, r7
 800bb46:	d1f2      	bne.n	800bb2e <_DrawBitmap+0x49a>
 800bb48:	9f06      	ldr	r7, [sp, #24]
 800bb4a:	3e01      	subs	r6, #1
 800bb4c:	b2f6      	uxtb	r6, r6
 800bb4e:	1c7b      	adds	r3, r7, #1
 800bb50:	1c72      	adds	r2, r6, #1
 800bb52:	199e      	adds	r6, r3, r6
 800bb54:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800bb58:	9606      	str	r6, [sp, #24]
 800bb5a:	f1b8 0f00 	cmp.w	r8, #0
 800bb5e:	f000 8121 	beq.w	800bda4 <_DrawBitmap+0x710>
 800bb62:	9b08      	ldr	r3, [sp, #32]
 800bb64:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800bb68:	9308      	str	r3, [sp, #32]
 800bb6a:	2604      	movs	r6, #4
 800bb6c:	4546      	cmp	r6, r8
 800bb6e:	bfc8      	it	gt
 800bb70:	fa5f f688 	uxtbgt.w	r6, r8
 800bb74:	ebc6 0808 	rsb	r8, r6, r8
 800bb78:	f04f 0900 	mov.w	r9, #0
 800bb7c:	e7d7      	b.n	800bb2e <_DrawBitmap+0x49a>
 800bb7e:	09ba      	lsrs	r2, r7, #6
 800bb80:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800bb84:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800bb88:	f1bc 0f00 	cmp.w	ip, #0
 800bb8c:	d0d4      	beq.n	800bb38 <_DrawBitmap+0x4a4>
 800bb8e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800bb92:	6812      	ldr	r2, [r2, #0]
 800bb94:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb96:	4660      	mov	r0, ip
 800bb98:	f8cd c008 	str.w	ip, [sp, #8]
 800bb9c:	9a05      	ldr	r2, [sp, #20]
 800bb9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bba0:	4798      	blx	r3
 800bba2:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bba6:	e7c7      	b.n	800bb38 <_DrawBitmap+0x4a4>
 800bba8:	4658      	mov	r0, fp
 800bbaa:	4653      	mov	r3, sl
 800bbac:	429e      	cmp	r6, r3
 800bbae:	bfc8      	it	gt
 800bbb0:	b2de      	uxtbgt	r6, r3
 800bbb2:	1b9b      	subs	r3, r3, r6
 800bbb4:	1d22      	adds	r2, r4, #4
 800bbb6:	46b4      	mov	ip, r6
 800bbb8:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800bbbc:	d005      	beq.n	800bbca <_DrawBitmap+0x536>
 800bbbe:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800bbc2:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800bbc6:	f842 1c04 	str.w	r1, [r2, #-4]
 800bbca:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bbce:	00bf      	lsls	r7, r7, #2
 800bbd0:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800bbd4:	b2ff      	uxtb	r7, r7
 800bbd6:	f102 0204 	add.w	r2, r2, #4
 800bbda:	d1ed      	bne.n	800bbb8 <_DrawBitmap+0x524>
 800bbdc:	3e01      	subs	r6, #1
 800bbde:	b2f6      	uxtb	r6, r6
 800bbe0:	3601      	adds	r6, #1
 800bbe2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 80dc 	beq.w	800bda4 <_DrawBitmap+0x710>
 800bbec:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800bbf0:	2604      	movs	r6, #4
 800bbf2:	e7db      	b.n	800bbac <_DrawBitmap+0x518>
 800bbf4:	080134d4 	.word	0x080134d4
 800bbf8:	080151e0 	.word	0x080151e0
 800bbfc:	200001b0 	.word	0x200001b0
 800bc00:	4a71      	ldr	r2, [pc, #452]	; (800bdc8 <_DrawBitmap+0x734>)
 800bc02:	f89b 3000 	ldrb.w	r3, [fp]
 800bc06:	6812      	ldr	r2, [r2, #0]
 800bc08:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bc0a:	7c12      	ldrb	r2, [r2, #16]
 800bc0c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800bc0e:	f002 0203 	and.w	r2, r2, #3
 800bc12:	4083      	lsls	r3, r0
 800bc14:	2a01      	cmp	r2, #1
 800bc16:	b2de      	uxtb	r6, r3
 800bc18:	f000 809c 	beq.w	800bd54 <_DrawBitmap+0x6c0>
 800bc1c:	d302      	bcc.n	800bc24 <_DrawBitmap+0x590>
 800bc1e:	2a02      	cmp	r2, #2
 800bc20:	d035      	beq.n	800bc8e <_DrawBitmap+0x5fa>
 800bc22:	e0bf      	b.n	800bda4 <_DrawBitmap+0x710>
 800bc24:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bc26:	b15f      	cbz	r7, 800bc40 <_DrawBitmap+0x5ac>
 800bc28:	0936      	lsrs	r6, r6, #4
 800bc2a:	f10b 0201 	add.w	r2, fp, #1
 800bc2e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bc32:	6023      	str	r3, [r4, #0]
 800bc34:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800bc38:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bc3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bc3e:	e001      	b.n	800bc44 <_DrawBitmap+0x5b0>
 800bc40:	4653      	mov	r3, sl
 800bc42:	465a      	mov	r2, fp
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	dd1a      	ble.n	800bc7e <_DrawBitmap+0x5ea>
 800bc48:	1058      	asrs	r0, r3, #1
 800bc4a:	f104 0108 	add.w	r1, r4, #8
 800bc4e:	f003 0301 	and.w	r3, r3, #1
 800bc52:	eb02 0800 	add.w	r8, r2, r0
 800bc56:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800bc5a:	f006 060f 	and.w	r6, r6, #15
 800bc5e:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800bc62:	f841 7c08 	str.w	r7, [r1, #-8]
 800bc66:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800bc6a:	f841 6c04 	str.w	r6, [r1, #-4]
 800bc6e:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800bc72:	4542      	cmp	r2, r8
 800bc74:	f101 0108 	add.w	r1, r1, #8
 800bc78:	d1ed      	bne.n	800bc56 <_DrawBitmap+0x5c2>
 800bc7a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 8090 	beq.w	800bda4 <_DrawBitmap+0x710>
 800bc84:	0936      	lsrs	r6, r6, #4
 800bc86:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bc8a:	6023      	str	r3, [r4, #0]
 800bc8c:	e08a      	b.n	800bda4 <_DrawBitmap+0x710>
 800bc8e:	981e      	ldr	r0, [sp, #120]	; 0x78
 800bc90:	b1c0      	cbz	r0, 800bcc4 <_DrawBitmap+0x630>
 800bc92:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800bc96:	d00a      	beq.n	800bcae <_DrawBitmap+0x61a>
 800bc98:	0936      	lsrs	r6, r6, #4
 800bc9a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bc9e:	6023      	str	r3, [r4, #0]
 800bca0:	b12f      	cbz	r7, 800bcae <_DrawBitmap+0x61a>
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	9904      	ldr	r1, [sp, #16]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	9a05      	ldr	r2, [sp, #20]
 800bcaa:	4638      	mov	r0, r7
 800bcac:	4798      	blx	r3
 800bcae:	9904      	ldr	r1, [sp, #16]
 800bcb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bcb2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800bcb6:	f101 0801 	add.w	r8, r1, #1
 800bcba:	f10a 3cff 	add.w	ip, sl, #4294967295
 800bcbe:	f10b 0901 	add.w	r9, fp, #1
 800bcc2:	e011      	b.n	800bce8 <_DrawBitmap+0x654>
 800bcc4:	46d4      	mov	ip, sl
 800bcc6:	46d9      	mov	r9, fp
 800bcc8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bccc:	e00c      	b.n	800bce8 <_DrawBitmap+0x654>
 800bcce:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800bcd2:	d10d      	bne.n	800bcf0 <_DrawBitmap+0x65c>
 800bcd4:	f016 060f 	ands.w	r6, r6, #15
 800bcd8:	d11b      	bne.n	800bd12 <_DrawBitmap+0x67e>
 800bcda:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800bcde:	3408      	adds	r4, #8
 800bce0:	f108 0802 	add.w	r8, r8, #2
 800bce4:	f1ac 0c02 	sub.w	ip, ip, #2
 800bce8:	f1bc 0f01 	cmp.w	ip, #1
 800bcec:	dcef      	bgt.n	800bcce <_DrawBitmap+0x63a>
 800bcee:	e021      	b.n	800bd34 <_DrawBitmap+0x6a0>
 800bcf0:	0933      	lsrs	r3, r6, #4
 800bcf2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bcf6:	6023      	str	r3, [r4, #0]
 800bcf8:	2f00      	cmp	r7, #0
 800bcfa:	d0eb      	beq.n	800bcd4 <_DrawBitmap+0x640>
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	9a05      	ldr	r2, [sp, #20]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f8cd c008 	str.w	ip, [sp, #8]
 800bd06:	4638      	mov	r0, r7
 800bd08:	4641      	mov	r1, r8
 800bd0a:	4798      	blx	r3
 800bd0c:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bd10:	e7e0      	b.n	800bcd4 <_DrawBitmap+0x640>
 800bd12:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bd16:	6063      	str	r3, [r4, #4]
 800bd18:	2f00      	cmp	r7, #0
 800bd1a:	d0de      	beq.n	800bcda <_DrawBitmap+0x646>
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	9a05      	ldr	r2, [sp, #20]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f8cd c008 	str.w	ip, [sp, #8]
 800bd26:	4638      	mov	r0, r7
 800bd28:	f108 0101 	add.w	r1, r8, #1
 800bd2c:	4798      	blx	r3
 800bd2e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bd32:	e7d2      	b.n	800bcda <_DrawBitmap+0x646>
 800bd34:	f1bc 0f00 	cmp.w	ip, #0
 800bd38:	d034      	beq.n	800bda4 <_DrawBitmap+0x710>
 800bd3a:	0936      	lsrs	r6, r6, #4
 800bd3c:	d032      	beq.n	800bda4 <_DrawBitmap+0x710>
 800bd3e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	b377      	cbz	r7, 800bda4 <_DrawBitmap+0x710>
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	9a05      	ldr	r2, [sp, #20]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	4641      	mov	r1, r8
 800bd50:	4798      	blx	r3
 800bd52:	e027      	b.n	800bda4 <_DrawBitmap+0x710>
 800bd54:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bd56:	f1c7 0302 	rsb	r3, r7, #2
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	465f      	mov	r7, fp
 800bd5e:	4652      	mov	r2, sl
 800bd60:	4293      	cmp	r3, r2
 800bd62:	bfc8      	it	gt
 800bd64:	b2d3      	uxtbgt	r3, r2
 800bd66:	1ad2      	subs	r2, r2, r3
 800bd68:	1d20      	adds	r0, r4, #4
 800bd6a:	469c      	mov	ip, r3
 800bd6c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800bd70:	d005      	beq.n	800bd7e <_DrawBitmap+0x6ea>
 800bd72:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800bd76:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800bd7a:	f840 1c04 	str.w	r1, [r0, #-4]
 800bd7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bd82:	0136      	lsls	r6, r6, #4
 800bd84:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800bd88:	b2f6      	uxtb	r6, r6
 800bd8a:	f100 0004 	add.w	r0, r0, #4
 800bd8e:	d1ed      	bne.n	800bd6c <_DrawBitmap+0x6d8>
 800bd90:	3b01      	subs	r3, #1
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	3301      	adds	r3, #1
 800bd96:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bd9a:	b11a      	cbz	r2, 800bda4 <_DrawBitmap+0x710>
 800bd9c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800bda0:	2302      	movs	r3, #2
 800bda2:	e7dd      	b.n	800bd60 <_DrawBitmap+0x6cc>
 800bda4:	9b05      	ldr	r3, [sp, #20]
 800bda6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800bda8:	3301      	adds	r3, #1
 800bdaa:	44bb      	add	fp, r7
 800bdac:	9305      	str	r3, [sp, #20]
 800bdae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb2:	443b      	add	r3, r7
 800bdb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb6:	e5c4      	b.n	800b942 <_DrawBitmap+0x2ae>
 800bdb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdba:	b113      	cbz	r3, 800bdc2 <_DrawBitmap+0x72e>
 800bdbc:	a80f      	add	r0, sp, #60	; 0x3c
 800bdbe:	f7fd f9ad 	bl	800911c <GUI_ALLOC_UnlockH>
 800bdc2:	b011      	add	sp, #68	; 0x44
 800bdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc8:	200001b0 	.word	0x200001b0

0800bdcc <_GetDevData>:
 800bdcc:	4802      	ldr	r0, [pc, #8]	; (800bdd8 <_GetDevData+0xc>)
 800bdce:	2901      	cmp	r1, #1
 800bdd0:	bf18      	it	ne
 800bdd2:	2000      	movne	r0, #0
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	08013588 	.word	0x08013588

0800bddc <_GetDevFunc>:
 800bddc:	4802      	ldr	r0, [pc, #8]	; (800bde8 <_GetDevFunc+0xc>)
 800bdde:	2916      	cmp	r1, #22
 800bde0:	bf18      	it	ne
 800bde2:	2000      	movne	r0, #0
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	0800e319 	.word	0x0800e319

0800bdec <_SetOrg>:
 800bdec:	6800      	ldr	r0, [r0, #0]
 800bdee:	b508      	push	{r3, lr}
 800bdf0:	b110      	cbz	r0, 800bdf8 <_SetOrg+0xc>
 800bdf2:	68c3      	ldr	r3, [r0, #12]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	4798      	blx	r3
 800bdf8:	bd08      	pop	{r3, pc}

0800bdfa <_GetDevProp>:
 800bdfa:	6800      	ldr	r0, [r0, #0]
 800bdfc:	b508      	push	{r3, lr}
 800bdfe:	b118      	cbz	r0, 800be08 <_GetDevProp+0xe>
 800be00:	68c3      	ldr	r3, [r0, #12]
 800be02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be04:	4798      	blx	r3
 800be06:	bd08      	pop	{r3, pc}
 800be08:	f04f 30ff 	mov.w	r0, #4294967295
 800be0c:	bd08      	pop	{r3, pc}

0800be0e <_GetRect>:
 800be0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be10:	6880      	ldr	r0, [r0, #8]
 800be12:	460c      	mov	r4, r1
 800be14:	f7fd f974 	bl	8009100 <GUI_ALLOC_LockH>
 800be18:	4603      	mov	r3, r0
 800be1a:	a802      	add	r0, sp, #8
 800be1c:	8899      	ldrh	r1, [r3, #4]
 800be1e:	88da      	ldrh	r2, [r3, #6]
 800be20:	891d      	ldrh	r5, [r3, #8]
 800be22:	f840 3d04 	str.w	r3, [r0, #-4]!
 800be26:	895b      	ldrh	r3, [r3, #10]
 800be28:	8021      	strh	r1, [r4, #0]
 800be2a:	8062      	strh	r2, [r4, #2]
 800be2c:	4429      	add	r1, r5
 800be2e:	441a      	add	r2, r3
 800be30:	3901      	subs	r1, #1
 800be32:	3a01      	subs	r2, #1
 800be34:	80a1      	strh	r1, [r4, #4]
 800be36:	80e2      	strh	r2, [r4, #6]
 800be38:	f7fd f970 	bl	800911c <GUI_ALLOC_UnlockH>
 800be3c:	b003      	add	sp, #12
 800be3e:	bd30      	pop	{r4, r5, pc}

0800be40 <_XY2PTR>:
 800be40:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <_XY2PTR+0x3c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be46:	4605      	mov	r5, r0
 800be48:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800be4a:	460e      	mov	r6, r1
 800be4c:	f7fd f958 	bl	8009100 <GUI_ALLOC_LockH>
 800be50:	4603      	mov	r3, r0
 800be52:	a802      	add	r0, sp, #8
 800be54:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800be58:	f840 3d04 	str.w	r3, [r0, #-4]!
 800be5c:	f103 0118 	add.w	r1, r3, #24
 800be60:	1b36      	subs	r6, r6, r4
 800be62:	68dc      	ldr	r4, [r3, #12]
 800be64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be68:	fb04 1406 	mla	r4, r4, r6, r1
 800be6c:	1aed      	subs	r5, r5, r3
 800be6e:	f7fd f955 	bl	800911c <GUI_ALLOC_UnlockH>
 800be72:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800be76:	4620      	mov	r0, r4
 800be78:	b002      	add	sp, #8
 800be7a:	bd70      	pop	{r4, r5, r6, pc}
 800be7c:	200001b0 	.word	0x200001b0

0800be80 <_GetPixelIndex>:
 800be80:	b508      	push	{r3, lr}
 800be82:	4608      	mov	r0, r1
 800be84:	4611      	mov	r1, r2
 800be86:	f7ff ffdb 	bl	800be40 <_XY2PTR>
 800be8a:	8800      	ldrh	r0, [r0, #0]
 800be8c:	bd08      	pop	{r3, pc}
	...

0800be90 <_XorPixel>:
 800be90:	4b14      	ldr	r3, [pc, #80]	; (800bee4 <_XorPixel+0x54>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be96:	4607      	mov	r7, r0
 800be98:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800be9a:	4615      	mov	r5, r2
 800be9c:	460e      	mov	r6, r1
 800be9e:	f7fd f92f 	bl	8009100 <GUI_ALLOC_LockH>
 800bea2:	4629      	mov	r1, r5
 800bea4:	9000      	str	r0, [sp, #0]
 800bea6:	4630      	mov	r0, r6
 800bea8:	f7ff ffca 	bl	800be40 <_XY2PTR>
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	4604      	mov	r4, r0
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	4798      	blx	r3
 800beb4:	8823      	ldrh	r3, [r4, #0]
 800beb6:	4058      	eors	r0, r3
 800beb8:	9b00      	ldr	r3, [sp, #0]
 800beba:	8020      	strh	r0, [r4, #0]
 800bebc:	6958      	ldr	r0, [r3, #20]
 800bebe:	b160      	cbz	r0, 800beda <_XorPixel+0x4a>
 800bec0:	f7fd f91e 	bl	8009100 <GUI_ALLOC_LockH>
 800bec4:	ac02      	add	r4, sp, #8
 800bec6:	6883      	ldr	r3, [r0, #8]
 800bec8:	f844 0d04 	str.w	r0, [r4, #-4]!
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4631      	mov	r1, r6
 800bed0:	462a      	mov	r2, r5
 800bed2:	4798      	blx	r3
 800bed4:	4620      	mov	r0, r4
 800bed6:	f7fd f921 	bl	800911c <GUI_ALLOC_UnlockH>
 800beda:	4668      	mov	r0, sp
 800bedc:	f7fd f91e 	bl	800911c <GUI_ALLOC_UnlockH>
 800bee0:	b003      	add	sp, #12
 800bee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bee4:	200001b0 	.word	0x200001b0

0800bee8 <_SetPixelIndex>:
 800bee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800beea:	461c      	mov	r4, r3
 800beec:	4b10      	ldr	r3, [pc, #64]	; (800bf30 <_SetPixelIndex+0x48>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800bef2:	460e      	mov	r6, r1
 800bef4:	4615      	mov	r5, r2
 800bef6:	f7fd f903 	bl	8009100 <GUI_ALLOC_LockH>
 800befa:	4629      	mov	r1, r5
 800befc:	9000      	str	r0, [sp, #0]
 800befe:	4630      	mov	r0, r6
 800bf00:	f7ff ff9e 	bl	800be40 <_XY2PTR>
 800bf04:	9b00      	ldr	r3, [sp, #0]
 800bf06:	8004      	strh	r4, [r0, #0]
 800bf08:	6958      	ldr	r0, [r3, #20]
 800bf0a:	b160      	cbz	r0, 800bf26 <_SetPixelIndex+0x3e>
 800bf0c:	f7fd f8f8 	bl	8009100 <GUI_ALLOC_LockH>
 800bf10:	ac02      	add	r4, sp, #8
 800bf12:	6883      	ldr	r3, [r0, #8]
 800bf14:	f844 0d04 	str.w	r0, [r4, #-4]!
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4631      	mov	r1, r6
 800bf1c:	462a      	mov	r2, r5
 800bf1e:	4798      	blx	r3
 800bf20:	4620      	mov	r0, r4
 800bf22:	f7fd f8fb 	bl	800911c <GUI_ALLOC_UnlockH>
 800bf26:	4668      	mov	r0, sp
 800bf28:	f7fd f8f8 	bl	800911c <GUI_ALLOC_UnlockH>
 800bf2c:	b002      	add	sp, #8
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	200001b0 	.word	0x200001b0

0800bf34 <_DrawVLine>:
 800bf34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf38:	4d2c      	ldr	r5, [pc, #176]	; (800bfec <_DrawVLine+0xb8>)
 800bf3a:	461e      	mov	r6, r3
 800bf3c:	682b      	ldr	r3, [r5, #0]
 800bf3e:	4681      	mov	r9, r0
 800bf40:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800bf42:	460f      	mov	r7, r1
 800bf44:	4614      	mov	r4, r2
 800bf46:	f7fd f8db 	bl	8009100 <GUI_ALLOC_LockH>
 800bf4a:	9000      	str	r0, [sp, #0]
 800bf4c:	6940      	ldr	r0, [r0, #20]
 800bf4e:	46aa      	mov	sl, r5
 800bf50:	b108      	cbz	r0, 800bf56 <_DrawVLine+0x22>
 800bf52:	f7fd f8d5 	bl	8009100 <GUI_ALLOC_LockH>
 800bf56:	9001      	str	r0, [sp, #4]
 800bf58:	4621      	mov	r1, r4
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	f7ff ff70 	bl	800be40 <_XY2PTR>
 800bf60:	9b00      	ldr	r3, [sp, #0]
 800bf62:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800bf66:	f8da 3000 	ldr.w	r3, [sl]
 800bf6a:	7c1a      	ldrb	r2, [r3, #16]
 800bf6c:	07d2      	lsls	r2, r2, #31
 800bf6e:	4605      	mov	r5, r0
 800bf70:	d51f      	bpl.n	800bfb2 <_DrawVLine+0x7e>
 800bf72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	4798      	blx	r3
 800bf7a:	fa1f f880 	uxth.w	r8, r0
 800bf7e:	9801      	ldr	r0, [sp, #4]
 800bf80:	b120      	cbz	r0, 800bf8c <_DrawVLine+0x58>
 800bf82:	6883      	ldr	r3, [r0, #8]
 800bf84:	4639      	mov	r1, r7
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4622      	mov	r2, r4
 800bf8a:	4798      	blx	r3
 800bf8c:	882b      	ldrh	r3, [r5, #0]
 800bf8e:	ea88 0303 	eor.w	r3, r8, r3
 800bf92:	802b      	strh	r3, [r5, #0]
 800bf94:	9b00      	ldr	r3, [sp, #0]
 800bf96:	3401      	adds	r4, #1
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	42b4      	cmp	r4, r6
 800bf9c:	441d      	add	r5, r3
 800bf9e:	ddee      	ble.n	800bf7e <_DrawVLine+0x4a>
 800bfa0:	4668      	mov	r0, sp
 800bfa2:	f7fd f8bb 	bl	800911c <GUI_ALLOC_UnlockH>
 800bfa6:	9b01      	ldr	r3, [sp, #4]
 800bfa8:	b1eb      	cbz	r3, 800bfe6 <_DrawVLine+0xb2>
 800bfaa:	a801      	add	r0, sp, #4
 800bfac:	f7fd f8b6 	bl	800911c <GUI_ALLOC_UnlockH>
 800bfb0:	e019      	b.n	800bfe6 <_DrawVLine+0xb2>
 800bfb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfb4:	f8d3 9000 	ldr.w	r9, [r3]
 800bfb8:	9b01      	ldr	r3, [sp, #4]
 800bfba:	b163      	cbz	r3, 800bfd6 <_DrawVLine+0xa2>
 800bfbc:	9801      	ldr	r0, [sp, #4]
 800bfbe:	6883      	ldr	r3, [r0, #8]
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	3401      	adds	r4, #1
 800bfc8:	4798      	blx	r3
 800bfca:	42b4      	cmp	r4, r6
 800bfcc:	f8a5 9000 	strh.w	r9, [r5]
 800bfd0:	4445      	add	r5, r8
 800bfd2:	ddf3      	ble.n	800bfbc <_DrawVLine+0x88>
 800bfd4:	e7e4      	b.n	800bfa0 <_DrawVLine+0x6c>
 800bfd6:	1b34      	subs	r4, r6, r4
 800bfd8:	3401      	adds	r4, #1
 800bfda:	3c01      	subs	r4, #1
 800bfdc:	f8a5 9000 	strh.w	r9, [r5]
 800bfe0:	4445      	add	r5, r8
 800bfe2:	d1fa      	bne.n	800bfda <_DrawVLine+0xa6>
 800bfe4:	e7dc      	b.n	800bfa0 <_DrawVLine+0x6c>
 800bfe6:	b002      	add	sp, #8
 800bfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfec:	200001b0 	.word	0x200001b0

0800bff0 <_FillRect>:
 800bff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff4:	4f2a      	ldr	r7, [pc, #168]	; (800c0a0 <_FillRect+0xb0>)
 800bff6:	4614      	mov	r4, r2
 800bff8:	683a      	ldr	r2, [r7, #0]
 800bffa:	4698      	mov	r8, r3
 800bffc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800bffe:	b087      	sub	sp, #28
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	9302      	str	r3, [sp, #8]
 800c004:	4682      	mov	sl, r0
 800c006:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800c008:	460e      	mov	r6, r1
 800c00a:	f7fd f879 	bl	8009100 <GUI_ALLOC_LockH>
 800c00e:	4621      	mov	r1, r4
 800c010:	9004      	str	r0, [sp, #16]
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff ff14 	bl	800be40 <_XY2PTR>
 800c018:	9a04      	ldr	r2, [sp, #16]
 800c01a:	4605      	mov	r5, r0
 800c01c:	6950      	ldr	r0, [r2, #20]
 800c01e:	68d3      	ldr	r3, [r2, #12]
 800c020:	9303      	str	r3, [sp, #12]
 800c022:	ebc6 0908 	rsb	r9, r6, r8
 800c026:	f109 0801 	add.w	r8, r9, #1
 800c02a:	46bb      	mov	fp, r7
 800c02c:	b180      	cbz	r0, 800c050 <_FillRect+0x60>
 800c02e:	f7fd f867 	bl	8009100 <GUI_ALLOC_LockH>
 800c032:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c034:	af06      	add	r7, sp, #24
 800c036:	1b13      	subs	r3, r2, r4
 800c038:	f847 0d04 	str.w	r0, [r7, #-4]!
 800c03c:	3301      	adds	r3, #1
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	4631      	mov	r1, r6
 800c042:	4622      	mov	r2, r4
 800c044:	4643      	mov	r3, r8
 800c046:	f002 fedb 	bl	800ee00 <GUI_USAGE_AddRect>
 800c04a:	4638      	mov	r0, r7
 800c04c:	f7fd f866 	bl	800911c <GUI_ALLOC_UnlockH>
 800c050:	ea4f 0649 	mov.w	r6, r9, lsl #1
 800c054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c056:	429c      	cmp	r4, r3
 800c058:	dc1c      	bgt.n	800c094 <_FillRect+0xa4>
 800c05a:	f8db 3000 	ldr.w	r3, [fp]
 800c05e:	7c1b      	ldrb	r3, [r3, #16]
 800c060:	07db      	lsls	r3, r3, #31
 800c062:	d50d      	bpl.n	800c080 <_FillRect+0x90>
 800c064:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	4798      	blx	r3
 800c06c:	19aa      	adds	r2, r5, r6
 800c06e:	b280      	uxth	r0, r0
 800c070:	1eab      	subs	r3, r5, #2
 800c072:	8859      	ldrh	r1, [r3, #2]
 800c074:	4041      	eors	r1, r0
 800c076:	f823 1f02 	strh.w	r1, [r3, #2]!
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d1f9      	bne.n	800c072 <_FillRect+0x82>
 800c07e:	e005      	b.n	800c08c <_FillRect+0x9c>
 800c080:	9b02      	ldr	r3, [sp, #8]
 800c082:	4628      	mov	r0, r5
 800c084:	b299      	uxth	r1, r3
 800c086:	4642      	mov	r2, r8
 800c088:	f7fb fd28 	bl	8007adc <GUI__memset16>
 800c08c:	9a03      	ldr	r2, [sp, #12]
 800c08e:	3401      	adds	r4, #1
 800c090:	4415      	add	r5, r2
 800c092:	e7df      	b.n	800c054 <_FillRect+0x64>
 800c094:	a804      	add	r0, sp, #16
 800c096:	f7fd f841 	bl	800911c <GUI_ALLOC_UnlockH>
 800c09a:	b007      	add	sp, #28
 800c09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a0:	200001b0 	.word	0x200001b0

0800c0a4 <_DrawHLine>:
 800c0a4:	b507      	push	{r0, r1, r2, lr}
 800c0a6:	9200      	str	r2, [sp, #0]
 800c0a8:	f7ff ffa2 	bl	800bff0 <_FillRect>
 800c0ac:	b003      	add	sp, #12
 800c0ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c0b4 <_DrawBitmap>:
 800c0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b8:	4c8a      	ldr	r4, [pc, #552]	; (800c2e4 <_DrawBitmap+0x230>)
 800c0ba:	b093      	sub	sp, #76	; 0x4c
 800c0bc:	469b      	mov	fp, r3
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	900d      	str	r0, [sp, #52]	; 0x34
 800c0c2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c0c4:	9207      	str	r2, [sp, #28]
 800c0c6:	460d      	mov	r5, r1
 800c0c8:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800c0cc:	f7fd f818 	bl	8009100 <GUI_ALLOC_LockH>
 800c0d0:	9010      	str	r0, [sp, #64]	; 0x40
 800c0d2:	6940      	ldr	r0, [r0, #20]
 800c0d4:	b108      	cbz	r0, 800c0da <_DrawBitmap+0x26>
 800c0d6:	f7fd f813 	bl	8009100 <GUI_ALLOC_LockH>
 800c0da:	9011      	str	r0, [sp, #68]	; 0x44
 800c0dc:	a812      	add	r0, sp, #72	; 0x48
 800c0de:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	9308      	str	r3, [sp, #32]
 800c0e6:	f7fd f819 	bl	800911c <GUI_ALLOC_UnlockH>
 800c0ea:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c0ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c0ee:	442e      	add	r6, r5
 800c0f0:	9604      	str	r6, [sp, #16]
 800c0f2:	b150      	cbz	r0, 800c10a <_DrawBitmap+0x56>
 800c0f4:	6823      	ldr	r3, [r4, #0]
 800c0f6:	7c1b      	ldrb	r3, [r3, #16]
 800c0f8:	0799      	lsls	r1, r3, #30
 800c0fa:	d106      	bne.n	800c10a <_DrawBitmap+0x56>
 800c0fc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c0fe:	9700      	str	r7, [sp, #0]
 800c100:	4631      	mov	r1, r6
 800c102:	9a07      	ldr	r2, [sp, #28]
 800c104:	465b      	mov	r3, fp
 800c106:	f002 fe7b 	bl	800ee00 <GUI_USAGE_AddRect>
 800c10a:	9804      	ldr	r0, [sp, #16]
 800c10c:	9907      	ldr	r1, [sp, #28]
 800c10e:	f7ff fe97 	bl	800be40 <_XY2PTR>
 800c112:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c114:	2e10      	cmp	r6, #16
 800c116:	4604      	mov	r4, r0
 800c118:	d139      	bne.n	800c18e <_DrawBitmap+0xda>
 800c11a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c11c:	b11b      	cbz	r3, 800c126 <_DrawBitmap+0x72>
 800c11e:	ea4f 064b 	mov.w	r6, fp, lsl #1
 800c122:	2500      	movs	r5, #0
 800c124:	e014      	b.n	800c150 <_DrawBitmap+0x9c>
 800c126:	4b70      	ldr	r3, [pc, #448]	; (800c2e8 <_DrawBitmap+0x234>)
 800c128:	681d      	ldr	r5, [r3, #0]
 800c12a:	2d00      	cmp	r5, #0
 800c12c:	d0f7      	beq.n	800c11e <_DrawBitmap+0x6a>
 800c12e:	9e08      	ldr	r6, [sp, #32]
 800c130:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c132:	9600      	str	r6, [sp, #0]
 800c134:	9701      	str	r7, [sp, #4]
 800c136:	4651      	mov	r1, sl
 800c138:	465a      	mov	r2, fp
 800c13a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c13c:	47a8      	blx	r5
 800c13e:	e345      	b.n	800c7cc <_DrawBitmap+0x718>
 800c140:	f1ba 0f00 	cmp.w	sl, #0
 800c144:	d10a      	bne.n	800c15c <_DrawBitmap+0xa8>
 800c146:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c148:	44ba      	add	sl, r7
 800c14a:	9f08      	ldr	r7, [sp, #32]
 800c14c:	3501      	adds	r5, #1
 800c14e:	443c      	add	r4, r7
 800c150:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c152:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800c156:	42bd      	cmp	r5, r7
 800c158:	dbf2      	blt.n	800c140 <_DrawBitmap+0x8c>
 800c15a:	e013      	b.n	800c184 <_DrawBitmap+0xd0>
 800c15c:	2c00      	cmp	r4, #0
 800c15e:	d0f2      	beq.n	800c146 <_DrawBitmap+0x92>
 800c160:	4620      	mov	r0, r4
 800c162:	4651      	mov	r1, sl
 800c164:	4632      	mov	r2, r6
 800c166:	f004 f828 	bl	80101ba <memcpy>
 800c16a:	f1b8 0f00 	cmp.w	r8, #0
 800c16e:	d0ea      	beq.n	800c146 <_DrawBitmap+0x92>
 800c170:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c174:	9a07      	ldr	r2, [sp, #28]
 800c176:	685f      	ldr	r7, [r3, #4]
 800c178:	9904      	ldr	r1, [sp, #16]
 800c17a:	4640      	mov	r0, r8
 800c17c:	442a      	add	r2, r5
 800c17e:	465b      	mov	r3, fp
 800c180:	47b8      	blx	r7
 800c182:	e7e0      	b.n	800c146 <_DrawBitmap+0x92>
 800c184:	f1b8 0f00 	cmp.w	r8, #0
 800c188:	f040 831d 	bne.w	800c7c6 <_DrawBitmap+0x712>
 800c18c:	e31e      	b.n	800c7cc <_DrawBitmap+0x718>
 800c18e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c190:	2e17      	cmp	r6, #23
 800c192:	dd38      	ble.n	800c206 <_DrawBitmap+0x152>
 800c194:	2600      	movs	r6, #0
 800c196:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c198:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c19a:	42be      	cmp	r6, r7
 800c19c:	f280 809d 	bge.w	800c2da <_DrawBitmap+0x226>
 800c1a0:	9f07      	ldr	r7, [sp, #28]
 800c1a2:	4437      	add	r7, r6
 800c1a4:	f1ba 0f00 	cmp.w	sl, #0
 800c1a8:	d027      	beq.n	800c1fa <_DrawBitmap+0x146>
 800c1aa:	b334      	cbz	r4, 800c1fa <_DrawBitmap+0x146>
 800c1ac:	b13d      	cbz	r5, 800c1be <_DrawBitmap+0x10a>
 800c1ae:	68ab      	ldr	r3, [r5, #8]
 800c1b0:	9904      	ldr	r1, [sp, #16]
 800c1b2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	463a      	mov	r2, r7
 800c1ba:	465b      	mov	r3, fp
 800c1bc:	47e0      	blx	ip
 800c1be:	1ea3      	subs	r3, r4, #2
 800c1c0:	f1aa 0904 	sub.w	r9, sl, #4
 800c1c4:	9303      	str	r3, [sp, #12]
 800c1c6:	46d8      	mov	r8, fp
 800c1c8:	9b04      	ldr	r3, [sp, #16]
 800c1ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c1cc:	445b      	add	r3, fp
 800c1ce:	ebc8 0103 	rsb	r1, r8, r3
 800c1d2:	6903      	ldr	r3, [r0, #16]
 800c1d4:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	9102      	str	r1, [sp, #8]
 800c1dc:	4798      	blx	r3
 800c1de:	9b03      	ldr	r3, [sp, #12]
 800c1e0:	9902      	ldr	r1, [sp, #8]
 800c1e2:	f823 0f02 	strh.w	r0, [r3, #2]!
 800c1e6:	9303      	str	r3, [sp, #12]
 800c1e8:	b125      	cbz	r5, 800c1f4 <_DrawBitmap+0x140>
 800c1ea:	68ab      	ldr	r3, [r5, #8]
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	463a      	mov	r2, r7
 800c1f2:	4798      	blx	r3
 800c1f4:	f1b8 0801 	subs.w	r8, r8, #1
 800c1f8:	d1e6      	bne.n	800c1c8 <_DrawBitmap+0x114>
 800c1fa:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c1fc:	44ba      	add	sl, r7
 800c1fe:	9f08      	ldr	r7, [sp, #32]
 800c200:	3601      	adds	r6, #1
 800c202:	443c      	add	r4, r7
 800c204:	e7c7      	b.n	800c196 <_DrawBitmap+0xe2>
 800c206:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c208:	2e08      	cmp	r6, #8
 800c20a:	f100 0402 	add.w	r4, r0, #2
 800c20e:	d16d      	bne.n	800c2ec <_DrawBitmap+0x238>
 800c210:	9e07      	ldr	r6, [sp, #28]
 800c212:	9f07      	ldr	r7, [sp, #28]
 800c214:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c216:	1bf3      	subs	r3, r6, r7
 800c218:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c21a:	42bb      	cmp	r3, r7
 800c21c:	f1a4 0002 	sub.w	r0, r4, #2
 800c220:	da5b      	bge.n	800c2da <_DrawBitmap+0x226>
 800c222:	4b30      	ldr	r3, [pc, #192]	; (800c2e4 <_DrawBitmap+0x230>)
 800c224:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	7c1b      	ldrb	r3, [r3, #16]
 800c22a:	b367      	cbz	r7, 800c286 <_DrawBitmap+0x1d2>
 800c22c:	f013 0303 	ands.w	r3, r3, #3
 800c230:	d004      	beq.n	800c23c <_DrawBitmap+0x188>
 800c232:	2b02      	cmp	r3, #2
 800c234:	d14b      	bne.n	800c2ce <_DrawBitmap+0x21a>
 800c236:	46a0      	mov	r8, r4
 800c238:	9f04      	ldr	r7, [sp, #16]
 800c23a:	e01d      	b.n	800c278 <_DrawBitmap+0x1c4>
 800c23c:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800c240:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c242:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800c246:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800c24a:	3301      	adds	r3, #1
 800c24c:	455b      	cmp	r3, fp
 800c24e:	d1f5      	bne.n	800c23c <_DrawBitmap+0x188>
 800c250:	e03d      	b.n	800c2ce <_DrawBitmap+0x21a>
 800c252:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c258:	f828 3c02 	strh.w	r3, [r8, #-2]
 800c25c:	b12d      	cbz	r5, 800c26a <_DrawBitmap+0x1b6>
 800c25e:	68ab      	ldr	r3, [r5, #8]
 800c260:	4628      	mov	r0, r5
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4639      	mov	r1, r7
 800c266:	4632      	mov	r2, r6
 800c268:	4798      	blx	r3
 800c26a:	9b04      	ldr	r3, [sp, #16]
 800c26c:	3701      	adds	r7, #1
 800c26e:	445b      	add	r3, fp
 800c270:	42bb      	cmp	r3, r7
 800c272:	f108 0802 	add.w	r8, r8, #2
 800c276:	d02a      	beq.n	800c2ce <_DrawBitmap+0x21a>
 800c278:	9804      	ldr	r0, [sp, #16]
 800c27a:	ebc0 030a 	rsb	r3, r0, sl
 800c27e:	5ddb      	ldrb	r3, [r3, r7]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d0f2      	beq.n	800c26a <_DrawBitmap+0x1b6>
 800c284:	e7e5      	b.n	800c252 <_DrawBitmap+0x19e>
 800c286:	f013 0303 	ands.w	r3, r3, #3
 800c28a:	d004      	beq.n	800c296 <_DrawBitmap+0x1e2>
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d11e      	bne.n	800c2ce <_DrawBitmap+0x21a>
 800c290:	46a0      	mov	r8, r4
 800c292:	9f04      	ldr	r7, [sp, #16]
 800c294:	e014      	b.n	800c2c0 <_DrawBitmap+0x20c>
 800c296:	4651      	mov	r1, sl
 800c298:	465a      	mov	r2, fp
 800c29a:	f003 ff8e 	bl	80101ba <memcpy>
 800c29e:	e016      	b.n	800c2ce <_DrawBitmap+0x21a>
 800c2a0:	f828 3c02 	strh.w	r3, [r8, #-2]
 800c2a4:	b12d      	cbz	r5, 800c2b2 <_DrawBitmap+0x1fe>
 800c2a6:	68ab      	ldr	r3, [r5, #8]
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4639      	mov	r1, r7
 800c2ae:	4632      	mov	r2, r6
 800c2b0:	4798      	blx	r3
 800c2b2:	9b04      	ldr	r3, [sp, #16]
 800c2b4:	3701      	adds	r7, #1
 800c2b6:	445b      	add	r3, fp
 800c2b8:	42bb      	cmp	r3, r7
 800c2ba:	f108 0802 	add.w	r8, r8, #2
 800c2be:	d006      	beq.n	800c2ce <_DrawBitmap+0x21a>
 800c2c0:	9a04      	ldr	r2, [sp, #16]
 800c2c2:	ebc2 030a 	rsb	r3, r2, sl
 800c2c6:	5ddb      	ldrb	r3, [r3, r7]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d0f2      	beq.n	800c2b2 <_DrawBitmap+0x1fe>
 800c2cc:	e7e8      	b.n	800c2a0 <_DrawBitmap+0x1ec>
 800c2ce:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c2d0:	44ba      	add	sl, r7
 800c2d2:	9f08      	ldr	r7, [sp, #32]
 800c2d4:	3601      	adds	r6, #1
 800c2d6:	443c      	add	r4, r7
 800c2d8:	e79b      	b.n	800c212 <_DrawBitmap+0x15e>
 800c2da:	2d00      	cmp	r5, #0
 800c2dc:	f040 8273 	bne.w	800c7c6 <_DrawBitmap+0x712>
 800c2e0:	e274      	b.n	800c7cc <_DrawBitmap+0x718>
 800c2e2:	bf00      	nop
 800c2e4:	200001b0 	.word	0x200001b0
 800c2e8:	2001948c 	.word	0x2001948c
 800c2ec:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800c2ee:	4bab      	ldr	r3, [pc, #684]	; (800c59c <_DrawBitmap+0x4e8>)
 800c2f0:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800c2f2:	9409      	str	r4, [sp, #36]	; 0x24
 800c2f4:	2e00      	cmp	r6, #0
 800c2f6:	bf08      	it	eq
 800c2f8:	461e      	moveq	r6, r3
 800c2fa:	9621      	str	r6, [sp, #132]	; 0x84
 800c2fc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c2fe:	0076      	lsls	r6, r6, #1
 800c300:	960e      	str	r6, [sp, #56]	; 0x38
 800c302:	00bf      	lsls	r7, r7, #2
 800c304:	9e07      	ldr	r6, [sp, #28]
 800c306:	970f      	str	r7, [sp, #60]	; 0x3c
 800c308:	9605      	str	r6, [sp, #20]
 800c30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c30c:	9e05      	ldr	r6, [sp, #20]
 800c30e:	9f07      	ldr	r7, [sp, #28]
 800c310:	1e9c      	subs	r4, r3, #2
 800c312:	1bf3      	subs	r3, r6, r7
 800c314:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c316:	42b3      	cmp	r3, r6
 800c318:	f280 8253 	bge.w	800c7c2 <_DrawBitmap+0x70e>
 800c31c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c31e:	2f02      	cmp	r7, #2
 800c320:	f000 80d9 	beq.w	800c4d6 <_DrawBitmap+0x422>
 800c324:	2f04      	cmp	r7, #4
 800c326:	f000 8178 	beq.w	800c61a <_DrawBitmap+0x566>
 800c32a:	2f01      	cmp	r7, #1
 800c32c:	f040 823f 	bne.w	800c7ae <_DrawBitmap+0x6fa>
 800c330:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800c5a4 <_DrawBitmap+0x4f0>
 800c334:	f8d9 3000 	ldr.w	r3, [r9]
 800c338:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c33a:	f7fc fee1 	bl	8009100 <GUI_ALLOC_LockH>
 800c33e:	f89a 3000 	ldrb.w	r3, [sl]
 800c342:	4a97      	ldr	r2, [pc, #604]	; (800c5a0 <_DrawBitmap+0x4ec>)
 800c344:	9010      	str	r0, [sp, #64]	; 0x40
 800c346:	5cd5      	ldrb	r5, [r2, r3]
 800c348:	f8d9 3000 	ldr.w	r3, [r9]
 800c34c:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c34e:	7c1b      	ldrb	r3, [r3, #16]
 800c350:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800c352:	f003 0303 	and.w	r3, r3, #3
 800c356:	2b02      	cmp	r3, #2
 800c358:	465e      	mov	r6, fp
 800c35a:	f1c0 0808 	rsb	r8, r0, #8
 800c35e:	fa45 f500 	asr.w	r5, r5, r0
 800c362:	d022      	beq.n	800c3aa <_DrawBitmap+0x2f6>
 800c364:	2b03      	cmp	r3, #3
 800c366:	d062      	beq.n	800c42e <_DrawBitmap+0x37a>
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d060      	beq.n	800c42e <_DrawBitmap+0x37a>
 800c36c:	4652      	mov	r2, sl
 800c36e:	4546      	cmp	r6, r8
 800c370:	bf38      	it	cc
 800c372:	46b0      	movcc	r8, r6
 800c374:	ebc8 0606 	rsb	r6, r8, r6
 800c378:	4643      	mov	r3, r8
 800c37a:	4621      	mov	r1, r4
 800c37c:	f005 0001 	and.w	r0, r5, #1
 800c380:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c382:	3b01      	subs	r3, #1
 800c384:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800c388:	f821 0b02 	strh.w	r0, [r1], #2
 800c38c:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800c390:	d1f4      	bne.n	800c37c <_DrawBitmap+0x2c8>
 800c392:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800c396:	2e00      	cmp	r6, #0
 800c398:	f000 8099 	beq.w	800c4ce <_DrawBitmap+0x41a>
 800c39c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c3a0:	497f      	ldr	r1, [pc, #508]	; (800c5a0 <_DrawBitmap+0x4ec>)
 800c3a2:	f04f 0808 	mov.w	r8, #8
 800c3a6:	5ccd      	ldrb	r5, [r1, r3]
 800c3a8:	e7e1      	b.n	800c36e <_DrawBitmap+0x2ba>
 800c3aa:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c3ac:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800c3b0:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800c3b4:	f8cd a018 	str.w	sl, [sp, #24]
 800c3b8:	4546      	cmp	r6, r8
 800c3ba:	bf38      	it	cc
 800c3bc:	46b0      	movcc	r8, r6
 800c3be:	ebc8 0606 	rsb	r6, r8, r6
 800c3c2:	b32f      	cbz	r7, 800c410 <_DrawBitmap+0x35c>
 800c3c4:	b91d      	cbnz	r5, 800c3ce <_DrawBitmap+0x31a>
 800c3c6:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800c3ca:	44c1      	add	r9, r8
 800c3cc:	e024      	b.n	800c418 <_DrawBitmap+0x364>
 800c3ce:	07ea      	lsls	r2, r5, #31
 800c3d0:	d50b      	bpl.n	800c3ea <_DrawBitmap+0x336>
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	9a05      	ldr	r2, [sp, #20]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f8cd c008 	str.w	ip, [sp, #8]
 800c3dc:	4638      	mov	r0, r7
 800c3de:	4649      	mov	r1, r9
 800c3e0:	4798      	blx	r3
 800c3e2:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c3e6:	f8a4 c000 	strh.w	ip, [r4]
 800c3ea:	f1b8 0801 	subs.w	r8, r8, #1
 800c3ee:	f109 0901 	add.w	r9, r9, #1
 800c3f2:	f104 0402 	add.w	r4, r4, #2
 800c3f6:	d00f      	beq.n	800c418 <_DrawBitmap+0x364>
 800c3f8:	086d      	lsrs	r5, r5, #1
 800c3fa:	e7e3      	b.n	800c3c4 <_DrawBitmap+0x310>
 800c3fc:	07eb      	lsls	r3, r5, #31
 800c3fe:	bf48      	it	mi
 800c400:	f8a4 c000 	strhmi.w	ip, [r4]
 800c404:	f1b8 0801 	subs.w	r8, r8, #1
 800c408:	f104 0402 	add.w	r4, r4, #2
 800c40c:	d004      	beq.n	800c418 <_DrawBitmap+0x364>
 800c40e:	086d      	lsrs	r5, r5, #1
 800c410:	2d00      	cmp	r5, #0
 800c412:	d1f3      	bne.n	800c3fc <_DrawBitmap+0x348>
 800c414:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800c418:	2e00      	cmp	r6, #0
 800c41a:	d058      	beq.n	800c4ce <_DrawBitmap+0x41a>
 800c41c:	9906      	ldr	r1, [sp, #24]
 800c41e:	4a60      	ldr	r2, [pc, #384]	; (800c5a0 <_DrawBitmap+0x4ec>)
 800c420:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c424:	9106      	str	r1, [sp, #24]
 800c426:	5cd5      	ldrb	r5, [r2, r3]
 800c428:	f04f 0808 	mov.w	r8, #8
 800c42c:	e7c4      	b.n	800c3b8 <_DrawBitmap+0x304>
 800c42e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c430:	6913      	ldr	r3, [r2, #16]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	4798      	blx	r3
 800c436:	9b04      	ldr	r3, [sp, #16]
 800c438:	930b      	str	r3, [sp, #44]	; 0x2c
 800c43a:	b280      	uxth	r0, r0
 800c43c:	900a      	str	r0, [sp, #40]	; 0x28
 800c43e:	f10a 0901 	add.w	r9, sl, #1
 800c442:	4546      	cmp	r6, r8
 800c444:	bf38      	it	cc
 800c446:	46b0      	movcc	r8, r6
 800c448:	ebc8 0606 	rsb	r6, r8, r6
 800c44c:	1ca3      	adds	r3, r4, #2
 800c44e:	b31f      	cbz	r7, 800c498 <_DrawBitmap+0x3e4>
 800c450:	f8cd 8018 	str.w	r8, [sp, #24]
 800c454:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c456:	9a06      	ldr	r2, [sp, #24]
 800c458:	4440      	add	r0, r8
 800c45a:	900c      	str	r0, [sp, #48]	; 0x30
 800c45c:	1a81      	subs	r1, r0, r2
 800c45e:	07e8      	lsls	r0, r5, #31
 800c460:	d50d      	bpl.n	800c47e <_DrawBitmap+0x3ca>
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	4638      	mov	r0, r7
 800c466:	f8d2 c000 	ldr.w	ip, [r2]
 800c46a:	9a05      	ldr	r2, [sp, #20]
 800c46c:	9302      	str	r3, [sp, #8]
 800c46e:	47e0      	blx	ip
 800c470:	9b02      	ldr	r3, [sp, #8]
 800c472:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c474:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800c478:	4042      	eors	r2, r0
 800c47a:	f823 2c02 	strh.w	r2, [r3, #-2]
 800c47e:	9906      	ldr	r1, [sp, #24]
 800c480:	3901      	subs	r1, #1
 800c482:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800c486:	f103 0302 	add.w	r3, r3, #2
 800c48a:	9106      	str	r1, [sp, #24]
 800c48c:	d1e2      	bne.n	800c454 <_DrawBitmap+0x3a0>
 800c48e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c490:	930b      	str	r3, [sp, #44]	; 0x2c
 800c492:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800c496:	e010      	b.n	800c4ba <_DrawBitmap+0x406>
 800c498:	4642      	mov	r2, r8
 800c49a:	07e9      	lsls	r1, r5, #31
 800c49c:	d505      	bpl.n	800c4aa <_DrawBitmap+0x3f6>
 800c49e:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 800c4a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c4a4:	4041      	eors	r1, r0
 800c4a6:	f823 1c02 	strh.w	r1, [r3, #-2]
 800c4aa:	3a01      	subs	r2, #1
 800c4ac:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800c4b0:	f103 0302 	add.w	r3, r3, #2
 800c4b4:	d1f1      	bne.n	800c49a <_DrawBitmap+0x3e6>
 800c4b6:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800c4ba:	b146      	cbz	r6, 800c4ce <_DrawBitmap+0x41a>
 800c4bc:	f899 3000 	ldrb.w	r3, [r9]
 800c4c0:	4a37      	ldr	r2, [pc, #220]	; (800c5a0 <_DrawBitmap+0x4ec>)
 800c4c2:	f109 0901 	add.w	r9, r9, #1
 800c4c6:	5cd5      	ldrb	r5, [r2, r3]
 800c4c8:	f04f 0808 	mov.w	r8, #8
 800c4cc:	e7b9      	b.n	800c442 <_DrawBitmap+0x38e>
 800c4ce:	a810      	add	r0, sp, #64	; 0x40
 800c4d0:	f7fc fe24 	bl	800911c <GUI_ALLOC_UnlockH>
 800c4d4:	e16b      	b.n	800c7ae <_DrawBitmap+0x6fa>
 800c4d6:	4b33      	ldr	r3, [pc, #204]	; (800c5a4 <_DrawBitmap+0x4f0>)
 800c4d8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800c4de:	7c1b      	ldrb	r3, [r3, #16]
 800c4e0:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800c4e4:	f1c6 0504 	rsb	r5, r6, #4
 800c4e8:	f89a 6000 	ldrb.w	r6, [sl]
 800c4ec:	f003 0303 	and.w	r3, r3, #3
 800c4f0:	40be      	lsls	r6, r7
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	b2ed      	uxtb	r5, r5
 800c4f6:	b2f6      	uxtb	r6, r6
 800c4f8:	d06a      	beq.n	800c5d0 <_DrawBitmap+0x51c>
 800c4fa:	d308      	bcc.n	800c50e <_DrawBitmap+0x45a>
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	f040 8156 	bne.w	800c7ae <_DrawBitmap+0x6fa>
 800c502:	f8cd a018 	str.w	sl, [sp, #24]
 800c506:	465f      	mov	r7, fp
 800c508:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c50c:	e03e      	b.n	800c58c <_DrawBitmap+0x4d8>
 800c50e:	4652      	mov	r2, sl
 800c510:	465b      	mov	r3, fp
 800c512:	429d      	cmp	r5, r3
 800c514:	bfc8      	it	gt
 800c516:	b2dd      	uxtbgt	r5, r3
 800c518:	1b5b      	subs	r3, r3, r5
 800c51a:	4629      	mov	r1, r5
 800c51c:	4620      	mov	r0, r4
 800c51e:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 800c522:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c524:	3901      	subs	r1, #1
 800c526:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 800c52a:	f820 cb02 	strh.w	ip, [r0], #2
 800c52e:	00b6      	lsls	r6, r6, #2
 800c530:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800c534:	b2f6      	uxtb	r6, r6
 800c536:	d1f2      	bne.n	800c51e <_DrawBitmap+0x46a>
 800c538:	3d01      	subs	r5, #1
 800c53a:	b2ed      	uxtb	r5, r5
 800c53c:	3501      	adds	r5, #1
 800c53e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800c542:	2b00      	cmp	r3, #0
 800c544:	f000 8133 	beq.w	800c7ae <_DrawBitmap+0x6fa>
 800c548:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800c54c:	2504      	movs	r5, #4
 800c54e:	e7e0      	b.n	800c512 <_DrawBitmap+0x45e>
 800c550:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800c554:	eb08 010c 	add.w	r1, r8, ip
 800c558:	d126      	bne.n	800c5a8 <_DrawBitmap+0x4f4>
 800c55a:	f108 0801 	add.w	r8, r8, #1
 800c55e:	fa5f f388 	uxtb.w	r3, r8
 800c562:	00b6      	lsls	r6, r6, #2
 800c564:	429d      	cmp	r5, r3
 800c566:	b2f6      	uxtb	r6, r6
 800c568:	d1f2      	bne.n	800c550 <_DrawBitmap+0x49c>
 800c56a:	3d01      	subs	r5, #1
 800c56c:	b2ed      	uxtb	r5, r5
 800c56e:	1c6b      	adds	r3, r5, #1
 800c570:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800c574:	f10c 0301 	add.w	r3, ip, #1
 800c578:	eb03 0c05 	add.w	ip, r3, r5
 800c57c:	2f00      	cmp	r7, #0
 800c57e:	f000 8116 	beq.w	800c7ae <_DrawBitmap+0x6fa>
 800c582:	9b06      	ldr	r3, [sp, #24]
 800c584:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800c588:	9306      	str	r3, [sp, #24]
 800c58a:	2504      	movs	r5, #4
 800c58c:	42bd      	cmp	r5, r7
 800c58e:	bfc8      	it	gt
 800c590:	b2fd      	uxtbgt	r5, r7
 800c592:	1b7f      	subs	r7, r7, r5
 800c594:	f04f 0800 	mov.w	r8, #0
 800c598:	e7da      	b.n	800c550 <_DrawBitmap+0x49c>
 800c59a:	bf00      	nop
 800c59c:	08013548 	.word	0x08013548
 800c5a0:	080151e0 	.word	0x080151e0
 800c5a4:	200001b0 	.word	0x200001b0
 800c5a8:	09b3      	lsrs	r3, r6, #6
 800c5aa:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c5ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c5b0:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 800c5b4:	f1b9 0f00 	cmp.w	r9, #0
 800c5b8:	d0cf      	beq.n	800c55a <_DrawBitmap+0x4a6>
 800c5ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c5be:	9a05      	ldr	r2, [sp, #20]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f8cd c008 	str.w	ip, [sp, #8]
 800c5c6:	4648      	mov	r0, r9
 800c5c8:	4798      	blx	r3
 800c5ca:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c5ce:	e7c4      	b.n	800c55a <_DrawBitmap+0x4a6>
 800c5d0:	4651      	mov	r1, sl
 800c5d2:	465b      	mov	r3, fp
 800c5d4:	429d      	cmp	r5, r3
 800c5d6:	bfc8      	it	gt
 800c5d8:	b2dd      	uxtbgt	r5, r3
 800c5da:	1b5b      	subs	r3, r3, r5
 800c5dc:	1ca2      	adds	r2, r4, #2
 800c5de:	4628      	mov	r0, r5
 800c5e0:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800c5e4:	d005      	beq.n	800c5f2 <_DrawBitmap+0x53e>
 800c5e6:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 800c5ea:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800c5ee:	f822 7c02 	strh.w	r7, [r2, #-2]
 800c5f2:	3801      	subs	r0, #1
 800c5f4:	00b6      	lsls	r6, r6, #2
 800c5f6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800c5fa:	b2f6      	uxtb	r6, r6
 800c5fc:	f102 0202 	add.w	r2, r2, #2
 800c600:	d1ee      	bne.n	800c5e0 <_DrawBitmap+0x52c>
 800c602:	3d01      	subs	r5, #1
 800c604:	b2ed      	uxtb	r5, r5
 800c606:	3501      	adds	r5, #1
 800c608:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f000 80ce 	beq.w	800c7ae <_DrawBitmap+0x6fa>
 800c612:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800c616:	2504      	movs	r5, #4
 800c618:	e7dc      	b.n	800c5d4 <_DrawBitmap+0x520>
 800c61a:	4a6e      	ldr	r2, [pc, #440]	; (800c7d4 <_DrawBitmap+0x720>)
 800c61c:	f89a 3000 	ldrb.w	r3, [sl]
 800c620:	6812      	ldr	r2, [r2, #0]
 800c622:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800c624:	7c12      	ldrb	r2, [r2, #16]
 800c626:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c628:	f002 0203 	and.w	r2, r2, #3
 800c62c:	40bb      	lsls	r3, r7
 800c62e:	2a01      	cmp	r2, #1
 800c630:	b2dd      	uxtb	r5, r3
 800c632:	f000 8095 	beq.w	800c760 <_DrawBitmap+0x6ac>
 800c636:	d302      	bcc.n	800c63e <_DrawBitmap+0x58a>
 800c638:	2a02      	cmp	r2, #2
 800c63a:	d036      	beq.n	800c6aa <_DrawBitmap+0x5f6>
 800c63c:	e0b7      	b.n	800c7ae <_DrawBitmap+0x6fa>
 800c63e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c640:	b166      	cbz	r6, 800c65c <_DrawBitmap+0x5a8>
 800c642:	092d      	lsrs	r5, r5, #4
 800c644:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c646:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800c64a:	8023      	strh	r3, [r4, #0]
 800c64c:	f10a 0201 	add.w	r2, sl, #1
 800c650:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c652:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800c656:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c65a:	e001      	b.n	800c660 <_DrawBitmap+0x5ac>
 800c65c:	465b      	mov	r3, fp
 800c65e:	4652      	mov	r2, sl
 800c660:	2b01      	cmp	r3, #1
 800c662:	dd19      	ble.n	800c698 <_DrawBitmap+0x5e4>
 800c664:	1058      	asrs	r0, r3, #1
 800c666:	1d21      	adds	r1, r4, #4
 800c668:	f003 0301 	and.w	r3, r3, #1
 800c66c:	eb02 0c00 	add.w	ip, r2, r0
 800c670:	092f      	lsrs	r7, r5, #4
 800c672:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800c674:	f005 050f 	and.w	r5, r5, #15
 800c678:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800c67c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c680:	f821 7c04 	strh.w	r7, [r1, #-4]
 800c684:	f821 5c02 	strh.w	r5, [r1, #-2]
 800c688:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800c68c:	4562      	cmp	r2, ip
 800c68e:	f101 0104 	add.w	r1, r1, #4
 800c692:	d1ed      	bne.n	800c670 <_DrawBitmap+0x5bc>
 800c694:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f000 8088 	beq.w	800c7ae <_DrawBitmap+0x6fa>
 800c69e:	092d      	lsrs	r5, r5, #4
 800c6a0:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c6a2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800c6a6:	8023      	strh	r3, [r4, #0]
 800c6a8:	e081      	b.n	800c7ae <_DrawBitmap+0x6fa>
 800c6aa:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800c6ac:	b1c7      	cbz	r7, 800c6e0 <_DrawBitmap+0x62c>
 800c6ae:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800c6b2:	d00b      	beq.n	800c6cc <_DrawBitmap+0x618>
 800c6b4:	092d      	lsrs	r5, r5, #4
 800c6b6:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c6b8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800c6bc:	8023      	strh	r3, [r4, #0]
 800c6be:	b12e      	cbz	r6, 800c6cc <_DrawBitmap+0x618>
 800c6c0:	68b3      	ldr	r3, [r6, #8]
 800c6c2:	9904      	ldr	r1, [sp, #16]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	9a05      	ldr	r2, [sp, #20]
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	4798      	blx	r3
 800c6cc:	9804      	ldr	r0, [sp, #16]
 800c6ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c6d0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800c6d4:	1c47      	adds	r7, r0, #1
 800c6d6:	f10b 39ff 	add.w	r9, fp, #4294967295
 800c6da:	f10a 0801 	add.w	r8, sl, #1
 800c6de:	e00f      	b.n	800c700 <_DrawBitmap+0x64c>
 800c6e0:	46d9      	mov	r9, fp
 800c6e2:	46d0      	mov	r8, sl
 800c6e4:	9f04      	ldr	r7, [sp, #16]
 800c6e6:	e00b      	b.n	800c700 <_DrawBitmap+0x64c>
 800c6e8:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800c6ec:	d10c      	bne.n	800c708 <_DrawBitmap+0x654>
 800c6ee:	f015 050f 	ands.w	r5, r5, #15
 800c6f2:	d117      	bne.n	800c724 <_DrawBitmap+0x670>
 800c6f4:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 800c6f8:	3404      	adds	r4, #4
 800c6fa:	3702      	adds	r7, #2
 800c6fc:	f1a9 0902 	sub.w	r9, r9, #2
 800c700:	f1b9 0f01 	cmp.w	r9, #1
 800c704:	dcf0      	bgt.n	800c6e8 <_DrawBitmap+0x634>
 800c706:	e01a      	b.n	800c73e <_DrawBitmap+0x68a>
 800c708:	092b      	lsrs	r3, r5, #4
 800c70a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c70c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c710:	8023      	strh	r3, [r4, #0]
 800c712:	2e00      	cmp	r6, #0
 800c714:	d0eb      	beq.n	800c6ee <_DrawBitmap+0x63a>
 800c716:	68b3      	ldr	r3, [r6, #8]
 800c718:	9a05      	ldr	r2, [sp, #20]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4630      	mov	r0, r6
 800c71e:	4639      	mov	r1, r7
 800c720:	4798      	blx	r3
 800c722:	e7e4      	b.n	800c6ee <_DrawBitmap+0x63a>
 800c724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c726:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800c72a:	8063      	strh	r3, [r4, #2]
 800c72c:	2e00      	cmp	r6, #0
 800c72e:	d0e1      	beq.n	800c6f4 <_DrawBitmap+0x640>
 800c730:	68b3      	ldr	r3, [r6, #8]
 800c732:	9a05      	ldr	r2, [sp, #20]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4630      	mov	r0, r6
 800c738:	1c79      	adds	r1, r7, #1
 800c73a:	4798      	blx	r3
 800c73c:	e7da      	b.n	800c6f4 <_DrawBitmap+0x640>
 800c73e:	f1b9 0f00 	cmp.w	r9, #0
 800c742:	d034      	beq.n	800c7ae <_DrawBitmap+0x6fa>
 800c744:	092d      	lsrs	r5, r5, #4
 800c746:	d032      	beq.n	800c7ae <_DrawBitmap+0x6fa>
 800c748:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c74a:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 800c74e:	8023      	strh	r3, [r4, #0]
 800c750:	b36e      	cbz	r6, 800c7ae <_DrawBitmap+0x6fa>
 800c752:	68b3      	ldr	r3, [r6, #8]
 800c754:	9a05      	ldr	r2, [sp, #20]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4630      	mov	r0, r6
 800c75a:	4639      	mov	r1, r7
 800c75c:	4798      	blx	r3
 800c75e:	e026      	b.n	800c7ae <_DrawBitmap+0x6fa>
 800c760:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c762:	f1c6 0302 	rsb	r3, r6, #2
 800c766:	b2db      	uxtb	r3, r3
 800c768:	4650      	mov	r0, sl
 800c76a:	465a      	mov	r2, fp
 800c76c:	4293      	cmp	r3, r2
 800c76e:	bfc8      	it	gt
 800c770:	b2d3      	uxtbgt	r3, r2
 800c772:	1ad2      	subs	r2, r2, r3
 800c774:	1ca1      	adds	r1, r4, #2
 800c776:	461e      	mov	r6, r3
 800c778:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800c77c:	d005      	beq.n	800c78a <_DrawBitmap+0x6d6>
 800c77e:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 800c782:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800c786:	f821 7c02 	strh.w	r7, [r1, #-2]
 800c78a:	3e01      	subs	r6, #1
 800c78c:	012d      	lsls	r5, r5, #4
 800c78e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800c792:	b2ed      	uxtb	r5, r5
 800c794:	f101 0102 	add.w	r1, r1, #2
 800c798:	d1ee      	bne.n	800c778 <_DrawBitmap+0x6c4>
 800c79a:	3b01      	subs	r3, #1
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	3301      	adds	r3, #1
 800c7a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800c7a4:	b11a      	cbz	r2, 800c7ae <_DrawBitmap+0x6fa>
 800c7a6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	e7de      	b.n	800c76c <_DrawBitmap+0x6b8>
 800c7ae:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c7b0:	9b05      	ldr	r3, [sp, #20]
 800c7b2:	9e08      	ldr	r6, [sp, #32]
 800c7b4:	44ba      	add	sl, r7
 800c7b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	4437      	add	r7, r6
 800c7bc:	9305      	str	r3, [sp, #20]
 800c7be:	9709      	str	r7, [sp, #36]	; 0x24
 800c7c0:	e5a3      	b.n	800c30a <_DrawBitmap+0x256>
 800c7c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7c4:	b113      	cbz	r3, 800c7cc <_DrawBitmap+0x718>
 800c7c6:	a811      	add	r0, sp, #68	; 0x44
 800c7c8:	f7fc fca8 	bl	800911c <GUI_ALLOC_UnlockH>
 800c7cc:	b013      	add	sp, #76	; 0x4c
 800c7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d2:	bf00      	nop
 800c7d4:	200001b0 	.word	0x200001b0

0800c7d8 <GUI_MEMDEV__WriteToActiveAt>:
 800c7d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c7dc:	460e      	mov	r6, r1
 800c7de:	4690      	mov	r8, r2
 800c7e0:	4607      	mov	r7, r0
 800c7e2:	f7fc fc8d 	bl	8009100 <GUI_ALLOC_LockH>
 800c7e6:	6803      	ldr	r3, [r0, #0]
 800c7e8:	ac02      	add	r4, sp, #8
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	2116      	movs	r1, #22
 800c7f6:	4798      	blx	r3
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f7fc fc8e 	bl	800911c <GUI_ALLOC_UnlockH>
 800c800:	b11d      	cbz	r5, 800c80a <GUI_MEMDEV__WriteToActiveAt+0x32>
 800c802:	4638      	mov	r0, r7
 800c804:	4631      	mov	r1, r6
 800c806:	4642      	mov	r2, r8
 800c808:	47a8      	blx	r5
 800c80a:	b002      	add	sp, #8
 800c80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c810 <GUI_MEMDEV__CreateFixed>:
 800c810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c814:	4e3e      	ldr	r6, [pc, #248]	; (800c910 <GUI_MEMDEV__CreateFixed+0x100>)
 800c816:	b087      	sub	sp, #28
 800c818:	461d      	mov	r5, r3
 800c81a:	6833      	ldr	r3, [r6, #0]
 800c81c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c81e:	7c5b      	ldrb	r3, [r3, #17]
 800c820:	4683      	mov	fp, r0
 800c822:	468a      	mov	sl, r1
 800c824:	4690      	mov	r8, r2
 800c826:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c828:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c82a:	2200      	movs	r2, #0
 800c82c:	f7fb ff20 	bl	8008670 <GUI_DEVICE_Create>
 800c830:	4604      	mov	r4, r0
 800c832:	2800      	cmp	r0, #0
 800c834:	d033      	beq.n	800c89e <GUI_MEMDEV__CreateFixed+0x8e>
 800c836:	6903      	ldr	r3, [r0, #16]
 800c838:	689b      	ldr	r3, [r3, #8]
 800c83a:	4798      	blx	r3
 800c83c:	f000 fa5d 	bl	800ccfa <LCD__GetBPPDevice>
 800c840:	fb08 f600 	mul.w	r6, r8, r0
 800c844:	9003      	str	r0, [sp, #12]
 800c846:	3607      	adds	r6, #7
 800c848:	f7fc fe16 	bl	8009478 <GUI_ALLOC_RequestSize>
 800c84c:	f017 0901 	ands.w	r9, r7, #1
 800c850:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800c854:	d104      	bne.n	800c860 <GUI_MEMDEV__CreateFixed+0x50>
 800c856:	2304      	movs	r3, #4
 800c858:	fb90 f0f3 	sdiv	r0, r0, r3
 800c85c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c860:	2d00      	cmp	r5, #0
 800c862:	dc09      	bgt.n	800c878 <GUI_MEMDEV__CreateFixed+0x68>
 800c864:	b11e      	cbz	r6, 800c86e <GUI_MEMDEV__CreateFixed+0x5e>
 800c866:	3818      	subs	r0, #24
 800c868:	fbb0 f0f6 	udiv	r0, r0, r6
 800c86c:	e000      	b.n	800c870 <GUI_MEMDEV__CreateFixed+0x60>
 800c86e:	4630      	mov	r0, r6
 800c870:	426d      	negs	r5, r5
 800c872:	42a8      	cmp	r0, r5
 800c874:	bfb8      	it	lt
 800c876:	4605      	movlt	r5, r0
 800c878:	f1b9 0f00 	cmp.w	r9, #0
 800c87c:	d109      	bne.n	800c892 <GUI_MEMDEV__CreateFixed+0x82>
 800c87e:	f8cd 9000 	str.w	r9, [sp]
 800c882:	4658      	mov	r0, fp
 800c884:	4651      	mov	r1, sl
 800c886:	4642      	mov	r2, r8
 800c888:	462b      	mov	r3, r5
 800c88a:	f002 fa79 	bl	800ed80 <GUI_USAGE_BM_Create>
 800c88e:	4607      	mov	r7, r0
 800c890:	e000      	b.n	800c894 <GUI_MEMDEV__CreateFixed+0x84>
 800c892:	2700      	movs	r7, #0
 800c894:	2d00      	cmp	r5, #0
 800c896:	dc04      	bgt.n	800c8a2 <GUI_MEMDEV__CreateFixed+0x92>
 800c898:	4620      	mov	r0, r4
 800c89a:	f7fb fee7 	bl	800866c <GUI_DEVICE_Delete>
 800c89e:	2000      	movs	r0, #0
 800c8a0:	e032      	b.n	800c908 <GUI_MEMDEV__CreateFixed+0xf8>
 800c8a2:	fb06 f005 	mul.w	r0, r6, r5
 800c8a6:	3018      	adds	r0, #24
 800c8a8:	f1b9 0f00 	cmp.w	r9, #0
 800c8ac:	d002      	beq.n	800c8b4 <GUI_MEMDEV__CreateFixed+0xa4>
 800c8ae:	f7fc fe6f 	bl	8009590 <GUI_ALLOC_AllocNoInit>
 800c8b2:	e001      	b.n	800c8b8 <GUI_MEMDEV__CreateFixed+0xa8>
 800c8b4:	f001 fab0 	bl	800de18 <GUI_ALLOC_AllocZero>
 800c8b8:	4681      	mov	r9, r0
 800c8ba:	b940      	cbnz	r0, 800c8ce <GUI_MEMDEV__CreateFixed+0xbe>
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f7fb fed5 	bl	800866c <GUI_DEVICE_Delete>
 800c8c2:	2f00      	cmp	r7, #0
 800c8c4:	d0eb      	beq.n	800c89e <GUI_MEMDEV__CreateFixed+0x8e>
 800c8c6:	4638      	mov	r0, r7
 800c8c8:	f7fc fc48 	bl	800915c <GUI_ALLOC_Free>
 800c8cc:	e01b      	b.n	800c906 <GUI_MEMDEV__CreateFixed+0xf6>
 800c8ce:	f7fc fc17 	bl	8009100 <GUI_ALLOC_LockH>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	a806      	add	r0, sp, #24
 800c8d6:	9a03      	ldr	r2, [sp, #12]
 800c8d8:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c8dc:	611a      	str	r2, [r3, #16]
 800c8de:	601c      	str	r4, [r3, #0]
 800c8e0:	f8a3 b004 	strh.w	fp, [r3, #4]
 800c8e4:	f8a3 a006 	strh.w	sl, [r3, #6]
 800c8e8:	f8a3 8008 	strh.w	r8, [r3, #8]
 800c8ec:	815d      	strh	r5, [r3, #10]
 800c8ee:	60de      	str	r6, [r3, #12]
 800c8f0:	615f      	str	r7, [r3, #20]
 800c8f2:	f7fc fc13 	bl	800911c <GUI_ALLOC_UnlockH>
 800c8f6:	4a06      	ldr	r2, [pc, #24]	; (800c910 <GUI_MEMDEV__CreateFixed+0x100>)
 800c8f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8fa:	6123      	str	r3, [r4, #16]
 800c8fc:	6813      	ldr	r3, [r2, #0]
 800c8fe:	f8c4 9008 	str.w	r9, [r4, #8]
 800c902:	7c5b      	ldrb	r3, [r3, #17]
 800c904:	61a3      	str	r3, [r4, #24]
 800c906:	4648      	mov	r0, r9
 800c908:	b007      	add	sp, #28
 800c90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90e:	bf00      	nop
 800c910:	200001b0 	.word	0x200001b0

0800c914 <GUI_MEMDEV_GetBitsPerPixel>:
 800c914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c916:	4605      	mov	r5, r0
 800c918:	b170      	cbz	r0, 800c938 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800c91a:	f7fc fbf1 	bl	8009100 <GUI_ALLOC_LockH>
 800c91e:	6803      	ldr	r3, [r0, #0]
 800c920:	ac02      	add	r4, sp, #8
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	4798      	blx	r3
 800c92c:	f000 f9e5 	bl	800ccfa <LCD__GetBPPDevice>
 800c930:	4605      	mov	r5, r0
 800c932:	4620      	mov	r0, r4
 800c934:	f7fc fbf2 	bl	800911c <GUI_ALLOC_UnlockH>
 800c938:	4628      	mov	r0, r5
 800c93a:	b003      	add	sp, #12
 800c93c:	bd30      	pop	{r4, r5, pc}
	...

0800c940 <GUI_MEMDEV_Delete>:
 800c940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c942:	4604      	mov	r4, r0
 800c944:	b1d0      	cbz	r0, 800c97c <GUI_MEMDEV_Delete+0x3c>
 800c946:	4b0e      	ldr	r3, [pc, #56]	; (800c980 <GUI_MEMDEV_Delete+0x40>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c94c:	4283      	cmp	r3, r0
 800c94e:	d101      	bne.n	800c954 <GUI_MEMDEV_Delete+0x14>
 800c950:	f001 f98a 	bl	800dc68 <GUI_SelectLCD>
 800c954:	4620      	mov	r0, r4
 800c956:	f7fc fbd3 	bl	8009100 <GUI_ALLOC_LockH>
 800c95a:	9001      	str	r0, [sp, #4]
 800c95c:	6940      	ldr	r0, [r0, #20]
 800c95e:	b108      	cbz	r0, 800c964 <GUI_MEMDEV_Delete+0x24>
 800c960:	f002 fa3a 	bl	800edd8 <GUI_USAGE_DecUseCnt>
 800c964:	ad02      	add	r5, sp, #8
 800c966:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c96a:	6818      	ldr	r0, [r3, #0]
 800c96c:	f7fb fe7e 	bl	800866c <GUI_DEVICE_Delete>
 800c970:	4628      	mov	r0, r5
 800c972:	f7fc fbd3 	bl	800911c <GUI_ALLOC_UnlockH>
 800c976:	4620      	mov	r0, r4
 800c978:	f7fc fbf0 	bl	800915c <GUI_ALLOC_Free>
 800c97c:	b003      	add	sp, #12
 800c97e:	bd30      	pop	{r4, r5, pc}
 800c980:	200001b0 	.word	0x200001b0

0800c984 <GUI_MEMDEV_CreateEx>:
 800c984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c988:	469a      	mov	sl, r3
 800c98a:	4b19      	ldr	r3, [pc, #100]	; (800c9f0 <GUI_MEMDEV_CreateEx+0x6c>)
 800c98c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4607      	mov	r7, r0
 800c992:	7c58      	ldrb	r0, [r3, #17]
 800c994:	4b17      	ldr	r3, [pc, #92]	; (800c9f4 <GUI_MEMDEV_CreateEx+0x70>)
 800c996:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800c99a:	4688      	mov	r8, r1
 800c99c:	4691      	mov	r9, r2
 800c99e:	68e3      	ldr	r3, [r4, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b04      	cmp	r3, #4
 800c9a4:	d006      	beq.n	800c9b4 <GUI_MEMDEV_CreateEx+0x30>
 800c9a6:	6824      	ldr	r4, [r4, #0]
 800c9a8:	2c00      	cmp	r4, #0
 800c9aa:	d1f8      	bne.n	800c99e <GUI_MEMDEV_CreateEx+0x1a>
 800c9ac:	f7fb fe4e 	bl	800864c <GUI_DEVICE__GetpDriver>
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	b130      	cbz	r0, 800c9c2 <GUI_MEMDEV_CreateEx+0x3e>
 800c9b4:	68e3      	ldr	r3, [r4, #12]
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ba:	2101      	movs	r1, #1
 800c9bc:	4798      	blx	r3
 800c9be:	4606      	mov	r6, r0
 800c9c0:	b908      	cbnz	r0, 800c9c6 <GUI_MEMDEV_CreateEx+0x42>
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	e010      	b.n	800c9e8 <GUI_MEMDEV_CreateEx+0x64>
 800c9c6:	6924      	ldr	r4, [r4, #16]
 800c9c8:	68a3      	ldr	r3, [r4, #8]
 800c9ca:	4798      	blx	r3
 800c9cc:	3001      	adds	r0, #1
 800c9ce:	bf04      	itt	eq
 800c9d0:	f045 0501 	orreq.w	r5, r5, #1
 800c9d4:	4c08      	ldreq	r4, [pc, #32]	; (800c9f8 <GUI_MEMDEV_CreateEx+0x74>)
 800c9d6:	9402      	str	r4, [sp, #8]
 800c9d8:	e88d 0060 	stmia.w	sp, {r5, r6}
 800c9dc:	4638      	mov	r0, r7
 800c9de:	4641      	mov	r1, r8
 800c9e0:	464a      	mov	r2, r9
 800c9e2:	4653      	mov	r3, sl
 800c9e4:	f7ff ff14 	bl	800c810 <GUI_MEMDEV__CreateFixed>
 800c9e8:	b004      	add	sp, #16
 800c9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ee:	bf00      	nop
 800c9f0:	200001b0 	.word	0x200001b0
 800c9f4:	2001af18 	.word	0x2001af18
 800c9f8:	0801555c 	.word	0x0801555c

0800c9fc <GUI_MEMDEV_Select>:
 800c9fc:	4b11      	ldr	r3, [pc, #68]	; (800ca44 <GUI_MEMDEV_Select+0x48>)
 800c9fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	4604      	mov	r4, r0
 800ca04:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800ca06:	461f      	mov	r7, r3
 800ca08:	b910      	cbnz	r0, 800ca10 <GUI_MEMDEV_Select+0x14>
 800ca0a:	f001 f92d 	bl	800dc68 <GUI_SelectLCD>
 800ca0e:	e016      	b.n	800ca3e <GUI_MEMDEV_Select+0x42>
 800ca10:	b10e      	cbz	r6, 800ca16 <GUI_MEMDEV_Select+0x1a>
 800ca12:	f001 f929 	bl	800dc68 <GUI_SelectLCD>
 800ca16:	f7fe fa31 	bl	800ae7c <WM_Deactivate>
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f7fc fb70 	bl	8009100 <GUI_ALLOC_LockH>
 800ca20:	ad02      	add	r5, sp, #8
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	f845 0d04 	str.w	r0, [r5, #-4]!
 800ca28:	661c      	str	r4, [r3, #96]	; 0x60
 800ca2a:	6800      	ldr	r0, [r0, #0]
 800ca2c:	f7fb fe5c 	bl	80086e8 <GUI_DEVICE_Link>
 800ca30:	4628      	mov	r0, r5
 800ca32:	f7fc fb73 	bl	800911c <GUI_ALLOC_UnlockH>
 800ca36:	f000 f85f 	bl	800caf8 <LCD_UpdateColorIndices>
 800ca3a:	f000 fc83 	bl	800d344 <LCD_SetClipRectMax>
 800ca3e:	4630      	mov	r0, r6
 800ca40:	b003      	add	sp, #12
 800ca42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca44:	200001b0 	.word	0x200001b0

0800ca48 <GUI_MEMDEV_CopyToLCDAt>:
 800ca48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	b085      	sub	sp, #20
 800ca50:	4615      	mov	r5, r2
 800ca52:	4606      	mov	r6, r0
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d041      	beq.n	800cadc <GUI_MEMDEV_CopyToLCDAt+0x94>
 800ca58:	2000      	movs	r0, #0
 800ca5a:	f001 f8a5 	bl	800dba8 <GUI_SetDrawMode>
 800ca5e:	4b21      	ldr	r3, [pc, #132]	; (800cae4 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4607      	mov	r7, r0
 800ca64:	4630      	mov	r0, r6
 800ca66:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800ca6a:	f7fc fb49 	bl	8009100 <GUI_ALLOC_LockH>
 800ca6e:	6803      	ldr	r3, [r0, #0]
 800ca70:	9001      	str	r0, [sp, #4]
 800ca72:	6998      	ldr	r0, [r3, #24]
 800ca74:	f001 f8e0 	bl	800dc38 <GUI_SelectLayer>
 800ca78:	4b1b      	ldr	r3, [pc, #108]	; (800cae8 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800ca7a:	429c      	cmp	r4, r3
 800ca7c:	9b01      	ldr	r3, [sp, #4]
 800ca7e:	bf04      	itt	eq
 800ca80:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800ca84:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800ca88:	891a      	ldrh	r2, [r3, #8]
 800ca8a:	895b      	ldrh	r3, [r3, #10]
 800ca8c:	f8ad 4008 	strh.w	r4, [sp, #8]
 800ca90:	3a01      	subs	r2, #1
 800ca92:	3b01      	subs	r3, #1
 800ca94:	4422      	add	r2, r4
 800ca96:	442b      	add	r3, r5
 800ca98:	4681      	mov	r9, r0
 800ca9a:	f8ad 200c 	strh.w	r2, [sp, #12]
 800ca9e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800caa2:	f8ad 500a 	strh.w	r5, [sp, #10]
 800caa6:	f7fe f9e1 	bl	800ae6c <WM_Activate>
 800caaa:	a801      	add	r0, sp, #4
 800caac:	f7fc fb36 	bl	800911c <GUI_ALLOC_UnlockH>
 800cab0:	a802      	add	r0, sp, #8
 800cab2:	f7fe f807 	bl	800aac4 <WM__InitIVRSearch>
 800cab6:	b948      	cbnz	r0, 800cacc <GUI_MEMDEV_CopyToLCDAt+0x84>
 800cab8:	4648      	mov	r0, r9
 800caba:	f001 f8bd 	bl	800dc38 <GUI_SelectLayer>
 800cabe:	4640      	mov	r0, r8
 800cac0:	f7ff ff9c 	bl	800c9fc <GUI_MEMDEV_Select>
 800cac4:	4638      	mov	r0, r7
 800cac6:	f001 f86f 	bl	800dba8 <GUI_SetDrawMode>
 800caca:	e007      	b.n	800cadc <GUI_MEMDEV_CopyToLCDAt+0x94>
 800cacc:	4630      	mov	r0, r6
 800cace:	4621      	mov	r1, r4
 800cad0:	462a      	mov	r2, r5
 800cad2:	f001 fc21 	bl	800e318 <GUI_MEMDEV__WriteToActiveOpaque>
 800cad6:	f7fd ff33 	bl	800a940 <WM__GetNextIVR>
 800cada:	e7ec      	b.n	800cab6 <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800cadc:	b005      	add	sp, #20
 800cade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cae2:	bf00      	nop
 800cae4:	200001b0 	.word	0x200001b0
 800cae8:	fffff001 	.word	0xfffff001

0800caec <GUI_MEMDEV_CopyToLCD>:
 800caec:	4901      	ldr	r1, [pc, #4]	; (800caf4 <GUI_MEMDEV_CopyToLCD+0x8>)
 800caee:	460a      	mov	r2, r1
 800caf0:	f7ff bfaa 	b.w	800ca48 <GUI_MEMDEV_CopyToLCDAt>
 800caf4:	fffff001 	.word	0xfffff001

0800caf8 <LCD_UpdateColorIndices>:
 800caf8:	b510      	push	{r4, lr}
 800cafa:	4c07      	ldr	r4, [pc, #28]	; (800cb18 <LCD_UpdateColorIndices+0x20>)
 800cafc:	6823      	ldr	r3, [r4, #0]
 800cafe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb00:	f000 fc7a 	bl	800d3f8 <LCD_Color2Index>
 800cb04:	f000 fc98 	bl	800d438 <LCD_SetColorIndex>
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cb0c:	f000 fc74 	bl	800d3f8 <LCD_Color2Index>
 800cb10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb14:	f000 bcac 	b.w	800d470 <LCD_SetBkColorIndex>
 800cb18:	200001b0 	.word	0x200001b0

0800cb1c <LCD_SetClipRectEx>:
 800cb1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb1e:	4c09      	ldr	r4, [pc, #36]	; (800cb44 <LCD_SetClipRectEx+0x28>)
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	7c5a      	ldrb	r2, [r3, #17]
 800cb24:	4b08      	ldr	r3, [pc, #32]	; (800cb48 <LCD_SetClipRectEx+0x2c>)
 800cb26:	4605      	mov	r5, r0
 800cb28:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cb2c:	68c2      	ldr	r2, [r0, #12]
 800cb2e:	4669      	mov	r1, sp
 800cb30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cb32:	4790      	blx	r2
 800cb34:	6820      	ldr	r0, [r4, #0]
 800cb36:	4629      	mov	r1, r5
 800cb38:	466a      	mov	r2, sp
 800cb3a:	3008      	adds	r0, #8
 800cb3c:	f000 fd40 	bl	800d5c0 <GUI__IntersectRects>
 800cb40:	b003      	add	sp, #12
 800cb42:	bd30      	pop	{r4, r5, pc}
 800cb44:	200001b0 	.word	0x200001b0
 800cb48:	2001af18 	.word	0x2001af18

0800cb4c <_GetDevProp>:
 800cb4c:	2801      	cmp	r0, #1
 800cb4e:	b510      	push	{r4, lr}
 800cb50:	460c      	mov	r4, r1
 800cb52:	dc08      	bgt.n	800cb66 <_GetDevProp+0x1a>
 800cb54:	f7fb fd7a 	bl	800864c <GUI_DEVICE__GetpDriver>
 800cb58:	b120      	cbz	r0, 800cb64 <_GetDevProp+0x18>
 800cb5a:	68c3      	ldr	r3, [r0, #12]
 800cb5c:	4621      	mov	r1, r4
 800cb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb60:	4798      	blx	r3
 800cb62:	bd10      	pop	{r4, pc}
 800cb64:	bd10      	pop	{r4, pc}
 800cb66:	2000      	movs	r0, #0
 800cb68:	bd10      	pop	{r4, pc}

0800cb6a <_GetMaxValue>:
 800cb6a:	b538      	push	{r3, r4, r5, lr}
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	4621      	mov	r1, r4
 800cb70:	2001      	movs	r0, #1
 800cb72:	f7ff ffeb 	bl	800cb4c <_GetDevProp>
 800cb76:	4621      	mov	r1, r4
 800cb78:	4605      	mov	r5, r0
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	f7ff ffe6 	bl	800cb4c <_GetDevProp>
 800cb80:	42a8      	cmp	r0, r5
 800cb82:	bfb8      	it	lt
 800cb84:	4628      	movlt	r0, r5
 800cb86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cb8a:	bd38      	pop	{r3, r4, r5, pc}

0800cb8c <LCD_GetXSizeEx>:
 800cb8c:	2101      	movs	r1, #1
 800cb8e:	f7ff bfdd 	b.w	800cb4c <_GetDevProp>

0800cb92 <LCD_GetYSizeEx>:
 800cb92:	2102      	movs	r1, #2
 800cb94:	f7ff bfda 	b.w	800cb4c <_GetDevProp>

0800cb98 <LCD_GetVXSizeEx>:
 800cb98:	2103      	movs	r1, #3
 800cb9a:	f7ff bfd7 	b.w	800cb4c <_GetDevProp>

0800cb9e <LCD_GetVYSizeEx>:
 800cb9e:	2104      	movs	r1, #4
 800cba0:	f7ff bfd4 	b.w	800cb4c <_GetDevProp>

0800cba4 <LCD_GetBitsPerPixelEx>:
 800cba4:	2108      	movs	r1, #8
 800cba6:	f7ff bfd1 	b.w	800cb4c <_GetDevProp>

0800cbaa <LCD_GetNumColorsEx>:
 800cbaa:	2109      	movs	r1, #9
 800cbac:	f7ff bfce 	b.w	800cb4c <_GetDevProp>

0800cbb0 <LCD_GetXSize>:
 800cbb0:	4b02      	ldr	r3, [pc, #8]	; (800cbbc <LCD_GetXSize+0xc>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	7c58      	ldrb	r0, [r3, #17]
 800cbb6:	f7ff bfe9 	b.w	800cb8c <LCD_GetXSizeEx>
 800cbba:	bf00      	nop
 800cbbc:	200001b0 	.word	0x200001b0

0800cbc0 <LCD_GetYSize>:
 800cbc0:	4b02      	ldr	r3, [pc, #8]	; (800cbcc <LCD_GetYSize+0xc>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	7c58      	ldrb	r0, [r3, #17]
 800cbc6:	f7ff bfe4 	b.w	800cb92 <LCD_GetYSizeEx>
 800cbca:	bf00      	nop
 800cbcc:	200001b0 	.word	0x200001b0

0800cbd0 <LCD_GetNumColors>:
 800cbd0:	4b02      	ldr	r3, [pc, #8]	; (800cbdc <LCD_GetNumColors+0xc>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	7c58      	ldrb	r0, [r3, #17]
 800cbd6:	f7ff bfe8 	b.w	800cbaa <LCD_GetNumColorsEx>
 800cbda:	bf00      	nop
 800cbdc:	200001b0 	.word	0x200001b0

0800cbe0 <GUI_GetBitsPerPixelEx>:
 800cbe0:	b508      	push	{r3, lr}
 800cbe2:	4b04      	ldr	r3, [pc, #16]	; (800cbf4 <GUI_GetBitsPerPixelEx+0x14>)
 800cbe4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800cbe8:	68c3      	ldr	r3, [r0, #12]
 800cbea:	2108      	movs	r1, #8
 800cbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbee:	4798      	blx	r3
 800cbf0:	bd08      	pop	{r3, pc}
 800cbf2:	bf00      	nop
 800cbf4:	2001af18 	.word	0x2001af18

0800cbf8 <LCD_GetPaletteEx>:
 800cbf8:	b508      	push	{r3, lr}
 800cbfa:	f7fb fd27 	bl	800864c <GUI_DEVICE__GetpDriver>
 800cbfe:	b120      	cbz	r0, 800cc0a <LCD_GetPaletteEx+0x12>
 800cc00:	68c3      	ldr	r3, [r0, #12]
 800cc02:	2102      	movs	r1, #2
 800cc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc06:	4798      	blx	r3
 800cc08:	bd08      	pop	{r3, pc}
 800cc0a:	bd08      	pop	{r3, pc}

0800cc0c <LCD_GetPalette>:
 800cc0c:	4b02      	ldr	r3, [pc, #8]	; (800cc18 <LCD_GetPalette+0xc>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	7c58      	ldrb	r0, [r3, #17]
 800cc12:	f7ff bff1 	b.w	800cbf8 <LCD_GetPaletteEx>
 800cc16:	bf00      	nop
 800cc18:	200001b0 	.word	0x200001b0

0800cc1c <GUI_GetpfIndex2ColorEx>:
 800cc1c:	4b02      	ldr	r3, [pc, #8]	; (800cc28 <GUI_GetpfIndex2ColorEx+0xc>)
 800cc1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	6858      	ldr	r0, [r3, #4]
 800cc26:	4770      	bx	lr
 800cc28:	2001af18 	.word	0x2001af18

0800cc2c <GUI_GetpfColor2IndexEx>:
 800cc2c:	4b02      	ldr	r3, [pc, #8]	; (800cc38 <GUI_GetpfColor2IndexEx+0xc>)
 800cc2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	6818      	ldr	r0, [r3, #0]
 800cc36:	4770      	bx	lr
 800cc38:	2001af18 	.word	0x2001af18

0800cc3c <LCD_GetXSizeMax>:
 800cc3c:	2001      	movs	r0, #1
 800cc3e:	f7ff bf94 	b.w	800cb6a <_GetMaxValue>

0800cc42 <LCD_GetYSizeMax>:
 800cc42:	2002      	movs	r0, #2
 800cc44:	f7ff bf91 	b.w	800cb6a <_GetMaxValue>

0800cc48 <LCD_GetVXSizeMax>:
 800cc48:	2003      	movs	r0, #3
 800cc4a:	f7ff bf8e 	b.w	800cb6a <_GetMaxValue>
	...

0800cc50 <LCD_SetDisplaySize>:
 800cc50:	4b02      	ldr	r3, [pc, #8]	; (800cc5c <LCD_SetDisplaySize+0xc>)
 800cc52:	6018      	str	r0, [r3, #0]
 800cc54:	4b02      	ldr	r3, [pc, #8]	; (800cc60 <LCD_SetDisplaySize+0x10>)
 800cc56:	6019      	str	r1, [r3, #0]
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	20019494 	.word	0x20019494
 800cc60:	20019490 	.word	0x20019490

0800cc64 <LCD_GetXSizeDisplay>:
 800cc64:	4b01      	ldr	r3, [pc, #4]	; (800cc6c <LCD_GetXSizeDisplay+0x8>)
 800cc66:	6818      	ldr	r0, [r3, #0]
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	20019494 	.word	0x20019494

0800cc70 <LCD_GetYSizeDisplay>:
 800cc70:	4b01      	ldr	r3, [pc, #4]	; (800cc78 <LCD_GetYSizeDisplay+0x8>)
 800cc72:	6818      	ldr	r0, [r3, #0]
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	20019490 	.word	0x20019490

0800cc7c <LCD__GetBPP>:
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d03b      	beq.n	800ccf8 <LCD__GetBPP+0x7c>
 800cc80:	f030 0301 	bics.w	r3, r0, #1
 800cc84:	d029      	beq.n	800ccda <LCD__GetBPP+0x5e>
 800cc86:	f030 0303 	bics.w	r3, r0, #3
 800cc8a:	d028      	beq.n	800ccde <LCD__GetBPP+0x62>
 800cc8c:	f030 0307 	bics.w	r3, r0, #7
 800cc90:	d027      	beq.n	800cce2 <LCD__GetBPP+0x66>
 800cc92:	f030 030f 	bics.w	r3, r0, #15
 800cc96:	d026      	beq.n	800cce6 <LCD__GetBPP+0x6a>
 800cc98:	f030 031f 	bics.w	r3, r0, #31
 800cc9c:	d025      	beq.n	800ccea <LCD__GetBPP+0x6e>
 800cc9e:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800cca2:	d024      	beq.n	800ccee <LCD__GetBPP+0x72>
 800cca4:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800cca8:	f023 0301 	bic.w	r3, r3, #1
 800ccac:	b30b      	cbz	r3, 800ccf2 <LCD__GetBPP+0x76>
 800ccae:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800ccb2:	f023 030f 	bic.w	r3, r3, #15
 800ccb6:	b1e3      	cbz	r3, 800ccf2 <LCD__GetBPP+0x76>
 800ccb8:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800ccbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ccc0:	b1bb      	cbz	r3, 800ccf2 <LCD__GetBPP+0x76>
 800ccc2:	0c03      	lsrs	r3, r0, #16
 800ccc4:	041b      	lsls	r3, r3, #16
 800ccc6:	b1a3      	cbz	r3, 800ccf2 <LCD__GetBPP+0x76>
 800ccc8:	0c83      	lsrs	r3, r0, #18
 800ccca:	049b      	lsls	r3, r3, #18
 800cccc:	b19b      	cbz	r3, 800ccf6 <LCD__GetBPP+0x7a>
 800ccce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ccd2:	bf0c      	ite	eq
 800ccd4:	2018      	moveq	r0, #24
 800ccd6:	2020      	movne	r0, #32
 800ccd8:	4770      	bx	lr
 800ccda:	2001      	movs	r0, #1
 800ccdc:	4770      	bx	lr
 800ccde:	2002      	movs	r0, #2
 800cce0:	4770      	bx	lr
 800cce2:	2003      	movs	r0, #3
 800cce4:	4770      	bx	lr
 800cce6:	2004      	movs	r0, #4
 800cce8:	4770      	bx	lr
 800ccea:	2005      	movs	r0, #5
 800ccec:	4770      	bx	lr
 800ccee:	2008      	movs	r0, #8
 800ccf0:	4770      	bx	lr
 800ccf2:	2010      	movs	r0, #16
 800ccf4:	4770      	bx	lr
 800ccf6:	2012      	movs	r0, #18
 800ccf8:	4770      	bx	lr

0800ccfa <LCD__GetBPPDevice>:
 800ccfa:	b508      	push	{r3, lr}
 800ccfc:	f7ff ffbe 	bl	800cc7c <LCD__GetBPP>
 800cd00:	2801      	cmp	r0, #1
 800cd02:	d00f      	beq.n	800cd24 <LCD__GetBPPDevice+0x2a>
 800cd04:	1e83      	subs	r3, r0, #2
 800cd06:	2b06      	cmp	r3, #6
 800cd08:	d909      	bls.n	800cd1e <LCD__GetBPPDevice+0x24>
 800cd0a:	f1a0 0309 	sub.w	r3, r0, #9
 800cd0e:	2b07      	cmp	r3, #7
 800cd10:	d907      	bls.n	800cd22 <LCD__GetBPPDevice+0x28>
 800cd12:	3811      	subs	r0, #17
 800cd14:	2810      	cmp	r0, #16
 800cd16:	bf34      	ite	cc
 800cd18:	2020      	movcc	r0, #32
 800cd1a:	2000      	movcs	r0, #0
 800cd1c:	bd08      	pop	{r3, pc}
 800cd1e:	2008      	movs	r0, #8
 800cd20:	bd08      	pop	{r3, pc}
 800cd22:	2010      	movs	r0, #16
 800cd24:	bd08      	pop	{r3, pc}
	...

0800cd28 <_OnExit>:
 800cd28:	b510      	push	{r4, lr}
 800cd2a:	4c03      	ldr	r4, [pc, #12]	; (800cd38 <_OnExit+0x10>)
 800cd2c:	6820      	ldr	r0, [r4, #0]
 800cd2e:	f7fc f9d3 	bl	80090d8 <GUI_ALLOC_FreeFixedBlock>
 800cd32:	2300      	movs	r3, #0
 800cd34:	6023      	str	r3, [r4, #0]
 800cd36:	bd10      	pop	{r4, pc}
 800cd38:	2001b06c 	.word	0x2001b06c

0800cd3c <LCD_InitColors>:
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4d09      	ldr	r5, [pc, #36]	; (800cd64 <LCD_InitColors+0x28>)
 800cd40:	682c      	ldr	r4, [r5, #0]
 800cd42:	b95c      	cbnz	r4, 800cd5c <LCD_InitColors+0x20>
 800cd44:	4b08      	ldr	r3, [pc, #32]	; (800cd68 <LCD_InitColors+0x2c>)
 800cd46:	6818      	ldr	r0, [r3, #0]
 800cd48:	0080      	lsls	r0, r0, #2
 800cd4a:	f7fc fb25 	bl	8009398 <GUI_ALLOC_GetFixedBlock>
 800cd4e:	6028      	str	r0, [r5, #0]
 800cd50:	b130      	cbz	r0, 800cd60 <LCD_InitColors+0x24>
 800cd52:	4806      	ldr	r0, [pc, #24]	; (800cd6c <LCD_InitColors+0x30>)
 800cd54:	4b06      	ldr	r3, [pc, #24]	; (800cd70 <LCD_InitColors+0x34>)
 800cd56:	6003      	str	r3, [r0, #0]
 800cd58:	f7fb fdb2 	bl	80088c0 <GUI__RegisterExit>
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}
 800cd60:	2001      	movs	r0, #1
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	2001b06c 	.word	0x2001b06c
 800cd68:	200001c4 	.word	0x200001c4
 800cd6c:	20019498 	.word	0x20019498
 800cd70:	0800cd29 	.word	0x0800cd29

0800cd74 <LCD_InitLUT>:
 800cd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd78:	f002 f9d2 	bl	800f120 <LCD_GetNumLayers>
 800cd7c:	2400      	movs	r4, #0
 800cd7e:	4680      	mov	r8, r0
 800cd80:	4544      	cmp	r4, r8
 800cd82:	da2c      	bge.n	800cdde <LCD_InitLUT+0x6a>
 800cd84:	4620      	mov	r0, r4
 800cd86:	f7fb fc61 	bl	800864c <GUI_DEVICE__GetpDriver>
 800cd8a:	b330      	cbz	r0, 800cdda <LCD_InitLUT+0x66>
 800cd8c:	4e15      	ldr	r6, [pc, #84]	; (800cde4 <LCD_InitLUT+0x70>)
 800cd8e:	6833      	ldr	r3, [r6, #0]
 800cd90:	4620      	mov	r0, r4
 800cd92:	f893 9011 	ldrb.w	r9, [r3, #17]
 800cd96:	745c      	strb	r4, [r3, #17]
 800cd98:	f7ff ff04 	bl	800cba4 <LCD_GetBitsPerPixelEx>
 800cd9c:	2808      	cmp	r0, #8
 800cd9e:	dd03      	ble.n	800cda8 <LCD_InitLUT+0x34>
 800cda0:	6833      	ldr	r3, [r6, #0]
 800cda2:	f883 9011 	strb.w	r9, [r3, #17]
 800cda6:	e018      	b.n	800cdda <LCD_InitLUT+0x66>
 800cda8:	4b0f      	ldr	r3, [pc, #60]	; (800cde8 <LCD_InitLUT+0x74>)
 800cdaa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cdae:	691a      	ldr	r2, [r3, #16]
 800cdb0:	4b0e      	ldr	r3, [pc, #56]	; (800cdec <LCD_InitLUT+0x78>)
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d0f4      	beq.n	800cda0 <LCD_InitLUT+0x2c>
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f7ff fef7 	bl	800cbaa <LCD_GetNumColorsEx>
 800cdbc:	2500      	movs	r5, #0
 800cdbe:	4682      	mov	sl, r0
 800cdc0:	4555      	cmp	r5, sl
 800cdc2:	daed      	bge.n	800cda0 <LCD_InitLUT+0x2c>
 800cdc4:	b2ef      	uxtb	r7, r5
 800cdc6:	4638      	mov	r0, r7
 800cdc8:	f000 fb26 	bl	800d418 <LCD_Index2Color>
 800cdcc:	4639      	mov	r1, r7
 800cdce:	4602      	mov	r2, r0
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f7fa fe53 	bl	8007a7c <LCD_SetLUTEntryEx>
 800cdd6:	3501      	adds	r5, #1
 800cdd8:	e7f2      	b.n	800cdc0 <LCD_InitLUT+0x4c>
 800cdda:	3401      	adds	r4, #1
 800cddc:	e7d0      	b.n	800cd80 <LCD_InitLUT+0xc>
 800cdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde2:	bf00      	nop
 800cde4:	200001b0 	.word	0x200001b0
 800cde8:	2001af18 	.word	0x2001af18
 800cdec:	08015574 	.word	0x08015574

0800cdf0 <_SetDrawMode>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	4b08      	ldr	r3, [pc, #32]	; (800ce14 <_SetDrawMode+0x24>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	7c1a      	ldrb	r2, [r3, #16]
 800cdf8:	ea80 0102 	eor.w	r1, r0, r2
 800cdfc:	0749      	lsls	r1, r1, #29
 800cdfe:	d505      	bpl.n	800ce0c <_SetDrawMode+0x1c>
 800ce00:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800ce02:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ce04:	6826      	ldr	r6, [r4, #0]
 800ce06:	680d      	ldr	r5, [r1, #0]
 800ce08:	6025      	str	r5, [r4, #0]
 800ce0a:	600e      	str	r6, [r1, #0]
 800ce0c:	7418      	strb	r0, [r3, #16]
 800ce0e:	4610      	mov	r0, r2
 800ce10:	bd70      	pop	{r4, r5, r6, pc}
 800ce12:	bf00      	nop
 800ce14:	200001b0 	.word	0x200001b0

0800ce18 <LCD_SetDrawMode>:
 800ce18:	b508      	push	{r3, lr}
 800ce1a:	4b02      	ldr	r3, [pc, #8]	; (800ce24 <LCD_SetDrawMode+0xc>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	4798      	blx	r3
 800ce22:	bd08      	pop	{r3, pc}
 800ce24:	200001c8 	.word	0x200001c8

0800ce28 <LCD_DrawPixel>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	4b14      	ldr	r3, [pc, #80]	; (800ce7c <LCD_DrawPixel+0x54>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	460a      	mov	r2, r1
 800ce30:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800ce34:	428a      	cmp	r2, r1
 800ce36:	4604      	mov	r4, r0
 800ce38:	db1e      	blt.n	800ce78 <LCD_DrawPixel+0x50>
 800ce3a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800ce3e:	428a      	cmp	r2, r1
 800ce40:	dc1a      	bgt.n	800ce78 <LCD_DrawPixel+0x50>
 800ce42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800ce46:	4288      	cmp	r0, r1
 800ce48:	db16      	blt.n	800ce78 <LCD_DrawPixel+0x50>
 800ce4a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800ce4e:	4288      	cmp	r0, r1
 800ce50:	dc12      	bgt.n	800ce78 <LCD_DrawPixel+0x50>
 800ce52:	7c19      	ldrb	r1, [r3, #16]
 800ce54:	7c58      	ldrb	r0, [r3, #17]
 800ce56:	f011 0f01 	tst.w	r1, #1
 800ce5a:	4909      	ldr	r1, [pc, #36]	; (800ce80 <LCD_DrawPixel+0x58>)
 800ce5c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800ce60:	d004      	beq.n	800ce6c <LCD_DrawPixel+0x44>
 800ce62:	68c3      	ldr	r3, [r0, #12]
 800ce64:	4621      	mov	r1, r4
 800ce66:	69db      	ldr	r3, [r3, #28]
 800ce68:	4798      	blx	r3
 800ce6a:	bd38      	pop	{r3, r4, r5, pc}
 800ce6c:	68c1      	ldr	r1, [r0, #12]
 800ce6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce70:	698d      	ldr	r5, [r1, #24]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4621      	mov	r1, r4
 800ce76:	47a8      	blx	r5
 800ce78:	bd38      	pop	{r3, r4, r5, pc}
 800ce7a:	bf00      	nop
 800ce7c:	200001b0 	.word	0x200001b0
 800ce80:	2001af18 	.word	0x2001af18

0800ce84 <LCD_DrawHLine>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	4b10      	ldr	r3, [pc, #64]	; (800cec8 <LCD_DrawHLine+0x44>)
 800ce88:	681c      	ldr	r4, [r3, #0]
 800ce8a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ce8e:	4299      	cmp	r1, r3
 800ce90:	460d      	mov	r5, r1
 800ce92:	db17      	blt.n	800cec4 <LCD_DrawHLine+0x40>
 800ce94:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800ce98:	4299      	cmp	r1, r3
 800ce9a:	dc13      	bgt.n	800cec4 <LCD_DrawHLine+0x40>
 800ce9c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800cea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea4:	4288      	cmp	r0, r1
 800cea6:	bfa8      	it	ge
 800cea8:	4601      	movge	r1, r0
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	bfb8      	it	lt
 800ceae:	4613      	movlt	r3, r2
 800ceb0:	428b      	cmp	r3, r1
 800ceb2:	db07      	blt.n	800cec4 <LCD_DrawHLine+0x40>
 800ceb4:	7c60      	ldrb	r0, [r4, #17]
 800ceb6:	4a05      	ldr	r2, [pc, #20]	; (800cecc <LCD_DrawHLine+0x48>)
 800ceb8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800cebc:	68c2      	ldr	r2, [r0, #12]
 800cebe:	6894      	ldr	r4, [r2, #8]
 800cec0:	462a      	mov	r2, r5
 800cec2:	47a0      	blx	r4
 800cec4:	bd38      	pop	{r3, r4, r5, pc}
 800cec6:	bf00      	nop
 800cec8:	200001b0 	.word	0x200001b0
 800cecc:	2001af18 	.word	0x2001af18

0800ced0 <LCD_DrawVLine>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	4b10      	ldr	r3, [pc, #64]	; (800cf14 <LCD_DrawVLine+0x44>)
 800ced4:	681c      	ldr	r4, [r3, #0]
 800ced6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800ceda:	4605      	mov	r5, r0
 800cedc:	429d      	cmp	r5, r3
 800cede:	4610      	mov	r0, r2
 800cee0:	db17      	blt.n	800cf12 <LCD_DrawVLine+0x42>
 800cee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cee6:	429d      	cmp	r5, r3
 800cee8:	dc13      	bgt.n	800cf12 <LCD_DrawVLine+0x42>
 800ceea:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800ceee:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800cef2:	4291      	cmp	r1, r2
 800cef4:	bfa8      	it	ge
 800cef6:	460a      	movge	r2, r1
 800cef8:	4298      	cmp	r0, r3
 800cefa:	bfb8      	it	lt
 800cefc:	4603      	movlt	r3, r0
 800cefe:	4293      	cmp	r3, r2
 800cf00:	db07      	blt.n	800cf12 <LCD_DrawVLine+0x42>
 800cf02:	7c60      	ldrb	r0, [r4, #17]
 800cf04:	4904      	ldr	r1, [pc, #16]	; (800cf18 <LCD_DrawVLine+0x48>)
 800cf06:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800cf0a:	68c1      	ldr	r1, [r0, #12]
 800cf0c:	68cc      	ldr	r4, [r1, #12]
 800cf0e:	4629      	mov	r1, r5
 800cf10:	47a0      	blx	r4
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	200001b0 	.word	0x200001b0
 800cf18:	2001af18 	.word	0x2001af18

0800cf1c <LCD_FillRect>:
 800cf1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf1e:	460e      	mov	r6, r1
 800cf20:	4912      	ldr	r1, [pc, #72]	; (800cf6c <LCD_FillRect+0x50>)
 800cf22:	680c      	ldr	r4, [r1, #0]
 800cf24:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800cf28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf2c:	4288      	cmp	r0, r1
 800cf2e:	bfa8      	it	ge
 800cf30:	4601      	movge	r1, r0
 800cf32:	42aa      	cmp	r2, r5
 800cf34:	bfb8      	it	lt
 800cf36:	4615      	movlt	r5, r2
 800cf38:	428d      	cmp	r5, r1
 800cf3a:	db14      	blt.n	800cf66 <LCD_FillRect+0x4a>
 800cf3c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800cf40:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800cf44:	4296      	cmp	r6, r2
 800cf46:	bfa8      	it	ge
 800cf48:	4632      	movge	r2, r6
 800cf4a:	4283      	cmp	r3, r0
 800cf4c:	bfa8      	it	ge
 800cf4e:	4603      	movge	r3, r0
 800cf50:	4293      	cmp	r3, r2
 800cf52:	db08      	blt.n	800cf66 <LCD_FillRect+0x4a>
 800cf54:	7c64      	ldrb	r4, [r4, #17]
 800cf56:	4806      	ldr	r0, [pc, #24]	; (800cf70 <LCD_FillRect+0x54>)
 800cf58:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cf5c:	68c4      	ldr	r4, [r0, #12]
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	6924      	ldr	r4, [r4, #16]
 800cf62:	462b      	mov	r3, r5
 800cf64:	47a0      	blx	r4
 800cf66:	b002      	add	sp, #8
 800cf68:	bd70      	pop	{r4, r5, r6, pc}
 800cf6a:	bf00      	nop
 800cf6c:	200001b0 	.word	0x200001b0
 800cf70:	2001af18 	.word	0x2001af18

0800cf74 <LCD__DrawBitmap_1bpp>:
 800cf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf78:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800d128 <LCD__DrawBitmap_1bpp+0x1b4>
 800cf7c:	b08f      	sub	sp, #60	; 0x3c
 800cf7e:	f8dc c000 	ldr.w	ip, [ip]
 800cf82:	9009      	str	r0, [sp, #36]	; 0x24
 800cf84:	460e      	mov	r6, r1
 800cf86:	4615      	mov	r5, r2
 800cf88:	469b      	mov	fp, r3
 800cf8a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800cf8c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800cf90:	f1bc 0f00 	cmp.w	ip, #0
 800cf94:	d00d      	beq.n	800cfb2 <LCD__DrawBitmap_1bpp+0x3e>
 800cf96:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800cf98:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800cf9a:	9500      	str	r5, [sp, #0]
 800cf9c:	9601      	str	r6, [sp, #4]
 800cf9e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cfa0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800cfa2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cfa4:	9702      	str	r7, [sp, #8]
 800cfa6:	9503      	str	r5, [sp, #12]
 800cfa8:	9404      	str	r4, [sp, #16]
 800cfaa:	9605      	str	r6, [sp, #20]
 800cfac:	f8dc 4000 	ldr.w	r4, [ip]
 800cfb0:	e053      	b.n	800d05a <LCD__DrawBitmap_1bpp+0xe6>
 800cfb2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800cfb4:	9819      	ldr	r0, [sp, #100]	; 0x64
 800cfb6:	ea47 0300 	orr.w	r3, r7, r0
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d14f      	bne.n	800d05e <LCD__DrawBitmap_1bpp+0xea>
 800cfbe:	4b58      	ldr	r3, [pc, #352]	; (800d120 <LCD__DrawBitmap_1bpp+0x1ac>)
 800cfc0:	6818      	ldr	r0, [r3, #0]
 800cfc2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800cfc6:	1a51      	subs	r1, r2, r1
 800cfc8:	2900      	cmp	r1, #0
 800cfca:	dd08      	ble.n	800cfde <LCD__DrawBitmap_1bpp+0x6a>
 800cfcc:	ebc1 030b 	rsb	r3, r1, fp
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f340 80a2 	ble.w	800d11a <LCD__DrawBitmap_1bpp+0x1a6>
 800cfd6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cfd8:	fb07 4401 	mla	r4, r7, r1, r4
 800cfdc:	e001      	b.n	800cfe2 <LCD__DrawBitmap_1bpp+0x6e>
 800cfde:	465b      	mov	r3, fp
 800cfe0:	4632      	mov	r2, r6
 800cfe2:	445e      	add	r6, fp
 800cfe4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800cfe8:	3e01      	subs	r6, #1
 800cfea:	1a76      	subs	r6, r6, r1
 800cfec:	2e00      	cmp	r6, #0
 800cfee:	dd03      	ble.n	800cff8 <LCD__DrawBitmap_1bpp+0x84>
 800cff0:	1b9b      	subs	r3, r3, r6
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	f340 8091 	ble.w	800d11a <LCD__DrawBitmap_1bpp+0x1a6>
 800cff8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cffa:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800cffe:	4429      	add	r1, r5
 800d000:	3901      	subs	r1, #1
 800d002:	1b89      	subs	r1, r1, r6
 800d004:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d006:	2900      	cmp	r1, #0
 800d008:	bfc8      	it	gt
 800d00a:	ebc1 0505 	rsbgt	r5, r1, r5
 800d00e:	ebc8 0106 	rsb	r1, r8, r6
 800d012:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800d016:	42b1      	cmp	r1, r6
 800d018:	da0c      	bge.n	800d034 <LCD__DrawBitmap_1bpp+0xc0>
 800d01a:	ebc1 0c06 	rsb	ip, r1, r6
 800d01e:	eb08 070c 	add.w	r7, r8, ip
 800d022:	1b8e      	subs	r6, r1, r6
 800d024:	f02c 0c07 	bic.w	ip, ip, #7
 800d028:	4435      	add	r5, r6
 800d02a:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800d02e:	4461      	add	r1, ip
 800d030:	f007 0807 	and.w	r8, r7, #7
 800d034:	2d00      	cmp	r5, #0
 800d036:	dd70      	ble.n	800d11a <LCD__DrawBitmap_1bpp+0x1a6>
 800d038:	7c46      	ldrb	r6, [r0, #17]
 800d03a:	483a      	ldr	r0, [pc, #232]	; (800d124 <LCD__DrawBitmap_1bpp+0x1b0>)
 800d03c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d03e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800d042:	68c6      	ldr	r6, [r0, #12]
 800d044:	9701      	str	r7, [sp, #4]
 800d046:	9403      	str	r4, [sp, #12]
 800d048:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d04a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	9702      	str	r7, [sp, #8]
 800d050:	f8cd 8010 	str.w	r8, [sp, #16]
 800d054:	9405      	str	r4, [sp, #20]
 800d056:	6874      	ldr	r4, [r6, #4]
 800d058:	462b      	mov	r3, r5
 800d05a:	47a0      	blx	r4
 800d05c:	e05d      	b.n	800d11a <LCD__DrawBitmap_1bpp+0x1a6>
 800d05e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d060:	f1c7 0708 	rsb	r7, r7, #8
 800d064:	970c      	str	r7, [sp, #48]	; 0x30
 800d066:	4667      	mov	r7, ip
 800d068:	45dc      	cmp	ip, fp
 800d06a:	da56      	bge.n	800d11a <LCD__DrawBitmap_1bpp+0x1a6>
 800d06c:	4b2c      	ldr	r3, [pc, #176]	; (800d120 <LCD__DrawBitmap_1bpp+0x1ac>)
 800d06e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4430      	add	r0, r6
 800d074:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800d078:	900a      	str	r0, [sp, #40]	; 0x28
 800d07a:	1e41      	subs	r1, r0, #1
 800d07c:	4291      	cmp	r1, r2
 800d07e:	910b      	str	r1, [sp, #44]	; 0x2c
 800d080:	db45      	blt.n	800d10e <LCD__DrawBitmap_1bpp+0x19a>
 800d082:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d086:	429e      	cmp	r6, r3
 800d088:	dc41      	bgt.n	800d10e <LCD__DrawBitmap_1bpp+0x19a>
 800d08a:	f04f 0800 	mov.w	r8, #0
 800d08e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d092:	9408      	str	r4, [sp, #32]
 800d094:	46c2      	mov	sl, r8
 800d096:	45aa      	cmp	sl, r5
 800d098:	da39      	bge.n	800d10e <LCD__DrawBitmap_1bpp+0x19a>
 800d09a:	f1b8 0f00 	cmp.w	r8, #0
 800d09e:	d105      	bne.n	800d0ac <LCD__DrawBitmap_1bpp+0x138>
 800d0a0:	9a08      	ldr	r2, [sp, #32]
 800d0a2:	7817      	ldrb	r7, [r2, #0]
 800d0a4:	3201      	adds	r2, #1
 800d0a6:	9208      	str	r2, [sp, #32]
 800d0a8:	f04f 0808 	mov.w	r8, #8
 800d0ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d0ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d0b0:	4a1b      	ldr	r2, [pc, #108]	; (800d120 <LCD__DrawBitmap_1bpp+0x1ac>)
 800d0b2:	fa47 f300 	asr.w	r3, r7, r0
 800d0b6:	ebc1 0808 	rsb	r8, r1, r8
 800d0ba:	408f      	lsls	r7, r1
 800d0bc:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800d0c0:	b2ff      	uxtb	r7, r7
 800d0c2:	d103      	bne.n	800d0cc <LCD__DrawBitmap_1bpp+0x158>
 800d0c4:	6810      	ldr	r0, [r2, #0]
 800d0c6:	7c00      	ldrb	r0, [r0, #16]
 800d0c8:	0780      	lsls	r0, r0, #30
 800d0ca:	d41b      	bmi.n	800d104 <LCD__DrawBitmap_1bpp+0x190>
 800d0cc:	6812      	ldr	r2, [r2, #0]
 800d0ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d0d0:	6810      	ldr	r0, [r2, #0]
 800d0d2:	900d      	str	r0, [sp, #52]	; 0x34
 800d0d4:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d0d6:	b110      	cbz	r0, 800d0de <LCD__DrawBitmap_1bpp+0x16a>
 800d0d8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800d0dc:	e000      	b.n	800d0e0 <LCD__DrawBitmap_1bpp+0x16c>
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d0e2:	6013      	str	r3, [r2, #0]
 800d0e4:	1e4a      	subs	r2, r1, #1
 800d0e6:	444a      	add	r2, r9
 800d0e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0ea:	f8cd c01c 	str.w	ip, [sp, #28]
 800d0ee:	4648      	mov	r0, r9
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	f7ff ff13 	bl	800cf1c <LCD_FillRect>
 800d0f6:	4b0a      	ldr	r3, [pc, #40]	; (800d120 <LCD__DrawBitmap_1bpp+0x1ac>)
 800d0f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800d100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d106:	f10a 0a01 	add.w	sl, sl, #1
 800d10a:	4499      	add	r9, r3
 800d10c:	e7c3      	b.n	800d096 <LCD__DrawBitmap_1bpp+0x122>
 800d10e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d110:	f10c 0c01 	add.w	ip, ip, #1
 800d114:	4434      	add	r4, r6
 800d116:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d118:	e7a6      	b.n	800d068 <LCD__DrawBitmap_1bpp+0xf4>
 800d11a:	b00f      	add	sp, #60	; 0x3c
 800d11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d120:	200001b0 	.word	0x200001b0
 800d124:	2001af18 	.word	0x2001af18
 800d128:	2001aeec 	.word	0x2001aeec

0800d12c <LCD_DrawBitmap>:
 800d12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d130:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800d340 <LCD_DrawBitmap+0x214>
 800d134:	b091      	sub	sp, #68	; 0x44
 800d136:	f8dc 9000 	ldr.w	r9, [ip]
 800d13a:	9207      	str	r2, [sp, #28]
 800d13c:	4605      	mov	r5, r0
 800d13e:	4688      	mov	r8, r1
 800d140:	469b      	mov	fp, r3
 800d142:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800d144:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d146:	f1b9 0f00 	cmp.w	r9, #0
 800d14a:	d00c      	beq.n	800d166 <LCD_DrawBitmap+0x3a>
 800d14c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d14e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d150:	9500      	str	r5, [sp, #0]
 800d152:	9701      	str	r7, [sp, #4]
 800d154:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800d156:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800d158:	9602      	str	r6, [sp, #8]
 800d15a:	9503      	str	r5, [sp, #12]
 800d15c:	9404      	str	r4, [sp, #16]
 800d15e:	9705      	str	r7, [sp, #20]
 800d160:	f8d9 4000 	ldr.w	r4, [r9]
 800d164:	e081      	b.n	800d26a <LCD_DrawBitmap+0x13e>
 800d166:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d168:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d16a:	ea47 0300 	orr.w	r3, r7, r0
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d17d      	bne.n	800d26e <LCD_DrawBitmap+0x142>
 800d172:	4b71      	ldr	r3, [pc, #452]	; (800d338 <LCD_DrawBitmap+0x20c>)
 800d174:	6818      	ldr	r0, [r3, #0]
 800d176:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d17a:	1a53      	subs	r3, r2, r1
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	dd08      	ble.n	800d192 <LCD_DrawBitmap+0x66>
 800d180:	ebc3 010b 	rsb	r1, r3, fp
 800d184:	2900      	cmp	r1, #0
 800d186:	f340 80d4 	ble.w	800d332 <LCD_DrawBitmap+0x206>
 800d18a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800d18c:	fb07 4403 	mla	r4, r7, r3, r4
 800d190:	e001      	b.n	800d196 <LCD_DrawBitmap+0x6a>
 800d192:	4659      	mov	r1, fp
 800d194:	4642      	mov	r2, r8
 800d196:	44d8      	add	r8, fp
 800d198:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800d19c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d1a0:	ebc3 0808 	rsb	r8, r3, r8
 800d1a4:	f1b8 0f00 	cmp.w	r8, #0
 800d1a8:	dd04      	ble.n	800d1b4 <LCD_DrawBitmap+0x88>
 800d1aa:	ebc8 0101 	rsb	r1, r8, r1
 800d1ae:	2900      	cmp	r1, #0
 800d1b0:	f340 80bf 	ble.w	800d332 <LCD_DrawBitmap+0x206>
 800d1b4:	9b07      	ldr	r3, [sp, #28]
 800d1b6:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800d1ba:	442b      	add	r3, r5
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	ebcc 0303 	rsb	r3, ip, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	dd02      	ble.n	800d1cc <LCD_DrawBitmap+0xa0>
 800d1c6:	9f07      	ldr	r7, [sp, #28]
 800d1c8:	1aff      	subs	r7, r7, r3
 800d1ca:	9707      	str	r7, [sp, #28]
 800d1cc:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800d1d0:	4565      	cmp	r5, ip
 800d1d2:	da33      	bge.n	800d23c <LCD_DrawBitmap+0x110>
 800d1d4:	9f07      	ldr	r7, [sp, #28]
 800d1d6:	ebc5 030c 	rsb	r3, r5, ip
 800d1da:	1aff      	subs	r7, r7, r3
 800d1dc:	2e08      	cmp	r6, #8
 800d1de:	9707      	str	r7, [sp, #28]
 800d1e0:	d027      	beq.n	800d232 <LCD_DrawBitmap+0x106>
 800d1e2:	dc0d      	bgt.n	800d200 <LCD_DrawBitmap+0xd4>
 800d1e4:	2e02      	cmp	r6, #2
 800d1e6:	d014      	beq.n	800d212 <LCD_DrawBitmap+0xe6>
 800d1e8:	2e04      	cmp	r6, #4
 800d1ea:	d01a      	beq.n	800d222 <LCD_DrawBitmap+0xf6>
 800d1ec:	2e01      	cmp	r6, #1
 800d1ee:	d126      	bne.n	800d23e <LCD_DrawBitmap+0x112>
 800d1f0:	f023 0c07 	bic.w	ip, r3, #7
 800d1f4:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800d1f8:	4465      	add	r5, ip
 800d1fa:	f003 0307 	and.w	r3, r3, #7
 800d1fe:	e01e      	b.n	800d23e <LCD_DrawBitmap+0x112>
 800d200:	2e18      	cmp	r6, #24
 800d202:	d018      	beq.n	800d236 <LCD_DrawBitmap+0x10a>
 800d204:	2e20      	cmp	r6, #32
 800d206:	d016      	beq.n	800d236 <LCD_DrawBitmap+0x10a>
 800d208:	2e10      	cmp	r6, #16
 800d20a:	d118      	bne.n	800d23e <LCD_DrawBitmap+0x112>
 800d20c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800d210:	e013      	b.n	800d23a <LCD_DrawBitmap+0x10e>
 800d212:	f023 0c03 	bic.w	ip, r3, #3
 800d216:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800d21a:	4465      	add	r5, ip
 800d21c:	f003 0303 	and.w	r3, r3, #3
 800d220:	e00d      	b.n	800d23e <LCD_DrawBitmap+0x112>
 800d222:	f023 0c01 	bic.w	ip, r3, #1
 800d226:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800d22a:	4465      	add	r5, ip
 800d22c:	f003 0301 	and.w	r3, r3, #1
 800d230:	e005      	b.n	800d23e <LCD_DrawBitmap+0x112>
 800d232:	441c      	add	r4, r3
 800d234:	e001      	b.n	800d23a <LCD_DrawBitmap+0x10e>
 800d236:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d23a:	4665      	mov	r5, ip
 800d23c:	2300      	movs	r3, #0
 800d23e:	9f07      	ldr	r7, [sp, #28]
 800d240:	2f00      	cmp	r7, #0
 800d242:	dd76      	ble.n	800d332 <LCD_DrawBitmap+0x206>
 800d244:	f890 e011 	ldrb.w	lr, [r0, #17]
 800d248:	483c      	ldr	r0, [pc, #240]	; (800d33c <LCD_DrawBitmap+0x210>)
 800d24a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800d24c:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800d250:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800d254:	9403      	str	r4, [sp, #12]
 800d256:	e88d 0042 	stmia.w	sp, {r1, r6}
 800d25a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800d25c:	9304      	str	r3, [sp, #16]
 800d25e:	9702      	str	r7, [sp, #8]
 800d260:	9405      	str	r4, [sp, #20]
 800d262:	f8de 4004 	ldr.w	r4, [lr, #4]
 800d266:	9b07      	ldr	r3, [sp, #28]
 800d268:	4629      	mov	r1, r5
 800d26a:	47a0      	blx	r4
 800d26c:	e061      	b.n	800d332 <LCD_DrawBitmap+0x206>
 800d26e:	f1c6 0708 	rsb	r7, r6, #8
 800d272:	970e      	str	r7, [sp, #56]	; 0x38
 800d274:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800d278:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d27a:	455f      	cmp	r7, fp
 800d27c:	da59      	bge.n	800d332 <LCD_DrawBitmap+0x206>
 800d27e:	4b2e      	ldr	r3, [pc, #184]	; (800d338 <LCD_DrawBitmap+0x20c>)
 800d280:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4447      	add	r7, r8
 800d286:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800d28a:	970c      	str	r7, [sp, #48]	; 0x30
 800d28c:	3f01      	subs	r7, #1
 800d28e:	4297      	cmp	r7, r2
 800d290:	970d      	str	r7, [sp, #52]	; 0x34
 800d292:	db46      	blt.n	800d322 <LCD_DrawBitmap+0x1f6>
 800d294:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d298:	4598      	cmp	r8, r3
 800d29a:	dc42      	bgt.n	800d322 <LCD_DrawBitmap+0x1f6>
 800d29c:	f04f 0a00 	mov.w	sl, #0
 800d2a0:	940b      	str	r4, [sp, #44]	; 0x2c
 800d2a2:	46ac      	mov	ip, r5
 800d2a4:	4657      	mov	r7, sl
 800d2a6:	9807      	ldr	r0, [sp, #28]
 800d2a8:	4287      	cmp	r7, r0
 800d2aa:	da3a      	bge.n	800d322 <LCD_DrawBitmap+0x1f6>
 800d2ac:	f1ba 0f00 	cmp.w	sl, #0
 800d2b0:	d106      	bne.n	800d2c0 <LCD_DrawBitmap+0x194>
 800d2b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d2b4:	f890 9000 	ldrb.w	r9, [r0]
 800d2b8:	3001      	adds	r0, #1
 800d2ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800d2bc:	f04f 0a08 	mov.w	sl, #8
 800d2c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d2c2:	4a1d      	ldr	r2, [pc, #116]	; (800d338 <LCD_DrawBitmap+0x20c>)
 800d2c4:	fa49 f301 	asr.w	r3, r9, r1
 800d2c8:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800d2cc:	fa09 f906 	lsl.w	r9, r9, r6
 800d2d0:	fa5f f989 	uxtb.w	r9, r9
 800d2d4:	ebc6 0a0a 	rsb	sl, r6, sl
 800d2d8:	d103      	bne.n	800d2e2 <LCD_DrawBitmap+0x1b6>
 800d2da:	6810      	ldr	r0, [r2, #0]
 800d2dc:	7c00      	ldrb	r0, [r0, #16]
 800d2de:	0780      	lsls	r0, r0, #30
 800d2e0:	d41b      	bmi.n	800d31a <LCD_DrawBitmap+0x1ee>
 800d2e2:	6812      	ldr	r2, [r2, #0]
 800d2e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d2e6:	6810      	ldr	r0, [r2, #0]
 800d2e8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d2ea:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d2ec:	b110      	cbz	r0, 800d2f4 <LCD_DrawBitmap+0x1c8>
 800d2ee:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800d2f2:	e000      	b.n	800d2f6 <LCD_DrawBitmap+0x1ca>
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d2f8:	6013      	str	r3, [r2, #0]
 800d2fa:	1e4a      	subs	r2, r1, #1
 800d2fc:	4462      	add	r2, ip
 800d2fe:	4660      	mov	r0, ip
 800d300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d302:	f8cd c020 	str.w	ip, [sp, #32]
 800d306:	4641      	mov	r1, r8
 800d308:	f7ff fe08 	bl	800cf1c <LCD_FillRect>
 800d30c:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <LCD_DrawBitmap+0x20c>)
 800d30e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d318:	601a      	str	r2, [r3, #0]
 800d31a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d31c:	3701      	adds	r7, #1
 800d31e:	449c      	add	ip, r3
 800d320:	e7c1      	b.n	800d2a6 <LCD_DrawBitmap+0x17a>
 800d322:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d324:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d328:	3701      	adds	r7, #1
 800d32a:	970a      	str	r7, [sp, #40]	; 0x28
 800d32c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800d32e:	443c      	add	r4, r7
 800d330:	e7a2      	b.n	800d278 <LCD_DrawBitmap+0x14c>
 800d332:	b011      	add	sp, #68	; 0x44
 800d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d338:	200001b0 	.word	0x200001b0
 800d33c:	2001af18 	.word	0x2001af18
 800d340:	2001aeec 	.word	0x2001aeec

0800d344 <LCD_SetClipRectMax>:
 800d344:	b508      	push	{r3, lr}
 800d346:	4b05      	ldr	r3, [pc, #20]	; (800d35c <LCD_SetClipRectMax+0x18>)
 800d348:	6819      	ldr	r1, [r3, #0]
 800d34a:	4b05      	ldr	r3, [pc, #20]	; (800d360 <LCD_SetClipRectMax+0x1c>)
 800d34c:	7c4a      	ldrb	r2, [r1, #17]
 800d34e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d352:	68c3      	ldr	r3, [r0, #12]
 800d354:	3108      	adds	r1, #8
 800d356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d358:	4798      	blx	r3
 800d35a:	bd08      	pop	{r3, pc}
 800d35c:	200001b0 	.word	0x200001b0
 800d360:	2001af18 	.word	0x2001af18

0800d364 <emWin_LCD_Init>:
 800d364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d366:	f7ff ffed 	bl	800d344 <LCD_SetClipRectMax>
 800d36a:	f7ff fce7 	bl	800cd3c <LCD_InitColors>
 800d36e:	4604      	mov	r4, r0
 800d370:	2800      	cmp	r0, #0
 800d372:	d13d      	bne.n	800d3f0 <emWin_LCD_Init+0x8c>
 800d374:	4605      	mov	r5, r0
 800d376:	4628      	mov	r0, r5
 800d378:	f7fb f968 	bl	800864c <GUI_DEVICE__GetpDriver>
 800d37c:	9001      	str	r0, [sp, #4]
 800d37e:	b148      	cbz	r0, 800d394 <emWin_LCD_Init+0x30>
 800d380:	68c3      	ldr	r3, [r0, #12]
 800d382:	210c      	movs	r1, #12
 800d384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d386:	a801      	add	r0, sp, #4
 800d388:	4798      	blx	r3
 800d38a:	4603      	mov	r3, r0
 800d38c:	b370      	cbz	r0, 800d3ec <emWin_LCD_Init+0x88>
 800d38e:	9801      	ldr	r0, [sp, #4]
 800d390:	4798      	blx	r3
 800d392:	4304      	orrs	r4, r0
 800d394:	3501      	adds	r5, #1
 800d396:	2d02      	cmp	r5, #2
 800d398:	d1ed      	bne.n	800d376 <emWin_LCD_Init+0x12>
 800d39a:	bb4c      	cbnz	r4, 800d3f0 <emWin_LCD_Init+0x8c>
 800d39c:	f7ff fcea 	bl	800cd74 <LCD_InitLUT>
 800d3a0:	2401      	movs	r4, #1
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f7fb f952 	bl	800864c <GUI_DEVICE__GetpDriver>
 800d3a8:	9001      	str	r0, [sp, #4]
 800d3aa:	b1d0      	cbz	r0, 800d3e2 <emWin_LCD_Init+0x7e>
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f000 fc43 	bl	800dc38 <GUI_SelectLayer>
 800d3b2:	2004      	movs	r0, #4
 800d3b4:	f7ff fd30 	bl	800ce18 <LCD_SetDrawMode>
 800d3b8:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800d3bc:	2000      	movs	r0, #0
 800d3be:	4601      	mov	r1, r0
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	f7ff fdab 	bl	800cf1c <LCD_FillRect>
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	f7ff fd26 	bl	800ce18 <LCD_SetDrawMode>
 800d3cc:	a802      	add	r0, sp, #8
 800d3ce:	210e      	movs	r1, #14
 800d3d0:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d8:	4798      	blx	r3
 800d3da:	4603      	mov	r3, r0
 800d3dc:	b108      	cbz	r0, 800d3e2 <emWin_LCD_Init+0x7e>
 800d3de:	9801      	ldr	r0, [sp, #4]
 800d3e0:	4798      	blx	r3
 800d3e2:	f114 34ff 	adds.w	r4, r4, #4294967295
 800d3e6:	d2dc      	bcs.n	800d3a2 <emWin_LCD_Init+0x3e>
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	e002      	b.n	800d3f2 <emWin_LCD_Init+0x8e>
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	e000      	b.n	800d3f2 <emWin_LCD_Init+0x8e>
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	b003      	add	sp, #12
 800d3f4:	bd30      	pop	{r4, r5, pc}
	...

0800d3f8 <LCD_Color2Index>:
 800d3f8:	b508      	push	{r3, lr}
 800d3fa:	4b05      	ldr	r3, [pc, #20]	; (800d410 <LCD_Color2Index+0x18>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	7c5a      	ldrb	r2, [r3, #17]
 800d400:	4b04      	ldr	r3, [pc, #16]	; (800d414 <LCD_Color2Index+0x1c>)
 800d402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4798      	blx	r3
 800d40c:	bd08      	pop	{r3, pc}
 800d40e:	bf00      	nop
 800d410:	200001b0 	.word	0x200001b0
 800d414:	2001af18 	.word	0x2001af18

0800d418 <LCD_Index2Color>:
 800d418:	b508      	push	{r3, lr}
 800d41a:	4b05      	ldr	r3, [pc, #20]	; (800d430 <LCD_Index2Color+0x18>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	7c5a      	ldrb	r2, [r3, #17]
 800d420:	4b04      	ldr	r3, [pc, #16]	; (800d434 <LCD_Index2Color+0x1c>)
 800d422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	4798      	blx	r3
 800d42c:	bd08      	pop	{r3, pc}
 800d42e:	bf00      	nop
 800d430:	200001b0 	.word	0x200001b0
 800d434:	2001af18 	.word	0x2001af18

0800d438 <LCD_SetColorIndex>:
 800d438:	4b04      	ldr	r3, [pc, #16]	; (800d44c <LCD_SetColorIndex+0x14>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	7c1a      	ldrb	r2, [r3, #16]
 800d43e:	0752      	lsls	r2, r2, #29
 800d440:	bf4c      	ite	mi
 800d442:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800d444:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800d446:	6018      	str	r0, [r3, #0]
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	200001b0 	.word	0x200001b0

0800d450 <_SetColor>:
 800d450:	b508      	push	{r3, lr}
 800d452:	4b06      	ldr	r3, [pc, #24]	; (800d46c <_SetColor+0x1c>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d458:	4281      	cmp	r1, r0
 800d45a:	d006      	beq.n	800d46a <_SetColor+0x1a>
 800d45c:	6318      	str	r0, [r3, #48]	; 0x30
 800d45e:	f7ff ffcb 	bl	800d3f8 <LCD_Color2Index>
 800d462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d466:	f7ff bfe7 	b.w	800d438 <LCD_SetColorIndex>
 800d46a:	bd08      	pop	{r3, pc}
 800d46c:	200001b0 	.word	0x200001b0

0800d470 <LCD_SetBkColorIndex>:
 800d470:	4b04      	ldr	r3, [pc, #16]	; (800d484 <LCD_SetBkColorIndex+0x14>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	7c1a      	ldrb	r2, [r3, #16]
 800d476:	0752      	lsls	r2, r2, #29
 800d478:	bf4c      	ite	mi
 800d47a:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800d47c:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800d47e:	6018      	str	r0, [r3, #0]
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	200001b0 	.word	0x200001b0

0800d488 <_SetBkColor>:
 800d488:	b508      	push	{r3, lr}
 800d48a:	4b06      	ldr	r3, [pc, #24]	; (800d4a4 <_SetBkColor+0x1c>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d490:	4281      	cmp	r1, r0
 800d492:	d006      	beq.n	800d4a2 <_SetBkColor+0x1a>
 800d494:	6358      	str	r0, [r3, #52]	; 0x34
 800d496:	f7ff ffaf 	bl	800d3f8 <LCD_Color2Index>
 800d49a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d49e:	f7ff bfe7 	b.w	800d470 <LCD_SetBkColorIndex>
 800d4a2:	bd08      	pop	{r3, pc}
 800d4a4:	200001b0 	.word	0x200001b0

0800d4a8 <LCD_SetBkColor>:
 800d4a8:	b508      	push	{r3, lr}
 800d4aa:	4b02      	ldr	r3, [pc, #8]	; (800d4b4 <LCD_SetBkColor+0xc>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	4798      	blx	r3
 800d4b2:	bd08      	pop	{r3, pc}
 800d4b4:	200001c8 	.word	0x200001c8

0800d4b8 <LCD_SetColor>:
 800d4b8:	b508      	push	{r3, lr}
 800d4ba:	4b02      	ldr	r3, [pc, #8]	; (800d4c4 <LCD_SetColor+0xc>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4798      	blx	r3
 800d4c2:	bd08      	pop	{r3, pc}
 800d4c4:	200001c8 	.word	0x200001c8

0800d4c8 <GUI__ManageCacheEx>:
 800d4c8:	2801      	cmp	r0, #1
 800d4ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	460d      	mov	r5, r1
 800d4d0:	dc65      	bgt.n	800d59e <GUI__ManageCacheEx+0xd6>
 800d4d2:	4b34      	ldr	r3, [pc, #208]	; (800d5a4 <GUI__ManageCacheEx+0xdc>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	b103      	cbz	r3, 800d4da <GUI__ManageCacheEx+0x12>
 800d4d8:	4798      	blx	r3
 800d4da:	2d01      	cmp	r5, #1
 800d4dc:	d004      	beq.n	800d4e8 <GUI__ManageCacheEx+0x20>
 800d4de:	2d02      	cmp	r5, #2
 800d4e0:	d021      	beq.n	800d526 <GUI__ManageCacheEx+0x5e>
 800d4e2:	2d00      	cmp	r5, #0
 800d4e4:	d15b      	bne.n	800d59e <GUI__ManageCacheEx+0xd6>
 800d4e6:	e035      	b.n	800d554 <GUI__ManageCacheEx+0x8c>
 800d4e8:	4e2f      	ldr	r6, [pc, #188]	; (800d5a8 <GUI__ManageCacheEx+0xe0>)
 800d4ea:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800d4ee:	b9b7      	cbnz	r7, 800d51e <GUI__ManageCacheEx+0x56>
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f7fb f8ab 	bl	800864c <GUI_DEVICE__GetpDriver>
 800d4f6:	9001      	str	r0, [sp, #4]
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d050      	beq.n	800d59e <GUI__ManageCacheEx+0xd6>
 800d4fc:	68c3      	ldr	r3, [r0, #12]
 800d4fe:	210d      	movs	r1, #13
 800d500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d502:	a801      	add	r0, sp, #4
 800d504:	4798      	blx	r3
 800d506:	4603      	mov	r3, r0
 800d508:	2800      	cmp	r0, #0
 800d50a:	d048      	beq.n	800d59e <GUI__ManageCacheEx+0xd6>
 800d50c:	9801      	ldr	r0, [sp, #4]
 800d50e:	4629      	mov	r1, r5
 800d510:	4798      	blx	r3
 800d512:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800d516:	3301      	adds	r3, #1
 800d518:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800d51c:	e018      	b.n	800d550 <GUI__ManageCacheEx+0x88>
 800d51e:	3701      	adds	r7, #1
 800d520:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800d524:	e03b      	b.n	800d59e <GUI__ManageCacheEx+0xd6>
 800d526:	4620      	mov	r0, r4
 800d528:	f7fb f890 	bl	800864c <GUI_DEVICE__GetpDriver>
 800d52c:	9001      	str	r0, [sp, #4]
 800d52e:	2800      	cmp	r0, #0
 800d530:	d035      	beq.n	800d59e <GUI__ManageCacheEx+0xd6>
 800d532:	68c3      	ldr	r3, [r0, #12]
 800d534:	210d      	movs	r1, #13
 800d536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d538:	a801      	add	r0, sp, #4
 800d53a:	4798      	blx	r3
 800d53c:	4604      	mov	r4, r0
 800d53e:	2800      	cmp	r0, #0
 800d540:	d02d      	beq.n	800d59e <GUI__ManageCacheEx+0xd6>
 800d542:	4b1a      	ldr	r3, [pc, #104]	; (800d5ac <GUI__ManageCacheEx+0xe4>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	b103      	cbz	r3, 800d54a <GUI__ManageCacheEx+0x82>
 800d548:	4798      	blx	r3
 800d54a:	9801      	ldr	r0, [sp, #4]
 800d54c:	2102      	movs	r1, #2
 800d54e:	47a0      	blx	r4
 800d550:	2000      	movs	r0, #0
 800d552:	e025      	b.n	800d5a0 <GUI__ManageCacheEx+0xd8>
 800d554:	4d14      	ldr	r5, [pc, #80]	; (800d5a8 <GUI__ManageCacheEx+0xe0>)
 800d556:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d001      	beq.n	800d562 <GUI__ManageCacheEx+0x9a>
 800d55e:	2001      	movs	r0, #1
 800d560:	e015      	b.n	800d58e <GUI__ManageCacheEx+0xc6>
 800d562:	4620      	mov	r0, r4
 800d564:	f7fb f872 	bl	800864c <GUI_DEVICE__GetpDriver>
 800d568:	9001      	str	r0, [sp, #4]
 800d56a:	2800      	cmp	r0, #0
 800d56c:	d0f7      	beq.n	800d55e <GUI__ManageCacheEx+0x96>
 800d56e:	68c3      	ldr	r3, [r0, #12]
 800d570:	210d      	movs	r1, #13
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	a801      	add	r0, sp, #4
 800d576:	4798      	blx	r3
 800d578:	4606      	mov	r6, r0
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d0ef      	beq.n	800d55e <GUI__ManageCacheEx+0x96>
 800d57e:	4b0b      	ldr	r3, [pc, #44]	; (800d5ac <GUI__ManageCacheEx+0xe4>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	b103      	cbz	r3, 800d586 <GUI__ManageCacheEx+0xbe>
 800d584:	4798      	blx	r3
 800d586:	9801      	ldr	r0, [sp, #4]
 800d588:	2100      	movs	r1, #0
 800d58a:	47b0      	blx	r6
 800d58c:	2000      	movs	r0, #0
 800d58e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800d592:	2b00      	cmp	r3, #0
 800d594:	bf18      	it	ne
 800d596:	3b01      	subne	r3, #1
 800d598:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800d59c:	e000      	b.n	800d5a0 <GUI__ManageCacheEx+0xd8>
 800d59e:	2001      	movs	r0, #1
 800d5a0:	b003      	add	sp, #12
 800d5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5a4:	200194ac 	.word	0x200194ac
 800d5a8:	200194a4 	.word	0x200194a4
 800d5ac:	200194a0 	.word	0x200194a0

0800d5b0 <GUI__ManageCache>:
 800d5b0:	4b02      	ldr	r3, [pc, #8]	; (800d5bc <GUI__ManageCache+0xc>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4601      	mov	r1, r0
 800d5b6:	7c58      	ldrb	r0, [r3, #17]
 800d5b8:	f7ff bf86 	b.w	800d4c8 <GUI__ManageCacheEx>
 800d5bc:	200001b0 	.word	0x200001b0

0800d5c0 <GUI__IntersectRects>:
 800d5c0:	b570      	push	{r4, r5, r6, lr}
 800d5c2:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d5c6:	f9b1 4000 	ldrsh.w	r4, [r1]
 800d5ca:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d5ce:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800d5d2:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800d5d6:	429c      	cmp	r4, r3
 800d5d8:	bfb8      	it	lt
 800d5da:	461c      	movlt	r4, r3
 800d5dc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d5e0:	429d      	cmp	r5, r3
 800d5e2:	bfa8      	it	ge
 800d5e4:	462b      	movge	r3, r5
 800d5e6:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800d5ea:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d5ee:	42ae      	cmp	r6, r5
 800d5f0:	bfb8      	it	lt
 800d5f2:	4635      	movlt	r5, r6
 800d5f4:	b2a4      	uxth	r4, r4
 800d5f6:	b2ad      	uxth	r5, r5
 800d5f8:	4291      	cmp	r1, r2
 800d5fa:	bfb8      	it	lt
 800d5fc:	460a      	movlt	r2, r1
 800d5fe:	8004      	strh	r4, [r0, #0]
 800d600:	8085      	strh	r5, [r0, #4]
 800d602:	b224      	sxth	r4, r4
 800d604:	b22d      	sxth	r5, r5
 800d606:	b29b      	uxth	r3, r3
 800d608:	b292      	uxth	r2, r2
 800d60a:	42a5      	cmp	r5, r4
 800d60c:	8043      	strh	r3, [r0, #2]
 800d60e:	80c2      	strh	r2, [r0, #6]
 800d610:	db06      	blt.n	800d620 <GUI__IntersectRects+0x60>
 800d612:	b210      	sxth	r0, r2
 800d614:	b21b      	sxth	r3, r3
 800d616:	4298      	cmp	r0, r3
 800d618:	bfb4      	ite	lt
 800d61a:	2000      	movlt	r0, #0
 800d61c:	2001      	movge	r0, #1
 800d61e:	bd70      	pop	{r4, r5, r6, pc}
 800d620:	2000      	movs	r0, #0
 800d622:	bd70      	pop	{r4, r5, r6, pc}

0800d624 <GUI__IntersectRect>:
 800d624:	880b      	ldrh	r3, [r1, #0]
 800d626:	b510      	push	{r4, lr}
 800d628:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d62c:	b21a      	sxth	r2, r3
 800d62e:	4294      	cmp	r4, r2
 800d630:	bfb8      	it	lt
 800d632:	8003      	strhlt	r3, [r0, #0]
 800d634:	884b      	ldrh	r3, [r1, #2]
 800d636:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800d63a:	b21a      	sxth	r2, r3
 800d63c:	4294      	cmp	r4, r2
 800d63e:	bfb8      	it	lt
 800d640:	8043      	strhlt	r3, [r0, #2]
 800d642:	888b      	ldrh	r3, [r1, #4]
 800d644:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800d648:	b21a      	sxth	r2, r3
 800d64a:	4294      	cmp	r4, r2
 800d64c:	bfc8      	it	gt
 800d64e:	8083      	strhgt	r3, [r0, #4]
 800d650:	88cb      	ldrh	r3, [r1, #6]
 800d652:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800d656:	b21a      	sxth	r2, r3
 800d658:	4291      	cmp	r1, r2
 800d65a:	bfc8      	it	gt
 800d65c:	80c3      	strhgt	r3, [r0, #6]
 800d65e:	bd10      	pop	{r4, pc}

0800d660 <GUI__MixColors>:
 800d660:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 800d664:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800d668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d66a:	d027      	beq.n	800d6bc <GUI__MixColors+0x5c>
 800d66c:	43d3      	mvns	r3, r2
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	b2cd      	uxtb	r5, r1
 800d672:	b2c6      	uxtb	r6, r0
 800d674:	435d      	muls	r5, r3
 800d676:	fb02 5506 	mla	r5, r2, r6, r5
 800d67a:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 800d67e:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 800d682:	435e      	muls	r6, r3
 800d684:	fb02 6604 	mla	r6, r2, r4, r6
 800d688:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 800d68c:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 800d690:	435c      	muls	r4, r3
 800d692:	0e09      	lsrs	r1, r1, #24
 800d694:	0e00      	lsrs	r0, r0, #24
 800d696:	fb02 4407 	mla	r4, r2, r7, r4
 800d69a:	434b      	muls	r3, r1
 800d69c:	0a36      	lsrs	r6, r6, #8
 800d69e:	fb02 3200 	mla	r2, r2, r0, r3
 800d6a2:	0a24      	lsrs	r4, r4, #8
 800d6a4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800d6a8:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 800d6ac:	4318      	orrs	r0, r3
 800d6ae:	0412      	lsls	r2, r2, #16
 800d6b0:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800d6b4:	4318      	orrs	r0, r3
 800d6b6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d6ba:	4310      	orrs	r0, r2
 800d6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d6c0 <_OnExit>:
 800d6c0:	b570      	push	{r4, r5, r6, lr}
 800d6c2:	4c0a      	ldr	r4, [pc, #40]	; (800d6ec <_OnExit+0x2c>)
 800d6c4:	4d0a      	ldr	r5, [pc, #40]	; (800d6f0 <_OnExit+0x30>)
 800d6c6:	6820      	ldr	r0, [r4, #0]
 800d6c8:	4e0a      	ldr	r6, [pc, #40]	; (800d6f4 <_OnExit+0x34>)
 800d6ca:	f7fb fd05 	bl	80090d8 <GUI_ALLOC_FreeFixedBlock>
 800d6ce:	6828      	ldr	r0, [r5, #0]
 800d6d0:	f7fb fd02 	bl	80090d8 <GUI_ALLOC_FreeFixedBlock>
 800d6d4:	6830      	ldr	r0, [r6, #0]
 800d6d6:	f7fb fcff 	bl	80090d8 <GUI_ALLOC_FreeFixedBlock>
 800d6da:	4a07      	ldr	r2, [pc, #28]	; (800d6f8 <_OnExit+0x38>)
 800d6dc:	2300      	movs	r3, #0
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	4a06      	ldr	r2, [pc, #24]	; (800d6fc <_OnExit+0x3c>)
 800d6e2:	6033      	str	r3, [r6, #0]
 800d6e4:	602b      	str	r3, [r5, #0]
 800d6e6:	6023      	str	r3, [r4, #0]
 800d6e8:	6013      	str	r3, [r2, #0]
 800d6ea:	bd70      	pop	{r4, r5, r6, pc}
 800d6ec:	200194b4 	.word	0x200194b4
 800d6f0:	200194b0 	.word	0x200194b0
 800d6f4:	200194b8 	.word	0x200194b8
 800d6f8:	200194bc 	.word	0x200194bc
 800d6fc:	200194cc 	.word	0x200194cc

0800d700 <GUI__GetAlphaBuffer>:
 800d700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d704:	461c      	mov	r4, r3
 800d706:	4b28      	ldr	r3, [pc, #160]	; (800d7a8 <GUI__GetAlphaBuffer+0xa8>)
 800d708:	4617      	mov	r7, r2
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	4606      	mov	r6, r0
 800d70e:	4688      	mov	r8, r1
 800d710:	b932      	cbnz	r2, 800d720 <GUI__GetAlphaBuffer+0x20>
 800d712:	2201      	movs	r2, #1
 800d714:	4825      	ldr	r0, [pc, #148]	; (800d7ac <GUI__GetAlphaBuffer+0xac>)
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	4b25      	ldr	r3, [pc, #148]	; (800d7b0 <GUI__GetAlphaBuffer+0xb0>)
 800d71a:	6003      	str	r3, [r0, #0]
 800d71c:	f7fb f8d0 	bl	80088c0 <GUI__RegisterExit>
 800d720:	4d24      	ldr	r5, [pc, #144]	; (800d7b4 <GUI__GetAlphaBuffer+0xb4>)
 800d722:	682b      	ldr	r3, [r5, #0]
 800d724:	b933      	cbnz	r3, 800d734 <GUI__GetAlphaBuffer+0x34>
 800d726:	4b24      	ldr	r3, [pc, #144]	; (800d7b8 <GUI__GetAlphaBuffer+0xb8>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	b913      	cbnz	r3, 800d734 <GUI__GetAlphaBuffer+0x34>
 800d72e:	f7ff fa8b 	bl	800cc48 <LCD_GetVXSizeMax>
 800d732:	6028      	str	r0, [r5, #0]
 800d734:	b10c      	cbz	r4, 800d73a <GUI__GetAlphaBuffer+0x3a>
 800d736:	682b      	ldr	r3, [r5, #0]
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	b196      	cbz	r6, 800d762 <GUI__GetAlphaBuffer+0x62>
 800d73c:	4b1f      	ldr	r3, [pc, #124]	; (800d7bc <GUI__GetAlphaBuffer+0xbc>)
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	4699      	mov	r9, r3
 800d742:	2400      	movs	r4, #0
 800d744:	b94a      	cbnz	r2, 800d75a <GUI__GetAlphaBuffer+0x5a>
 800d746:	6828      	ldr	r0, [r5, #0]
 800d748:	0080      	lsls	r0, r0, #2
 800d74a:	f7fb fe25 	bl	8009398 <GUI_ALLOC_GetFixedBlock>
 800d74e:	f1d0 0401 	rsbs	r4, r0, #1
 800d752:	f8c9 0000 	str.w	r0, [r9]
 800d756:	bf38      	it	cc
 800d758:	2400      	movcc	r4, #0
 800d75a:	f8d9 3000 	ldr.w	r3, [r9]
 800d75e:	6033      	str	r3, [r6, #0]
 800d760:	e000      	b.n	800d764 <GUI__GetAlphaBuffer+0x64>
 800d762:	4634      	mov	r4, r6
 800d764:	f1b8 0f00 	cmp.w	r8, #0
 800d768:	d00d      	beq.n	800d786 <GUI__GetAlphaBuffer+0x86>
 800d76a:	4e15      	ldr	r6, [pc, #84]	; (800d7c0 <GUI__GetAlphaBuffer+0xc0>)
 800d76c:	6833      	ldr	r3, [r6, #0]
 800d76e:	b93b      	cbnz	r3, 800d780 <GUI__GetAlphaBuffer+0x80>
 800d770:	6828      	ldr	r0, [r5, #0]
 800d772:	0080      	lsls	r0, r0, #2
 800d774:	f7fb fe10 	bl	8009398 <GUI_ALLOC_GetFixedBlock>
 800d778:	2800      	cmp	r0, #0
 800d77a:	6030      	str	r0, [r6, #0]
 800d77c:	bf08      	it	eq
 800d77e:	2401      	moveq	r4, #1
 800d780:	6833      	ldr	r3, [r6, #0]
 800d782:	f8c8 3000 	str.w	r3, [r8]
 800d786:	b167      	cbz	r7, 800d7a2 <GUI__GetAlphaBuffer+0xa2>
 800d788:	4e0e      	ldr	r6, [pc, #56]	; (800d7c4 <GUI__GetAlphaBuffer+0xc4>)
 800d78a:	6833      	ldr	r3, [r6, #0]
 800d78c:	b93b      	cbnz	r3, 800d79e <GUI__GetAlphaBuffer+0x9e>
 800d78e:	6828      	ldr	r0, [r5, #0]
 800d790:	0080      	lsls	r0, r0, #2
 800d792:	f7fb fe01 	bl	8009398 <GUI_ALLOC_GetFixedBlock>
 800d796:	2800      	cmp	r0, #0
 800d798:	6030      	str	r0, [r6, #0]
 800d79a:	bf08      	it	eq
 800d79c:	2401      	moveq	r4, #1
 800d79e:	6833      	ldr	r3, [r6, #0]
 800d7a0:	603b      	str	r3, [r7, #0]
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a8:	200194cc 	.word	0x200194cc
 800d7ac:	200194c4 	.word	0x200194c4
 800d7b0:	0800d6c1 	.word	0x0800d6c1
 800d7b4:	200194bc 	.word	0x200194bc
 800d7b8:	2001af20 	.word	0x2001af20
 800d7bc:	200194b4 	.word	0x200194b4
 800d7c0:	200194b0 	.word	0x200194b0
 800d7c4:	200194b8 	.word	0x200194b8

0800d7c8 <GUI__DoAlphaBlending>:
 800d7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7cc:	b093      	sub	sp, #76	; 0x4c
 800d7ce:	2400      	movs	r4, #0
 800d7d0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d7d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d7d4:	910c      	str	r1, [sp, #48]	; 0x30
 800d7d6:	4690      	mov	r8, r2
 800d7d8:	461f      	mov	r7, r3
 800d7da:	6034      	str	r4, [r6, #0]
 800d7dc:	a80f      	add	r0, sp, #60	; 0x3c
 800d7de:	a910      	add	r1, sp, #64	; 0x40
 800d7e0:	4622      	mov	r2, r4
 800d7e2:	ab11      	add	r3, sp, #68	; 0x44
 800d7e4:	f7ff ff8c 	bl	800d700 <GUI__GetAlphaBuffer>
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	f040 80c3 	bne.w	800d976 <GUI__DoAlphaBlending+0x1ae>
 800d7f0:	4c63      	ldr	r4, [pc, #396]	; (800d980 <GUI__DoAlphaBlending+0x1b8>)
 800d7f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d7f4:	6823      	ldr	r3, [r4, #0]
 800d7f6:	7c58      	ldrb	r0, [r3, #17]
 800d7f8:	4b62      	ldr	r3, [pc, #392]	; (800d984 <GUI__DoAlphaBlending+0x1bc>)
 800d7fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7fe:	9307      	str	r3, [sp, #28]
 800d800:	4297      	cmp	r7, r2
 800d802:	bfa8      	it	ge
 800d804:	4617      	movge	r7, r2
 800d806:	691a      	ldr	r2, [r3, #16]
 800d808:	920d      	str	r2, [sp, #52]	; 0x34
 800d80a:	970a      	str	r7, [sp, #40]	; 0x28
 800d80c:	f7ff f9e8 	bl	800cbe0 <GUI_GetBitsPerPixelEx>
 800d810:	6823      	ldr	r3, [r4, #0]
 800d812:	9008      	str	r0, [sp, #32]
 800d814:	7c58      	ldrb	r0, [r3, #17]
 800d816:	f7ff fa01 	bl	800cc1c <GUI_GetpfIndex2ColorEx>
 800d81a:	4b5b      	ldr	r3, [pc, #364]	; (800d988 <GUI__DoAlphaBlending+0x1c0>)
 800d81c:	9004      	str	r0, [sp, #16]
 800d81e:	4298      	cmp	r0, r3
 800d820:	d005      	beq.n	800d82e <GUI__DoAlphaBlending+0x66>
 800d822:	4b5a      	ldr	r3, [pc, #360]	; (800d98c <GUI__DoAlphaBlending+0x1c4>)
 800d824:	1ac3      	subs	r3, r0, r3
 800d826:	bf18      	it	ne
 800d828:	2301      	movne	r3, #1
 800d82a:	9306      	str	r3, [sp, #24]
 800d82c:	e000      	b.n	800d830 <GUI__DoAlphaBlending+0x68>
 800d82e:	9506      	str	r5, [sp, #24]
 800d830:	2500      	movs	r5, #0
 800d832:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d834:	46ab      	mov	fp, r5
 800d836:	4643      	mov	r3, r8
 800d838:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d83a:	f853 0b04 	ldr.w	r0, [r3], #4
 800d83e:	9305      	str	r3, [sp, #20]
 800d840:	4790      	blx	r2
 800d842:	0e03      	lsrs	r3, r0, #24
 800d844:	4681      	mov	r9, r0
 800d846:	9309      	str	r3, [sp, #36]	; 0x24
 800d848:	f000 8085 	beq.w	800d956 <GUI__DoAlphaBlending+0x18e>
 800d84c:	f1bb 0f00 	cmp.w	fp, #0
 800d850:	d13f      	bne.n	800d8d2 <GUI__DoAlphaBlending+0x10a>
 800d852:	4b4b      	ldr	r3, [pc, #300]	; (800d980 <GUI__DoAlphaBlending+0x1b8>)
 800d854:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d85a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d85e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800d862:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d864:	442f      	add	r7, r5
 800d866:	42bb      	cmp	r3, r7
 800d868:	bfc8      	it	gt
 800d86a:	ebc7 0b03 	rsbgt	fp, r7, r3
 800d86e:	eb0b 0a05 	add.w	sl, fp, r5
 800d872:	bfc8      	it	gt
 800d874:	461f      	movgt	r7, r3
 800d876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d878:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800d87c:	4453      	add	r3, sl
 800d87e:	4494      	add	ip, r2
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	9b07      	ldr	r3, [sp, #28]
 800d884:	9301      	str	r3, [sp, #4]
 800d886:	f10c 32ff 	add.w	r2, ip, #4294967295
 800d88a:	4638      	mov	r0, r7
 800d88c:	460b      	mov	r3, r1
 800d88e:	f8cd c00c 	str.w	ip, [sp, #12]
 800d892:	f001 fc15 	bl	800f0c0 <GUI_ReadRectEx>
 800d896:	9a08      	ldr	r2, [sp, #32]
 800d898:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d89a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d89e:	2a17      	cmp	r2, #23
 800d8a0:	dc06      	bgt.n	800d8b0 <GUI__DoAlphaBlending+0xe8>
 800d8a2:	4450      	add	r0, sl
 800d8a4:	ebcb 0104 	rsb	r1, fp, r4
 800d8a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8aa:	f001 fc61 	bl	800f170 <GUI__ExpandPixelIndicesEx>
 800d8ae:	e001      	b.n	800d8b4 <GUI__DoAlphaBlending+0xec>
 800d8b0:	9b06      	ldr	r3, [sp, #24]
 800d8b2:	b913      	cbnz	r3, 800d8ba <GUI__DoAlphaBlending+0xf2>
 800d8b4:	f04f 0b01 	mov.w	fp, #1
 800d8b8:	e00b      	b.n	800d8d2 <GUI__DoAlphaBlending+0x10a>
 800d8ba:	ebc7 070c 	rsb	r7, r7, ip
 800d8be:	4482      	add	sl, r0
 800d8c0:	f8da 0000 	ldr.w	r0, [sl]
 800d8c4:	9a04      	ldr	r2, [sp, #16]
 800d8c6:	4790      	blx	r2
 800d8c8:	3f01      	subs	r7, #1
 800d8ca:	f84a 0b04 	str.w	r0, [sl], #4
 800d8ce:	d1f7      	bne.n	800d8c0 <GUI__DoAlphaBlending+0xf8>
 800d8d0:	e7f0      	b.n	800d8b4 <GUI__DoAlphaBlending+0xec>
 800d8d2:	4b2f      	ldr	r3, [pc, #188]	; (800d990 <GUI__DoAlphaBlending+0x1c8>)
 800d8d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d8d6:	f8d3 c000 	ldr.w	ip, [r3]
 800d8da:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d8dc:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800d8e0:	f1bc 0f00 	cmp.w	ip, #0
 800d8e4:	d024      	beq.n	800d930 <GUI__DoAlphaBlending+0x168>
 800d8e6:	eb07 020a 	add.w	r2, r7, sl
 800d8ea:	4451      	add	r1, sl
 800d8ec:	9210      	str	r2, [sp, #64]	; 0x40
 800d8ee:	4623      	mov	r3, r4
 800d8f0:	910f      	str	r1, [sp, #60]	; 0x3c
 800d8f2:	4640      	mov	r0, r8
 800d8f4:	47e0      	blx	ip
 800d8f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d8f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	f858 1003 	ldr.w	r1, [r8, r3]
 800d900:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800d904:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800d908:	58e8      	ldr	r0, [r5, r3]
 800d90a:	d101      	bne.n	800d910 <GUI__DoAlphaBlending+0x148>
 800d90c:	50d0      	str	r0, [r2, r3]
 800d90e:	e005      	b.n	800d91c <GUI__DoAlphaBlending+0x154>
 800d910:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800d914:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800d918:	bf08      	it	eq
 800d91a:	50d1      	streq	r1, [r2, r3]
 800d91c:	3c01      	subs	r4, #1
 800d91e:	f103 0304 	add.w	r3, r3, #4
 800d922:	d1eb      	bne.n	800d8fc <GUI__DoAlphaBlending+0x134>
 800d924:	6833      	ldr	r3, [r6, #0]
 800d926:	9710      	str	r7, [sp, #64]	; 0x40
 800d928:	f043 0301 	orr.w	r3, r3, #1
 800d92c:	6033      	str	r3, [r6, #0]
 800d92e:	e020      	b.n	800d972 <GUI__DoAlphaBlending+0x1aa>
 800d930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d932:	2bff      	cmp	r3, #255	; 0xff
 800d934:	d104      	bne.n	800d940 <GUI__DoAlphaBlending+0x178>
 800d936:	f851 300a 	ldr.w	r3, [r1, sl]
 800d93a:	f847 300a 	str.w	r3, [r7, sl]
 800d93e:	e011      	b.n	800d964 <GUI__DoAlphaBlending+0x19c>
 800d940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d942:	f851 100a 	ldr.w	r1, [r1, sl]
 800d946:	43da      	mvns	r2, r3
 800d948:	4648      	mov	r0, r9
 800d94a:	b2d2      	uxtb	r2, r2
 800d94c:	f7ff fe88 	bl	800d660 <GUI__MixColors>
 800d950:	f847 000a 	str.w	r0, [r7, sl]
 800d954:	e002      	b.n	800d95c <GUI__DoAlphaBlending+0x194>
 800d956:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d958:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800d95c:	6833      	ldr	r3, [r6, #0]
 800d95e:	f043 0301 	orr.w	r3, r3, #1
 800d962:	6033      	str	r3, [r6, #0]
 800d964:	3c01      	subs	r4, #1
 800d966:	f105 0501 	add.w	r5, r5, #1
 800d96a:	d002      	beq.n	800d972 <GUI__DoAlphaBlending+0x1aa>
 800d96c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d970:	e761      	b.n	800d836 <GUI__DoAlphaBlending+0x6e>
 800d972:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d974:	e000      	b.n	800d978 <GUI__DoAlphaBlending+0x1b0>
 800d976:	4620      	mov	r0, r4
 800d978:	b013      	add	sp, #76	; 0x4c
 800d97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97e:	bf00      	nop
 800d980:	200001b0 	.word	0x200001b0
 800d984:	2001af18 	.word	0x2001af18
 800d988:	0800de45 	.word	0x0800de45
 800d98c:	0800de43 	.word	0x0800de43
 800d990:	200194c0 	.word	0x200194c0

0800d994 <GUI__AllocAlphaBuffer>:
 800d994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d996:	b108      	cbz	r0, 800d99c <GUI__AllocAlphaBuffer+0x8>
 800d998:	aa03      	add	r2, sp, #12
 800d99a:	e000      	b.n	800d99e <GUI__AllocAlphaBuffer+0xa>
 800d99c:	4602      	mov	r2, r0
 800d99e:	a801      	add	r0, sp, #4
 800d9a0:	a902      	add	r1, sp, #8
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	f7ff feac 	bl	800d700 <GUI__GetAlphaBuffer>
 800d9a8:	b005      	add	sp, #20
 800d9aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d9b0 <GUI_SignalEvent>:
 800d9b0:	b508      	push	{r3, lr}
 800d9b2:	4b02      	ldr	r3, [pc, #8]	; (800d9bc <GUI_SignalEvent+0xc>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	b103      	cbz	r3, 800d9ba <GUI_SignalEvent+0xa>
 800d9b8:	4798      	blx	r3
 800d9ba:	bd08      	pop	{r3, pc}
 800d9bc:	200194d0 	.word	0x200194d0

0800d9c0 <_GetCharCode>:
 800d9c0:	7800      	ldrb	r0, [r0, #0]
 800d9c2:	4770      	bx	lr

0800d9c4 <_GetCharSize>:
 800d9c4:	2001      	movs	r0, #1
 800d9c6:	4770      	bx	lr

0800d9c8 <_CalcSizeOfChar>:
 800d9c8:	2001      	movs	r0, #1
 800d9ca:	4770      	bx	lr

0800d9cc <_Encode>:
 800d9cc:	7001      	strb	r1, [r0, #0]
 800d9ce:	2001      	movs	r0, #1
 800d9d0:	4770      	bx	lr
	...

0800d9d4 <GUI_UC__GetCharCodeInc>:
 800d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d6:	4e08      	ldr	r6, [pc, #32]	; (800d9f8 <GUI_UC__GetCharCodeInc+0x24>)
 800d9d8:	6804      	ldr	r4, [r0, #0]
 800d9da:	6833      	ldr	r3, [r6, #0]
 800d9dc:	4605      	mov	r5, r0
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	4798      	blx	r3
 800d9e4:	6833      	ldr	r3, [r6, #0]
 800d9e6:	4607      	mov	r7, r0
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	4798      	blx	r3
 800d9ee:	4420      	add	r0, r4
 800d9f0:	6028      	str	r0, [r5, #0]
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	2001af10 	.word	0x2001af10

0800d9fc <GUI_UC__NumChars2NumBytes>:
 800d9fc:	b570      	push	{r4, r5, r6, lr}
 800d9fe:	4604      	mov	r4, r0
 800da00:	460e      	mov	r6, r1
 800da02:	2500      	movs	r5, #0
 800da04:	b146      	cbz	r6, 800da18 <GUI_UC__NumChars2NumBytes+0x1c>
 800da06:	4b05      	ldr	r3, [pc, #20]	; (800da1c <GUI_UC__NumChars2NumBytes+0x20>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4620      	mov	r0, r4
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	4798      	blx	r3
 800da10:	3e01      	subs	r6, #1
 800da12:	4404      	add	r4, r0
 800da14:	4405      	add	r5, r0
 800da16:	e7f5      	b.n	800da04 <GUI_UC__NumChars2NumBytes+0x8>
 800da18:	4628      	mov	r0, r5
 800da1a:	bd70      	pop	{r4, r5, r6, pc}
 800da1c:	2001af10 	.word	0x2001af10

0800da20 <_Unlink>:
 800da20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da22:	4605      	mov	r5, r0
 800da24:	b1f0      	cbz	r0, 800da64 <_Unlink+0x44>
 800da26:	f7fb fb6b 	bl	8009100 <GUI_ALLOC_LockH>
 800da2a:	4b0f      	ldr	r3, [pc, #60]	; (800da68 <_Unlink+0x48>)
 800da2c:	9000      	str	r0, [sp, #0]
 800da2e:	681c      	ldr	r4, [r3, #0]
 800da30:	42ac      	cmp	r4, r5
 800da32:	d104      	bne.n	800da3e <_Unlink+0x1e>
 800da34:	6842      	ldr	r2, [r0, #4]
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	e011      	b.n	800da5e <_Unlink+0x3e>
 800da3a:	f7fb fb6f 	bl	800911c <GUI_ALLOC_UnlockH>
 800da3e:	b174      	cbz	r4, 800da5e <_Unlink+0x3e>
 800da40:	4620      	mov	r0, r4
 800da42:	f7fb fb5d 	bl	8009100 <GUI_ALLOC_LockH>
 800da46:	4603      	mov	r3, r0
 800da48:	a802      	add	r0, sp, #8
 800da4a:	685c      	ldr	r4, [r3, #4]
 800da4c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800da50:	42ac      	cmp	r4, r5
 800da52:	d1f2      	bne.n	800da3a <_Unlink+0x1a>
 800da54:	9a00      	ldr	r2, [sp, #0]
 800da56:	6852      	ldr	r2, [r2, #4]
 800da58:	605a      	str	r2, [r3, #4]
 800da5a:	f7fb fb5f 	bl	800911c <GUI_ALLOC_UnlockH>
 800da5e:	4668      	mov	r0, sp
 800da60:	f7fb fb5c 	bl	800911c <GUI_ALLOC_UnlockH>
 800da64:	b003      	add	sp, #12
 800da66:	bd30      	pop	{r4, r5, pc}
 800da68:	200194d8 	.word	0x200194d8

0800da6c <GUI_TIMER__GetFirstTimer>:
 800da6c:	2300      	movs	r3, #0
 800da6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da70:	6003      	str	r3, [r0, #0]
 800da72:	4b09      	ldr	r3, [pc, #36]	; (800da98 <GUI_TIMER__GetFirstTimer+0x2c>)
 800da74:	681c      	ldr	r4, [r3, #0]
 800da76:	4605      	mov	r5, r0
 800da78:	b154      	cbz	r4, 800da90 <GUI_TIMER__GetFirstTimer+0x24>
 800da7a:	4620      	mov	r0, r4
 800da7c:	f7fb fb40 	bl	8009100 <GUI_ALLOC_LockH>
 800da80:	ab02      	add	r3, sp, #8
 800da82:	6902      	ldr	r2, [r0, #16]
 800da84:	f843 0d04 	str.w	r0, [r3, #-4]!
 800da88:	602a      	str	r2, [r5, #0]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fb fb46 	bl	800911c <GUI_ALLOC_UnlockH>
 800da90:	4620      	mov	r0, r4
 800da92:	b003      	add	sp, #12
 800da94:	bd30      	pop	{r4, r5, pc}
 800da96:	bf00      	nop
 800da98:	200194d4 	.word	0x200194d4

0800da9c <GUI_TIMER__GetNextTimerLin>:
 800da9c:	2300      	movs	r3, #0
 800da9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800daa0:	600b      	str	r3, [r1, #0]
 800daa2:	460e      	mov	r6, r1
 800daa4:	4604      	mov	r4, r0
 800daa6:	b190      	cbz	r0, 800dace <GUI_TIMER__GetNextTimerLin+0x32>
 800daa8:	f7fb fb2a 	bl	8009100 <GUI_ALLOC_LockH>
 800daac:	ad02      	add	r5, sp, #8
 800daae:	6884      	ldr	r4, [r0, #8]
 800dab0:	f845 0d04 	str.w	r0, [r5, #-4]!
 800dab4:	b144      	cbz	r4, 800dac8 <GUI_TIMER__GetNextTimerLin+0x2c>
 800dab6:	4628      	mov	r0, r5
 800dab8:	f7fb fb30 	bl	800911c <GUI_ALLOC_UnlockH>
 800dabc:	4620      	mov	r0, r4
 800dabe:	f7fb fb1f 	bl	8009100 <GUI_ALLOC_LockH>
 800dac2:	6903      	ldr	r3, [r0, #16]
 800dac4:	9001      	str	r0, [sp, #4]
 800dac6:	6033      	str	r3, [r6, #0]
 800dac8:	4628      	mov	r0, r5
 800daca:	f7fb fb27 	bl	800911c <GUI_ALLOC_UnlockH>
 800dace:	4620      	mov	r0, r4
 800dad0:	b002      	add	sp, #8
 800dad2:	bd70      	pop	{r4, r5, r6, pc}

0800dad4 <GUI_TIMER_Delete>:
 800dad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dad6:	4604      	mov	r4, r0
 800dad8:	b358      	cbz	r0, 800db32 <GUI_TIMER_Delete+0x5e>
 800dada:	4d17      	ldr	r5, [pc, #92]	; (800db38 <GUI_TIMER_Delete+0x64>)
 800dadc:	682e      	ldr	r6, [r5, #0]
 800dade:	4286      	cmp	r6, r0
 800dae0:	d10b      	bne.n	800dafa <GUI_TIMER_Delete+0x26>
 800dae2:	f7fb fb0d 	bl	8009100 <GUI_ALLOC_LockH>
 800dae6:	ab02      	add	r3, sp, #8
 800dae8:	6882      	ldr	r2, [r0, #8]
 800daea:	f843 0d04 	str.w	r0, [r3, #-4]!
 800daee:	602a      	str	r2, [r5, #0]
 800daf0:	4618      	mov	r0, r3
 800daf2:	e016      	b.n	800db22 <GUI_TIMER_Delete+0x4e>
 800daf4:	4668      	mov	r0, sp
 800daf6:	f7fb fb11 	bl	800911c <GUI_ALLOC_UnlockH>
 800dafa:	4630      	mov	r0, r6
 800dafc:	f7fb fb00 	bl	8009100 <GUI_ALLOC_LockH>
 800db00:	6886      	ldr	r6, [r0, #8]
 800db02:	ad02      	add	r5, sp, #8
 800db04:	42a6      	cmp	r6, r4
 800db06:	f845 0d08 	str.w	r0, [r5, #-8]!
 800db0a:	d1f3      	bne.n	800daf4 <GUI_TIMER_Delete+0x20>
 800db0c:	4620      	mov	r0, r4
 800db0e:	f7fb faf7 	bl	8009100 <GUI_ALLOC_LockH>
 800db12:	9b00      	ldr	r3, [sp, #0]
 800db14:	6882      	ldr	r2, [r0, #8]
 800db16:	9001      	str	r0, [sp, #4]
 800db18:	609a      	str	r2, [r3, #8]
 800db1a:	a801      	add	r0, sp, #4
 800db1c:	f7fb fafe 	bl	800911c <GUI_ALLOC_UnlockH>
 800db20:	4668      	mov	r0, sp
 800db22:	f7fb fafb 	bl	800911c <GUI_ALLOC_UnlockH>
 800db26:	4620      	mov	r0, r4
 800db28:	f7ff ff7a 	bl	800da20 <_Unlink>
 800db2c:	4620      	mov	r0, r4
 800db2e:	f7fb fb15 	bl	800915c <GUI_ALLOC_Free>
 800db32:	b002      	add	sp, #8
 800db34:	bd70      	pop	{r4, r5, r6, pc}
 800db36:	bf00      	nop
 800db38:	200194d4 	.word	0x200194d4

0800db3c <GUI_TIMER_GetFlag>:
 800db3c:	b513      	push	{r0, r1, r4, lr}
 800db3e:	460c      	mov	r4, r1
 800db40:	b168      	cbz	r0, 800db5e <GUI_TIMER_GetFlag+0x22>
 800db42:	f7fb fadd 	bl	8009100 <GUI_ALLOC_LockH>
 800db46:	ab02      	add	r3, sp, #8
 800db48:	8982      	ldrh	r2, [r0, #12]
 800db4a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800db4e:	4214      	tst	r4, r2
 800db50:	4618      	mov	r0, r3
 800db52:	bf0c      	ite	eq
 800db54:	2400      	moveq	r4, #0
 800db56:	2401      	movne	r4, #1
 800db58:	f7fb fae0 	bl	800911c <GUI_ALLOC_UnlockH>
 800db5c:	e000      	b.n	800db60 <GUI_TIMER_GetFlag+0x24>
 800db5e:	2401      	movs	r4, #1
 800db60:	4620      	mov	r0, r4
 800db62:	b002      	add	sp, #8
 800db64:	bd10      	pop	{r4, pc}
	...

0800db68 <GUI_TOUCH_GetLayer>:
 800db68:	4b01      	ldr	r3, [pc, #4]	; (800db70 <GUI_TOUCH_GetLayer+0x8>)
 800db6a:	7a58      	ldrb	r0, [r3, #9]
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	200194dc 	.word	0x200194dc

0800db74 <GUI_SetOrg>:
 800db74:	460a      	mov	r2, r1
 800db76:	4908      	ldr	r1, [pc, #32]	; (800db98 <GUI_SetOrg+0x24>)
 800db78:	b510      	push	{r4, lr}
 800db7a:	8008      	strh	r0, [r1, #0]
 800db7c:	4907      	ldr	r1, [pc, #28]	; (800db9c <GUI_SetOrg+0x28>)
 800db7e:	800a      	strh	r2, [r1, #0]
 800db80:	4907      	ldr	r1, [pc, #28]	; (800dba0 <GUI_SetOrg+0x2c>)
 800db82:	6809      	ldr	r1, [r1, #0]
 800db84:	4603      	mov	r3, r0
 800db86:	7c48      	ldrb	r0, [r1, #17]
 800db88:	4906      	ldr	r1, [pc, #24]	; (800dba4 <GUI_SetOrg+0x30>)
 800db8a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800db8e:	68c1      	ldr	r1, [r0, #12]
 800db90:	6a0c      	ldr	r4, [r1, #32]
 800db92:	4619      	mov	r1, r3
 800db94:	47a0      	blx	r4
 800db96:	bd10      	pop	{r4, pc}
 800db98:	2001af00 	.word	0x2001af00
 800db9c:	2001aef4 	.word	0x2001aef4
 800dba0:	200001b0 	.word	0x200001b0
 800dba4:	2001af18 	.word	0x2001af18

0800dba8 <GUI_SetDrawMode>:
 800dba8:	f7ff b936 	b.w	800ce18 <LCD_SetDrawMode>

0800dbac <GL_SetDefault>:
 800dbac:	b508      	push	{r3, lr}
 800dbae:	2000      	movs	r0, #0
 800dbb0:	f7fa fbc2 	bl	8008338 <GUI_SetBkColor>
 800dbb4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800dbb8:	f7fa fbc0 	bl	800833c <GUI_SetColor>
 800dbbc:	2001      	movs	r0, #1
 800dbbe:	f000 f88f 	bl	800dce0 <GUI_SetPenSize>
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	f001 fd2a 	bl	800f61c <GUI_SetTextAlign>
 800dbc8:	2000      	movs	r0, #0
 800dbca:	f001 fd1d 	bl	800f608 <GUI_SetTextMode>
 800dbce:	2000      	movs	r0, #0
 800dbd0:	f7ff ffea 	bl	800dba8 <GUI_SetDrawMode>
 800dbd4:	4b04      	ldr	r3, [pc, #16]	; (800dbe8 <GL_SetDefault+0x3c>)
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	f7fa fba4 	bl	8008324 <GUI_SetFont>
 800dbdc:	2000      	movs	r0, #0
 800dbde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dbe2:	f001 bd25 	b.w	800f630 <GUI_SetLineStyle>
 800dbe6:	bf00      	nop
 800dbe8:	200001b4 	.word	0x200001b4

0800dbec <GUI__AlphaPreserveTrans>:
 800dbec:	b510      	push	{r4, lr}
 800dbee:	4b07      	ldr	r3, [pc, #28]	; (800dc0c <GUI__AlphaPreserveTrans+0x20>)
 800dbf0:	781c      	ldrb	r4, [r3, #0]
 800dbf2:	b120      	cbz	r0, 800dbfe <GUI__AlphaPreserveTrans+0x12>
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	701a      	strb	r2, [r3, #0]
 800dbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbfc:	e002      	b.n	800dc04 <GUI__AlphaPreserveTrans+0x18>
 800dbfe:	7018      	strb	r0, [r3, #0]
 800dc00:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800dc04:	f001 faac 	bl	800f160 <LCD_AA_SetAndMask>
 800dc08:	4620      	mov	r0, r4
 800dc0a:	bd10      	pop	{r4, pc}
 800dc0c:	2001af09 	.word	0x2001af09

0800dc10 <GUI_GetCursorLayer>:
 800dc10:	2801      	cmp	r0, #1
 800dc12:	bf9a      	itte	ls
 800dc14:	4b02      	ldrls	r3, [pc, #8]	; (800dc20 <GUI_GetCursorLayer+0x10>)
 800dc16:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800dc1a:	2000      	movhi	r0, #0
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	200194e8 	.word	0x200194e8

0800dc24 <GUI_GetLayerPosEx>:
 800dc24:	b538      	push	{r3, r4, r5, lr}
 800dc26:	460d      	mov	r5, r1
 800dc28:	4614      	mov	r4, r2
 800dc2a:	f7f9 ff3f 	bl	8007aac <LCD_GetPosEx>
 800dc2e:	b110      	cbz	r0, 800dc36 <GUI_GetLayerPosEx+0x12>
 800dc30:	2300      	movs	r3, #0
 800dc32:	602b      	str	r3, [r5, #0]
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	bd38      	pop	{r3, r4, r5, pc}

0800dc38 <GUI_SelectLayer>:
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	4d08      	ldr	r5, [pc, #32]	; (800dc5c <GUI_SelectLayer+0x24>)
 800dc3c:	682b      	ldr	r3, [r5, #0]
 800dc3e:	2801      	cmp	r0, #1
 800dc40:	4604      	mov	r4, r0
 800dc42:	7c5e      	ldrb	r6, [r3, #17]
 800dc44:	d808      	bhi.n	800dc58 <GUI_SelectLayer+0x20>
 800dc46:	f7fa fd01 	bl	800864c <GUI_DEVICE__GetpDriver>
 800dc4a:	b128      	cbz	r0, 800dc58 <GUI_SelectLayer+0x20>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	745c      	strb	r4, [r3, #17]
 800dc50:	f000 f80a 	bl	800dc68 <GUI_SelectLCD>
 800dc54:	4b02      	ldr	r3, [pc, #8]	; (800dc60 <GUI_SelectLayer+0x28>)
 800dc56:	601c      	str	r4, [r3, #0]
 800dc58:	4630      	mov	r0, r6
 800dc5a:	bd70      	pop	{r4, r5, r6, pc}
 800dc5c:	200001b0 	.word	0x200001b0
 800dc60:	2001b040 	.word	0x2001b040

0800dc64 <GUI_SetLayerPosEx>:
 800dc64:	f7f9 bef2 	b.w	8007a4c <LCD_SetPosEx>

0800dc68 <GUI_SelectLCD>:
 800dc68:	b508      	push	{r3, lr}
 800dc6a:	f001 f915 	bl	800ee98 <LCD_SelectLCD>
 800dc6e:	f7fe ff43 	bl	800caf8 <LCD_UpdateColorIndices>
 800dc72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dc76:	f7fd b8f9 	b.w	800ae6c <WM_Activate>
	...

0800dc7c <GUI_SaveContext_W>:
 800dc7c:	b508      	push	{r3, lr}
 800dc7e:	4b03      	ldr	r3, [pc, #12]	; (800dc8c <GUI_SaveContext_W+0x10>)
 800dc80:	2270      	movs	r2, #112	; 0x70
 800dc82:	6819      	ldr	r1, [r3, #0]
 800dc84:	f002 fa99 	bl	80101ba <memcpy>
 800dc88:	bd08      	pop	{r3, pc}
 800dc8a:	bf00      	nop
 800dc8c:	200001b0 	.word	0x200001b0

0800dc90 <GUI_RestoreContext>:
 800dc90:	b508      	push	{r3, lr}
 800dc92:	4b03      	ldr	r3, [pc, #12]	; (800dca0 <GUI_RestoreContext+0x10>)
 800dc94:	4601      	mov	r1, r0
 800dc96:	2270      	movs	r2, #112	; 0x70
 800dc98:	6818      	ldr	r0, [r3, #0]
 800dc9a:	f002 fa8e 	bl	80101ba <memcpy>
 800dc9e:	bd08      	pop	{r3, pc}
 800dca0:	200001b0 	.word	0x200001b0

0800dca4 <GUI_RectsIntersect>:
 800dca4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800dca8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	dc14      	bgt.n	800dcda <GUI_RectsIntersect+0x36>
 800dcb0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800dcb4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	dc0e      	bgt.n	800dcda <GUI_RectsIntersect+0x36>
 800dcbc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800dcc0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	dc08      	bgt.n	800dcda <GUI_RectsIntersect+0x36>
 800dcc8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dccc:	f9b1 2000 	ldrsh.w	r2, [r1]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	bfcc      	ite	gt
 800dcd4:	2000      	movgt	r0, #0
 800dcd6:	2001      	movle	r0, #1
 800dcd8:	4770      	bx	lr
 800dcda:	2000      	movs	r0, #0
 800dcdc:	4770      	bx	lr
	...

0800dce0 <GUI_SetPenSize>:
 800dce0:	4b02      	ldr	r3, [pc, #8]	; (800dcec <GUI_SetPenSize+0xc>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	7e1a      	ldrb	r2, [r3, #24]
 800dce6:	7618      	strb	r0, [r3, #24]
 800dce8:	4610      	mov	r0, r2
 800dcea:	4770      	bx	lr
 800dcec:	200001b0 	.word	0x200001b0

0800dcf0 <GUI_MoveRect>:
 800dcf0:	b168      	cbz	r0, 800dd0e <GUI_MoveRect+0x1e>
 800dcf2:	8803      	ldrh	r3, [r0, #0]
 800dcf4:	b289      	uxth	r1, r1
 800dcf6:	440b      	add	r3, r1
 800dcf8:	8003      	strh	r3, [r0, #0]
 800dcfa:	8883      	ldrh	r3, [r0, #4]
 800dcfc:	4419      	add	r1, r3
 800dcfe:	8843      	ldrh	r3, [r0, #2]
 800dd00:	8081      	strh	r1, [r0, #4]
 800dd02:	b292      	uxth	r2, r2
 800dd04:	4413      	add	r3, r2
 800dd06:	8043      	strh	r3, [r0, #2]
 800dd08:	88c3      	ldrh	r3, [r0, #6]
 800dd0a:	441a      	add	r2, r3
 800dd0c:	80c2      	strh	r2, [r0, #6]
 800dd0e:	4770      	bx	lr

0800dd10 <GUI_MergeRect>:
 800dd10:	b510      	push	{r4, lr}
 800dd12:	b338      	cbz	r0, 800dd64 <GUI_MergeRect+0x54>
 800dd14:	b309      	cbz	r1, 800dd5a <GUI_MergeRect+0x4a>
 800dd16:	b30a      	cbz	r2, 800dd5c <GUI_MergeRect+0x4c>
 800dd18:	f9b1 4000 	ldrsh.w	r4, [r1]
 800dd1c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800dd20:	429c      	cmp	r4, r3
 800dd22:	bfb8      	it	lt
 800dd24:	4623      	movlt	r3, r4
 800dd26:	8003      	strh	r3, [r0, #0]
 800dd28:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800dd2c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800dd30:	429c      	cmp	r4, r3
 800dd32:	bfb8      	it	lt
 800dd34:	4623      	movlt	r3, r4
 800dd36:	8043      	strh	r3, [r0, #2]
 800dd38:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800dd3c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800dd40:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800dd44:	429c      	cmp	r4, r3
 800dd46:	bfa8      	it	ge
 800dd48:	4623      	movge	r3, r4
 800dd4a:	8083      	strh	r3, [r0, #4]
 800dd4c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800dd50:	4299      	cmp	r1, r3
 800dd52:	bfa8      	it	ge
 800dd54:	460b      	movge	r3, r1
 800dd56:	80c3      	strh	r3, [r0, #6]
 800dd58:	bd10      	pop	{r4, pc}
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	680b      	ldr	r3, [r1, #0]
 800dd5e:	6003      	str	r3, [r0, #0]
 800dd60:	684b      	ldr	r3, [r1, #4]
 800dd62:	6043      	str	r3, [r0, #4]
 800dd64:	bd10      	pop	{r4, pc}
	...

0800dd68 <GUI_GotoXY>:
 800dd68:	4b02      	ldr	r3, [pc, #8]	; (800dd74 <GUI_GotoXY+0xc>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	8458      	strh	r0, [r3, #34]	; 0x22
 800dd6e:	8499      	strh	r1, [r3, #36]	; 0x24
 800dd70:	2000      	movs	r0, #0
 800dd72:	4770      	bx	lr
 800dd74:	200001b0 	.word	0x200001b0

0800dd78 <GUI_GetOrg>:
 800dd78:	4b04      	ldr	r3, [pc, #16]	; (800dd8c <GUI_GetOrg+0x14>)
 800dd7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd7e:	6003      	str	r3, [r0, #0]
 800dd80:	4b03      	ldr	r3, [pc, #12]	; (800dd90 <GUI_GetOrg+0x18>)
 800dd82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd86:	600b      	str	r3, [r1, #0]
 800dd88:	4770      	bx	lr
 800dd8a:	bf00      	nop
 800dd8c:	2001af00 	.word	0x2001af00
 800dd90:	2001aef4 	.word	0x2001aef4

0800dd94 <GUI_GetBkColor>:
 800dd94:	b508      	push	{r3, lr}
 800dd96:	f001 f9d3 	bl	800f140 <LCD_GetBkColorIndex>
 800dd9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dd9e:	f7ff bb3b 	b.w	800d418 <LCD_Index2Color>

0800dda2 <GUI_GetColor>:
 800dda2:	b508      	push	{r3, lr}
 800dda4:	f001 f9d4 	bl	800f150 <LCD_GetColorIndex>
 800dda8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ddac:	f7ff bb34 	b.w	800d418 <LCD_Index2Color>

0800ddb0 <GUI_CURSOR_SetPositionEx>:
 800ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	4610      	mov	r0, r2
 800ddb6:	460d      	mov	r5, r1
 800ddb8:	4614      	mov	r4, r2
 800ddba:	f7ff ff29 	bl	800dc10 <GUI_GetCursorLayer>
 800ddbe:	4f15      	ldr	r7, [pc, #84]	; (800de14 <GUI_CURSOR_SetPositionEx+0x64>)
 800ddc0:	2314      	movs	r3, #20
 800ddc2:	b148      	cbz	r0, 800ddd8 <GUI_CURSOR_SetPositionEx+0x28>
 800ddc4:	435c      	muls	r4, r3
 800ddc6:	593b      	ldr	r3, [r7, r4]
 800ddc8:	6859      	ldr	r1, [r3, #4]
 800ddca:	689a      	ldr	r2, [r3, #8]
 800ddcc:	1a71      	subs	r1, r6, r1
 800ddce:	1aaa      	subs	r2, r5, r2
 800ddd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ddd4:	f7ff bf46 	b.w	800dc64 <GUI_SetLayerPosEx>
 800ddd8:	fb03 7304 	mla	r3, r3, r4, r7
 800dddc:	f103 0208 	add.w	r2, r3, #8
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	42b3      	cmp	r3, r6
 800dde4:	d102      	bne.n	800ddec <GUI_CURSOR_SetPositionEx+0x3c>
 800dde6:	6853      	ldr	r3, [r2, #4]
 800dde8:	42ab      	cmp	r3, r5
 800ddea:	d011      	beq.n	800de10 <GUI_CURSOR_SetPositionEx+0x60>
 800ddec:	2314      	movs	r3, #20
 800ddee:	4363      	muls	r3, r4
 800ddf0:	18fa      	adds	r2, r7, r3
 800ddf2:	6910      	ldr	r0, [r2, #16]
 800ddf4:	b138      	cbz	r0, 800de06 <GUI_CURSOR_SetPositionEx+0x56>
 800ddf6:	4a07      	ldr	r2, [pc, #28]	; (800de14 <GUI_CURSOR_SetPositionEx+0x64>)
 800ddf8:	58d3      	ldr	r3, [r2, r3]
 800ddfa:	6859      	ldr	r1, [r3, #4]
 800ddfc:	689a      	ldr	r2, [r3, #8]
 800ddfe:	1a71      	subs	r1, r6, r1
 800de00:	1aaa      	subs	r2, r5, r2
 800de02:	f001 fd73 	bl	800f8ec <GUI_SPRITE_SetPosition>
 800de06:	2314      	movs	r3, #20
 800de08:	fb03 7404 	mla	r4, r3, r4, r7
 800de0c:	60a6      	str	r6, [r4, #8]
 800de0e:	60e5      	str	r5, [r4, #12]
 800de10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de12:	bf00      	nop
 800de14:	200194f0 	.word	0x200194f0

0800de18 <GUI_ALLOC_AllocZero>:
 800de18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de1a:	4605      	mov	r5, r0
 800de1c:	f7fb fbb8 	bl	8009590 <GUI_ALLOC_AllocNoInit>
 800de20:	4606      	mov	r6, r0
 800de22:	b158      	cbz	r0, 800de3c <GUI_ALLOC_AllocZero+0x24>
 800de24:	f7fb f96c 	bl	8009100 <GUI_ALLOC_LockH>
 800de28:	ac02      	add	r4, sp, #8
 800de2a:	2100      	movs	r1, #0
 800de2c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800de30:	462a      	mov	r2, r5
 800de32:	f7f9 fe81 	bl	8007b38 <GUI__memset>
 800de36:	4620      	mov	r0, r4
 800de38:	f7fb f970 	bl	800911c <GUI_ALLOC_UnlockH>
 800de3c:	4630      	mov	r0, r6
 800de3e:	b002      	add	sp, #8
 800de40:	bd70      	pop	{r4, r5, r6, pc}

0800de42 <LCD_Index2Color_888>:
 800de42:	4770      	bx	lr

0800de44 <LCD_Index2Color_8888>:
 800de44:	4770      	bx	lr

0800de46 <_Color2Index_8888>:
 800de46:	4770      	bx	lr

0800de48 <_GetIndexMask_8888>:
 800de48:	f04f 30ff 	mov.w	r0, #4294967295
 800de4c:	4770      	bx	lr

0800de4e <_Color2IndexBulk>:
 800de4e:	b510      	push	{r4, lr}
 800de50:	f850 4b04 	ldr.w	r4, [r0], #4
 800de54:	600c      	str	r4, [r1, #0]
 800de56:	3a01      	subs	r2, #1
 800de58:	4419      	add	r1, r3
 800de5a:	d1f9      	bne.n	800de50 <_Color2IndexBulk+0x2>
 800de5c:	bd10      	pop	{r4, pc}

0800de5e <_Index2ColorBulk>:
 800de5e:	b510      	push	{r4, lr}
 800de60:	6804      	ldr	r4, [r0, #0]
 800de62:	f841 4b04 	str.w	r4, [r1], #4
 800de66:	3a01      	subs	r2, #1
 800de68:	4418      	add	r0, r3
 800de6a:	d1f9      	bne.n	800de60 <_Index2ColorBulk+0x2>
 800de6c:	bd10      	pop	{r4, pc}

0800de6e <_GetIndexMask_0>:
 800de6e:	b508      	push	{r3, lr}
 800de70:	f7fe feae 	bl	800cbd0 <LCD_GetNumColors>
 800de74:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800de78:	d010      	beq.n	800de9c <_GetIndexMask_0+0x2e>
 800de7a:	287f      	cmp	r0, #127	; 0x7f
 800de7c:	d810      	bhi.n	800dea0 <_GetIndexMask_0+0x32>
 800de7e:	283f      	cmp	r0, #63	; 0x3f
 800de80:	d810      	bhi.n	800dea4 <_GetIndexMask_0+0x36>
 800de82:	281f      	cmp	r0, #31
 800de84:	d810      	bhi.n	800dea8 <_GetIndexMask_0+0x3a>
 800de86:	280f      	cmp	r0, #15
 800de88:	d810      	bhi.n	800deac <_GetIndexMask_0+0x3e>
 800de8a:	2807      	cmp	r0, #7
 800de8c:	d810      	bhi.n	800deb0 <_GetIndexMask_0+0x42>
 800de8e:	2803      	cmp	r0, #3
 800de90:	d810      	bhi.n	800deb4 <_GetIndexMask_0+0x46>
 800de92:	2801      	cmp	r0, #1
 800de94:	bf94      	ite	ls
 800de96:	2000      	movls	r0, #0
 800de98:	2001      	movhi	r0, #1
 800de9a:	e00c      	b.n	800deb6 <_GetIndexMask_0+0x48>
 800de9c:	2008      	movs	r0, #8
 800de9e:	e00a      	b.n	800deb6 <_GetIndexMask_0+0x48>
 800dea0:	2007      	movs	r0, #7
 800dea2:	e008      	b.n	800deb6 <_GetIndexMask_0+0x48>
 800dea4:	2006      	movs	r0, #6
 800dea6:	e006      	b.n	800deb6 <_GetIndexMask_0+0x48>
 800dea8:	2005      	movs	r0, #5
 800deaa:	e004      	b.n	800deb6 <_GetIndexMask_0+0x48>
 800deac:	2004      	movs	r0, #4
 800deae:	e002      	b.n	800deb6 <_GetIndexMask_0+0x48>
 800deb0:	2003      	movs	r0, #3
 800deb2:	e000      	b.n	800deb6 <_GetIndexMask_0+0x48>
 800deb4:	2002      	movs	r0, #2
 800deb6:	2301      	movs	r3, #1
 800deb8:	fa03 f000 	lsl.w	r0, r3, r0
 800debc:	3801      	subs	r0, #1
 800debe:	bd08      	pop	{r3, pc}

0800dec0 <_Index2Color_0>:
 800dec0:	b538      	push	{r3, r4, r5, lr}
 800dec2:	4604      	mov	r4, r0
 800dec4:	f7fe fe84 	bl	800cbd0 <LCD_GetNumColors>
 800dec8:	4605      	mov	r5, r0
 800deca:	f7fe fe9f 	bl	800cc0c <LCD_GetPalette>
 800dece:	42ac      	cmp	r4, r5
 800ded0:	d203      	bcs.n	800deda <_Index2Color_0+0x1a>
 800ded2:	b118      	cbz	r0, 800dedc <_Index2Color_0+0x1c>
 800ded4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ded8:	bd38      	pop	{r3, r4, r5, pc}
 800deda:	2000      	movs	r0, #0
 800dedc:	bd38      	pop	{r3, r4, r5, pc}

0800dede <_Color2Index_0>:
 800dede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee2:	4681      	mov	r9, r0
 800dee4:	f7fe fe74 	bl	800cbd0 <LCD_GetNumColors>
 800dee8:	4680      	mov	r8, r0
 800deea:	f7fe fe8f 	bl	800cc0c <LCD_GetPalette>
 800deee:	4606      	mov	r6, r0
 800def0:	b1d8      	cbz	r0, 800df2a <_Color2Index_0+0x4c>
 800def2:	2300      	movs	r3, #0
 800def4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800def8:	4591      	cmp	r9, r2
 800defa:	d01a      	beq.n	800df32 <_Color2Index_0+0x54>
 800defc:	3301      	adds	r3, #1
 800defe:	4543      	cmp	r3, r8
 800df00:	dbf8      	blt.n	800def4 <_Color2Index_0+0x16>
 800df02:	2500      	movs	r5, #0
 800df04:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 800df08:	462c      	mov	r4, r5
 800df0a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800df0e:	4648      	mov	r0, r9
 800df10:	f001 ffbf 	bl	800fe92 <GUI_CalcColorDist>
 800df14:	42b8      	cmp	r0, r7
 800df16:	bf38      	it	cc
 800df18:	4625      	movcc	r5, r4
 800df1a:	f104 0401 	add.w	r4, r4, #1
 800df1e:	bf28      	it	cs
 800df20:	4638      	movcs	r0, r7
 800df22:	4544      	cmp	r4, r8
 800df24:	da02      	bge.n	800df2c <_Color2Index_0+0x4e>
 800df26:	4607      	mov	r7, r0
 800df28:	e7ef      	b.n	800df0a <_Color2Index_0+0x2c>
 800df2a:	4605      	mov	r5, r0
 800df2c:	4628      	mov	r0, r5
 800df2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df32:	4618      	mov	r0, r3
 800df34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800df38 <WM__SendMessageNoPara>:
 800df38:	b530      	push	{r4, r5, lr}
 800df3a:	b085      	sub	sp, #20
 800df3c:	4604      	mov	r4, r0
 800df3e:	2210      	movs	r2, #16
 800df40:	460d      	mov	r5, r1
 800df42:	4668      	mov	r0, sp
 800df44:	2100      	movs	r1, #0
 800df46:	f002 f95c 	bl	8010202 <memset>
 800df4a:	4620      	mov	r0, r4
 800df4c:	f7fb f8ce 	bl	80090ec <GUI_ALLOC_h2p>
 800df50:	6903      	ldr	r3, [r0, #16]
 800df52:	b11b      	cbz	r3, 800df5c <WM__SendMessageNoPara+0x24>
 800df54:	9401      	str	r4, [sp, #4]
 800df56:	9500      	str	r5, [sp, #0]
 800df58:	4668      	mov	r0, sp
 800df5a:	4798      	blx	r3
 800df5c:	b005      	add	sp, #20
 800df5e:	bd30      	pop	{r4, r5, pc}

0800df60 <WM__SendMessageIfEnabled>:
 800df60:	b538      	push	{r3, r4, r5, lr}
 800df62:	4604      	mov	r4, r0
 800df64:	460d      	mov	r5, r1
 800df66:	f000 f827 	bl	800dfb8 <WM__IsEnabled>
 800df6a:	b128      	cbz	r0, 800df78 <WM__SendMessageIfEnabled+0x18>
 800df6c:	4620      	mov	r0, r4
 800df6e:	4629      	mov	r1, r5
 800df70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df74:	f000 b802 	b.w	800df7c <WM__SendMessage>
 800df78:	bd38      	pop	{r3, r4, r5, pc}
	...

0800df7c <WM__SendMessage>:
 800df7c:	b570      	push	{r4, r5, r6, lr}
 800df7e:	4c0d      	ldr	r4, [pc, #52]	; (800dfb4 <WM__SendMessage+0x38>)
 800df80:	6823      	ldr	r3, [r4, #0]
 800df82:	2b13      	cmp	r3, #19
 800df84:	4606      	mov	r6, r0
 800df86:	460d      	mov	r5, r1
 800df88:	dc12      	bgt.n	800dfb0 <WM__SendMessage+0x34>
 800df8a:	f7fb f8af 	bl	80090ec <GUI_ALLOC_h2p>
 800df8e:	6903      	ldr	r3, [r0, #16]
 800df90:	606e      	str	r6, [r5, #4]
 800df92:	b143      	cbz	r3, 800dfa6 <WM__SendMessage+0x2a>
 800df94:	6822      	ldr	r2, [r4, #0]
 800df96:	4628      	mov	r0, r5
 800df98:	3201      	adds	r2, #1
 800df9a:	6022      	str	r2, [r4, #0]
 800df9c:	4798      	blx	r3
 800df9e:	6823      	ldr	r3, [r4, #0]
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	6023      	str	r3, [r4, #0]
 800dfa4:	bd70      	pop	{r4, r5, r6, pc}
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfac:	f7fc bf70 	b.w	800ae90 <WM_DefaultProc>
 800dfb0:	bd70      	pop	{r4, r5, r6, pc}
 800dfb2:	bf00      	nop
 800dfb4:	20019518 	.word	0x20019518

0800dfb8 <WM__IsEnabled>:
 800dfb8:	b508      	push	{r3, lr}
 800dfba:	f7fb f897 	bl	80090ec <GUI_ALLOC_h2p>
 800dfbe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800dfc0:	f080 0010 	eor.w	r0, r0, #16
 800dfc4:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800dfc8:	bd08      	pop	{r3, pc}

0800dfca <WM__IsAncestor>:
 800dfca:	b510      	push	{r4, lr}
 800dfcc:	460c      	mov	r4, r1
 800dfce:	b908      	cbnz	r0, 800dfd4 <WM__IsAncestor+0xa>
 800dfd0:	2000      	movs	r0, #0
 800dfd2:	bd10      	pop	{r4, pc}
 800dfd4:	2900      	cmp	r1, #0
 800dfd6:	d0fb      	beq.n	800dfd0 <WM__IsAncestor+0x6>
 800dfd8:	f7fb f888 	bl	80090ec <GUI_ALLOC_h2p>
 800dfdc:	6980      	ldr	r0, [r0, #24]
 800dfde:	42a0      	cmp	r0, r4
 800dfe0:	d002      	beq.n	800dfe8 <WM__IsAncestor+0x1e>
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d1f8      	bne.n	800dfd8 <WM__IsAncestor+0xe>
 800dfe6:	e7f3      	b.n	800dfd0 <WM__IsAncestor+0x6>
 800dfe8:	2001      	movs	r0, #1
 800dfea:	bd10      	pop	{r4, pc}

0800dfec <WM_DeleteTimer>:
 800dfec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfee:	4605      	mov	r5, r0
 800dff0:	b168      	cbz	r0, 800e00e <WM_DeleteTimer+0x22>
 800dff2:	f7fb f885 	bl	8009100 <GUI_ALLOC_LockH>
 800dff6:	ac02      	add	r4, sp, #8
 800dff8:	f844 0d04 	str.w	r0, [r4, #-4]!
 800dffc:	6800      	ldr	r0, [r0, #0]
 800dffe:	f7ff fd69 	bl	800dad4 <GUI_TIMER_Delete>
 800e002:	4620      	mov	r0, r4
 800e004:	f7fb f88a 	bl	800911c <GUI_ALLOC_UnlockH>
 800e008:	4628      	mov	r0, r5
 800e00a:	f7fb f8a7 	bl	800915c <GUI_ALLOC_Free>
 800e00e:	b003      	add	sp, #12
 800e010:	bd30      	pop	{r4, r5, pc}

0800e012 <WM__DeleteAssocTimer>:
 800e012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e014:	4605      	mov	r5, r0
 800e016:	a801      	add	r0, sp, #4
 800e018:	f7ff fd28 	bl	800da6c <GUI_TIMER__GetFirstTimer>
 800e01c:	4604      	mov	r4, r0
 800e01e:	b1dc      	cbz	r4, 800e058 <WM__DeleteAssocTimer+0x46>
 800e020:	4620      	mov	r0, r4
 800e022:	2101      	movs	r1, #1
 800e024:	f7ff fd8a 	bl	800db3c <GUI_TIMER_GetFlag>
 800e028:	9b01      	ldr	r3, [sp, #4]
 800e02a:	b183      	cbz	r3, 800e04e <WM__DeleteAssocTimer+0x3c>
 800e02c:	b178      	cbz	r0, 800e04e <WM__DeleteAssocTimer+0x3c>
 800e02e:	4618      	mov	r0, r3
 800e030:	f7fb f85c 	bl	80090ec <GUI_ALLOC_h2p>
 800e034:	6843      	ldr	r3, [r0, #4]
 800e036:	42ab      	cmp	r3, r5
 800e038:	d109      	bne.n	800e04e <WM__DeleteAssocTimer+0x3c>
 800e03a:	4620      	mov	r0, r4
 800e03c:	a901      	add	r1, sp, #4
 800e03e:	9e01      	ldr	r6, [sp, #4]
 800e040:	f7ff fd2c 	bl	800da9c <GUI_TIMER__GetNextTimerLin>
 800e044:	4604      	mov	r4, r0
 800e046:	4630      	mov	r0, r6
 800e048:	f7ff ffd0 	bl	800dfec <WM_DeleteTimer>
 800e04c:	e7e7      	b.n	800e01e <WM__DeleteAssocTimer+0xc>
 800e04e:	4620      	mov	r0, r4
 800e050:	a901      	add	r1, sp, #4
 800e052:	f7ff fd23 	bl	800da9c <GUI_TIMER__GetNextTimerLin>
 800e056:	e7e1      	b.n	800e01c <WM__DeleteAssocTimer+0xa>
 800e058:	b002      	add	sp, #8
 800e05a:	bd70      	pop	{r4, r5, r6, pc}

0800e05c <WM_SetSize>:
 800e05c:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 800e060:	460e      	mov	r6, r1
 800e062:	4690      	mov	r8, r2
 800e064:	4607      	mov	r7, r0
 800e066:	b1d0      	cbz	r0, 800e09e <WM_SetSize+0x42>
 800e068:	f7fb f84a 	bl	8009100 <GUI_ALLOC_LockH>
 800e06c:	4603      	mov	r3, r0
 800e06e:	a802      	add	r0, sp, #8
 800e070:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800e074:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e078:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800e07c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e080:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e084:	1a8a      	subs	r2, r1, r2
 800e086:	1aed      	subs	r5, r5, r3
 800e088:	43d2      	mvns	r2, r2
 800e08a:	43ed      	mvns	r5, r5
 800e08c:	4416      	add	r6, r2
 800e08e:	4445      	add	r5, r8
 800e090:	f7fb f844 	bl	800911c <GUI_ALLOC_UnlockH>
 800e094:	4638      	mov	r0, r7
 800e096:	4631      	mov	r1, r6
 800e098:	462a      	mov	r2, r5
 800e09a:	f000 f813 	bl	800e0c4 <WM_ResizeWindow>
 800e09e:	b003      	add	sp, #12
 800e0a0:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

0800e0a4 <WM_SendToParent>:
 800e0a4:	b538      	push	{r3, r4, r5, lr}
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	460c      	mov	r4, r1
 800e0aa:	b141      	cbz	r1, 800e0be <WM_SendToParent+0x1a>
 800e0ac:	f7fb fe00 	bl	8009cb0 <WM_GetParent>
 800e0b0:	b128      	cbz	r0, 800e0be <WM_SendToParent+0x1a>
 800e0b2:	60a5      	str	r5, [r4, #8]
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0ba:	f7ff bf5f 	b.w	800df7c <WM__SendMessage>
 800e0be:	bd38      	pop	{r3, r4, r5, pc}

0800e0c0 <WM_SendMessageNoPara>:
 800e0c0:	f7ff bf3a 	b.w	800df38 <WM__SendMessageNoPara>

0800e0c4 <WM_ResizeWindow>:
 800e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c8:	ea51 0302 	orrs.w	r3, r1, r2
 800e0cc:	b08a      	sub	sp, #40	; 0x28
 800e0ce:	4680      	mov	r8, r0
 800e0d0:	460e      	mov	r6, r1
 800e0d2:	4617      	mov	r7, r2
 800e0d4:	d06e      	beq.n	800e1b4 <WM_ResizeWindow+0xf0>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d06c      	beq.n	800e1b4 <WM_ResizeWindow+0xf0>
 800e0da:	f7fb f811 	bl	8009100 <GUI_ALLOC_LockH>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	9003      	str	r0, [sp, #12]
 800e0e2:	c803      	ldmia	r0, {r0, r1}
 800e0e4:	ad04      	add	r5, sp, #16
 800e0e6:	ac06      	add	r4, sp, #24
 800e0e8:	e885 0003 	stmia.w	r5, {r0, r1}
 800e0ec:	e884 0003 	stmia.w	r4, {r0, r1}
 800e0f0:	b17e      	cbz	r6, 800e112 <WM_ResizeWindow+0x4e>
 800e0f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e0f4:	f402 7220 	and.w	r2, r2, #640	; 0x280
 800e0f8:	2a80      	cmp	r2, #128	; 0x80
 800e0fa:	d105      	bne.n	800e108 <WM_ResizeWindow+0x44>
 800e0fc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800e100:	1b96      	subs	r6, r2, r6
 800e102:	f8ad 6018 	strh.w	r6, [sp, #24]
 800e106:	e004      	b.n	800e112 <WM_ResizeWindow+0x4e>
 800e108:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e10c:	4416      	add	r6, r2
 800e10e:	f8ad 601c 	strh.w	r6, [sp, #28]
 800e112:	b187      	cbz	r7, 800e136 <WM_ResizeWindow+0x72>
 800e114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e116:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800e11a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e11e:	d105      	bne.n	800e12c <WM_ResizeWindow+0x68>
 800e120:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800e124:	1bd7      	subs	r7, r2, r7
 800e126:	f8ad 701a 	strh.w	r7, [sp, #26]
 800e12a:	e004      	b.n	800e136 <WM_ResizeWindow+0x72>
 800e12c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e130:	4417      	add	r7, r2
 800e132:	f8ad 701e 	strh.w	r7, [sp, #30]
 800e136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e138:	03da      	lsls	r2, r3, #15
 800e13a:	d502      	bpl.n	800e142 <WM_ResizeWindow+0x7e>
 800e13c:	4640      	mov	r0, r8
 800e13e:	f7fc f91b 	bl	800a378 <WM__InvalidateDrawAndDescs>
 800e142:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e146:	9b03      	ldr	r3, [sp, #12]
 800e148:	e883 0003 	stmia.w	r3, {r0, r1}
 800e14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e14e:	079b      	lsls	r3, r3, #30
 800e150:	d50a      	bpl.n	800e168 <WM_ResizeWindow+0xa4>
 800e152:	a808      	add	r0, sp, #32
 800e154:	4629      	mov	r1, r5
 800e156:	4622      	mov	r2, r4
 800e158:	f7ff fdda 	bl	800dd10 <GUI_MergeRect>
 800e15c:	9b03      	ldr	r3, [sp, #12]
 800e15e:	a808      	add	r0, sp, #32
 800e160:	6999      	ldr	r1, [r3, #24]
 800e162:	6a1a      	ldr	r2, [r3, #32]
 800e164:	f7fc fa0c 	bl	800a580 <WM__InvalidateRectEx>
 800e168:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800e16c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e170:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 800e174:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800e178:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800e17c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800e180:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 800e184:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800e188:	1ae3      	subs	r3, r4, r3
 800e18a:	1a38      	subs	r0, r7, r0
 800e18c:	ac0a      	add	r4, sp, #40	; 0x28
 800e18e:	1aaa      	subs	r2, r5, r2
 800e190:	9000      	str	r0, [sp, #0]
 800e192:	1a71      	subs	r1, r6, r1
 800e194:	9803      	ldr	r0, [sp, #12]
 800e196:	f001 fea4 	bl	800fee2 <WM__UpdateChildPositions>
 800e19a:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800e19e:	f101 0008 	add.w	r0, r1, #8
 800e1a2:	f7ff fa3f 	bl	800d624 <GUI__IntersectRect>
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	2105      	movs	r1, #5
 800e1aa:	f7fc fa01 	bl	800a5b0 <WM__SendMsgNoData>
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f7fa ffb4 	bl	800911c <GUI_ALLOC_UnlockH>
 800e1b4:	b00a      	add	sp, #40	; 0x28
 800e1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e1ba <WM_NotifyParent>:
 800e1ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1bc:	2326      	movs	r3, #38	; 0x26
 800e1be:	9103      	str	r1, [sp, #12]
 800e1c0:	4669      	mov	r1, sp
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	f7ff ff6e 	bl	800e0a4 <WM_SendToParent>
 800e1c8:	b005      	add	sp, #20
 800e1ca:	f85d fb04 	ldr.w	pc, [sp], #4

0800e1ce <WM_GetWindowOrgX>:
 800e1ce:	b508      	push	{r3, lr}
 800e1d0:	b120      	cbz	r0, 800e1dc <WM_GetWindowOrgX+0xe>
 800e1d2:	f7fa ff8b 	bl	80090ec <GUI_ALLOC_h2p>
 800e1d6:	f9b0 0000 	ldrsh.w	r0, [r0]
 800e1da:	bd08      	pop	{r3, pc}
 800e1dc:	bd08      	pop	{r3, pc}

0800e1de <WM_GetFirstChild>:
 800e1de:	b508      	push	{r3, lr}
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	b110      	cbz	r0, 800e1ea <WM_GetFirstChild+0xc>
 800e1e4:	f7fa ff82 	bl	80090ec <GUI_ALLOC_h2p>
 800e1e8:	69c3      	ldr	r3, [r0, #28]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	bd08      	pop	{r3, pc}

0800e1ee <WM__GetClientRectEx>:
 800e1ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1f0:	460d      	mov	r5, r1
 800e1f2:	b158      	cbz	r0, 800e20c <WM__GetClientRectEx+0x1e>
 800e1f4:	b151      	cbz	r1, 800e20c <WM__GetClientRectEx+0x1e>
 800e1f6:	f7fa ff83 	bl	8009100 <GUI_ALLOC_LockH>
 800e1fa:	ac02      	add	r4, sp, #8
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e202:	f7fc f9e0 	bl	800a5c6 <WM__GetClientRectWin>
 800e206:	4620      	mov	r0, r4
 800e208:	f7fa ff88 	bl	800911c <GUI_ALLOC_UnlockH>
 800e20c:	b003      	add	sp, #12
 800e20e:	bd30      	pop	{r4, r5, pc}

0800e210 <WM_BringToBottom>:
 800e210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e214:	4604      	mov	r4, r0
 800e216:	b087      	sub	sp, #28
 800e218:	2800      	cmp	r0, #0
 800e21a:	d039      	beq.n	800e290 <WM_BringToBottom+0x80>
 800e21c:	f7fa ff70 	bl	8009100 <GUI_ALLOC_LockH>
 800e220:	4603      	mov	r3, r0
 800e222:	9001      	str	r0, [sp, #4]
 800e224:	c803      	ldmia	r0, {r0, r1}
 800e226:	ad04      	add	r5, sp, #16
 800e228:	e885 0003 	stmia.w	r5, {r0, r1}
 800e22c:	a801      	add	r0, sp, #4
 800e22e:	6a1e      	ldr	r6, [r3, #32]
 800e230:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800e234:	f7fa ff72 	bl	800911c <GUI_ALLOC_UnlockH>
 800e238:	4620      	mov	r0, r4
 800e23a:	f001 fecc 	bl	800ffd6 <WM__GetPrevSibling>
 800e23e:	4607      	mov	r7, r0
 800e240:	b330      	cbz	r0, 800e290 <WM_BringToBottom+0x80>
 800e242:	4620      	mov	r0, r4
 800e244:	f7fb fd34 	bl	8009cb0 <WM_GetParent>
 800e248:	f019 0f02 	tst.w	r9, #2
 800e24c:	4680      	mov	r8, r0
 800e24e:	d004      	beq.n	800e25a <WM_BringToBottom+0x4a>
 800e250:	4628      	mov	r0, r5
 800e252:	4641      	mov	r1, r8
 800e254:	4632      	mov	r2, r6
 800e256:	f7fc f993 	bl	800a580 <WM__InvalidateRectEx>
 800e25a:	4620      	mov	r0, r4
 800e25c:	f7fa ff50 	bl	8009100 <GUI_ALLOC_LockH>
 800e260:	9001      	str	r0, [sp, #4]
 800e262:	4640      	mov	r0, r8
 800e264:	f7fa ff4c 	bl	8009100 <GUI_ALLOC_LockH>
 800e268:	9003      	str	r0, [sp, #12]
 800e26a:	4638      	mov	r0, r7
 800e26c:	f7fa ff48 	bl	8009100 <GUI_ALLOC_LockH>
 800e270:	9b03      	ldr	r3, [sp, #12]
 800e272:	9a01      	ldr	r2, [sp, #4]
 800e274:	69d9      	ldr	r1, [r3, #28]
 800e276:	6206      	str	r6, [r0, #32]
 800e278:	9002      	str	r0, [sp, #8]
 800e27a:	6211      	str	r1, [r2, #32]
 800e27c:	a801      	add	r0, sp, #4
 800e27e:	61dc      	str	r4, [r3, #28]
 800e280:	f7fa ff4c 	bl	800911c <GUI_ALLOC_UnlockH>
 800e284:	a803      	add	r0, sp, #12
 800e286:	f7fa ff49 	bl	800911c <GUI_ALLOC_UnlockH>
 800e28a:	a802      	add	r0, sp, #8
 800e28c:	f7fa ff46 	bl	800911c <GUI_ALLOC_UnlockH>
 800e290:	b007      	add	sp, #28
 800e292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e296 <_Convert16>:
 800e296:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800e29e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	460e      	mov	r6, r1
 800e2a6:	4690      	mov	r8, r2
 800e2a8:	461f      	mov	r7, r3
 800e2aa:	4614      	mov	r4, r2
 800e2ac:	4689      	mov	r9, r1
 800e2ae:	f835 0b02 	ldrh.w	r0, [r5], #2
 800e2b2:	47d8      	blx	fp
 800e2b4:	47d0      	blx	sl
 800e2b6:	3c01      	subs	r4, #1
 800e2b8:	f849 0b04 	str.w	r0, [r9], #4
 800e2bc:	d1f7      	bne.n	800e2ae <_Convert16+0x18>
 800e2be:	2f1f      	cmp	r7, #31
 800e2c0:	d806      	bhi.n	800e2d0 <_Convert16+0x3a>
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	4641      	mov	r1, r8
 800e2c6:	463a      	mov	r2, r7
 800e2c8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	f001 b80b 	b.w	800f2e6 <GUI__CompactPixelIndices>
 800e2d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2d4 <_Convert8>:
 800e2d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800e2dc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800e2e0:	4605      	mov	r5, r0
 800e2e2:	460e      	mov	r6, r1
 800e2e4:	4690      	mov	r8, r2
 800e2e6:	461f      	mov	r7, r3
 800e2e8:	4689      	mov	r9, r1
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e2f0:	47d8      	blx	fp
 800e2f2:	47d0      	blx	sl
 800e2f4:	1b2b      	subs	r3, r5, r4
 800e2f6:	4443      	add	r3, r8
 800e2f8:	f849 0b04 	str.w	r0, [r9], #4
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d1f5      	bne.n	800e2ec <_Convert8+0x18>
 800e300:	2f1f      	cmp	r7, #31
 800e302:	d806      	bhi.n	800e312 <_Convert8+0x3e>
 800e304:	4630      	mov	r0, r6
 800e306:	4641      	mov	r1, r8
 800e308:	463a      	mov	r2, r7
 800e30a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30e:	f000 bfea 	b.w	800f2e6 <GUI__CompactPixelIndices>
 800e312:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e318 <GUI_MEMDEV__WriteToActiveOpaque>:
 800e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31c:	b09d      	sub	sp, #116	; 0x74
 800e31e:	4606      	mov	r6, r0
 800e320:	910f      	str	r1, [sp, #60]	; 0x3c
 800e322:	920d      	str	r2, [sp, #52]	; 0x34
 800e324:	2800      	cmp	r0, #0
 800e326:	f000 8386 	beq.w	800ea36 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e32a:	f7fa fee9 	bl	8009100 <GUI_ALLOC_LockH>
 800e32e:	ab1c      	add	r3, sp, #112	; 0x70
 800e330:	6944      	ldr	r4, [r0, #20]
 800e332:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800e336:	4618      	mov	r0, r3
 800e338:	f7fa fef0 	bl	800911c <GUI_ALLOC_UnlockH>
 800e33c:	4630      	mov	r0, r6
 800e33e:	f7fe fae9 	bl	800c914 <GUI_MEMDEV_GetBitsPerPixel>
 800e342:	2808      	cmp	r0, #8
 800e344:	4601      	mov	r1, r0
 800e346:	dd02      	ble.n	800e34e <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800e348:	2c00      	cmp	r4, #0
 800e34a:	f000 81c3 	beq.w	800e6d4 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800e34e:	2201      	movs	r2, #1
 800e350:	f04f 0800 	mov.w	r8, #0
 800e354:	4630      	mov	r0, r6
 800e356:	921b      	str	r2, [sp, #108]	; 0x6c
 800e358:	920b      	str	r2, [sp, #44]	; 0x2c
 800e35a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e35e:	f7fa fecf 	bl	8009100 <GUI_ALLOC_LockH>
 800e362:	6803      	ldr	r3, [r0, #0]
 800e364:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 800e974 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	930e      	str	r3, [sp, #56]	; 0x38
 800e372:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800e376:	f8da 3000 	ldr.w	r3, [sl]
 800e37a:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800e37e:	6904      	ldr	r4, [r0, #16]
 800e380:	6945      	ldr	r5, [r0, #20]
 800e382:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800e386:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800e38a:	7c58      	ldrb	r0, [r3, #17]
 800e38c:	9112      	str	r1, [sp, #72]	; 0x48
 800e38e:	f7fe fc27 	bl	800cbe0 <GUI_GetBitsPerPixelEx>
 800e392:	f8da 3000 	ldr.w	r3, [sl]
 800e396:	9010      	str	r0, [sp, #64]	; 0x40
 800e398:	7c58      	ldrb	r0, [r3, #17]
 800e39a:	f7fe fc3f 	bl	800cc1c <GUI_GetpfIndex2ColorEx>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	4658      	mov	r0, fp
 800e3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e3a4:	f7fa feba 	bl	800911c <GUI_ALLOC_UnlockH>
 800e3a8:	2c08      	cmp	r4, #8
 800e3aa:	4651      	mov	r1, sl
 800e3ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b0:	d904      	bls.n	800e3bc <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800e3b2:	2c10      	cmp	r4, #16
 800e3b4:	bf8c      	ite	hi
 800e3b6:	2204      	movhi	r2, #4
 800e3b8:	2202      	movls	r2, #2
 800e3ba:	e005      	b.n	800e3c8 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800e3bc:	2c01      	cmp	r4, #1
 800e3be:	d103      	bne.n	800e3c8 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800e3c0:	9411      	str	r4, [sp, #68]	; 0x44
 800e3c2:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800e3c6:	e000      	b.n	800e3ca <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800e3c8:	9211      	str	r2, [sp, #68]	; 0x44
 800e3ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e3cc:	4298      	cmp	r0, r3
 800e3ce:	f000 80e2 	beq.w	800e596 <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800e3d2:	680b      	ldr	r3, [r1, #0]
 800e3d4:	7c58      	ldrb	r0, [r3, #17]
 800e3d6:	f7fe fc29 	bl	800cc2c <GUI_GetpfColor2IndexEx>
 800e3da:	9013      	str	r0, [sp, #76]	; 0x4c
 800e3dc:	00b8      	lsls	r0, r7, #2
 800e3de:	f7fb f8d7 	bl	8009590 <GUI_ALLOC_AllocNoInit>
 800e3e2:	900c      	str	r0, [sp, #48]	; 0x30
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f000 8326 	beq.w	800ea36 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	f7fc ff28 	bl	800b240 <GUI_MEMDEV_GetDataPtr>
 800e3f0:	4606      	mov	r6, r0
 800e3f2:	2d00      	cmp	r5, #0
 800e3f4:	f000 80be 	beq.w	800e574 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	f7fa fe81 	bl	8009100 <GUI_ALLOC_LockH>
 800e3fe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800e402:	9018      	str	r0, [sp, #96]	; 0x60
 800e404:	f04f 0a00 	mov.w	sl, #0
 800e408:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e40a:	4592      	cmp	sl, r2
 800e40c:	f280 80ae 	bge.w	800e56c <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800e410:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e412:	2300      	movs	r3, #0
 800e414:	9319      	str	r3, [sp, #100]	; 0x64
 800e416:	6883      	ldr	r3, [r0, #8]
 800e418:	a919      	add	r1, sp, #100	; 0x64
 800e41a:	695b      	ldr	r3, [r3, #20]
 800e41c:	4652      	mov	r2, sl
 800e41e:	4798      	blx	r3
 800e420:	42b8      	cmp	r0, r7
 800e422:	4605      	mov	r5, r0
 800e424:	d12f      	bne.n	800e486 <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800e426:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e428:	f7fa fe6a 	bl	8009100 <GUI_ALLOC_LockH>
 800e42c:	2c08      	cmp	r4, #8
 800e42e:	4601      	mov	r1, r0
 800e430:	9016      	str	r0, [sp, #88]	; 0x58
 800e432:	d909      	bls.n	800e448 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800e434:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e438:	9200      	str	r2, [sp, #0]
 800e43a:	9301      	str	r3, [sp, #4]
 800e43c:	4630      	mov	r0, r6
 800e43e:	463a      	mov	r2, r7
 800e440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e442:	f7ff ff28 	bl	800e296 <_Convert16>
 800e446:	e008      	b.n	800e45a <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800e448:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e44a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e44c:	9000      	str	r0, [sp, #0]
 800e44e:	9201      	str	r2, [sp, #4]
 800e450:	4630      	mov	r0, r6
 800e452:	463a      	mov	r2, r7
 800e454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e456:	f7ff ff3d 	bl	800e2d4 <_Convert8>
 800e45a:	2301      	movs	r3, #1
 800e45c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e45e:	9002      	str	r0, [sp, #8]
 800e460:	ad1c      	add	r5, sp, #112	; 0x70
 800e462:	2200      	movs	r2, #0
 800e464:	9300      	str	r3, [sp, #0]
 800e466:	9301      	str	r3, [sp, #4]
 800e468:	9203      	str	r2, [sp, #12]
 800e46a:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800e46e:	9204      	str	r2, [sp, #16]
 800e470:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e472:	f8cd 8014 	str.w	r8, [sp, #20]
 800e476:	4659      	mov	r1, fp
 800e478:	463a      	mov	r2, r7
 800e47a:	f7fe fe57 	bl	800d12c <LCD_DrawBitmap>
 800e47e:	4628      	mov	r0, r5
 800e480:	f7fa fe4c 	bl	800911c <GUI_ALLOC_UnlockH>
 800e484:	e060      	b.n	800e548 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800e486:	2c01      	cmp	r4, #1
 800e488:	d15c      	bne.n	800e544 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800e48a:	2d00      	cmp	r5, #0
 800e48c:	d05c      	beq.n	800e548 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800e48e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e490:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e492:	f8cd 900c 	str.w	r9, [sp, #12]
 800e496:	2208      	movs	r2, #8
 800e498:	fb90 f2f2 	sdiv	r2, r0, r2
 800e49c:	4432      	add	r2, r6
 800e49e:	2301      	movs	r3, #1
 800e4a0:	9204      	str	r2, [sp, #16]
 800e4a2:	f000 0207 	and.w	r2, r0, #7
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	4408      	add	r0, r1
 800e4aa:	9301      	str	r3, [sp, #4]
 800e4ac:	9302      	str	r3, [sp, #8]
 800e4ae:	9206      	str	r2, [sp, #24]
 800e4b0:	4659      	mov	r1, fp
 800e4b2:	462a      	mov	r2, r5
 800e4b4:	f8cd 8014 	str.w	r8, [sp, #20]
 800e4b8:	f7fe fd5c 	bl	800cf74 <LCD__DrawBitmap_1bpp>
 800e4bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4be:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e4c0:	441d      	add	r5, r3
 800e4c2:	6883      	ldr	r3, [r0, #8]
 800e4c4:	9519      	str	r5, [sp, #100]	; 0x64
 800e4c6:	695b      	ldr	r3, [r3, #20]
 800e4c8:	a919      	add	r1, sp, #100	; 0x64
 800e4ca:	4652      	mov	r2, sl
 800e4cc:	4798      	blx	r3
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	e7db      	b.n	800e48a <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800e4d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e4d4:	f7fa fe14 	bl	8009100 <GUI_ALLOC_LockH>
 800e4d8:	2c08      	cmp	r4, #8
 800e4da:	4601      	mov	r1, r0
 800e4dc:	9016      	str	r0, [sp, #88]	; 0x58
 800e4de:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e4e0:	d938      	bls.n	800e554 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800e4e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4e4:	9200      	str	r2, [sp, #0]
 800e4e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e4e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e4ea:	9301      	str	r3, [sp, #4]
 800e4ec:	fb00 6002 	mla	r0, r0, r2, r6
 800e4f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4f2:	462a      	mov	r2, r5
 800e4f4:	f7ff fecf 	bl	800e296 <_Convert16>
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800e4fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e500:	9300      	str	r3, [sp, #0]
 800e502:	2200      	movs	r2, #0
 800e504:	9301      	str	r3, [sp, #4]
 800e506:	9002      	str	r0, [sp, #8]
 800e508:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e50a:	9203      	str	r2, [sp, #12]
 800e50c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e50e:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800e512:	9204      	str	r2, [sp, #16]
 800e514:	4408      	add	r0, r1
 800e516:	462a      	mov	r2, r5
 800e518:	4659      	mov	r1, fp
 800e51a:	f8cd 8014 	str.w	r8, [sp, #20]
 800e51e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800e522:	f7fe fe03 	bl	800d12c <LCD_DrawBitmap>
 800e526:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800e52a:	4660      	mov	r0, ip
 800e52c:	f7fa fdf6 	bl	800911c <GUI_ALLOC_UnlockH>
 800e530:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e532:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e534:	441d      	add	r5, r3
 800e536:	6883      	ldr	r3, [r0, #8]
 800e538:	9519      	str	r5, [sp, #100]	; 0x64
 800e53a:	695b      	ldr	r3, [r3, #20]
 800e53c:	a919      	add	r1, sp, #100	; 0x64
 800e53e:	4652      	mov	r2, sl
 800e540:	4798      	blx	r3
 800e542:	4605      	mov	r5, r0
 800e544:	2d00      	cmp	r5, #0
 800e546:	d1c4      	bne.n	800e4d2 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800e548:	444e      	add	r6, r9
 800e54a:	f10a 0a01 	add.w	sl, sl, #1
 800e54e:	f10b 0b01 	add.w	fp, fp, #1
 800e552:	e759      	b.n	800e408 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800e554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e55a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e55c:	9201      	str	r2, [sp, #4]
 800e55e:	fb00 6003 	mla	r0, r0, r3, r6
 800e562:	462a      	mov	r2, r5
 800e564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e566:	f7ff feb5 	bl	800e2d4 <_Convert8>
 800e56a:	e7c5      	b.n	800e4f8 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800e56c:	a818      	add	r0, sp, #96	; 0x60
 800e56e:	f7fa fdd5 	bl	800911c <GUI_ALLOC_UnlockH>
 800e572:	e00e      	b.n	800e592 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800e574:	2301      	movs	r3, #1
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	9301      	str	r3, [sp, #4]
 800e57a:	9004      	str	r0, [sp, #16]
 800e57c:	9402      	str	r4, [sp, #8]
 800e57e:	f8cd 900c 	str.w	r9, [sp, #12]
 800e582:	f8cd 8014 	str.w	r8, [sp, #20]
 800e586:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e588:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e58a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e58c:	463a      	mov	r2, r7
 800e58e:	f7fe fdcd 	bl	800d12c <LCD_DrawBitmap>
 800e592:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e594:	e24d      	b.n	800ea32 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800e596:	4630      	mov	r0, r6
 800e598:	f7fc fe52 	bl	800b240 <GUI_MEMDEV_GetDataPtr>
 800e59c:	4606      	mov	r6, r0
 800e59e:	2d00      	cmp	r5, #0
 800e5a0:	f000 808a 	beq.w	800e6b8 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	f7fa fdab 	bl	8009100 <GUI_ALLOC_LockH>
 800e5aa:	2500      	movs	r5, #0
 800e5ac:	9018      	str	r0, [sp, #96]	; 0x60
 800e5ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e5b0:	429d      	cmp	r5, r3
 800e5b2:	da7d      	bge.n	800e6b0 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800e5b4:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	9319      	str	r3, [sp, #100]	; 0x64
 800e5ba:	6883      	ldr	r3, [r0, #8]
 800e5bc:	a919      	add	r1, sp, #100	; 0x64
 800e5be:	695b      	ldr	r3, [r3, #20]
 800e5c0:	462a      	mov	r2, r5
 800e5c2:	4798      	blx	r3
 800e5c4:	42b8      	cmp	r0, r7
 800e5c6:	4682      	mov	sl, r0
 800e5c8:	d124      	bne.n	800e614 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800e5ca:	46aa      	mov	sl, r5
 800e5cc:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e5ce:	6883      	ldr	r3, [r0, #8]
 800e5d0:	f10a 0b01 	add.w	fp, sl, #1
 800e5d4:	695b      	ldr	r3, [r3, #20]
 800e5d6:	a919      	add	r1, sp, #100	; 0x64
 800e5d8:	465a      	mov	r2, fp
 800e5da:	4798      	blx	r3
 800e5dc:	42b8      	cmp	r0, r7
 800e5de:	d101      	bne.n	800e5e4 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800e5e0:	46da      	mov	sl, fp
 800e5e2:	e7f3      	b.n	800e5cc <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800e5e4:	ebc5 0b0a 	rsb	fp, r5, sl
 800e5e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e5ea:	9604      	str	r6, [sp, #16]
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	f10b 0b01 	add.w	fp, fp, #1
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	9301      	str	r3, [sp, #4]
 800e5f6:	4429      	add	r1, r5
 800e5f8:	9402      	str	r4, [sp, #8]
 800e5fa:	f8cd 900c 	str.w	r9, [sp, #12]
 800e5fe:	f8cd 8014 	str.w	r8, [sp, #20]
 800e602:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e604:	463a      	mov	r2, r7
 800e606:	465b      	mov	r3, fp
 800e608:	f7fe fd90 	bl	800d12c <LCD_DrawBitmap>
 800e60c:	fb09 660b 	mla	r6, r9, fp, r6
 800e610:	4655      	mov	r5, sl
 800e612:	e04b      	b.n	800e6ac <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800e614:	2c01      	cmp	r4, #1
 800e616:	d127      	bne.n	800e668 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800e618:	f1ba 0f00 	cmp.w	sl, #0
 800e61c:	d022      	beq.n	800e664 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800e61e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e620:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e622:	f8cd 900c 	str.w	r9, [sp, #12]
 800e626:	2208      	movs	r2, #8
 800e628:	fb90 f2f2 	sdiv	r2, r0, r2
 800e62c:	4432      	add	r2, r6
 800e62e:	9204      	str	r2, [sp, #16]
 800e630:	f000 0207 	and.w	r2, r0, #7
 800e634:	4408      	add	r0, r1
 800e636:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e638:	9206      	str	r2, [sp, #24]
 800e63a:	2301      	movs	r3, #1
 800e63c:	4652      	mov	r2, sl
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	9301      	str	r3, [sp, #4]
 800e642:	9302      	str	r3, [sp, #8]
 800e644:	4429      	add	r1, r5
 800e646:	f8cd 8014 	str.w	r8, [sp, #20]
 800e64a:	f7fe fc93 	bl	800cf74 <LCD__DrawBitmap_1bpp>
 800e64e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e650:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e652:	4453      	add	r3, sl
 800e654:	9319      	str	r3, [sp, #100]	; 0x64
 800e656:	6883      	ldr	r3, [r0, #8]
 800e658:	a919      	add	r1, sp, #100	; 0x64
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	462a      	mov	r2, r5
 800e65e:	4798      	blx	r3
 800e660:	4682      	mov	sl, r0
 800e662:	e7d9      	b.n	800e618 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800e664:	444e      	add	r6, r9
 800e666:	e021      	b.n	800e6ac <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800e668:	f1ba 0f00 	cmp.w	sl, #0
 800e66c:	d0fa      	beq.n	800e664 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800e66e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e670:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e672:	9402      	str	r4, [sp, #8]
 800e674:	fb00 6201 	mla	r2, r0, r1, r6
 800e678:	9204      	str	r2, [sp, #16]
 800e67a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e67c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e67e:	f8cd 900c 	str.w	r9, [sp, #12]
 800e682:	2301      	movs	r3, #1
 800e684:	4410      	add	r0, r2
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	4652      	mov	r2, sl
 800e68a:	9301      	str	r3, [sp, #4]
 800e68c:	4429      	add	r1, r5
 800e68e:	f8cd 8014 	str.w	r8, [sp, #20]
 800e692:	f7fe fd4b 	bl	800d12c <LCD_DrawBitmap>
 800e696:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e698:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e69a:	4453      	add	r3, sl
 800e69c:	9319      	str	r3, [sp, #100]	; 0x64
 800e69e:	6883      	ldr	r3, [r0, #8]
 800e6a0:	a919      	add	r1, sp, #100	; 0x64
 800e6a2:	695b      	ldr	r3, [r3, #20]
 800e6a4:	462a      	mov	r2, r5
 800e6a6:	4798      	blx	r3
 800e6a8:	4682      	mov	sl, r0
 800e6aa:	e7dd      	b.n	800e668 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800e6ac:	3501      	adds	r5, #1
 800e6ae:	e77e      	b.n	800e5ae <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 800e6b0:	a818      	add	r0, sp, #96	; 0x60
 800e6b2:	f7fa fd33 	bl	800911c <GUI_ALLOC_UnlockH>
 800e6b6:	e1be      	b.n	800ea36 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	9300      	str	r3, [sp, #0]
 800e6bc:	9301      	str	r3, [sp, #4]
 800e6be:	9004      	str	r0, [sp, #16]
 800e6c0:	9402      	str	r4, [sp, #8]
 800e6c2:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6c6:	f8cd 8014 	str.w	r8, [sp, #20]
 800e6ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e6cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e6ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e6d0:	463a      	mov	r2, r7
 800e6d2:	e041      	b.n	800e758 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	910a      	str	r1, [sp, #40]	; 0x28
 800e6d8:	f7fa fd12 	bl	8009100 <GUI_ALLOC_LockH>
 800e6dc:	4682      	mov	sl, r0
 800e6de:	a81c      	add	r0, sp, #112	; 0x70
 800e6e0:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800e6e4:	f840 ad10 	str.w	sl, [r0, #-16]!
 800e6e8:	f8da 4000 	ldr.w	r4, [sl]
 800e6ec:	9210      	str	r2, [sp, #64]	; 0x40
 800e6ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e6f2:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 800e6f6:	4c9e      	ldr	r4, [pc, #632]	; (800e970 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 800e6f8:	b213      	sxth	r3, r2
 800e6fa:	f8da 200c 	ldr.w	r2, [sl, #12]
 800e6fe:	920b      	str	r2, [sp, #44]	; 0x2c
 800e700:	9309      	str	r3, [sp, #36]	; 0x24
 800e702:	f7fa fd0b 	bl	800911c <GUI_ALLOC_UnlockH>
 800e706:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800e70a:	900e      	str	r0, [sp, #56]	; 0x38
 800e70c:	4899      	ldr	r0, [pc, #612]	; (800e974 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800e70e:	6800      	ldr	r0, [r0, #0]
 800e710:	7c40      	ldrb	r0, [r0, #17]
 800e712:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800e716:	6925      	ldr	r5, [r4, #16]
 800e718:	f8d5 8000 	ldr.w	r8, [r5]
 800e71c:	f7fe fa60 	bl	800cbe0 <GUI_GetBitsPerPixelEx>
 800e720:	2808      	cmp	r0, #8
 800e722:	fa0f fb87 	sxth.w	fp, r7
 800e726:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e72c:	d904      	bls.n	800e738 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800e72e:	2810      	cmp	r0, #16
 800e730:	bf8c      	ite	hi
 800e732:	2404      	movhi	r4, #4
 800e734:	2402      	movls	r4, #2
 800e736:	e000      	b.n	800e73a <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 800e738:	2401      	movs	r4, #1
 800e73a:	45a9      	cmp	r9, r5
 800e73c:	d10f      	bne.n	800e75e <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 800e73e:	2001      	movs	r0, #1
 800e740:	9203      	str	r2, [sp, #12]
 800e742:	f10a 0218 	add.w	r2, sl, #24
 800e746:	9000      	str	r0, [sp, #0]
 800e748:	9001      	str	r0, [sp, #4]
 800e74a:	9102      	str	r1, [sp, #8]
 800e74c:	9204      	str	r2, [sp, #16]
 800e74e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e750:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e752:	2200      	movs	r2, #0
 800e754:	9205      	str	r2, [sp, #20]
 800e756:	465a      	mov	r2, fp
 800e758:	f7fe fce8 	bl	800d12c <LCD_DrawBitmap>
 800e75c:	e16b      	b.n	800ea36 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e75e:	2920      	cmp	r1, #32
 800e760:	f040 808e 	bne.w	800e880 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 800e764:	fb0b f004 	mul.w	r0, fp, r4
 800e768:	f7fa ff12 	bl	8009590 <GUI_ALLOC_AllocNoInit>
 800e76c:	900e      	str	r0, [sp, #56]	; 0x38
 800e76e:	2800      	cmp	r0, #0
 800e770:	f000 8161 	beq.w	800ea36 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e774:	f7fa fcc4 	bl	8009100 <GUI_ALLOC_LockH>
 800e778:	901a      	str	r0, [sp, #104]	; 0x68
 800e77a:	4630      	mov	r0, r6
 800e77c:	f7fa fcc0 	bl	8009100 <GUI_ALLOC_LockH>
 800e780:	9018      	str	r0, [sp, #96]	; 0x60
 800e782:	692b      	ldr	r3, [r5, #16]
 800e784:	f100 0a18 	add.w	sl, r0, #24
 800e788:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800e78c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800e790:	2b00      	cmp	r3, #0
 800e792:	d02f      	beq.n	800e7f4 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 800e794:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800e798:	2c02      	cmp	r4, #2
 800e79a:	d003      	beq.n	800e7a4 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800e79c:	2c04      	cmp	r4, #4
 800e79e:	d001      	beq.n	800e7a4 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800e7a0:	2c01      	cmp	r4, #1
 800e7a2:	d106      	bne.n	800e7b2 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800e7a4:	4650      	mov	r0, sl
 800e7a6:	692f      	ldr	r7, [r5, #16]
 800e7a8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e7aa:	465a      	mov	r2, fp
 800e7ac:	4623      	mov	r3, r4
 800e7ae:	47b8      	blx	r7
 800e7b0:	44b2      	add	sl, r6
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	9301      	str	r3, [sp, #4]
 800e7bc:	9203      	str	r2, [sp, #12]
 800e7be:	9104      	str	r1, [sp, #16]
 800e7c0:	9205      	str	r2, [sp, #20]
 800e7c2:	4641      	mov	r1, r8
 800e7c4:	465a      	mov	r2, fp
 800e7c6:	f8cd 9008 	str.w	r9, [sp, #8]
 800e7ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e7cc:	f7fe fcae 	bl	800d12c <LCD_DrawBitmap>
 800e7d0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e7d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7d4:	f108 0701 	add.w	r7, r8, #1
 800e7d8:	fa02 f381 	sxtah	r3, r2, r1
 800e7dc:	42bb      	cmp	r3, r7
 800e7de:	d107      	bne.n	800e7f0 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 800e7e0:	a818      	add	r0, sp, #96	; 0x60
 800e7e2:	f7fa fc9b 	bl	800911c <GUI_ALLOC_UnlockH>
 800e7e6:	a81a      	add	r0, sp, #104	; 0x68
 800e7e8:	f7fa fc98 	bl	800911c <GUI_ALLOC_UnlockH>
 800e7ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e7ee:	e120      	b.n	800ea32 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800e7f0:	46b8      	mov	r8, r7
 800e7f2:	e7d1      	b.n	800e798 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 800e7f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e7f6:	2c02      	cmp	r4, #2
 800e7f8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e7fa:	d00e      	beq.n	800e81a <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 800e7fc:	2c04      	cmp	r4, #4
 800e7fe:	d018      	beq.n	800e832 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 800e800:	2c01      	cmp	r4, #1
 800e802:	d125      	bne.n	800e850 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 800e804:	2300      	movs	r3, #0
 800e806:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800e80a:	9309      	str	r3, [sp, #36]	; 0x24
 800e80c:	47c0      	blx	r8
 800e80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e810:	54f8      	strb	r0, [r7, r3]
 800e812:	3301      	adds	r3, #1
 800e814:	459b      	cmp	fp, r3
 800e816:	d1f6      	bne.n	800e806 <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 800e818:	e019      	b.n	800e84e <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800e81a:	2300      	movs	r3, #0
 800e81c:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800e820:	9309      	str	r3, [sp, #36]	; 0x24
 800e822:	47c0      	blx	r8
 800e824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e826:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 800e82a:	3301      	adds	r3, #1
 800e82c:	459b      	cmp	fp, r3
 800e82e:	d1f5      	bne.n	800e81c <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 800e830:	e00d      	b.n	800e84e <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800e832:	465a      	mov	r2, fp
 800e834:	2300      	movs	r3, #0
 800e836:	f85a 0003 	ldr.w	r0, [sl, r3]
 800e83a:	920b      	str	r2, [sp, #44]	; 0x2c
 800e83c:	9309      	str	r3, [sp, #36]	; 0x24
 800e83e:	47c0      	blx	r8
 800e840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e844:	3a01      	subs	r2, #1
 800e846:	50f8      	str	r0, [r7, r3]
 800e848:	f103 0304 	add.w	r3, r3, #4
 800e84c:	d1f3      	bne.n	800e836 <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 800e84e:	44b2      	add	sl, r6
 800e850:	2301      	movs	r3, #1
 800e852:	2200      	movs	r2, #0
 800e854:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	9301      	str	r3, [sp, #4]
 800e85a:	9203      	str	r2, [sp, #12]
 800e85c:	9104      	str	r1, [sp, #16]
 800e85e:	9205      	str	r2, [sp, #20]
 800e860:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e862:	f8cd 9008 	str.w	r9, [sp, #8]
 800e866:	4629      	mov	r1, r5
 800e868:	465a      	mov	r2, fp
 800e86a:	f7fe fc5f 	bl	800d12c <LCD_DrawBitmap>
 800e86e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e870:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e872:	1c6f      	adds	r7, r5, #1
 800e874:	fa01 f380 	sxtah	r3, r1, r0
 800e878:	42bb      	cmp	r3, r7
 800e87a:	d0b1      	beq.n	800e7e0 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 800e87c:	463d      	mov	r5, r7
 800e87e:	e7ba      	b.n	800e7f6 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800e880:	2910      	cmp	r1, #16
 800e882:	f040 80d8 	bne.w	800ea36 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e886:	fa0f fa87 	sxth.w	sl, r7
 800e88a:	fb0a f004 	mul.w	r0, sl, r4
 800e88e:	f7fa fe7f 	bl	8009590 <GUI_ALLOC_AllocNoInit>
 800e892:	9012      	str	r0, [sp, #72]	; 0x48
 800e894:	2800      	cmp	r0, #0
 800e896:	f000 80ce 	beq.w	800ea36 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800e89a:	f7fa fc31 	bl	8009100 <GUI_ALLOC_LockH>
 800e89e:	901a      	str	r0, [sp, #104]	; 0x68
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	f7fa fc2d 	bl	8009100 <GUI_ALLOC_LockH>
 800e8a6:	9018      	str	r0, [sp, #96]	; 0x60
 800e8a8:	692b      	ldr	r3, [r5, #16]
 800e8aa:	f100 0618 	add.w	r6, r0, #24
 800e8ae:	b113      	cbz	r3, 800e8b6 <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 800e8b0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e8b4:	b92b      	cbnz	r3, 800e8c2 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 800e8b6:	00e2      	lsls	r2, r4, #3
 800e8b8:	b23f      	sxth	r7, r7
 800e8ba:	9211      	str	r2, [sp, #68]	; 0x44
 800e8bc:	007f      	lsls	r7, r7, #1
 800e8be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e8c0:	e088      	b.n	800e9d4 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 800e8c2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800e8c6:	0080      	lsls	r0, r0, #2
 800e8c8:	f7fa fe62 	bl	8009590 <GUI_ALLOC_AllocNoInit>
 800e8cc:	9011      	str	r0, [sp, #68]	; 0x44
 800e8ce:	b118      	cbz	r0, 800e8d8 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 800e8d0:	f7fa fc16 	bl	8009100 <GUI_ALLOC_LockH>
 800e8d4:	9019      	str	r0, [sp, #100]	; 0x64
 800e8d6:	e001      	b.n	800e8dc <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 800e8d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8da:	9319      	str	r3, [sp, #100]	; 0x64
 800e8dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 80a0 	beq.w	800ea24 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800e8e4:	b23f      	sxth	r7, r7
 800e8e6:	007f      	lsls	r7, r7, #1
 800e8e8:	970e      	str	r7, [sp, #56]	; 0x38
 800e8ea:	00e7      	lsls	r7, r4, #3
 800e8ec:	9713      	str	r7, [sp, #76]	; 0x4c
 800e8ee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e8f0:	970c      	str	r7, [sp, #48]	; 0x30
 800e8f2:	2c02      	cmp	r4, #2
 800e8f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e8f8:	d004      	beq.n	800e904 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 800e8fa:	2c04      	cmp	r4, #4
 800e8fc:	d007      	beq.n	800e90e <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800e8fe:	2c01      	cmp	r4, #1
 800e900:	d114      	bne.n	800e92c <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 800e902:	e004      	b.n	800e90e <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800e904:	4630      	mov	r0, r6
 800e906:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e908:	4652      	mov	r2, sl
 800e90a:	4623      	mov	r3, r4
 800e90c:	e003      	b.n	800e916 <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 800e90e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e910:	4630      	mov	r0, r6
 800e912:	4652      	mov	r2, sl
 800e914:	2302      	movs	r3, #2
 800e916:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800e91a:	47b8      	blx	r7
 800e91c:	692f      	ldr	r7, [r5, #16]
 800e91e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e920:	4641      	mov	r1, r8
 800e922:	4652      	mov	r2, sl
 800e924:	4623      	mov	r3, r4
 800e926:	47b8      	blx	r7
 800e928:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800e92a:	443e      	add	r6, r7
 800e92c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800e92e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e930:	9104      	str	r1, [sp, #16]
 800e932:	2301      	movs	r3, #1
 800e934:	2200      	movs	r2, #0
 800e936:	f107 0801 	add.w	r8, r7, #1
 800e93a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	9301      	str	r3, [sp, #4]
 800e940:	9702      	str	r7, [sp, #8]
 800e942:	9203      	str	r2, [sp, #12]
 800e944:	9205      	str	r2, [sp, #20]
 800e946:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e948:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e94a:	465a      	mov	r2, fp
 800e94c:	f7fe fbee 	bl	800d12c <LCD_DrawBitmap>
 800e950:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e952:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e954:	fa00 f387 	sxtah	r3, r0, r7
 800e958:	4543      	cmp	r3, r8
 800e95a:	d002      	beq.n	800e962 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 800e95c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800e960:	e7c7      	b.n	800e8f2 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 800e962:	a819      	add	r0, sp, #100	; 0x64
 800e964:	f7fa fbda 	bl	800911c <GUI_ALLOC_UnlockH>
 800e968:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e96a:	f7fa fbf7 	bl	800915c <GUI_ALLOC_Free>
 800e96e:	e059      	b.n	800ea24 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800e970:	2001af18 	.word	0x2001af18
 800e974:	200001b0 	.word	0x200001b0
 800e978:	2c04      	cmp	r4, #4
 800e97a:	d041      	beq.n	800ea00 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 800e97c:	2c01      	cmp	r4, #1
 800e97e:	d111      	bne.n	800e9a4 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 800e980:	464a      	mov	r2, r9
 800e982:	4631      	mov	r1, r6
 800e984:	f831 0b02 	ldrh.w	r0, [r1], #2
 800e988:	910a      	str	r1, [sp, #40]	; 0x28
 800e98a:	920b      	str	r2, [sp, #44]	; 0x2c
 800e98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e98e:	4798      	blx	r3
 800e990:	47c0      	blx	r8
 800e992:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e994:	f802 0b01 	strb.w	r0, [r2], #1
 800e998:	eb09 000a 	add.w	r0, r9, sl
 800e99c:	4282      	cmp	r2, r0
 800e99e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e9a0:	d1f0      	bne.n	800e984 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 800e9a2:	443e      	add	r6, r7
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e9a8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	9301      	str	r3, [sp, #4]
 800e9b0:	9002      	str	r0, [sp, #8]
 800e9b2:	9203      	str	r2, [sp, #12]
 800e9b4:	9104      	str	r1, [sp, #16]
 800e9b6:	9205      	str	r2, [sp, #20]
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	465a      	mov	r2, fp
 800e9bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e9be:	f7fe fbb5 	bl	800d12c <LCD_DrawBitmap>
 800e9c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e9c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9c6:	f105 0901 	add.w	r9, r5, #1
 800e9ca:	fa02 f381 	sxtah	r3, r2, r1
 800e9ce:	454b      	cmp	r3, r9
 800e9d0:	d028      	beq.n	800ea24 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800e9d2:	464d      	mov	r5, r9
 800e9d4:	2c02      	cmp	r4, #2
 800e9d6:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800e9da:	d1cd      	bne.n	800e978 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 800e9dc:	464b      	mov	r3, r9
 800e9de:	4631      	mov	r1, r6
 800e9e0:	46d9      	mov	r9, fp
 800e9e2:	f831 0b02 	ldrh.w	r0, [r1], #2
 800e9e6:	910a      	str	r1, [sp, #40]	; 0x28
 800e9e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9ec:	4790      	blx	r2
 800e9ee:	47c0      	blx	r8
 800e9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e9f4:	f823 0b02 	strh.w	r0, [r3], #2
 800e9f8:	f1b9 0901 	subs.w	r9, r9, #1
 800e9fc:	d1f1      	bne.n	800e9e2 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800e9fe:	e7d0      	b.n	800e9a2 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800ea00:	464b      	mov	r3, r9
 800ea02:	4631      	mov	r1, r6
 800ea04:	46d9      	mov	r9, fp
 800ea06:	f831 0b02 	ldrh.w	r0, [r1], #2
 800ea0a:	910a      	str	r1, [sp, #40]	; 0x28
 800ea0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea10:	4790      	blx	r2
 800ea12:	47c0      	blx	r8
 800ea14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea16:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ea18:	f843 0b04 	str.w	r0, [r3], #4
 800ea1c:	f1b9 0901 	subs.w	r9, r9, #1
 800ea20:	d1f1      	bne.n	800ea06 <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 800ea22:	e7be      	b.n	800e9a2 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800ea24:	a818      	add	r0, sp, #96	; 0x60
 800ea26:	f7fa fb79 	bl	800911c <GUI_ALLOC_UnlockH>
 800ea2a:	a81a      	add	r0, sp, #104	; 0x68
 800ea2c:	f7fa fb76 	bl	800911c <GUI_ALLOC_UnlockH>
 800ea30:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ea32:	f7fa fb93 	bl	800915c <GUI_ALLOC_Free>
 800ea36:	b01d      	add	sp, #116	; 0x74
 800ea38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea3c <GUI_MEMDEV__WriteToActiveAlpha>:
 800ea3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea40:	b091      	sub	sp, #68	; 0x44
 800ea42:	460e      	mov	r6, r1
 800ea44:	4614      	mov	r4, r2
 800ea46:	900d      	str	r0, [sp, #52]	; 0x34
 800ea48:	f7fa fb5a 	bl	8009100 <GUI_ALLOC_LockH>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	a810      	add	r0, sp, #64	; 0x40
 800ea50:	6813      	ldr	r3, [r2, #0]
 800ea52:	4d5b      	ldr	r5, [pc, #364]	; (800ebc0 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	f840 2d08 	str.w	r2, [r0, #-8]!
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 800ea60:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 800ea64:	9309      	str	r3, [sp, #36]	; 0x24
 800ea66:	f7fa fb59 	bl	800911c <GUI_ALLOC_UnlockH>
 800ea6a:	682b      	ldr	r3, [r5, #0]
 800ea6c:	4f55      	ldr	r7, [pc, #340]	; (800ebc4 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 800ea6e:	7c5b      	ldrb	r3, [r3, #17]
 800ea70:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800ea74:	68c3      	ldr	r3, [r0, #12]
 800ea76:	2108      	movs	r1, #8
 800ea78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea7a:	4798      	blx	r3
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	7c5b      	ldrb	r3, [r3, #17]
 800ea80:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800ea84:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800ea88:	2817      	cmp	r0, #23
 800ea8a:	bf88      	it	hi
 800ea8c:	2020      	movhi	r0, #32
 800ea8e:	9008      	str	r0, [sp, #32]
 800ea90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea94:	f8d8 2000 	ldr.w	r2, [r8]
 800ea98:	910a      	str	r1, [sp, #40]	; 0x28
 800ea9a:	2000      	movs	r0, #0
 800ea9c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea9e:	f7fe ff79 	bl	800d994 <GUI__AllocAlphaBuffer>
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	f040 8089 	bne.w	800ebba <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800eaa8:	682a      	ldr	r2, [r5, #0]
 800eaaa:	fa0f f78b 	sxth.w	r7, fp
 800eaae:	19f5      	adds	r5, r6, r7
 800eab0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800eab4:	3d01      	subs	r5, #1
 800eab6:	1aed      	subs	r5, r5, r3
 800eab8:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	bfcc      	ite	gt
 800eac0:	ebc5 0507 	rsbgt	r5, r5, r7
 800eac4:	463d      	movle	r5, r7
 800eac6:	42b3      	cmp	r3, r6
 800eac8:	bfc3      	ittte	gt
 800eaca:	ebc6 0103 	rsbgt	r1, r6, r3
 800eace:	ebc1 0505 	rsbgt	r5, r1, r5
 800ead2:	461e      	movgt	r6, r3
 800ead4:	2100      	movle	r1, #0
 800ead6:	2d00      	cmp	r5, #0
 800ead8:	dd6f      	ble.n	800ebba <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800eada:	fa0f f389 	sxth.w	r3, r9
 800eade:	18e0      	adds	r0, r4, r3
 800eae0:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 800eae4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800eae8:	3801      	subs	r0, #1
 800eaea:	ebcc 0000 	rsb	r0, ip, r0
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	bfc8      	it	gt
 800eaf2:	ebc0 0303 	rsbgt	r3, r0, r3
 800eaf6:	4294      	cmp	r4, r2
 800eaf8:	bfbd      	ittte	lt
 800eafa:	ebc4 0a02 	rsblt	sl, r4, r2
 800eafe:	ebca 0303 	rsblt	r3, sl, r3
 800eb02:	4614      	movlt	r4, r2
 800eb04:	f04f 0a00 	movge.w	sl, #0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	dd56      	ble.n	800ebba <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800eb0c:	fb07 1a0a 	mla	sl, r7, sl, r1
 800eb10:	18e3      	adds	r3, r4, r3
 800eb12:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800eb16:	930c      	str	r3, [sp, #48]	; 0x30
 800eb18:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eb1a:	f7fc fb91 	bl	800b240 <GUI_MEMDEV_GetDataPtr>
 800eb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	ab0f      	add	r3, sp, #60	; 0x3c
 800eb24:	eb00 020a 	add.w	r2, r0, sl
 800eb28:	9301      	str	r3, [sp, #4]
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	4621      	mov	r1, r4
 800eb2e:	462b      	mov	r3, r5
 800eb30:	f7fe fe4a 	bl	800d7c8 <GUI__DoAlphaBlending>
 800eb34:	4681      	mov	r9, r0
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d03f      	beq.n	800ebba <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800eb3a:	4b23      	ldr	r3, [pc, #140]	; (800ebc8 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 800eb3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eb3e:	4299      	cmp	r1, r3
 800eb40:	d01e      	beq.n	800eb80 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800eb42:	4629      	mov	r1, r5
 800eb44:	9a08      	ldr	r2, [sp, #32]
 800eb46:	4643      	mov	r3, r8
 800eb48:	f000 fd57 	bl	800f5fa <GUI__CompactPixelIndicesEx>
 800eb4c:	b9c0      	cbnz	r0, 800eb80 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800eb4e:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800eb52:	f1bc 0f00 	cmp.w	ip, #0
 800eb56:	d006      	beq.n	800eb66 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 800eb58:	4648      	mov	r0, r9
 800eb5a:	4649      	mov	r1, r9
 800eb5c:	fa0f f28b 	sxth.w	r2, fp
 800eb60:	2304      	movs	r3, #4
 800eb62:	47e0      	blx	ip
 800eb64:	e00c      	b.n	800eb80 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800eb66:	464a      	mov	r2, r9
 800eb68:	463b      	mov	r3, r7
 800eb6a:	6810      	ldr	r0, [r2, #0]
 800eb6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb6e:	9206      	str	r2, [sp, #24]
 800eb70:	9307      	str	r3, [sp, #28]
 800eb72:	4788      	blx	r1
 800eb74:	9b07      	ldr	r3, [sp, #28]
 800eb76:	9a06      	ldr	r2, [sp, #24]
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	f842 0b04 	str.w	r0, [r2], #4
 800eb7e:	d1f4      	bne.n	800eb6a <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 800eb80:	9a08      	ldr	r2, [sp, #32]
 800eb82:	9202      	str	r2, [sp, #8]
 800eb84:	2301      	movs	r3, #1
 800eb86:	2200      	movs	r2, #0
 800eb88:	f104 0c01 	add.w	ip, r4, #1
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	9301      	str	r3, [sp, #4]
 800eb90:	9203      	str	r2, [sp, #12]
 800eb92:	9205      	str	r2, [sp, #20]
 800eb94:	f8cd 9010 	str.w	r9, [sp, #16]
 800eb98:	4630      	mov	r0, r6
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	462a      	mov	r2, r5
 800eb9e:	f8cd c01c 	str.w	ip, [sp, #28]
 800eba2:	f7fe fac3 	bl	800d12c <LCD_DrawBitmap>
 800eba6:	2304      	movs	r3, #4
 800eba8:	fb1b aa03 	smlabb	sl, fp, r3, sl
 800ebac:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800ebb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebb2:	459c      	cmp	ip, r3
 800ebb4:	d001      	beq.n	800ebba <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800ebb6:	4664      	mov	r4, ip
 800ebb8:	e7ae      	b.n	800eb18 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 800ebba:	b011      	add	sp, #68	; 0x44
 800ebbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc0:	200001b0 	.word	0x200001b0
 800ebc4:	2001af18 	.word	0x2001af18
 800ebc8:	0800de45 	.word	0x0800de45

0800ebcc <GUI_MEMDEV_WriteAt>:
 800ebcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ebce:	460c      	mov	r4, r1
 800ebd0:	4615      	mov	r5, r2
 800ebd2:	4606      	mov	r6, r0
 800ebd4:	b330      	cbz	r0, 800ec24 <GUI_MEMDEV_WriteAt+0x58>
 800ebd6:	f7fa fa93 	bl	8009100 <GUI_ALLOC_LockH>
 800ebda:	4a13      	ldr	r2, [pc, #76]	; (800ec28 <GUI_MEMDEV_WriteAt+0x5c>)
 800ebdc:	8943      	ldrh	r3, [r0, #10]
 800ebde:	9001      	str	r0, [sp, #4]
 800ebe0:	4294      	cmp	r4, r2
 800ebe2:	8902      	ldrh	r2, [r0, #8]
 800ebe4:	bf04      	itt	eq
 800ebe6:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 800ebea:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 800ebee:	f8ad 4008 	strh.w	r4, [sp, #8]
 800ebf2:	3a01      	subs	r2, #1
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	4422      	add	r2, r4
 800ebf8:	442b      	add	r3, r5
 800ebfa:	a801      	add	r0, sp, #4
 800ebfc:	f8ad 200c 	strh.w	r2, [sp, #12]
 800ec00:	f8ad 500a 	strh.w	r5, [sp, #10]
 800ec04:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ec08:	f7fa fa88 	bl	800911c <GUI_ALLOC_UnlockH>
 800ec0c:	a802      	add	r0, sp, #8
 800ec0e:	f7fb ff59 	bl	800aac4 <WM__InitIVRSearch>
 800ec12:	b138      	cbz	r0, 800ec24 <GUI_MEMDEV_WriteAt+0x58>
 800ec14:	4630      	mov	r0, r6
 800ec16:	4621      	mov	r1, r4
 800ec18:	462a      	mov	r2, r5
 800ec1a:	f7fd fddd 	bl	800c7d8 <GUI_MEMDEV__WriteToActiveAt>
 800ec1e:	f7fb fe8f 	bl	800a940 <WM__GetNextIVR>
 800ec22:	e7f6      	b.n	800ec12 <GUI_MEMDEV_WriteAt+0x46>
 800ec24:	b004      	add	sp, #16
 800ec26:	bd70      	pop	{r4, r5, r6, pc}
 800ec28:	fffff001 	.word	0xfffff001

0800ec2c <GUI_MEMDEV_Write>:
 800ec2c:	4901      	ldr	r1, [pc, #4]	; (800ec34 <GUI_MEMDEV_Write+0x8>)
 800ec2e:	460a      	mov	r2, r1
 800ec30:	f7ff bfcc 	b.w	800ebcc <GUI_MEMDEV_WriteAt>
 800ec34:	fffff001 	.word	0xfffff001

0800ec38 <GUI_USAGE_BM_AddPixel>:
 800ec38:	4603      	mov	r3, r0
 800ec3a:	b510      	push	{r4, lr}
 800ec3c:	f933 4b14 	ldrsh.w	r4, [r3], #20
 800ec40:	1b09      	subs	r1, r1, r4
 800ec42:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800ec46:	6900      	ldr	r0, [r0, #16]
 800ec48:	1b12      	subs	r2, r2, r4
 800ec4a:	fb00 3302 	mla	r3, r0, r2, r3
 800ec4e:	10c8      	asrs	r0, r1, #3
 800ec50:	2280      	movs	r2, #128	; 0x80
 800ec52:	f001 0107 	and.w	r1, r1, #7
 800ec56:	fa42 f101 	asr.w	r1, r2, r1
 800ec5a:	5c1a      	ldrb	r2, [r3, r0]
 800ec5c:	4311      	orrs	r1, r2
 800ec5e:	5419      	strb	r1, [r3, r0]
 800ec60:	bd10      	pop	{r4, pc}

0800ec62 <GUI_USAGE_BM_GetNextDirty>:
 800ec62:	b570      	push	{r4, r5, r6, lr}
 800ec64:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800ec68:	680b      	ldr	r3, [r1, #0]
 800ec6a:	8886      	ldrh	r6, [r0, #4]
 800ec6c:	42a2      	cmp	r2, r4
 800ec6e:	da41      	bge.n	800ecf4 <GUI_USAGE_BM_GetNextDirty+0x92>
 800ec70:	b236      	sxth	r6, r6
 800ec72:	42b3      	cmp	r3, r6
 800ec74:	6904      	ldr	r4, [r0, #16]
 800ec76:	da3d      	bge.n	800ecf4 <GUI_USAGE_BM_GetNextDirty+0x92>
 800ec78:	3014      	adds	r0, #20
 800ec7a:	fb04 0202 	mla	r2, r4, r2, r0
 800ec7e:	10dd      	asrs	r5, r3, #3
 800ec80:	1e70      	subs	r0, r6, #1
 800ec82:	1954      	adds	r4, r2, r5
 800ec84:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 800ec88:	5d55      	ldrb	r5, [r2, r5]
 800ec8a:	f003 0207 	and.w	r2, r3, #7
 800ec8e:	fa05 f202 	lsl.w	r2, r5, r2
 800ec92:	3401      	adds	r4, #1
 800ec94:	b2d2      	uxtb	r2, r2
 800ec96:	b93a      	cbnz	r2, 800eca8 <GUI_USAGE_BM_GetNextDirty+0x46>
 800ec98:	b368      	cbz	r0, 800ecf6 <GUI_USAGE_BM_GetNextDirty+0x94>
 800ec9a:	3308      	adds	r3, #8
 800ec9c:	f814 2b01 	ldrb.w	r2, [r4], #1
 800eca0:	3801      	subs	r0, #1
 800eca2:	f023 0307 	bic.w	r3, r3, #7
 800eca6:	e7f6      	b.n	800ec96 <GUI_USAGE_BM_GetNextDirty+0x34>
 800eca8:	0615      	lsls	r5, r2, #24
 800ecaa:	d403      	bmi.n	800ecb4 <GUI_USAGE_BM_GetNextDirty+0x52>
 800ecac:	0052      	lsls	r2, r2, #1
 800ecae:	b2d2      	uxtb	r2, r2
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	e7f9      	b.n	800eca8 <GUI_USAGE_BM_GetNextDirty+0x46>
 800ecb4:	2aff      	cmp	r2, #255	; 0xff
 800ecb6:	461d      	mov	r5, r3
 800ecb8:	d005      	beq.n	800ecc6 <GUI_USAGE_BM_GetNextDirty+0x64>
 800ecba:	0656      	lsls	r6, r2, #25
 800ecbc:	d504      	bpl.n	800ecc8 <GUI_USAGE_BM_GetNextDirty+0x66>
 800ecbe:	0052      	lsls	r2, r2, #1
 800ecc0:	b2d2      	uxtb	r2, r2
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	e7f9      	b.n	800ecba <GUI_USAGE_BM_GetNextDirty+0x58>
 800ecc6:	3307      	adds	r3, #7
 800ecc8:	f003 0207 	and.w	r2, r3, #7
 800eccc:	2a07      	cmp	r2, #7
 800ecce:	d10d      	bne.n	800ecec <GUI_USAGE_BM_GetNextDirty+0x8a>
 800ecd0:	3801      	subs	r0, #1
 800ecd2:	d40b      	bmi.n	800ecec <GUI_USAGE_BM_GetNextDirty+0x8a>
 800ecd4:	f814 2b01 	ldrb.w	r2, [r4], #1
 800ecd8:	2aff      	cmp	r2, #255	; 0xff
 800ecda:	d101      	bne.n	800ece0 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800ecdc:	3308      	adds	r3, #8
 800ecde:	e7f7      	b.n	800ecd0 <GUI_USAGE_BM_GetNextDirty+0x6e>
 800ece0:	0610      	lsls	r0, r2, #24
 800ece2:	d503      	bpl.n	800ecec <GUI_USAGE_BM_GetNextDirty+0x8a>
 800ece4:	0052      	lsls	r2, r2, #1
 800ece6:	b2d2      	uxtb	r2, r2
 800ece8:	3301      	adds	r3, #1
 800ecea:	e7f9      	b.n	800ece0 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800ecec:	1b58      	subs	r0, r3, r5
 800ecee:	600d      	str	r5, [r1, #0]
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	bd70      	pop	{r4, r5, r6, pc}

0800ecf8 <_GUI_USAGE_BM_Delete>:
 800ecf8:	f7fa ba30 	b.w	800915c <GUI_ALLOC_Free>

0800ecfc <GUI_USAGE_BM_Clear>:
 800ecfc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800ed00:	6902      	ldr	r2, [r0, #16]
 800ed02:	2100      	movs	r1, #0
 800ed04:	3014      	adds	r0, #20
 800ed06:	435a      	muls	r2, r3
 800ed08:	f001 ba7b 	b.w	8010202 <memset>

0800ed0c <GUI_USAGE_BM_AddHLine>:
 800ed0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed0e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ed12:	1b09      	subs	r1, r1, r4
 800ed14:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800ed18:	42a1      	cmp	r1, r4
 800ed1a:	da2f      	bge.n	800ed7c <GUI_USAGE_BM_AddHLine+0x70>
 800ed1c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800ed20:	440b      	add	r3, r1
 800ed22:	f100 0414 	add.w	r4, r0, #20
 800ed26:	3b01      	subs	r3, #1
 800ed28:	6900      	ldr	r0, [r0, #16]
 800ed2a:	1b52      	subs	r2, r2, r5
 800ed2c:	43de      	mvns	r6, r3
 800ed2e:	fb00 4202 	mla	r2, r0, r2, r4
 800ed32:	f001 0707 	and.w	r7, r1, #7
 800ed36:	10cc      	asrs	r4, r1, #3
 800ed38:	f006 0607 	and.w	r6, r6, #7
 800ed3c:	21ff      	movs	r1, #255	; 0xff
 800ed3e:	fa41 f707 	asr.w	r7, r1, r7
 800ed42:	fa01 f606 	lsl.w	r6, r1, r6
 800ed46:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 800ed4a:	eb02 0504 	add.w	r5, r2, r4
 800ed4e:	b2ff      	uxtb	r7, r7
 800ed50:	b2f6      	uxtb	r6, r6
 800ed52:	5d10      	ldrb	r0, [r2, r4]
 800ed54:	d103      	bne.n	800ed5e <GUI_USAGE_BM_AddHLine+0x52>
 800ed56:	403e      	ands	r6, r7
 800ed58:	4330      	orrs	r0, r6
 800ed5a:	5510      	strb	r0, [r2, r4]
 800ed5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed5e:	4338      	orrs	r0, r7
 800ed60:	5510      	strb	r0, [r2, r4]
 800ed62:	1e5c      	subs	r4, r3, #1
 800ed64:	2c00      	cmp	r4, #0
 800ed66:	f105 0501 	add.w	r5, r5, #1
 800ed6a:	dd04      	ble.n	800ed76 <GUI_USAGE_BM_AddHLine+0x6a>
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	4622      	mov	r2, r4
 800ed70:	f001 fa47 	bl	8010202 <memset>
 800ed74:	4425      	add	r5, r4
 800ed76:	782b      	ldrb	r3, [r5, #0]
 800ed78:	431e      	orrs	r6, r3
 800ed7a:	702e      	strb	r6, [r5, #0]
 800ed7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed80 <GUI_USAGE_BM_Create>:
 800ed80:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 800ed84:	f102 060f 	add.w	r6, r2, #15
 800ed88:	1136      	asrs	r6, r6, #4
 800ed8a:	0076      	lsls	r6, r6, #1
 800ed8c:	4682      	mov	sl, r0
 800ed8e:	fb06 f003 	mul.w	r0, r6, r3
 800ed92:	3014      	adds	r0, #20
 800ed94:	4689      	mov	r9, r1
 800ed96:	4690      	mov	r8, r2
 800ed98:	461f      	mov	r7, r3
 800ed9a:	f7ff f83d 	bl	800de18 <GUI_ALLOC_AllocZero>
 800ed9e:	4683      	mov	fp, r0
 800eda0:	b198      	cbz	r0, 800edca <GUI_USAGE_BM_Create+0x4a>
 800eda2:	f7fa f9ad 	bl	8009100 <GUI_ALLOC_LockH>
 800eda6:	4604      	mov	r4, r0
 800eda8:	4b0a      	ldr	r3, [pc, #40]	; (800edd4 <GUI_USAGE_BM_Create+0x54>)
 800edaa:	60a3      	str	r3, [r4, #8]
 800edac:	a802      	add	r0, sp, #8
 800edae:	2301      	movs	r3, #1
 800edb0:	f840 4d04 	str.w	r4, [r0, #-4]!
 800edb4:	f8a4 8004 	strh.w	r8, [r4, #4]
 800edb8:	f8a4 a000 	strh.w	sl, [r4]
 800edbc:	f8a4 9002 	strh.w	r9, [r4, #2]
 800edc0:	80e7      	strh	r7, [r4, #6]
 800edc2:	81a3      	strh	r3, [r4, #12]
 800edc4:	6126      	str	r6, [r4, #16]
 800edc6:	f7fa f9a9 	bl	800911c <GUI_ALLOC_UnlockH>
 800edca:	4658      	mov	r0, fp
 800edcc:	b002      	add	sp, #8
 800edce:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 800edd2:	bf00      	nop
 800edd4:	0801558c 	.word	0x0801558c

0800edd8 <GUI_USAGE_DecUseCnt>:
 800edd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edda:	4605      	mov	r5, r0
 800eddc:	f7fa f990 	bl	8009100 <GUI_ALLOC_LockH>
 800ede0:	4602      	mov	r2, r0
 800ede2:	a802      	add	r0, sp, #8
 800ede4:	8994      	ldrh	r4, [r2, #12]
 800ede6:	f840 2d04 	str.w	r2, [r0, #-4]!
 800edea:	3c01      	subs	r4, #1
 800edec:	b2a4      	uxth	r4, r4
 800edee:	8194      	strh	r4, [r2, #12]
 800edf0:	f7fa f994 	bl	800911c <GUI_ALLOC_UnlockH>
 800edf4:	b914      	cbnz	r4, 800edfc <GUI_USAGE_DecUseCnt+0x24>
 800edf6:	4628      	mov	r0, r5
 800edf8:	f7fa f9b0 	bl	800915c <GUI_ALLOC_Free>
 800edfc:	b003      	add	sp, #12
 800edfe:	bd30      	pop	{r4, r5, pc}

0800ee00 <GUI_USAGE_AddRect>:
 800ee00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee04:	4605      	mov	r5, r0
 800ee06:	4688      	mov	r8, r1
 800ee08:	4617      	mov	r7, r2
 800ee0a:	4699      	mov	r9, r3
 800ee0c:	68a8      	ldr	r0, [r5, #8]
 800ee0e:	464b      	mov	r3, r9
 800ee10:	6846      	ldr	r6, [r0, #4]
 800ee12:	4641      	mov	r1, r8
 800ee14:	4628      	mov	r0, r5
 800ee16:	1c54      	adds	r4, r2, #1
 800ee18:	47b0      	blx	r6
 800ee1a:	9b08      	ldr	r3, [sp, #32]
 800ee1c:	443b      	add	r3, r7
 800ee1e:	42a3      	cmp	r3, r4
 800ee20:	d001      	beq.n	800ee26 <GUI_USAGE_AddRect+0x26>
 800ee22:	4622      	mov	r2, r4
 800ee24:	e7f2      	b.n	800ee0c <GUI_USAGE_AddRect+0xc>
 800ee26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800ee2c <GUI_MEMDEV_ReduceYSize>:
 800ee2c:	b513      	push	{r0, r1, r4, lr}
 800ee2e:	460c      	mov	r4, r1
 800ee30:	b918      	cbnz	r0, 800ee3a <GUI_MEMDEV_ReduceYSize+0xe>
 800ee32:	4b08      	ldr	r3, [pc, #32]	; (800ee54 <GUI_MEMDEV_ReduceYSize+0x28>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ee38:	b150      	cbz	r0, 800ee50 <GUI_MEMDEV_ReduceYSize+0x24>
 800ee3a:	f7fa f961 	bl	8009100 <GUI_ALLOC_LockH>
 800ee3e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800ee42:	9001      	str	r0, [sp, #4]
 800ee44:	429c      	cmp	r4, r3
 800ee46:	bfb8      	it	lt
 800ee48:	8144      	strhlt	r4, [r0, #10]
 800ee4a:	a801      	add	r0, sp, #4
 800ee4c:	f7fa f966 	bl	800911c <GUI_ALLOC_UnlockH>
 800ee50:	b002      	add	sp, #8
 800ee52:	bd10      	pop	{r4, pc}
 800ee54:	200001b0 	.word	0x200001b0

0800ee58 <GUI_MEMDEV_Clear>:
 800ee58:	b513      	push	{r0, r1, r4, lr}
 800ee5a:	b918      	cbnz	r0, 800ee64 <GUI_MEMDEV_Clear+0xc>
 800ee5c:	4b0d      	ldr	r3, [pc, #52]	; (800ee94 <GUI_MEMDEV_Clear+0x3c>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ee62:	b1a8      	cbz	r0, 800ee90 <GUI_MEMDEV_Clear+0x38>
 800ee64:	f7fa f94c 	bl	8009100 <GUI_ALLOC_LockH>
 800ee68:	ab02      	add	r3, sp, #8
 800ee6a:	6944      	ldr	r4, [r0, #20]
 800ee6c:	f843 0d08 	str.w	r0, [r3, #-8]!
 800ee70:	4668      	mov	r0, sp
 800ee72:	f7fa f953 	bl	800911c <GUI_ALLOC_UnlockH>
 800ee76:	b15c      	cbz	r4, 800ee90 <GUI_MEMDEV_Clear+0x38>
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f7fa f941 	bl	8009100 <GUI_ALLOC_LockH>
 800ee7e:	ac02      	add	r4, sp, #8
 800ee80:	6883      	ldr	r3, [r0, #8]
 800ee82:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	4798      	blx	r3
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f7fa f946 	bl	800911c <GUI_ALLOC_UnlockH>
 800ee90:	b002      	add	sp, #8
 800ee92:	bd10      	pop	{r4, pc}
 800ee94:	200001b0 	.word	0x200001b0

0800ee98 <LCD_SelectLCD>:
 800ee98:	b510      	push	{r4, lr}
 800ee9a:	4b0d      	ldr	r3, [pc, #52]	; (800eed0 <LCD_SelectLCD+0x38>)
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	7c51      	ldrb	r1, [r2, #17]
 800eea0:	4a0c      	ldr	r2, [pc, #48]	; (800eed4 <LCD_SelectLCD+0x3c>)
 800eea2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800eea6:	461c      	mov	r4, r3
 800eea8:	b140      	cbz	r0, 800eebc <LCD_SelectLCD+0x24>
 800eeaa:	68c3      	ldr	r3, [r0, #12]
 800eeac:	b113      	cbz	r3, 800eeb4 <LCD_SelectLCD+0x1c>
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b04      	cmp	r3, #4
 800eeb2:	d001      	beq.n	800eeb8 <LCD_SelectLCD+0x20>
 800eeb4:	6800      	ldr	r0, [r0, #0]
 800eeb6:	e7f7      	b.n	800eea8 <LCD_SelectLCD+0x10>
 800eeb8:	f7f9 fc00 	bl	80086bc <GUI_DEVICE_Unlink>
 800eebc:	6823      	ldr	r3, [r4, #0]
 800eebe:	2200      	movs	r2, #0
 800eec0:	661a      	str	r2, [r3, #96]	; 0x60
 800eec2:	f103 0208 	add.w	r2, r3, #8
 800eec6:	615a      	str	r2, [r3, #20]
 800eec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eecc:	f7fe ba3a 	b.w	800d344 <LCD_SetClipRectMax>
 800eed0:	200001b0 	.word	0x200001b0
 800eed4:	2001af18 	.word	0x2001af18

0800eed8 <LCD_ReadRectEx>:
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	b087      	sub	sp, #28
 800eede:	4617      	mov	r7, r2
 800eee0:	9304      	str	r3, [sp, #16]
 800eee2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eee4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800eee6:	68da      	ldr	r2, [r3, #12]
 800eee8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800eeea:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800eeee:	4606      	mov	r6, r0
 800eef0:	460d      	mov	r5, r1
 800eef2:	b973      	cbnz	r3, 800ef12 <LCD_ReadRectEx+0x3a>
 800eef4:	4b71      	ldr	r3, [pc, #452]	; (800f0bc <LCD_ReadRectEx+0x1e4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	7c58      	ldrb	r0, [r3, #17]
 800eefa:	f7fd fe71 	bl	800cbe0 <GUI_GetBitsPerPixelEx>
 800eefe:	2808      	cmp	r0, #8
 800ef00:	4682      	mov	sl, r0
 800ef02:	dd15      	ble.n	800ef30 <LCD_ReadRectEx+0x58>
 800ef04:	2810      	cmp	r0, #16
 800ef06:	bfcc      	ite	gt
 800ef08:	f04f 0904 	movgt.w	r9, #4
 800ef0c:	f04f 0902 	movle.w	r9, #2
 800ef10:	e010      	b.n	800ef34 <LCD_ReadRectEx+0x5c>
 800ef12:	a811      	add	r0, sp, #68	; 0x44
 800ef14:	2101      	movs	r1, #1
 800ef16:	4798      	blx	r3
 800ef18:	4684      	mov	ip, r0
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d0ea      	beq.n	800eef4 <LCD_ReadRectEx+0x1c>
 800ef1e:	9b04      	ldr	r3, [sp, #16]
 800ef20:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ef22:	e88d 0018 	stmia.w	sp, {r3, r4}
 800ef26:	4631      	mov	r1, r6
 800ef28:	462a      	mov	r2, r5
 800ef2a:	463b      	mov	r3, r7
 800ef2c:	47e0      	blx	ip
 800ef2e:	e0c1      	b.n	800f0b4 <LCD_ReadRectEx+0x1dc>
 800ef30:	f04f 0901 	mov.w	r9, #1
 800ef34:	f04f 0b00 	mov.w	fp, #0
 800ef38:	9b04      	ldr	r3, [sp, #16]
 800ef3a:	429d      	cmp	r5, r3
 800ef3c:	f300 80ba 	bgt.w	800f0b4 <LCD_ReadRectEx+0x1dc>
 800ef40:	f1b9 0f02 	cmp.w	r9, #2
 800ef44:	d009      	beq.n	800ef5a <LCD_ReadRectEx+0x82>
 800ef46:	f1b9 0f04 	cmp.w	r9, #4
 800ef4a:	d004      	beq.n	800ef56 <LCD_ReadRectEx+0x7e>
 800ef4c:	f1b9 0f01 	cmp.w	r9, #1
 800ef50:	f040 80ae 	bne.w	800f0b0 <LCD_ReadRectEx+0x1d8>
 800ef54:	e003      	b.n	800ef5e <LCD_ReadRectEx+0x86>
 800ef56:	46b4      	mov	ip, r6
 800ef58:	e09b      	b.n	800f092 <LCD_ReadRectEx+0x1ba>
 800ef5a:	46b4      	mov	ip, r6
 800ef5c:	e08a      	b.n	800f074 <LCD_ReadRectEx+0x19c>
 800ef5e:	f10a 32ff 	add.w	r2, sl, #4294967295
 800ef62:	2a07      	cmp	r2, #7
 800ef64:	f200 80a4 	bhi.w	800f0b0 <LCD_ReadRectEx+0x1d8>
 800ef68:	e8df f002 	tbb	[pc, r2]
 800ef6c:	0606080a 	.word	0x0606080a
 800ef70:	04040404 	.word	0x04040404
 800ef74:	46b4      	mov	ip, r6
 800ef76:	e066      	b.n	800f046 <LCD_ReadRectEx+0x16e>
 800ef78:	46b4      	mov	ip, r6
 800ef7a:	e047      	b.n	800f00c <LCD_ReadRectEx+0x134>
 800ef7c:	46b4      	mov	ip, r6
 800ef7e:	e022      	b.n	800efc6 <LCD_ReadRectEx+0xee>
 800ef80:	46b4      	mov	ip, r6
 800ef82:	45bc      	cmp	ip, r7
 800ef84:	f300 8094 	bgt.w	800f0b0 <LCD_ReadRectEx+0x1d8>
 800ef88:	4661      	mov	r1, ip
 800ef8a:	462a      	mov	r2, r5
 800ef8c:	f8cd c00c 	str.w	ip, [sp, #12]
 800ef90:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ef92:	47c0      	blx	r8
 800ef94:	f1cb 0207 	rsb	r2, fp, #7
 800ef98:	fa00 f202 	lsl.w	r2, r0, r2
 800ef9c:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800efa0:	7820      	ldrb	r0, [r4, #0]
 800efa2:	fa41 f10b 	asr.w	r1, r1, fp
 800efa6:	4001      	ands	r1, r0
 800efa8:	430a      	orrs	r2, r1
 800efaa:	7022      	strb	r2, [r4, #0]
 800efac:	f10b 0301 	add.w	r3, fp, #1
 800efb0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800efb4:	f023 0207 	bic.w	r2, r3, #7
 800efb8:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800efbc:	fa43 fb02 	asr.w	fp, r3, r2
 800efc0:	f10c 0c01 	add.w	ip, ip, #1
 800efc4:	e7dd      	b.n	800ef82 <LCD_ReadRectEx+0xaa>
 800efc6:	45bc      	cmp	ip, r7
 800efc8:	dc72      	bgt.n	800f0b0 <LCD_ReadRectEx+0x1d8>
 800efca:	4661      	mov	r1, ip
 800efcc:	462a      	mov	r2, r5
 800efce:	f8cd c00c 	str.w	ip, [sp, #12]
 800efd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800efd4:	47c0      	blx	r8
 800efd6:	ea4f 024b 	mov.w	r2, fp, lsl #1
 800efda:	f1c2 0106 	rsb	r1, r2, #6
 800efde:	fa00 f101 	lsl.w	r1, r0, r1
 800efe2:	f64f 703f 	movw	r0, #65343	; 0xff3f
 800efe6:	fa40 f202 	asr.w	r2, r0, r2
 800efea:	7820      	ldrb	r0, [r4, #0]
 800efec:	4002      	ands	r2, r0
 800efee:	4311      	orrs	r1, r2
 800eff0:	7021      	strb	r1, [r4, #0]
 800eff2:	f10b 0301 	add.w	r3, fp, #1
 800eff6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800effa:	f023 0203 	bic.w	r2, r3, #3
 800effe:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800f002:	fa43 fb02 	asr.w	fp, r3, r2
 800f006:	f10c 0c01 	add.w	ip, ip, #1
 800f00a:	e7dc      	b.n	800efc6 <LCD_ReadRectEx+0xee>
 800f00c:	45bc      	cmp	ip, r7
 800f00e:	dc4f      	bgt.n	800f0b0 <LCD_ReadRectEx+0x1d8>
 800f010:	4661      	mov	r1, ip
 800f012:	462a      	mov	r2, r5
 800f014:	f8cd c00c 	str.w	ip, [sp, #12]
 800f018:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f01a:	47c0      	blx	r8
 800f01c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800f020:	f1c2 0104 	rsb	r1, r2, #4
 800f024:	fa00 f101 	lsl.w	r1, r0, r1
 800f028:	200f      	movs	r0, #15
 800f02a:	fa00 f202 	lsl.w	r2, r0, r2
 800f02e:	7820      	ldrb	r0, [r4, #0]
 800f030:	4002      	ands	r2, r0
 800f032:	4311      	orrs	r1, r2
 800f034:	7021      	strb	r1, [r4, #0]
 800f036:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800f03a:	445c      	add	r4, fp
 800f03c:	f10c 0c01 	add.w	ip, ip, #1
 800f040:	f08b 0b01 	eor.w	fp, fp, #1
 800f044:	e7e2      	b.n	800f00c <LCD_ReadRectEx+0x134>
 800f046:	4273      	negs	r3, r6
 800f048:	1ba2      	subs	r2, r4, r6
 800f04a:	45bc      	cmp	ip, r7
 800f04c:	9305      	str	r3, [sp, #20]
 800f04e:	4462      	add	r2, ip
 800f050:	dc0e      	bgt.n	800f070 <LCD_ReadRectEx+0x198>
 800f052:	4661      	mov	r1, ip
 800f054:	462a      	mov	r2, r5
 800f056:	f8cd c00c 	str.w	ip, [sp, #12]
 800f05a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f05c:	47c0      	blx	r8
 800f05e:	9a05      	ldr	r2, [sp, #20]
 800f060:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800f064:	4422      	add	r2, r4
 800f066:	f802 000c 	strb.w	r0, [r2, ip]
 800f06a:	f10c 0c01 	add.w	ip, ip, #1
 800f06e:	e7ea      	b.n	800f046 <LCD_ReadRectEx+0x16e>
 800f070:	4614      	mov	r4, r2
 800f072:	e01d      	b.n	800f0b0 <LCD_ReadRectEx+0x1d8>
 800f074:	45bc      	cmp	ip, r7
 800f076:	dc1b      	bgt.n	800f0b0 <LCD_ReadRectEx+0x1d8>
 800f078:	4661      	mov	r1, ip
 800f07a:	f8cd c00c 	str.w	ip, [sp, #12]
 800f07e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f080:	462a      	mov	r2, r5
 800f082:	47c0      	blx	r8
 800f084:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800f088:	f824 0b02 	strh.w	r0, [r4], #2
 800f08c:	f10c 0c01 	add.w	ip, ip, #1
 800f090:	e7f0      	b.n	800f074 <LCD_ReadRectEx+0x19c>
 800f092:	45bc      	cmp	ip, r7
 800f094:	dc0c      	bgt.n	800f0b0 <LCD_ReadRectEx+0x1d8>
 800f096:	4661      	mov	r1, ip
 800f098:	f8cd c00c 	str.w	ip, [sp, #12]
 800f09c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f09e:	462a      	mov	r2, r5
 800f0a0:	47c0      	blx	r8
 800f0a2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800f0a6:	f844 0b04 	str.w	r0, [r4], #4
 800f0aa:	f10c 0c01 	add.w	ip, ip, #1
 800f0ae:	e7f0      	b.n	800f092 <LCD_ReadRectEx+0x1ba>
 800f0b0:	3501      	adds	r5, #1
 800f0b2:	e741      	b.n	800ef38 <LCD_ReadRectEx+0x60>
 800f0b4:	b007      	add	sp, #28
 800f0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ba:	bf00      	nop
 800f0bc:	200001b0 	.word	0x200001b0

0800f0c0 <GUI_ReadRectEx>:
 800f0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c2:	4d16      	ldr	r5, [pc, #88]	; (800f11c <GUI_ReadRectEx+0x5c>)
 800f0c4:	9e05      	ldr	r6, [sp, #20]
 800f0c6:	682d      	ldr	r5, [r5, #0]
 800f0c8:	9c06      	ldr	r4, [sp, #24]
 800f0ca:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800f0ce:	42b8      	cmp	r0, r7
 800f0d0:	bfb8      	it	lt
 800f0d2:	4638      	movlt	r0, r7
 800f0d4:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800f0d8:	42ba      	cmp	r2, r7
 800f0da:	bfa8      	it	ge
 800f0dc:	463a      	movge	r2, r7
 800f0de:	4282      	cmp	r2, r0
 800f0e0:	db1b      	blt.n	800f11a <GUI_ReadRectEx+0x5a>
 800f0e2:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 800f0e6:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 800f0ea:	42b9      	cmp	r1, r7
 800f0ec:	bfb8      	it	lt
 800f0ee:	4639      	movlt	r1, r7
 800f0f0:	42ab      	cmp	r3, r5
 800f0f2:	bfa8      	it	ge
 800f0f4:	462b      	movge	r3, r5
 800f0f6:	428b      	cmp	r3, r1
 800f0f8:	db0f      	blt.n	800f11a <GUI_ReadRectEx+0x5a>
 800f0fa:	68e5      	ldr	r5, [r4, #12]
 800f0fc:	682d      	ldr	r5, [r5, #0]
 800f0fe:	f035 0704 	bics.w	r7, r5, #4
 800f102:	d105      	bne.n	800f110 <GUI_ReadRectEx+0x50>
 800f104:	9605      	str	r6, [sp, #20]
 800f106:	9406      	str	r4, [sp, #24]
 800f108:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f10c:	f7ff bee4 	b.w	800eed8 <LCD_ReadRectEx>
 800f110:	6825      	ldr	r5, [r4, #0]
 800f112:	2d00      	cmp	r5, #0
 800f114:	d0f6      	beq.n	800f104 <GUI_ReadRectEx+0x44>
 800f116:	462c      	mov	r4, r5
 800f118:	e7ef      	b.n	800f0fa <GUI_ReadRectEx+0x3a>
 800f11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f11c:	200001b0 	.word	0x200001b0

0800f120 <LCD_GetNumLayers>:
 800f120:	b510      	push	{r4, lr}
 800f122:	2000      	movs	r0, #0
 800f124:	f7f9 fa92 	bl	800864c <GUI_DEVICE__GetpDriver>
 800f128:	1c04      	adds	r4, r0, #0
 800f12a:	f04f 0001 	mov.w	r0, #1
 800f12e:	bf18      	it	ne
 800f130:	2401      	movne	r4, #1
 800f132:	f7f9 fa8b 	bl	800864c <GUI_DEVICE__GetpDriver>
 800f136:	b100      	cbz	r0, 800f13a <LCD_GetNumLayers+0x1a>
 800f138:	3401      	adds	r4, #1
 800f13a:	4620      	mov	r0, r4
 800f13c:	bd10      	pop	{r4, pc}
	...

0800f140 <LCD_GetBkColorIndex>:
 800f140:	4b02      	ldr	r3, [pc, #8]	; (800f14c <LCD_GetBkColorIndex+0xc>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f146:	6818      	ldr	r0, [r3, #0]
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop
 800f14c:	200001b0 	.word	0x200001b0

0800f150 <LCD_GetColorIndex>:
 800f150:	4b02      	ldr	r3, [pc, #8]	; (800f15c <LCD_GetColorIndex+0xc>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f156:	6818      	ldr	r0, [r3, #0]
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	200001b0 	.word	0x200001b0

0800f160 <LCD_AA_SetAndMask>:
 800f160:	4b02      	ldr	r3, [pc, #8]	; (800f16c <LCD_AA_SetAndMask+0xc>)
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	6018      	str	r0, [r3, #0]
 800f166:	4610      	mov	r0, r2
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	200001cc 	.word	0x200001cc

0800f170 <GUI__ExpandPixelIndicesEx>:
 800f170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f174:	1e0c      	subs	r4, r1, #0
 800f176:	4605      	mov	r5, r0
 800f178:	f340 80b3 	ble.w	800f2e2 <GUI__ExpandPixelIndicesEx+0x172>
 800f17c:	2a08      	cmp	r2, #8
 800f17e:	685f      	ldr	r7, [r3, #4]
 800f180:	dd04      	ble.n	800f18c <GUI__ExpandPixelIndicesEx+0x1c>
 800f182:	2a10      	cmp	r2, #16
 800f184:	f340 8098 	ble.w	800f2b8 <GUI__ExpandPixelIndicesEx+0x148>
 800f188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f18c:	3a01      	subs	r2, #1
 800f18e:	2a07      	cmp	r2, #7
 800f190:	f200 80a7 	bhi.w	800f2e2 <GUI__ExpandPixelIndicesEx+0x172>
 800f194:	e8df f002 	tbb	[pc, r2]
 800f198:	58a52d04 	.word	0x58a52d04
 800f19c:	83a5a5a5 	.word	0x83a5a5a5
 800f1a0:	1e66      	subs	r6, r4, #1
 800f1a2:	10f2      	asrs	r2, r6, #3
 800f1a4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	eb05 0802 	add.w	r8, r5, r2
 800f1ae:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800f1b2:	f006 0607 	and.w	r6, r6, #7
 800f1b6:	f815 a002 	ldrb.w	sl, [r5, r2]
 800f1ba:	2580      	movs	r5, #128	; 0x80
 800f1bc:	4135      	asrs	r5, r6
 800f1be:	f108 38ff 	add.w	r8, r8, #4294967295
 800f1c2:	b2ed      	uxtb	r5, r5
 800f1c4:	f1c6 0307 	rsb	r3, r6, #7
 800f1c8:	ea0a 0005 	and.w	r0, sl, r5
 800f1cc:	4118      	asrs	r0, r3
 800f1ce:	47b8      	blx	r7
 800f1d0:	f849 0904 	str.w	r0, [r9], #-4
 800f1d4:	b936      	cbnz	r6, 800f1e4 <GUI__ExpandPixelIndicesEx+0x74>
 800f1d6:	f898 a000 	ldrb.w	sl, [r8]
 800f1da:	2501      	movs	r5, #1
 800f1dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800f1e0:	2607      	movs	r6, #7
 800f1e2:	e002      	b.n	800f1ea <GUI__ExpandPixelIndicesEx+0x7a>
 800f1e4:	006d      	lsls	r5, r5, #1
 800f1e6:	3e01      	subs	r6, #1
 800f1e8:	b2ed      	uxtb	r5, r5
 800f1ea:	3c01      	subs	r4, #1
 800f1ec:	d1ea      	bne.n	800f1c4 <GUI__ExpandPixelIndicesEx+0x54>
 800f1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1f2:	1e66      	subs	r6, r4, #1
 800f1f4:	10b2      	asrs	r2, r6, #2
 800f1f6:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	f006 0603 	and.w	r6, r6, #3
 800f200:	eb05 0802 	add.w	r8, r5, r2
 800f204:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800f208:	f815 a002 	ldrb.w	sl, [r5, r2]
 800f20c:	0073      	lsls	r3, r6, #1
 800f20e:	25c0      	movs	r5, #192	; 0xc0
 800f210:	411d      	asrs	r5, r3
 800f212:	f108 38ff 	add.w	r8, r8, #4294967295
 800f216:	b2ed      	uxtb	r5, r5
 800f218:	0073      	lsls	r3, r6, #1
 800f21a:	f1c3 0306 	rsb	r3, r3, #6
 800f21e:	ea0a 0005 	and.w	r0, sl, r5
 800f222:	4118      	asrs	r0, r3
 800f224:	47b8      	blx	r7
 800f226:	f849 0904 	str.w	r0, [r9], #-4
 800f22a:	b936      	cbnz	r6, 800f23a <GUI__ExpandPixelIndicesEx+0xca>
 800f22c:	2503      	movs	r5, #3
 800f22e:	f898 a000 	ldrb.w	sl, [r8]
 800f232:	462e      	mov	r6, r5
 800f234:	f108 38ff 	add.w	r8, r8, #4294967295
 800f238:	e002      	b.n	800f240 <GUI__ExpandPixelIndicesEx+0xd0>
 800f23a:	00ad      	lsls	r5, r5, #2
 800f23c:	3e01      	subs	r6, #1
 800f23e:	b2ed      	uxtb	r5, r5
 800f240:	3c01      	subs	r4, #1
 800f242:	d1e9      	bne.n	800f218 <GUI__ExpandPixelIndicesEx+0xa8>
 800f244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f248:	1e66      	subs	r6, r4, #1
 800f24a:	1072      	asrs	r2, r6, #1
 800f24c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800f250:	3b01      	subs	r3, #1
 800f252:	f006 0601 	and.w	r6, r6, #1
 800f256:	eb05 0802 	add.w	r8, r5, r2
 800f25a:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800f25e:	f815 a002 	ldrb.w	sl, [r5, r2]
 800f262:	00b3      	lsls	r3, r6, #2
 800f264:	25f0      	movs	r5, #240	; 0xf0
 800f266:	411d      	asrs	r5, r3
 800f268:	f108 38ff 	add.w	r8, r8, #4294967295
 800f26c:	b2ed      	uxtb	r5, r5
 800f26e:	00b3      	lsls	r3, r6, #2
 800f270:	f1c3 0304 	rsb	r3, r3, #4
 800f274:	ea0a 0005 	and.w	r0, sl, r5
 800f278:	4118      	asrs	r0, r3
 800f27a:	47b8      	blx	r7
 800f27c:	f849 0904 	str.w	r0, [r9], #-4
 800f280:	b936      	cbnz	r6, 800f290 <GUI__ExpandPixelIndicesEx+0x120>
 800f282:	f898 a000 	ldrb.w	sl, [r8]
 800f286:	250f      	movs	r5, #15
 800f288:	f108 38ff 	add.w	r8, r8, #4294967295
 800f28c:	2601      	movs	r6, #1
 800f28e:	e002      	b.n	800f296 <GUI__ExpandPixelIndicesEx+0x126>
 800f290:	012d      	lsls	r5, r5, #4
 800f292:	b2ed      	uxtb	r5, r5
 800f294:	2600      	movs	r6, #0
 800f296:	3c01      	subs	r4, #1
 800f298:	d1e9      	bne.n	800f26e <GUI__ExpandPixelIndicesEx+0xfe>
 800f29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f29e:	192e      	adds	r6, r5, r4
 800f2a0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800f2a4:	1b34      	subs	r4, r6, r4
 800f2a6:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 800f2aa:	47b8      	blx	r7
 800f2ac:	42a6      	cmp	r6, r4
 800f2ae:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f2b2:	d1f8      	bne.n	800f2a6 <GUI__ExpandPixelIndicesEx+0x136>
 800f2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b8:	695e      	ldr	r6, [r3, #20]
 800f2ba:	b12e      	cbz	r6, 800f2c8 <GUI__ExpandPixelIndicesEx+0x158>
 800f2bc:	4629      	mov	r1, r5
 800f2be:	4622      	mov	r2, r4
 800f2c0:	2302      	movs	r3, #2
 800f2c2:	47b0      	blx	r6
 800f2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c8:	0064      	lsls	r4, r4, #1
 800f2ca:	4425      	add	r5, r4
 800f2cc:	192e      	adds	r6, r5, r4
 800f2ce:	1b2c      	subs	r4, r5, r4
 800f2d0:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 800f2d4:	47b8      	blx	r7
 800f2d6:	42a5      	cmp	r5, r4
 800f2d8:	f846 0d04 	str.w	r0, [r6, #-4]!
 800f2dc:	d1f8      	bne.n	800f2d0 <GUI__ExpandPixelIndicesEx+0x160>
 800f2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f2e6 <GUI__CompactPixelIndices>:
 800f2e6:	2a08      	cmp	r2, #8
 800f2e8:	b510      	push	{r4, lr}
 800f2ea:	dd0e      	ble.n	800f30a <GUI__CompactPixelIndices+0x24>
 800f2ec:	2a10      	cmp	r2, #16
 800f2ee:	dc0a      	bgt.n	800f306 <GUI__CompactPixelIndices+0x20>
 800f2f0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f2fa:	f823 2b02 	strh.w	r2, [r3], #2
 800f2fe:	428b      	cmp	r3, r1
 800f300:	d1f9      	bne.n	800f2f6 <GUI__CompactPixelIndices+0x10>
 800f302:	2001      	movs	r0, #1
 800f304:	bd10      	pop	{r4, pc}
 800f306:	2000      	movs	r0, #0
 800f308:	bd10      	pop	{r4, pc}
 800f30a:	2a02      	cmp	r2, #2
 800f30c:	d06d      	beq.n	800f3ea <GUI__CompactPixelIndices+0x104>
 800f30e:	2a04      	cmp	r2, #4
 800f310:	d054      	beq.n	800f3bc <GUI__CompactPixelIndices+0xd6>
 800f312:	2a01      	cmp	r2, #1
 800f314:	f040 8095 	bne.w	800f442 <GUI__CompactPixelIndices+0x15c>
 800f318:	4604      	mov	r4, r0
 800f31a:	6803      	ldr	r3, [r0, #0]
 800f31c:	2901      	cmp	r1, #1
 800f31e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800f322:	b2db      	uxtb	r3, r3
 800f324:	d047      	beq.n	800f3b6 <GUI__CompactPixelIndices+0xd0>
 800f326:	6842      	ldr	r2, [r0, #4]
 800f328:	2902      	cmp	r1, #2
 800f32a:	f002 0201 	and.w	r2, r2, #1
 800f32e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800f332:	d102      	bne.n	800f33a <GUI__CompactPixelIndices+0x54>
 800f334:	f100 0208 	add.w	r2, r0, #8
 800f338:	e03e      	b.n	800f3b8 <GUI__CompactPixelIndices+0xd2>
 800f33a:	6882      	ldr	r2, [r0, #8]
 800f33c:	2903      	cmp	r1, #3
 800f33e:	f002 0201 	and.w	r2, r2, #1
 800f342:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800f346:	d102      	bne.n	800f34e <GUI__CompactPixelIndices+0x68>
 800f348:	f100 020c 	add.w	r2, r0, #12
 800f34c:	e034      	b.n	800f3b8 <GUI__CompactPixelIndices+0xd2>
 800f34e:	68c2      	ldr	r2, [r0, #12]
 800f350:	2904      	cmp	r1, #4
 800f352:	f002 0201 	and.w	r2, r2, #1
 800f356:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800f35a:	d102      	bne.n	800f362 <GUI__CompactPixelIndices+0x7c>
 800f35c:	f100 0210 	add.w	r2, r0, #16
 800f360:	e02a      	b.n	800f3b8 <GUI__CompactPixelIndices+0xd2>
 800f362:	6902      	ldr	r2, [r0, #16]
 800f364:	2905      	cmp	r1, #5
 800f366:	f002 0201 	and.w	r2, r2, #1
 800f36a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f36e:	d102      	bne.n	800f376 <GUI__CompactPixelIndices+0x90>
 800f370:	f100 0214 	add.w	r2, r0, #20
 800f374:	e020      	b.n	800f3b8 <GUI__CompactPixelIndices+0xd2>
 800f376:	6942      	ldr	r2, [r0, #20]
 800f378:	2906      	cmp	r1, #6
 800f37a:	f002 0201 	and.w	r2, r2, #1
 800f37e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800f382:	d102      	bne.n	800f38a <GUI__CompactPixelIndices+0xa4>
 800f384:	f100 0218 	add.w	r2, r0, #24
 800f388:	e016      	b.n	800f3b8 <GUI__CompactPixelIndices+0xd2>
 800f38a:	6982      	ldr	r2, [r0, #24]
 800f38c:	3907      	subs	r1, #7
 800f38e:	f002 0201 	and.w	r2, r2, #1
 800f392:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800f396:	d102      	bne.n	800f39e <GUI__CompactPixelIndices+0xb8>
 800f398:	f100 021c 	add.w	r2, r0, #28
 800f39c:	e005      	b.n	800f3aa <GUI__CompactPixelIndices+0xc4>
 800f39e:	f100 0220 	add.w	r2, r0, #32
 800f3a2:	69c0      	ldr	r0, [r0, #28]
 800f3a4:	f000 0001 	and.w	r0, r0, #1
 800f3a8:	4303      	orrs	r3, r0
 800f3aa:	f804 3b01 	strb.w	r3, [r4], #1
 800f3ae:	2900      	cmp	r1, #0
 800f3b0:	d0a7      	beq.n	800f302 <GUI__CompactPixelIndices+0x1c>
 800f3b2:	4610      	mov	r0, r2
 800f3b4:	e7b1      	b.n	800f31a <GUI__CompactPixelIndices+0x34>
 800f3b6:	1d02      	adds	r2, r0, #4
 800f3b8:	2100      	movs	r1, #0
 800f3ba:	e7f6      	b.n	800f3aa <GUI__CompactPixelIndices+0xc4>
 800f3bc:	4602      	mov	r2, r0
 800f3be:	6803      	ldr	r3, [r0, #0]
 800f3c0:	2901      	cmp	r1, #1
 800f3c2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	d102      	bne.n	800f3d0 <GUI__CompactPixelIndices+0xea>
 800f3ca:	1d04      	adds	r4, r0, #4
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	e006      	b.n	800f3de <GUI__CompactPixelIndices+0xf8>
 800f3d0:	f100 0408 	add.w	r4, r0, #8
 800f3d4:	6840      	ldr	r0, [r0, #4]
 800f3d6:	f000 000f 	and.w	r0, r0, #15
 800f3da:	4303      	orrs	r3, r0
 800f3dc:	3902      	subs	r1, #2
 800f3de:	f802 3b01 	strb.w	r3, [r2], #1
 800f3e2:	2900      	cmp	r1, #0
 800f3e4:	d08d      	beq.n	800f302 <GUI__CompactPixelIndices+0x1c>
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	e7e9      	b.n	800f3be <GUI__CompactPixelIndices+0xd8>
 800f3ea:	4604      	mov	r4, r0
 800f3ec:	6803      	ldr	r3, [r0, #0]
 800f3ee:	2901      	cmp	r1, #1
 800f3f0:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	d021      	beq.n	800f43c <GUI__CompactPixelIndices+0x156>
 800f3f8:	6842      	ldr	r2, [r0, #4]
 800f3fa:	2902      	cmp	r1, #2
 800f3fc:	f002 0203 	and.w	r2, r2, #3
 800f400:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800f404:	d102      	bne.n	800f40c <GUI__CompactPixelIndices+0x126>
 800f406:	f100 0208 	add.w	r2, r0, #8
 800f40a:	e018      	b.n	800f43e <GUI__CompactPixelIndices+0x158>
 800f40c:	6882      	ldr	r2, [r0, #8]
 800f40e:	2903      	cmp	r1, #3
 800f410:	f002 0203 	and.w	r2, r2, #3
 800f414:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800f418:	d102      	bne.n	800f420 <GUI__CompactPixelIndices+0x13a>
 800f41a:	f100 020c 	add.w	r2, r0, #12
 800f41e:	e00e      	b.n	800f43e <GUI__CompactPixelIndices+0x158>
 800f420:	f100 0210 	add.w	r2, r0, #16
 800f424:	68c0      	ldr	r0, [r0, #12]
 800f426:	f000 0003 	and.w	r0, r0, #3
 800f42a:	4303      	orrs	r3, r0
 800f42c:	3904      	subs	r1, #4
 800f42e:	f804 3b01 	strb.w	r3, [r4], #1
 800f432:	2900      	cmp	r1, #0
 800f434:	f43f af65 	beq.w	800f302 <GUI__CompactPixelIndices+0x1c>
 800f438:	4610      	mov	r0, r2
 800f43a:	e7d7      	b.n	800f3ec <GUI__CompactPixelIndices+0x106>
 800f43c:	1d02      	adds	r2, r0, #4
 800f43e:	2100      	movs	r1, #0
 800f440:	e7f5      	b.n	800f42e <GUI__CompactPixelIndices+0x148>
 800f442:	2300      	movs	r3, #0
 800f444:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800f448:	54c2      	strb	r2, [r0, r3]
 800f44a:	3301      	adds	r3, #1
 800f44c:	428b      	cmp	r3, r1
 800f44e:	d1f9      	bne.n	800f444 <GUI__CompactPixelIndices+0x15e>
 800f450:	e757      	b.n	800f302 <GUI__CompactPixelIndices+0x1c>

0800f452 <GUI__ConvertColor2Index>:
 800f452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f456:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f45a:	681e      	ldr	r6, [r3, #0]
 800f45c:	f1b8 0f00 	cmp.w	r8, #0
 800f460:	bf08      	it	eq
 800f462:	4680      	moveq	r8, r0
 800f464:	2a08      	cmp	r2, #8
 800f466:	4604      	mov	r4, r0
 800f468:	460d      	mov	r5, r1
 800f46a:	dd05      	ble.n	800f478 <GUI__ConvertColor2Index+0x26>
 800f46c:	2a10      	cmp	r2, #16
 800f46e:	f340 80b6 	ble.w	800f5de <GUI__ConvertColor2Index+0x18c>
 800f472:	2000      	movs	r0, #0
 800f474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f478:	3a01      	subs	r2, #1
 800f47a:	2a07      	cmp	r2, #7
 800f47c:	f200 80a4 	bhi.w	800f5c8 <GUI__ConvertColor2Index+0x176>
 800f480:	e8df f002 	tbb	[pc, r2]
 800f484:	87a26111 	.word	0x87a26111
 800f488:	92a2a2a2 	.word	0x92a2a2a2
 800f48c:	69e0      	ldr	r0, [r4, #28]
 800f48e:	47b0      	blx	r6
 800f490:	4338      	orrs	r0, r7
 800f492:	f104 0920 	add.w	r9, r4, #32
 800f496:	b2c7      	uxtb	r7, r0
 800f498:	3d08      	subs	r5, #8
 800f49a:	f808 7b01 	strb.w	r7, [r8], #1
 800f49e:	2d00      	cmp	r5, #0
 800f4a0:	f000 8092 	beq.w	800f5c8 <GUI__ConvertColor2Index+0x176>
 800f4a4:	464c      	mov	r4, r9
 800f4a6:	6820      	ldr	r0, [r4, #0]
 800f4a8:	47b0      	blx	r6
 800f4aa:	2d01      	cmp	r5, #1
 800f4ac:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 800f4b0:	b2c7      	uxtb	r7, r0
 800f4b2:	f000 808c 	beq.w	800f5ce <GUI__ConvertColor2Index+0x17c>
 800f4b6:	6860      	ldr	r0, [r4, #4]
 800f4b8:	47b0      	blx	r6
 800f4ba:	2d02      	cmp	r5, #2
 800f4bc:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 800f4c0:	b2c7      	uxtb	r7, r0
 800f4c2:	d102      	bne.n	800f4ca <GUI__ConvertColor2Index+0x78>
 800f4c4:	f104 0908 	add.w	r9, r4, #8
 800f4c8:	e083      	b.n	800f5d2 <GUI__ConvertColor2Index+0x180>
 800f4ca:	68a0      	ldr	r0, [r4, #8]
 800f4cc:	47b0      	blx	r6
 800f4ce:	2d03      	cmp	r5, #3
 800f4d0:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 800f4d4:	b2c7      	uxtb	r7, r0
 800f4d6:	d102      	bne.n	800f4de <GUI__ConvertColor2Index+0x8c>
 800f4d8:	f104 090c 	add.w	r9, r4, #12
 800f4dc:	e079      	b.n	800f5d2 <GUI__ConvertColor2Index+0x180>
 800f4de:	68e0      	ldr	r0, [r4, #12]
 800f4e0:	47b0      	blx	r6
 800f4e2:	2d04      	cmp	r5, #4
 800f4e4:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 800f4e8:	b2c7      	uxtb	r7, r0
 800f4ea:	d102      	bne.n	800f4f2 <GUI__ConvertColor2Index+0xa0>
 800f4ec:	f104 0910 	add.w	r9, r4, #16
 800f4f0:	e06f      	b.n	800f5d2 <GUI__ConvertColor2Index+0x180>
 800f4f2:	6920      	ldr	r0, [r4, #16]
 800f4f4:	47b0      	blx	r6
 800f4f6:	2d05      	cmp	r5, #5
 800f4f8:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 800f4fc:	b2c7      	uxtb	r7, r0
 800f4fe:	d102      	bne.n	800f506 <GUI__ConvertColor2Index+0xb4>
 800f500:	f104 0914 	add.w	r9, r4, #20
 800f504:	e065      	b.n	800f5d2 <GUI__ConvertColor2Index+0x180>
 800f506:	6960      	ldr	r0, [r4, #20]
 800f508:	47b0      	blx	r6
 800f50a:	2d06      	cmp	r5, #6
 800f50c:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 800f510:	b2c7      	uxtb	r7, r0
 800f512:	d102      	bne.n	800f51a <GUI__ConvertColor2Index+0xc8>
 800f514:	f104 0918 	add.w	r9, r4, #24
 800f518:	e05b      	b.n	800f5d2 <GUI__ConvertColor2Index+0x180>
 800f51a:	69a0      	ldr	r0, [r4, #24]
 800f51c:	47b0      	blx	r6
 800f51e:	2d07      	cmp	r5, #7
 800f520:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 800f524:	b2c7      	uxtb	r7, r0
 800f526:	d1b1      	bne.n	800f48c <GUI__ConvertColor2Index+0x3a>
 800f528:	f104 091c 	add.w	r9, r4, #28
 800f52c:	e051      	b.n	800f5d2 <GUI__ConvertColor2Index+0x180>
 800f52e:	68e0      	ldr	r0, [r4, #12]
 800f530:	47b0      	blx	r6
 800f532:	4338      	orrs	r0, r7
 800f534:	f104 0910 	add.w	r9, r4, #16
 800f538:	b2c7      	uxtb	r7, r0
 800f53a:	3d04      	subs	r5, #4
 800f53c:	f808 7b01 	strb.w	r7, [r8], #1
 800f540:	2d00      	cmp	r5, #0
 800f542:	d041      	beq.n	800f5c8 <GUI__ConvertColor2Index+0x176>
 800f544:	464c      	mov	r4, r9
 800f546:	6820      	ldr	r0, [r4, #0]
 800f548:	47b0      	blx	r6
 800f54a:	2d01      	cmp	r5, #1
 800f54c:	ea4f 1080 	mov.w	r0, r0, lsl #6
 800f550:	b2c7      	uxtb	r7, r0
 800f552:	d040      	beq.n	800f5d6 <GUI__ConvertColor2Index+0x184>
 800f554:	6860      	ldr	r0, [r4, #4]
 800f556:	47b0      	blx	r6
 800f558:	2d02      	cmp	r5, #2
 800f55a:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 800f55e:	b2c7      	uxtb	r7, r0
 800f560:	d102      	bne.n	800f568 <GUI__ConvertColor2Index+0x116>
 800f562:	f104 0908 	add.w	r9, r4, #8
 800f566:	e038      	b.n	800f5da <GUI__ConvertColor2Index+0x188>
 800f568:	68a0      	ldr	r0, [r4, #8]
 800f56a:	47b0      	blx	r6
 800f56c:	2d03      	cmp	r5, #3
 800f56e:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 800f572:	b2c7      	uxtb	r7, r0
 800f574:	d1db      	bne.n	800f52e <GUI__ConvertColor2Index+0xdc>
 800f576:	f104 090c 	add.w	r9, r4, #12
 800f57a:	e02e      	b.n	800f5da <GUI__ConvertColor2Index+0x188>
 800f57c:	6860      	ldr	r0, [r4, #4]
 800f57e:	47b0      	blx	r6
 800f580:	4338      	orrs	r0, r7
 800f582:	f104 0908 	add.w	r9, r4, #8
 800f586:	b2c7      	uxtb	r7, r0
 800f588:	3d02      	subs	r5, #2
 800f58a:	f808 7b01 	strb.w	r7, [r8], #1
 800f58e:	b1dd      	cbz	r5, 800f5c8 <GUI__ConvertColor2Index+0x176>
 800f590:	464c      	mov	r4, r9
 800f592:	6820      	ldr	r0, [r4, #0]
 800f594:	47b0      	blx	r6
 800f596:	2d01      	cmp	r5, #1
 800f598:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800f59c:	b2c7      	uxtb	r7, r0
 800f59e:	d1ed      	bne.n	800f57c <GUI__ConvertColor2Index+0x12a>
 800f5a0:	f104 0904 	add.w	r9, r4, #4
 800f5a4:	2500      	movs	r5, #0
 800f5a6:	e7f0      	b.n	800f58a <GUI__ConvertColor2Index+0x138>
 800f5a8:	691f      	ldr	r7, [r3, #16]
 800f5aa:	b12f      	cbz	r7, 800f5b8 <GUI__ConvertColor2Index+0x166>
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	4641      	mov	r1, r8
 800f5b0:	462a      	mov	r2, r5
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	47b8      	blx	r7
 800f5b6:	e007      	b.n	800f5c8 <GUI__ConvertColor2Index+0x176>
 800f5b8:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 800f5bc:	47b0      	blx	r6
 800f5be:	f808 0007 	strb.w	r0, [r8, r7]
 800f5c2:	3701      	adds	r7, #1
 800f5c4:	42bd      	cmp	r5, r7
 800f5c6:	d1f7      	bne.n	800f5b8 <GUI__ConvertColor2Index+0x166>
 800f5c8:	2001      	movs	r0, #1
 800f5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ce:	f104 0904 	add.w	r9, r4, #4
 800f5d2:	2500      	movs	r5, #0
 800f5d4:	e761      	b.n	800f49a <GUI__ConvertColor2Index+0x48>
 800f5d6:	f104 0904 	add.w	r9, r4, #4
 800f5da:	2500      	movs	r5, #0
 800f5dc:	e7ae      	b.n	800f53c <GUI__ConvertColor2Index+0xea>
 800f5de:	691f      	ldr	r7, [r3, #16]
 800f5e0:	b11f      	cbz	r7, 800f5ea <GUI__ConvertColor2Index+0x198>
 800f5e2:	4641      	mov	r1, r8
 800f5e4:	462a      	mov	r2, r5
 800f5e6:	2302      	movs	r3, #2
 800f5e8:	e7e4      	b.n	800f5b4 <GUI__ConvertColor2Index+0x162>
 800f5ea:	f854 0b04 	ldr.w	r0, [r4], #4
 800f5ee:	47b0      	blx	r6
 800f5f0:	3d01      	subs	r5, #1
 800f5f2:	f828 0b02 	strh.w	r0, [r8], #2
 800f5f6:	d1f8      	bne.n	800f5ea <GUI__ConvertColor2Index+0x198>
 800f5f8:	e7e6      	b.n	800f5c8 <GUI__ConvertColor2Index+0x176>

0800f5fa <GUI__CompactPixelIndicesEx>:
 800f5fa:	b513      	push	{r0, r1, r4, lr}
 800f5fc:	2400      	movs	r4, #0
 800f5fe:	9400      	str	r4, [sp, #0]
 800f600:	f7ff ff27 	bl	800f452 <GUI__ConvertColor2Index>
 800f604:	b002      	add	sp, #8
 800f606:	bd10      	pop	{r4, pc}

0800f608 <GUI_SetTextMode>:
 800f608:	4b03      	ldr	r3, [pc, #12]	; (800f618 <GUI_SetTextMode+0x10>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800f610:	8558      	strh	r0, [r3, #42]	; 0x2a
 800f612:	4610      	mov	r0, r2
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop
 800f618:	200001b0 	.word	0x200001b0

0800f61c <GUI_SetTextAlign>:
 800f61c:	4b03      	ldr	r3, [pc, #12]	; (800f62c <GUI_SetTextAlign+0x10>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800f624:	8598      	strh	r0, [r3, #44]	; 0x2c
 800f626:	4610      	mov	r0, r2
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	200001b0 	.word	0x200001b0

0800f630 <GUI_SetLineStyle>:
 800f630:	4b02      	ldr	r3, [pc, #8]	; (800f63c <GUI_SetLineStyle+0xc>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	7e9a      	ldrb	r2, [r3, #26]
 800f636:	7698      	strb	r0, [r3, #26]
 800f638:	4610      	mov	r0, r2
 800f63a:	4770      	bx	lr
 800f63c:	200001b0 	.word	0x200001b0

0800f640 <_CreateBuffer>:
 800f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f642:	6943      	ldr	r3, [r0, #20]
 800f644:	4605      	mov	r5, r0
 800f646:	8818      	ldrh	r0, [r3, #0]
 800f648:	300d      	adds	r0, #13
 800f64a:	0080      	lsls	r0, r0, #2
 800f64c:	460e      	mov	r6, r1
 800f64e:	f7f9 ff9f 	bl	8009590 <GUI_ALLOC_AllocNoInit>
 800f652:	4607      	mov	r7, r0
 800f654:	b908      	cbnz	r0, 800f65a <_CreateBuffer+0x1a>
 800f656:	2000      	movs	r0, #0
 800f658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f65a:	f7f9 fd51 	bl	8009100 <GUI_ALLOC_LockH>
 800f65e:	682b      	ldr	r3, [r5, #0]
 800f660:	4604      	mov	r4, r0
 800f662:	6998      	ldr	r0, [r3, #24]
 800f664:	f7f8 fff2 	bl	800864c <GUI_DEVICE__GetpDriver>
 800f668:	2800      	cmp	r0, #0
 800f66a:	d0f4      	beq.n	800f656 <_CreateBuffer+0x16>
 800f66c:	68c3      	ldr	r3, [r0, #12]
 800f66e:	2108      	movs	r1, #8
 800f670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f672:	4798      	blx	r3
 800f674:	2802      	cmp	r0, #2
 800f676:	dd0b      	ble.n	800f690 <_CreateBuffer+0x50>
 800f678:	2804      	cmp	r0, #4
 800f67a:	dd06      	ble.n	800f68a <_CreateBuffer+0x4a>
 800f67c:	2808      	cmp	r0, #8
 800f67e:	dd06      	ble.n	800f68e <_CreateBuffer+0x4e>
 800f680:	2811      	cmp	r0, #17
 800f682:	bfb4      	ite	lt
 800f684:	2010      	movlt	r0, #16
 800f686:	2020      	movge	r0, #32
 800f688:	e002      	b.n	800f690 <_CreateBuffer+0x50>
 800f68a:	2004      	movs	r0, #4
 800f68c:	e000      	b.n	800f690 <_CreateBuffer+0x50>
 800f68e:	2008      	movs	r0, #8
 800f690:	2808      	cmp	r0, #8
 800f692:	61a0      	str	r0, [r4, #24]
 800f694:	dd04      	ble.n	800f6a0 <_CreateBuffer+0x60>
 800f696:	2810      	cmp	r0, #16
 800f698:	bfcc      	ite	gt
 800f69a:	2304      	movgt	r3, #4
 800f69c:	2302      	movle	r3, #2
 800f69e:	e000      	b.n	800f6a2 <_CreateBuffer+0x62>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	696a      	ldr	r2, [r5, #20]
 800f6a4:	6123      	str	r3, [r4, #16]
 800f6a6:	8812      	ldrh	r2, [r2, #0]
 800f6a8:	61e2      	str	r2, [r4, #28]
 800f6aa:	4353      	muls	r3, r2
 800f6ac:	6163      	str	r3, [r4, #20]
 800f6ae:	f7f9 fec5 	bl	800943c <GUI_ALLOC_GetMaxSize>
 800f6b2:	6963      	ldr	r3, [r4, #20]
 800f6b4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 800f6b8:	4283      	cmp	r3, r0
 800f6ba:	f04f 0200 	mov.w	r2, #0
 800f6be:	bfc8      	it	gt
 800f6c0:	6160      	strgt	r0, [r4, #20]
 800f6c2:	2e01      	cmp	r6, #1
 800f6c4:	60e2      	str	r2, [r4, #12]
 800f6c6:	bf18      	it	ne
 800f6c8:	69e2      	ldrne	r2, [r4, #28]
 800f6ca:	60a7      	str	r7, [r4, #8]
 800f6cc:	bf18      	it	ne
 800f6ce:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 800f6d2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f6d6:	bf18      	it	ne
 800f6d8:	f102 32ff 	addne.w	r2, r2, #4294967295
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	bf18      	it	ne
 800f6e0:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 800f6e4:	6063      	str	r3, [r4, #4]
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6ea <_GetBkIndex.isra.0>:
 800f6ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6ee:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 800f6f2:	4540      	cmp	r0, r8
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	460d      	mov	r5, r1
 800f6f8:	4691      	mov	r9, r2
 800f6fa:	461c      	mov	r4, r3
 800f6fc:	da04      	bge.n	800f708 <_GetBkIndex.isra.0+0x1e>
 800f6fe:	f8d9 0000 	ldr.w	r0, [r9]
 800f702:	bb28      	cbnz	r0, 800f750 <_GetBkIndex.isra.0+0x66>
 800f704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f708:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f70c:	4298      	cmp	r0, r3
 800f70e:	dcf6      	bgt.n	800f6fe <_GetBkIndex.isra.0+0x14>
 800f710:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 800f714:	42b9      	cmp	r1, r7
 800f716:	dbf2      	blt.n	800f6fe <_GetBkIndex.isra.0+0x14>
 800f718:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800f71c:	4299      	cmp	r1, r3
 800f71e:	dcee      	bgt.n	800f6fe <_GetBkIndex.isra.0+0x14>
 800f720:	ebc8 0800 	rsb	r8, r8, r0
 800f724:	1bcf      	subs	r7, r1, r7
 800f726:	6960      	ldr	r0, [r4, #20]
 800f728:	4641      	mov	r1, r8
 800f72a:	463a      	mov	r2, r7
 800f72c:	f000 fba4 	bl	800fe78 <GUI_GetBitmapPixelIndex>
 800f730:	2800      	cmp	r0, #0
 800f732:	d0e4      	beq.n	800f6fe <_GetBkIndex.isra.0+0x14>
 800f734:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800f738:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f73c:	1a8a      	subs	r2, r1, r2
 800f73e:	fb02 7707 	mla	r7, r2, r7, r7
 800f742:	f104 0320 	add.w	r3, r4, #32
 800f746:	44b8      	add	r8, r7
 800f748:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f750:	68c3      	ldr	r3, [r0, #12]
 800f752:	4631      	mov	r1, r6
 800f754:	695b      	ldr	r3, [r3, #20]
 800f756:	462a      	mov	r2, r5
 800f758:	4798      	blx	r3
 800f75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f75e <_GetBkIndexAlpha.isra.2>:
 800f75e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f762:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 800f766:	42b0      	cmp	r0, r6
 800f768:	4680      	mov	r8, r0
 800f76a:	460f      	mov	r7, r1
 800f76c:	4691      	mov	r9, r2
 800f76e:	461d      	mov	r5, r3
 800f770:	db14      	blt.n	800f79c <_GetBkIndexAlpha.isra.2+0x3e>
 800f772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f776:	4298      	cmp	r0, r3
 800f778:	dc10      	bgt.n	800f79c <_GetBkIndexAlpha.isra.2+0x3e>
 800f77a:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 800f77e:	42a1      	cmp	r1, r4
 800f780:	db0c      	blt.n	800f79c <_GetBkIndexAlpha.isra.2+0x3e>
 800f782:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 800f786:	4299      	cmp	r1, r3
 800f788:	dc08      	bgt.n	800f79c <_GetBkIndexAlpha.isra.2+0x3e>
 800f78a:	1b86      	subs	r6, r0, r6
 800f78c:	6968      	ldr	r0, [r5, #20]
 800f78e:	1b0c      	subs	r4, r1, r4
 800f790:	b130      	cbz	r0, 800f7a0 <_GetBkIndexAlpha.isra.2+0x42>
 800f792:	4631      	mov	r1, r6
 800f794:	4622      	mov	r2, r4
 800f796:	f000 fb6f 	bl	800fe78 <GUI_GetBitmapPixelIndex>
 800f79a:	e003      	b.n	800f7a4 <_GetBkIndexAlpha.isra.2+0x46>
 800f79c:	2400      	movs	r4, #0
 800f79e:	4626      	mov	r6, r4
 800f7a0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800f7a4:	0e00      	lsrs	r0, r0, #24
 800f7a6:	28ff      	cmp	r0, #255	; 0xff
 800f7a8:	d109      	bne.n	800f7be <_GetBkIndexAlpha.isra.2+0x60>
 800f7aa:	f8d9 0000 	ldr.w	r0, [r9]
 800f7ae:	b190      	cbz	r0, 800f7d6 <_GetBkIndexAlpha.isra.2+0x78>
 800f7b0:	68c3      	ldr	r3, [r0, #12]
 800f7b2:	4641      	mov	r1, r8
 800f7b4:	695b      	ldr	r3, [r3, #20]
 800f7b6:	463a      	mov	r2, r7
 800f7b8:	4798      	blx	r3
 800f7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7be:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f7c2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800f7c6:	1a8a      	subs	r2, r1, r2
 800f7c8:	fb02 4404 	mla	r4, r2, r4, r4
 800f7cc:	f105 0320 	add.w	r3, r5, #32
 800f7d0:	4426      	add	r6, r4
 800f7d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800f7dc <_GetDeviceRect>:
 800f7dc:	b538      	push	{r3, r4, r5, lr}
 800f7de:	4a0c      	ldr	r2, [pc, #48]	; (800f810 <_GetDeviceRect+0x34>)
 800f7e0:	6983      	ldr	r3, [r0, #24]
 800f7e2:	56d2      	ldrsb	r2, [r2, r3]
 800f7e4:	2a01      	cmp	r2, #1
 800f7e6:	4605      	mov	r5, r0
 800f7e8:	460c      	mov	r4, r1
 800f7ea:	dd0d      	ble.n	800f808 <_GetDeviceRect+0x2c>
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	804a      	strh	r2, [r1, #2]
 800f7f0:	800a      	strh	r2, [r1, #0]
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fd f9ca 	bl	800cb8c <LCD_GetXSizeEx>
 800f7f8:	3801      	subs	r0, #1
 800f7fa:	80a0      	strh	r0, [r4, #4]
 800f7fc:	69a8      	ldr	r0, [r5, #24]
 800f7fe:	f7fd f9c8 	bl	800cb92 <LCD_GetYSizeEx>
 800f802:	3801      	subs	r0, #1
 800f804:	80e0      	strh	r0, [r4, #6]
 800f806:	bd38      	pop	{r3, r4, r5, pc}
 800f808:	68c3      	ldr	r3, [r0, #12]
 800f80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f80c:	4798      	blx	r3
 800f80e:	bd38      	pop	{r3, r4, r5, pc}
 800f810:	2001aee8 	.word	0x2001aee8

0800f814 <_FlushBuffer.isra.5>:
 800f814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f816:	460c      	mov	r4, r1
 800f818:	68c9      	ldr	r1, [r1, #12]
 800f81a:	b087      	sub	sp, #28
 800f81c:	2900      	cmp	r1, #0
 800f81e:	d030      	beq.n	800f882 <_FlushBuffer.isra.5+0x6e>
 800f820:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800f824:	6822      	ldr	r2, [r4, #0]
 800f826:	2b01      	cmp	r3, #1
 800f828:	d103      	bne.n	800f832 <_FlushBuffer.isra.5+0x1e>
 800f82a:	4615      	mov	r5, r2
 800f82c:	6062      	str	r2, [r4, #4]
 800f82e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f830:	e009      	b.n	800f846 <_FlushBuffer.isra.5+0x32>
 800f832:	69e3      	ldr	r3, [r4, #28]
 800f834:	6865      	ldr	r5, [r4, #4]
 800f836:	6a27      	ldr	r7, [r4, #32]
 800f838:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f83c:	3b01      	subs	r3, #1
 800f83e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f842:	3504      	adds	r5, #4
 800f844:	6063      	str	r3, [r4, #4]
 800f846:	6806      	ldr	r6, [r0, #0]
 800f848:	b1b6      	cbz	r6, 800f878 <_FlushBuffer.isra.5+0x64>
 800f84a:	69a2      	ldr	r2, [r4, #24]
 800f84c:	4628      	mov	r0, r5
 800f84e:	f7ff fd4a 	bl	800f2e6 <GUI__CompactPixelIndices>
 800f852:	2301      	movs	r3, #1
 800f854:	68f2      	ldr	r2, [r6, #12]
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	69a3      	ldr	r3, [r4, #24]
 800f85a:	9301      	str	r3, [sp, #4]
 800f85c:	9503      	str	r5, [sp, #12]
 800f85e:	6963      	ldr	r3, [r4, #20]
 800f860:	9302      	str	r3, [sp, #8]
 800f862:	2500      	movs	r5, #0
 800f864:	9504      	str	r5, [sp, #16]
 800f866:	9505      	str	r5, [sp, #20]
 800f868:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800f86c:	68e3      	ldr	r3, [r4, #12]
 800f86e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f870:	4630      	mov	r0, r6
 800f872:	4639      	mov	r1, r7
 800f874:	47e0      	blx	ip
 800f876:	e000      	b.n	800f87a <_FlushBuffer.isra.5+0x66>
 800f878:	2501      	movs	r5, #1
 800f87a:	2300      	movs	r3, #0
 800f87c:	60e3      	str	r3, [r4, #12]
 800f87e:	b2e8      	uxtb	r0, r5
 800f880:	e000      	b.n	800f884 <_FlushBuffer.isra.5+0x70>
 800f882:	4608      	mov	r0, r1
 800f884:	b007      	add	sp, #28
 800f886:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f888 <_SetBkIndexBuffered>:
 800f888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88a:	9c06      	ldr	r4, [sp, #24]
 800f88c:	460d      	mov	r5, r1
 800f88e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f890:	428d      	cmp	r5, r1
 800f892:	4606      	mov	r6, r0
 800f894:	4617      	mov	r7, r2
 800f896:	d105      	bne.n	800f8a4 <_SetBkIndexBuffered+0x1c>
 800f898:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 800f89c:	6a21      	ldr	r1, [r4, #32]
 800f89e:	4411      	add	r1, r2
 800f8a0:	4288      	cmp	r0, r1
 800f8a2:	d003      	beq.n	800f8ac <_SetBkIndexBuffered+0x24>
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	4621      	mov	r1, r4
 800f8a8:	f7ff ffb4 	bl	800f814 <_FlushBuffer.isra.5>
 800f8ac:	6863      	ldr	r3, [r4, #4]
 800f8ae:	601f      	str	r7, [r3, #0]
 800f8b0:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 800f8b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f8b8:	6063      	str	r3, [r4, #4]
 800f8ba:	68e3      	ldr	r3, [r4, #12]
 800f8bc:	b90b      	cbnz	r3, 800f8c2 <_SetBkIndexBuffered+0x3a>
 800f8be:	62a6      	str	r6, [r4, #40]	; 0x28
 800f8c0:	62e5      	str	r5, [r4, #44]	; 0x2c
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	60e3      	str	r3, [r4, #12]
 800f8c6:	6226      	str	r6, [r4, #32]
 800f8c8:	6265      	str	r5, [r4, #36]	; 0x24
 800f8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f8cc <_ReleaseBuffer.isra.6>:
 800f8cc:	b513      	push	{r0, r1, r4, lr}
 800f8ce:	9101      	str	r1, [sp, #4]
 800f8d0:	f7ff ffa0 	bl	800f814 <_FlushBuffer.isra.5>
 800f8d4:	a802      	add	r0, sp, #8
 800f8d6:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 800f8da:	6894      	ldr	r4, [r2, #8]
 800f8dc:	f7f9 fc1e 	bl	800911c <GUI_ALLOC_UnlockH>
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f7f9 fc3b 	bl	800915c <GUI_ALLOC_Free>
 800f8e6:	b002      	add	sp, #8
 800f8e8:	bd10      	pop	{r4, pc}
	...

0800f8ec <GUI_SPRITE_SetPosition>:
 800f8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f0:	b0a7      	sub	sp, #156	; 0x9c
 800f8f2:	9116      	str	r1, [sp, #88]	; 0x58
 800f8f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	f000 8275 	beq.w	800fde6 <GUI_SPRITE_SetPosition+0x4fa>
 800f8fc:	f7f9 fc00 	bl	8009100 <GUI_ALLOC_LockH>
 800f900:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f902:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f906:	6801      	ldr	r1, [r0, #0]
 800f908:	9023      	str	r0, [sp, #140]	; 0x8c
 800f90a:	429a      	cmp	r2, r3
 800f90c:	9106      	str	r1, [sp, #24]
 800f90e:	d106      	bne.n	800f91e <GUI_SPRITE_SetPosition+0x32>
 800f910:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800f914:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800f918:	459e      	cmp	lr, r3
 800f91a:	f000 8239 	beq.w	800fd90 <GUI_SPRITE_SetPosition+0x4a4>
 800f91e:	2000      	movs	r0, #0
 800f920:	f7fd f86c 	bl	800c9fc <GUI_MEMDEV_Select>
 800f924:	4ba0      	ldr	r3, [pc, #640]	; (800fba8 <GUI_SPRITE_SetPosition+0x2bc>)
 800f926:	9906      	ldr	r1, [sp, #24]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	6989      	ldr	r1, [r1, #24]
 800f92c:	7c5a      	ldrb	r2, [r3, #17]
 800f92e:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800f930:	9108      	str	r1, [sp, #32]
 800f932:	4291      	cmp	r1, r2
 800f934:	bf18      	it	ne
 800f936:	7459      	strbne	r1, [r3, #17]
 800f938:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f93c:	9310      	str	r3, [sp, #64]	; 0x40
 800f93e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800f942:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800f946:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 800f94a:	921a      	str	r2, [sp, #104]	; 0x68
 800f94c:	ebce 0303 	rsb	r3, lr, r3
 800f950:	1c59      	adds	r1, r3, #1
 800f952:	9307      	str	r3, [sp, #28]
 800f954:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 800f958:	901f      	str	r0, [sp, #124]	; 0x7c
 800f95a:	1b9b      	subs	r3, r3, r6
 800f95c:	1c5a      	adds	r2, r3, #1
 800f95e:	930e      	str	r3, [sp, #56]	; 0x38
 800f960:	8a2b      	ldrh	r3, [r5, #16]
 800f962:	910d      	str	r1, [sp, #52]	; 0x34
 800f964:	079b      	lsls	r3, r3, #30
 800f966:	921e      	str	r2, [sp, #120]	; 0x78
 800f968:	f140 81f7 	bpl.w	800fd5a <GUI_SPRITE_SetPosition+0x46e>
 800f96c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f96e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f970:	696b      	ldr	r3, [r5, #20]
 800f972:	9311      	str	r3, [sp, #68]	; 0x44
 800f974:	ebce 0a01 	rsb	sl, lr, r1
 800f978:	f1ba 0f00 	cmp.w	sl, #0
 800f97c:	ebc6 0902 	rsb	r9, r6, r2
 800f980:	dc0c      	bgt.n	800f99c <GUI_SPRITE_SetPosition+0xb0>
 800f982:	9b07      	ldr	r3, [sp, #28]
 800f984:	930a      	str	r3, [sp, #40]	; 0x28
 800f986:	469e      	mov	lr, r3
 800f988:	f04f 32ff 	mov.w	r2, #4294967295
 800f98c:	44d6      	add	lr, sl
 800f98e:	2100      	movs	r1, #0
 800f990:	f8cd e01c 	str.w	lr, [sp, #28]
 800f994:	911c      	str	r1, [sp, #112]	; 0x70
 800f996:	9214      	str	r2, [sp, #80]	; 0x50
 800f998:	9204      	str	r2, [sp, #16]
 800f99a:	e009      	b.n	800f9b0 <GUI_SPRITE_SetPosition+0xc4>
 800f99c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f99e:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 800f9a2:	f04f 0e01 	mov.w	lr, #1
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	9314      	str	r3, [sp, #80]	; 0x50
 800f9aa:	f8cd e010 	str.w	lr, [sp, #16]
 800f9ae:	910a      	str	r1, [sp, #40]	; 0x28
 800f9b0:	f1b9 0f00 	cmp.w	r9, #0
 800f9b4:	dc0c      	bgt.n	800f9d0 <GUI_SPRITE_SetPosition+0xe4>
 800f9b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f9b8:	4622      	mov	r2, r4
 800f9ba:	f04f 3eff 	mov.w	lr, #4294967295
 800f9be:	444a      	add	r2, r9
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	920e      	str	r2, [sp, #56]	; 0x38
 800f9c4:	931b      	str	r3, [sp, #108]	; 0x6c
 800f9c6:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 800f9ca:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800f9ce:	e006      	b.n	800f9de <GUI_SPRITE_SetPosition+0xf2>
 800f9d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f9d2:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	9215      	str	r2, [sp, #84]	; 0x54
 800f9da:	9309      	str	r3, [sp, #36]	; 0x24
 800f9dc:	2400      	movs	r4, #0
 800f9de:	9806      	ldr	r0, [sp, #24]
 800f9e0:	a924      	add	r1, sp, #144	; 0x90
 800f9e2:	f7ff fefb 	bl	800f7dc <_GetDeviceRect>
 800f9e6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800f9e8:	9904      	ldr	r1, [sp, #16]
 800f9ea:	f7ff fe29 	bl	800f640 <_CreateBuffer>
 800f9ee:	9012      	str	r0, [sp, #72]	; 0x48
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	f000 81b2 	beq.w	800fd5a <GUI_SPRITE_SetPosition+0x46e>
 800f9f6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800f9f8:	9904      	ldr	r1, [sp, #16]
 800f9fa:	f7ff fe21 	bl	800f640 <_CreateBuffer>
 800f9fe:	9013      	str	r0, [sp, #76]	; 0x4c
 800fa00:	2800      	cmp	r0, #0
 800fa02:	f000 81a5 	beq.w	800fd50 <GUI_SPRITE_SetPosition+0x464>
 800fa06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fa08:	68d8      	ldr	r0, [r3, #12]
 800fa0a:	4426      	add	r6, r4
 800fa0c:	b990      	cbnz	r0, 800fa34 <GUI_SPRITE_SetPosition+0x148>
 800fa0e:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 800fa12:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa16:	9019      	str	r0, [sp, #100]	; 0x64
 800fa18:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800fa1c:	434b      	muls	r3, r1
 800fa1e:	9321      	str	r3, [sp, #132]	; 0x84
 800fa20:	fb0e 2304 	mla	r3, lr, r4, r2
 800fa24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fa28:	930c      	str	r3, [sp, #48]	; 0x30
 800fa2a:	9b04      	ldr	r3, [sp, #16]
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	444e      	add	r6, r9
 800fa30:	9320      	str	r3, [sp, #128]	; 0x80
 800fa32:	e0db      	b.n	800fbec <GUI_SPRITE_SetPosition+0x300>
 800fa34:	f7f9 fb64 	bl	8009100 <GUI_ALLOC_LockH>
 800fa38:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 800fa3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa40:	9022      	str	r0, [sp, #136]	; 0x88
 800fa42:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800fa46:	434b      	muls	r3, r1
 800fa48:	9319      	str	r3, [sp, #100]	; 0x64
 800fa4a:	fb0e 2304 	mla	r3, lr, r4, r2
 800fa4e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fa52:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa54:	9b04      	ldr	r3, [sp, #16]
 800fa56:	009b      	lsls	r3, r3, #2
 800fa58:	444e      	add	r6, r9
 800fa5a:	931d      	str	r3, [sp, #116]	; 0x74
 800fa5c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fa5e:	428c      	cmp	r4, r1
 800fa60:	f000 809e 	beq.w	800fba0 <GUI_SPRITE_SetPosition+0x2b4>
 800fa64:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800fa68:	4574      	cmp	r4, lr
 800fa6a:	db05      	blt.n	800fa78 <GUI_SPRITE_SetPosition+0x18c>
 800fa6c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fa6e:	428c      	cmp	r4, r1
 800fa70:	bfcc      	ite	gt
 800fa72:	2300      	movgt	r3, #0
 800fa74:	2301      	movle	r3, #1
 800fa76:	e000      	b.n	800fa7a <GUI_SPRITE_SetPosition+0x18e>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	9318      	str	r3, [sp, #96]	; 0x60
 800fa7e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800fa80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa84:	9105      	str	r1, [sp, #20]
 800fa86:	ebc9 0206 	rsb	r2, r9, r6
 800fa8a:	441f      	add	r7, r3
 800fa8c:	920c      	str	r2, [sp, #48]	; 0x30
 800fa8e:	4457      	add	r7, sl
 800fa90:	461d      	mov	r5, r3
 800fa92:	9914      	ldr	r1, [sp, #80]	; 0x50
 800fa94:	428d      	cmp	r5, r1
 800fa96:	d07a      	beq.n	800fb8e <GUI_SPRITE_SetPosition+0x2a2>
 800fa98:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	4622      	mov	r2, r4
 800fa9e:	f000 f9eb 	bl	800fe78 <GUI_GetBitmapPixelIndex>
 800faa2:	900f      	str	r0, [sp, #60]	; 0x3c
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d069      	beq.n	800fb7c <GUI_SPRITE_SetPosition+0x290>
 800faa8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800faaa:	4295      	cmp	r5, r2
 800faac:	ebca 0c07 	rsb	ip, sl, r7
 800fab0:	db07      	blt.n	800fac2 <GUI_SPRITE_SetPosition+0x1d6>
 800fab2:	9b07      	ldr	r3, [sp, #28]
 800fab4:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 800fab8:	429d      	cmp	r5, r3
 800faba:	bfc8      	it	gt
 800fabc:	f04f 0b00 	movgt.w	fp, #0
 800fac0:	e001      	b.n	800fac6 <GUI_SPRITE_SetPosition+0x1da>
 800fac2:	f04f 0b00 	mov.w	fp, #0
 800fac6:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800faca:	429f      	cmp	r7, r3
 800facc:	fa5f fb8b 	uxtb.w	fp, fp
 800fad0:	db17      	blt.n	800fb02 <GUI_SPRITE_SetPosition+0x216>
 800fad2:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800fad6:	429e      	cmp	r6, r3
 800fad8:	db13      	blt.n	800fb02 <GUI_SPRITE_SetPosition+0x216>
 800fada:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800fade:	429f      	cmp	r7, r3
 800fae0:	dc0f      	bgt.n	800fb02 <GUI_SPRITE_SetPosition+0x216>
 800fae2:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800fae6:	429e      	cmp	r6, r3
 800fae8:	dc0b      	bgt.n	800fb02 <GUI_SPRITE_SetPosition+0x216>
 800faea:	4638      	mov	r0, r7
 800faec:	4631      	mov	r1, r6
 800faee:	9a06      	ldr	r2, [sp, #24]
 800faf0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800faf2:	f8cd c00c 	str.w	ip, [sp, #12]
 800faf6:	f7ff fdf8 	bl	800f6ea <_GetBkIndex.isra.0>
 800fafa:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fafe:	4680      	mov	r8, r0
 800fb00:	e001      	b.n	800fb06 <GUI_SPRITE_SetPosition+0x21a>
 800fb02:	f04f 0800 	mov.w	r8, #0
 800fb06:	f1bb 0f00 	cmp.w	fp, #0
 800fb0a:	d00d      	beq.n	800fb28 <GUI_SPRITE_SetPosition+0x23c>
 800fb0c:	ebb5 010a 	subs.w	r1, r5, sl
 800fb10:	d415      	bmi.n	800fb3e <GUI_SPRITE_SetPosition+0x252>
 800fb12:	ebb4 0209 	subs.w	r2, r4, r9
 800fb16:	d412      	bmi.n	800fb3e <GUI_SPRITE_SetPosition+0x252>
 800fb18:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fb1a:	f8cd c00c 	str.w	ip, [sp, #12]
 800fb1e:	f000 f9ab 	bl	800fe78 <GUI_GetBitmapPixelIndex>
 800fb22:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fb26:	b950      	cbnz	r0, 800fb3e <GUI_SPRITE_SetPosition+0x252>
 800fb28:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800fb2c:	459c      	cmp	ip, r3
 800fb2e:	db06      	blt.n	800fb3e <GUI_SPRITE_SetPosition+0x252>
 800fb30:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800fb34:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800fb38:	459e      	cmp	lr, r3
 800fb3a:	f280 812d 	bge.w	800fd98 <GUI_SPRITE_SetPosition+0x4ac>
 800fb3e:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800fb42:	429f      	cmp	r7, r3
 800fb44:	db17      	blt.n	800fb76 <GUI_SPRITE_SetPosition+0x28a>
 800fb46:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800fb4a:	429e      	cmp	r6, r3
 800fb4c:	db13      	blt.n	800fb76 <GUI_SPRITE_SetPosition+0x28a>
 800fb4e:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800fb52:	429f      	cmp	r7, r3
 800fb54:	dc0f      	bgt.n	800fb76 <GUI_SPRITE_SetPosition+0x28a>
 800fb56:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800fb5a:	429e      	cmp	r6, r3
 800fb5c:	dc0b      	bgt.n	800fb76 <GUI_SPRITE_SetPosition+0x28a>
 800fb5e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fb60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb62:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 800fb66:	9100      	str	r1, [sp, #0]
 800fb68:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 800fb6c:	9b06      	ldr	r3, [sp, #24]
 800fb6e:	4638      	mov	r0, r7
 800fb70:	4631      	mov	r1, r6
 800fb72:	f7ff fe89 	bl	800f888 <_SetBkIndexBuffered>
 800fb76:	9905      	ldr	r1, [sp, #20]
 800fb78:	f8c1 8020 	str.w	r8, [r1, #32]
 800fb7c:	9b05      	ldr	r3, [sp, #20]
 800fb7e:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 800fb82:	9a04      	ldr	r2, [sp, #16]
 800fb84:	4473      	add	r3, lr
 800fb86:	4415      	add	r5, r2
 800fb88:	9305      	str	r3, [sp, #20]
 800fb8a:	4417      	add	r7, r2
 800fb8c:	e781      	b.n	800fa92 <GUI_SPRITE_SetPosition+0x1a6>
 800fb8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb90:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 800fb94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb96:	4473      	add	r3, lr
 800fb98:	4414      	add	r4, r2
 800fb9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb9c:	4416      	add	r6, r2
 800fb9e:	e75d      	b.n	800fa5c <GUI_SPRITE_SetPosition+0x170>
 800fba0:	a822      	add	r0, sp, #136	; 0x88
 800fba2:	f7f9 fabb 	bl	800911c <GUI_ALLOC_UnlockH>
 800fba6:	e0ce      	b.n	800fd46 <GUI_SPRITE_SetPosition+0x45a>
 800fba8:	200001b0 	.word	0x200001b0
 800fbac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fbae:	4294      	cmp	r4, r2
 800fbb0:	db20      	blt.n	800fbf4 <GUI_SPRITE_SetPosition+0x308>
 800fbb2:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800fbb6:	4574      	cmp	r4, lr
 800fbb8:	bfcc      	ite	gt
 800fbba:	2300      	movgt	r3, #0
 800fbbc:	2301      	movle	r3, #1
 800fbbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbc0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	931d      	str	r3, [sp, #116]	; 0x74
 800fbc6:	ebc9 0106 	rsb	r1, r9, r6
 800fbca:	4417      	add	r7, r2
 800fbcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbce:	910f      	str	r1, [sp, #60]	; 0x3c
 800fbd0:	4457      	add	r7, sl
 800fbd2:	9305      	str	r3, [sp, #20]
 800fbd4:	4615      	mov	r5, r2
 800fbd6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800fbd8:	428d      	cmp	r5, r1
 800fbda:	d10d      	bne.n	800fbf8 <GUI_SPRITE_SetPosition+0x30c>
 800fbdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbde:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 800fbe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbe4:	4473      	add	r3, lr
 800fbe6:	4414      	add	r4, r2
 800fbe8:	930c      	str	r3, [sp, #48]	; 0x30
 800fbea:	4416      	add	r6, r2
 800fbec:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fbee:	428c      	cmp	r4, r1
 800fbf0:	d1dc      	bne.n	800fbac <GUI_SPRITE_SetPosition+0x2c0>
 800fbf2:	e0a8      	b.n	800fd46 <GUI_SPRITE_SetPosition+0x45a>
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	e7e2      	b.n	800fbbe <GUI_SPRITE_SetPosition+0x2d2>
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fbfc:	4622      	mov	r2, r4
 800fbfe:	f000 f93b 	bl	800fe78 <GUI_GetBitmapPixelIndex>
 800fc02:	0e01      	lsrs	r1, r0, #24
 800fc04:	29ff      	cmp	r1, #255	; 0xff
 800fc06:	9018      	str	r0, [sp, #96]	; 0x60
 800fc08:	910b      	str	r1, [sp, #44]	; 0x2c
 800fc0a:	f000 8093 	beq.w	800fd34 <GUI_SPRITE_SetPosition+0x448>
 800fc0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fc10:	4295      	cmp	r5, r2
 800fc12:	ebca 0c07 	rsb	ip, sl, r7
 800fc16:	db07      	blt.n	800fc28 <GUI_SPRITE_SetPosition+0x33c>
 800fc18:	9b07      	ldr	r3, [sp, #28]
 800fc1a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800fc1e:	429d      	cmp	r5, r3
 800fc20:	bfc8      	it	gt
 800fc22:	f04f 0b00 	movgt.w	fp, #0
 800fc26:	e001      	b.n	800fc2c <GUI_SPRITE_SetPosition+0x340>
 800fc28:	f04f 0b00 	mov.w	fp, #0
 800fc2c:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800fc30:	429f      	cmp	r7, r3
 800fc32:	fa5f fb8b 	uxtb.w	fp, fp
 800fc36:	db22      	blt.n	800fc7e <GUI_SPRITE_SetPosition+0x392>
 800fc38:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800fc3c:	429e      	cmp	r6, r3
 800fc3e:	db1e      	blt.n	800fc7e <GUI_SPRITE_SetPosition+0x392>
 800fc40:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800fc44:	429f      	cmp	r7, r3
 800fc46:	dc1a      	bgt.n	800fc7e <GUI_SPRITE_SetPosition+0x392>
 800fc48:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800fc4c:	429e      	cmp	r6, r3
 800fc4e:	dc16      	bgt.n	800fc7e <GUI_SPRITE_SetPosition+0x392>
 800fc50:	4631      	mov	r1, r6
 800fc52:	9a06      	ldr	r2, [sp, #24]
 800fc54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fc56:	f8cd c00c 	str.w	ip, [sp, #12]
 800fc5a:	4638      	mov	r0, r7
 800fc5c:	f7ff fd7f 	bl	800f75e <_GetBkIndexAlpha.isra.2>
 800fc60:	f8dd e020 	ldr.w	lr, [sp, #32]
 800fc64:	4b61      	ldr	r3, [pc, #388]	; (800fdec <GUI_SPRITE_SetPosition+0x500>)
 800fc66:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 800fc6a:	691b      	ldr	r3, [r3, #16]
 800fc6c:	4680      	mov	r8, r0
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800fc74:	4798      	blx	r3
 800fc76:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fc7a:	9019      	str	r0, [sp, #100]	; 0x64
 800fc7c:	e001      	b.n	800fc82 <GUI_SPRITE_SetPosition+0x396>
 800fc7e:	f04f 0800 	mov.w	r8, #0
 800fc82:	f1bb 0f00 	cmp.w	fp, #0
 800fc86:	d00f      	beq.n	800fca8 <GUI_SPRITE_SetPosition+0x3bc>
 800fc88:	ebb5 010a 	subs.w	r1, r5, sl
 800fc8c:	d416      	bmi.n	800fcbc <GUI_SPRITE_SetPosition+0x3d0>
 800fc8e:	ebb4 0209 	subs.w	r2, r4, r9
 800fc92:	d413      	bmi.n	800fcbc <GUI_SPRITE_SetPosition+0x3d0>
 800fc94:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fc96:	f8cd c00c 	str.w	ip, [sp, #12]
 800fc9a:	f000 f8ed 	bl	800fe78 <GUI_GetBitmapPixelIndex>
 800fc9e:	0e00      	lsrs	r0, r0, #24
 800fca0:	28ff      	cmp	r0, #255	; 0xff
 800fca2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fca6:	d109      	bne.n	800fcbc <GUI_SPRITE_SetPosition+0x3d0>
 800fca8:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800fcac:	459c      	cmp	ip, r3
 800fcae:	db05      	blt.n	800fcbc <GUI_SPRITE_SetPosition+0x3d0>
 800fcb0:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800fcb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fcb6:	4299      	cmp	r1, r3
 800fcb8:	f280 8082 	bge.w	800fdc0 <GUI_SPRITE_SetPosition+0x4d4>
 800fcbc:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800fcc0:	429f      	cmp	r7, r3
 800fcc2:	db34      	blt.n	800fd2e <GUI_SPRITE_SetPosition+0x442>
 800fcc4:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800fcc8:	429e      	cmp	r6, r3
 800fcca:	db30      	blt.n	800fd2e <GUI_SPRITE_SetPosition+0x442>
 800fccc:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800fcd0:	429f      	cmp	r7, r3
 800fcd2:	dc2c      	bgt.n	800fd2e <GUI_SPRITE_SetPosition+0x442>
 800fcd4:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800fcd8:	429e      	cmp	r6, r3
 800fcda:	dc28      	bgt.n	800fd2e <GUI_SPRITE_SetPosition+0x442>
 800fcdc:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 800fce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fce2:	f8df b108 	ldr.w	fp, [pc, #264]	; 800fdec <GUI_SPRITE_SetPosition+0x500>
 800fce6:	f02e 407f 	bic.w	r0, lr, #4278190080	; 0xff000000
 800fcea:	b191      	cbz	r1, 800fd12 <GUI_SPRITE_SetPosition+0x426>
 800fcec:	9a08      	ldr	r2, [sp, #32]
 800fcee:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 800fcf2:	691b      	ldr	r3, [r3, #16]
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	4798      	blx	r3
 800fcf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcfa:	9919      	ldr	r1, [sp, #100]	; 0x64
 800fcfc:	43da      	mvns	r2, r3
 800fcfe:	b2d2      	uxtb	r2, r2
 800fd00:	f7fd fcae 	bl	800d660 <GUI__MixColors>
 800fd04:	f8dd e020 	ldr.w	lr, [sp, #32]
 800fd08:	f85b 302e 	ldr.w	r3, [fp, lr, lsl #2]
 800fd0c:	691b      	ldr	r3, [r3, #16]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	e004      	b.n	800fd1c <GUI_SPRITE_SetPosition+0x430>
 800fd12:	9908      	ldr	r1, [sp, #32]
 800fd14:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	4798      	blx	r3
 800fd1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fd20:	9300      	str	r3, [sp, #0]
 800fd22:	4602      	mov	r2, r0
 800fd24:	4631      	mov	r1, r6
 800fd26:	4638      	mov	r0, r7
 800fd28:	9b06      	ldr	r3, [sp, #24]
 800fd2a:	f7ff fdad 	bl	800f888 <_SetBkIndexBuffered>
 800fd2e:	9905      	ldr	r1, [sp, #20]
 800fd30:	f8c1 8020 	str.w	r8, [r1, #32]
 800fd34:	9b05      	ldr	r3, [sp, #20]
 800fd36:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 800fd3a:	9a04      	ldr	r2, [sp, #16]
 800fd3c:	4473      	add	r3, lr
 800fd3e:	4415      	add	r5, r2
 800fd40:	9305      	str	r3, [sp, #20]
 800fd42:	4417      	add	r7, r2
 800fd44:	e747      	b.n	800fbd6 <GUI_SPRITE_SetPosition+0x2ea>
 800fd46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fd48:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fd4a:	6818      	ldr	r0, [r3, #0]
 800fd4c:	f7ff fdbe 	bl	800f8cc <_ReleaseBuffer.isra.6>
 800fd50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fd52:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fd54:	6818      	ldr	r0, [r3, #0]
 800fd56:	f7ff fdb9 	bl	800f8cc <_ReleaseBuffer.isra.6>
 800fd5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fd5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fd5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fd60:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800fd64:	809a      	strh	r2, [r3, #4]
 800fd66:	440a      	add	r2, r1
 800fd68:	3a01      	subs	r2, #1
 800fd6a:	f8a3 e006 	strh.w	lr, [r3, #6]
 800fd6e:	811a      	strh	r2, [r3, #8]
 800fd70:	f10e 32ff 	add.w	r2, lr, #4294967295
 800fd74:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 800fd78:	9908      	ldr	r1, [sp, #32]
 800fd7a:	4472      	add	r2, lr
 800fd7c:	815a      	strh	r2, [r3, #10]
 800fd7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fd80:	4291      	cmp	r1, r2
 800fd82:	d002      	beq.n	800fd8a <GUI_SPRITE_SetPosition+0x49e>
 800fd84:	4b1a      	ldr	r3, [pc, #104]	; (800fdf0 <GUI_SPRITE_SetPosition+0x504>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	745a      	strb	r2, [r3, #17]
 800fd8a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800fd8c:	f7fc fe36 	bl	800c9fc <GUI_MEMDEV_Select>
 800fd90:	a823      	add	r0, sp, #140	; 0x8c
 800fd92:	f7f9 f9c3 	bl	800911c <GUI_ALLOC_UnlockH>
 800fd96:	e026      	b.n	800fde6 <GUI_SPRITE_SetPosition+0x4fa>
 800fd98:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800fd9c:	459c      	cmp	ip, r3
 800fd9e:	f73f aece 	bgt.w	800fb3e <GUI_SPRITE_SetPosition+0x252>
 800fda2:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800fda6:	459e      	cmp	lr, r3
 800fda8:	f73f aec9 	bgt.w	800fb3e <GUI_SPRITE_SetPosition+0x252>
 800fdac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fdae:	9b05      	ldr	r3, [sp, #20]
 800fdb0:	9100      	str	r1, [sp, #0]
 800fdb2:	6a1a      	ldr	r2, [r3, #32]
 800fdb4:	9b06      	ldr	r3, [sp, #24]
 800fdb6:	4660      	mov	r0, ip
 800fdb8:	4671      	mov	r1, lr
 800fdba:	f7ff fd65 	bl	800f888 <_SetBkIndexBuffered>
 800fdbe:	e6be      	b.n	800fb3e <GUI_SPRITE_SetPosition+0x252>
 800fdc0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800fdc4:	459c      	cmp	ip, r3
 800fdc6:	f73f af79 	bgt.w	800fcbc <GUI_SPRITE_SetPosition+0x3d0>
 800fdca:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800fdce:	4299      	cmp	r1, r3
 800fdd0:	f73f af74 	bgt.w	800fcbc <GUI_SPRITE_SetPosition+0x3d0>
 800fdd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fdd6:	9b05      	ldr	r3, [sp, #20]
 800fdd8:	9200      	str	r2, [sp, #0]
 800fdda:	6a1a      	ldr	r2, [r3, #32]
 800fddc:	9b06      	ldr	r3, [sp, #24]
 800fdde:	4660      	mov	r0, ip
 800fde0:	f7ff fd52 	bl	800f888 <_SetBkIndexBuffered>
 800fde4:	e76a      	b.n	800fcbc <GUI_SPRITE_SetPosition+0x3d0>
 800fde6:	b027      	add	sp, #156	; 0x9c
 800fde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdec:	2001af18 	.word	0x2001af18
 800fdf0:	200001b0 	.word	0x200001b0

0800fdf4 <GUI_GetBitmapPixelIndexEx>:
 800fdf4:	b510      	push	{r4, lr}
 800fdf6:	2804      	cmp	r0, #4
 800fdf8:	9c02      	ldr	r4, [sp, #8]
 800fdfa:	d025      	beq.n	800fe48 <GUI_GetBitmapPixelIndexEx+0x54>
 800fdfc:	dc0f      	bgt.n	800fe1e <GUI_GetBitmapPixelIndexEx+0x2a>
 800fdfe:	2801      	cmp	r0, #1
 800fe00:	d017      	beq.n	800fe32 <GUI_GetBitmapPixelIndexEx+0x3e>
 800fe02:	2802      	cmp	r0, #2
 800fe04:	d136      	bne.n	800fe74 <GUI_GetBitmapPixelIndexEx+0x80>
 800fe06:	0898      	lsrs	r0, r3, #2
 800fe08:	fb04 2101 	mla	r1, r4, r1, r2
 800fe0c:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 800fe10:	5c08      	ldrb	r0, [r1, r0]
 800fe12:	f003 0306 	and.w	r3, r3, #6
 800fe16:	40d8      	lsrs	r0, r3
 800fe18:	f000 0003 	and.w	r0, r0, #3
 800fe1c:	bd10      	pop	{r4, pc}
 800fe1e:	2810      	cmp	r0, #16
 800fe20:	d01c      	beq.n	800fe5c <GUI_GetBitmapPixelIndexEx+0x68>
 800fe22:	2820      	cmp	r0, #32
 800fe24:	d020      	beq.n	800fe68 <GUI_GetBitmapPixelIndexEx+0x74>
 800fe26:	2808      	cmp	r0, #8
 800fe28:	d124      	bne.n	800fe74 <GUI_GetBitmapPixelIndexEx+0x80>
 800fe2a:	fb04 2101 	mla	r1, r4, r1, r2
 800fe2e:	5cc8      	ldrb	r0, [r1, r3]
 800fe30:	bd10      	pop	{r4, pc}
 800fe32:	08d8      	lsrs	r0, r3, #3
 800fe34:	fb04 2101 	mla	r1, r4, r1, r2
 800fe38:	43db      	mvns	r3, r3
 800fe3a:	5c08      	ldrb	r0, [r1, r0]
 800fe3c:	f003 0307 	and.w	r3, r3, #7
 800fe40:	40d8      	lsrs	r0, r3
 800fe42:	f000 0001 	and.w	r0, r0, #1
 800fe46:	bd10      	pop	{r4, pc}
 800fe48:	0858      	lsrs	r0, r3, #1
 800fe4a:	fb04 2101 	mla	r1, r4, r1, r2
 800fe4e:	07db      	lsls	r3, r3, #31
 800fe50:	5c08      	ldrb	r0, [r1, r0]
 800fe52:	bf4c      	ite	mi
 800fe54:	f000 000f 	andmi.w	r0, r0, #15
 800fe58:	0900      	lsrpl	r0, r0, #4
 800fe5a:	bd10      	pop	{r4, pc}
 800fe5c:	1049      	asrs	r1, r1, #1
 800fe5e:	fb04 3301 	mla	r3, r4, r1, r3
 800fe62:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800fe66:	bd10      	pop	{r4, pc}
 800fe68:	1089      	asrs	r1, r1, #2
 800fe6a:	fb04 3301 	mla	r3, r4, r1, r3
 800fe6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fe72:	bd10      	pop	{r4, pc}
 800fe74:	2000      	movs	r0, #0
 800fe76:	bd10      	pop	{r4, pc}

0800fe78 <GUI_GetBitmapPixelIndex>:
 800fe78:	b513      	push	{r0, r1, r4, lr}
 800fe7a:	460b      	mov	r3, r1
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	b130      	cbz	r0, 800fe8e <GUI_GetBitmapPixelIndex+0x16>
 800fe80:	88c0      	ldrh	r0, [r0, #6]
 800fe82:	88a1      	ldrh	r1, [r4, #4]
 800fe84:	9200      	str	r2, [sp, #0]
 800fe86:	68a2      	ldr	r2, [r4, #8]
 800fe88:	f7ff ffb4 	bl	800fdf4 <GUI_GetBitmapPixelIndexEx>
 800fe8c:	e7ff      	b.n	800fe8e <GUI_GetBitmapPixelIndex+0x16>
 800fe8e:	b002      	add	sp, #8
 800fe90:	bd10      	pop	{r4, pc}

0800fe92 <GUI_CalcColorDist>:
 800fe92:	b2cb      	uxtb	r3, r1
 800fe94:	b2c2      	uxtb	r2, r0
 800fe96:	1ad2      	subs	r2, r2, r3
 800fe98:	b292      	uxth	r2, r2
 800fe9a:	b293      	uxth	r3, r2
 800fe9c:	b530      	push	{r4, r5, lr}
 800fe9e:	041c      	lsls	r4, r3, #16
 800fea0:	bf48      	it	mi
 800fea2:	4253      	negmi	r3, r2
 800fea4:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800fea8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800feac:	ebc5 0202 	rsb	r2, r5, r2
 800feb0:	bf48      	it	mi
 800feb2:	b29b      	uxthmi	r3, r3
 800feb4:	b292      	uxth	r2, r2
 800feb6:	0c09      	lsrs	r1, r1, #16
 800feb8:	fb13 f403 	smulbb	r4, r3, r3
 800febc:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800fec0:	b293      	uxth	r3, r2
 800fec2:	041d      	lsls	r5, r3, #16
 800fec4:	b289      	uxth	r1, r1
 800fec6:	b288      	uxth	r0, r1
 800fec8:	bf44      	itt	mi
 800feca:	4253      	negmi	r3, r2
 800fecc:	b29b      	uxthmi	r3, r3
 800fece:	0402      	lsls	r2, r0, #16
 800fed0:	bf48      	it	mi
 800fed2:	4248      	negmi	r0, r1
 800fed4:	fb13 4303 	smlabb	r3, r3, r3, r4
 800fed8:	bf48      	it	mi
 800feda:	b280      	uxthmi	r0, r0
 800fedc:	fb00 3000 	mla	r0, r0, r0, r3
 800fee0:	bd30      	pop	{r4, r5, pc}

0800fee2 <WM__UpdateChildPositions>:
 800fee2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee6:	b087      	sub	sp, #28
 800fee8:	69c4      	ldr	r4, [r0, #28]
 800feea:	9303      	str	r3, [sp, #12]
 800feec:	468a      	mov	sl, r1
 800feee:	4693      	mov	fp, r2
 800fef0:	2c00      	cmp	r4, #0
 800fef2:	d06d      	beq.n	800ffd0 <WM__UpdateChildPositions+0xee>
 800fef4:	4620      	mov	r0, r4
 800fef6:	f7f9 f903 	bl	8009100 <GUI_ALLOC_LockH>
 800fefa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800fefc:	9005      	str	r0, [sp, #20]
 800fefe:	f401 7320 	and.w	r3, r1, #640	; 0x280
 800ff02:	2b80      	cmp	r3, #128	; 0x80
 800ff04:	f8b0 8000 	ldrh.w	r8, [r0]
 800ff08:	8842      	ldrh	r2, [r0, #2]
 800ff0a:	8886      	ldrh	r6, [r0, #4]
 800ff0c:	88c5      	ldrh	r5, [r0, #6]
 800ff0e:	d008      	beq.n	800ff22 <WM__UpdateChildPositions+0x40>
 800ff10:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ff14:	d108      	bne.n	800ff28 <WM__UpdateChildPositions+0x46>
 800ff16:	eb08 090a 	add.w	r9, r8, sl
 800ff1a:	fa1f f989 	uxth.w	r9, r9
 800ff1e:	9b03      	ldr	r3, [sp, #12]
 800ff20:	e008      	b.n	800ff34 <WM__UpdateChildPositions+0x52>
 800ff22:	9803      	ldr	r0, [sp, #12]
 800ff24:	b283      	uxth	r3, r0
 800ff26:	e001      	b.n	800ff2c <WM__UpdateChildPositions+0x4a>
 800ff28:	fa1f f38a 	uxth.w	r3, sl
 800ff2c:	eb03 0908 	add.w	r9, r3, r8
 800ff30:	fa1f f989 	uxth.w	r9, r9
 800ff34:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 800ff38:	4433      	add	r3, r6
 800ff3a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	d008      	beq.n	800ff54 <WM__UpdateChildPositions+0x72>
 800ff42:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800ff46:	d108      	bne.n	800ff5a <WM__UpdateChildPositions+0x78>
 800ff48:	eb02 0c0b 	add.w	ip, r2, fp
 800ff4c:	fa1f fc8c 	uxth.w	ip, ip
 800ff50:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ff52:	e008      	b.n	800ff66 <WM__UpdateChildPositions+0x84>
 800ff54:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ff56:	b28f      	uxth	r7, r1
 800ff58:	e001      	b.n	800ff5e <WM__UpdateChildPositions+0x7c>
 800ff5a:	fa1f f78b 	uxth.w	r7, fp
 800ff5e:	eb07 0c02 	add.w	ip, r7, r2
 800ff62:	fa1f fc8c 	uxth.w	ip, ip
 800ff66:	fa0f f989 	sxth.w	r9, r9
 800ff6a:	fa0f f888 	sxth.w	r8, r8
 800ff6e:	b212      	sxth	r2, r2
 800ff70:	442f      	add	r7, r5
 800ff72:	fa0f fc8c 	sxth.w	ip, ip
 800ff76:	ebb9 0108 	subs.w	r1, r9, r8
 800ff7a:	9202      	str	r2, [sp, #8]
 800ff7c:	b2bf      	uxth	r7, r7
 800ff7e:	ebc2 020c 	rsb	r2, r2, ip
 800ff82:	d100      	bne.n	800ff86 <WM__UpdateChildPositions+0xa4>
 800ff84:	b142      	cbz	r2, 800ff98 <WM__UpdateChildPositions+0xb6>
 800ff86:	4620      	mov	r0, r4
 800ff88:	9301      	str	r3, [sp, #4]
 800ff8a:	f8cd c000 	str.w	ip, [sp]
 800ff8e:	f000 f8c8 	bl	8010122 <WM_MoveWindow>
 800ff92:	f8dd c000 	ldr.w	ip, [sp]
 800ff96:	9b01      	ldr	r3, [sp, #4]
 800ff98:	b21b      	sxth	r3, r3
 800ff9a:	ebc9 0903 	rsb	r9, r9, r3
 800ff9e:	b236      	sxth	r6, r6
 800ffa0:	9b02      	ldr	r3, [sp, #8]
 800ffa2:	ebc6 0808 	rsb	r8, r6, r8
 800ffa6:	b23f      	sxth	r7, r7
 800ffa8:	b22d      	sxth	r5, r5
 800ffaa:	ebcc 0c07 	rsb	ip, ip, r7
 800ffae:	1b5d      	subs	r5, r3, r5
 800ffb0:	eb19 0108 	adds.w	r1, r9, r8
 800ffb4:	eb0c 0205 	add.w	r2, ip, r5
 800ffb8:	d100      	bne.n	800ffbc <WM__UpdateChildPositions+0xda>
 800ffba:	b112      	cbz	r2, 800ffc2 <WM__UpdateChildPositions+0xe0>
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	f7fe f881 	bl	800e0c4 <WM_ResizeWindow>
 800ffc2:	a806      	add	r0, sp, #24
 800ffc4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800ffc8:	6a1c      	ldr	r4, [r3, #32]
 800ffca:	f7f9 f8a7 	bl	800911c <GUI_ALLOC_UnlockH>
 800ffce:	e78f      	b.n	800fef0 <WM__UpdateChildPositions+0xe>
 800ffd0:	b007      	add	sp, #28
 800ffd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ffd6 <WM__GetPrevSibling>:
 800ffd6:	b538      	push	{r3, r4, r5, lr}
 800ffd8:	4605      	mov	r5, r0
 800ffda:	f000 f80f 	bl	800fffc <WM__GetFirstSibling>
 800ffde:	4604      	mov	r4, r0
 800ffe0:	b154      	cbz	r4, 800fff8 <WM__GetPrevSibling+0x22>
 800ffe2:	42ac      	cmp	r4, r5
 800ffe4:	d007      	beq.n	800fff6 <WM__GetPrevSibling+0x20>
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f7f9 f880 	bl	80090ec <GUI_ALLOC_h2p>
 800ffec:	6a03      	ldr	r3, [r0, #32]
 800ffee:	42ab      	cmp	r3, r5
 800fff0:	d002      	beq.n	800fff8 <WM__GetPrevSibling+0x22>
 800fff2:	461c      	mov	r4, r3
 800fff4:	e7f4      	b.n	800ffe0 <WM__GetPrevSibling+0xa>
 800fff6:	2400      	movs	r4, #0
 800fff8:	4620      	mov	r0, r4
 800fffa:	bd38      	pop	{r3, r4, r5, pc}

0800fffc <WM__GetFirstSibling>:
 800fffc:	b508      	push	{r3, lr}
 800fffe:	f7f9 fe57 	bl	8009cb0 <WM_GetParent>
 8010002:	b118      	cbz	r0, 801000c <WM__GetFirstSibling+0x10>
 8010004:	f7f9 f872 	bl	80090ec <GUI_ALLOC_h2p>
 8010008:	69c0      	ldr	r0, [r0, #28]
 801000a:	bd08      	pop	{r3, pc}
 801000c:	bd08      	pop	{r3, pc}

0801000e <_MoveDescendents>:
 801000e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010012:	b088      	sub	sp, #32
 8010014:	4606      	mov	r6, r0
 8010016:	460c      	mov	r4, r1
 8010018:	4615      	mov	r5, r2
 801001a:	a804      	add	r0, sp, #16
 801001c:	2100      	movs	r1, #0
 801001e:	2210      	movs	r2, #16
 8010020:	f000 f8ef 	bl	8010202 <memset>
 8010024:	b336      	cbz	r6, 8010074 <_MoveDescendents+0x66>
 8010026:	4630      	mov	r0, r6
 8010028:	f7f9 f86a 	bl	8009100 <GUI_ALLOC_LockH>
 801002c:	4621      	mov	r1, r4
 801002e:	462a      	mov	r2, r5
 8010030:	9001      	str	r0, [sp, #4]
 8010032:	f7fd fe5d 	bl	800dcf0 <GUI_MoveRect>
 8010036:	9801      	ldr	r0, [sp, #4]
 8010038:	4621      	mov	r1, r4
 801003a:	3008      	adds	r0, #8
 801003c:	462a      	mov	r2, r5
 801003e:	f7fd fe57 	bl	800dcf0 <GUI_MoveRect>
 8010042:	a808      	add	r0, sp, #32
 8010044:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 8010048:	f8d2 801c 	ldr.w	r8, [r2, #28]
 801004c:	6a17      	ldr	r7, [r2, #32]
 801004e:	f7f9 f865 	bl	800911c <GUI_ALLOC_UnlockH>
 8010052:	4640      	mov	r0, r8
 8010054:	4621      	mov	r1, r4
 8010056:	462a      	mov	r2, r5
 8010058:	f7ff ffd9 	bl	801000e <_MoveDescendents>
 801005c:	2303      	movs	r3, #3
 801005e:	9304      	str	r3, [sp, #16]
 8010060:	4630      	mov	r0, r6
 8010062:	ab02      	add	r3, sp, #8
 8010064:	a904      	add	r1, sp, #16
 8010066:	9307      	str	r3, [sp, #28]
 8010068:	9402      	str	r4, [sp, #8]
 801006a:	9503      	str	r5, [sp, #12]
 801006c:	463e      	mov	r6, r7
 801006e:	f7fd ff85 	bl	800df7c <WM__SendMessage>
 8010072:	e7d7      	b.n	8010024 <_MoveDescendents+0x16>
 8010074:	b008      	add	sp, #32
 8010076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801007a <WM__MoveWindow>:
 801007a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801007e:	b08b      	sub	sp, #44	; 0x2c
 8010080:	4606      	mov	r6, r0
 8010082:	460d      	mov	r5, r1
 8010084:	4614      	mov	r4, r2
 8010086:	a806      	add	r0, sp, #24
 8010088:	2100      	movs	r1, #0
 801008a:	2210      	movs	r2, #16
 801008c:	f000 f8b9 	bl	8010202 <memset>
 8010090:	2e00      	cmp	r6, #0
 8010092:	d043      	beq.n	801011c <WM__MoveWindow+0xa2>
 8010094:	b90d      	cbnz	r5, 801009a <WM__MoveWindow+0x20>
 8010096:	2c00      	cmp	r4, #0
 8010098:	d040      	beq.n	801011c <WM__MoveWindow+0xa2>
 801009a:	4630      	mov	r0, r6
 801009c:	f7f9 f830 	bl	8009100 <GUI_ALLOC_LockH>
 80100a0:	4603      	mov	r3, r0
 80100a2:	9001      	str	r0, [sp, #4]
 80100a4:	c803      	ldmia	r0, {r0, r1}
 80100a6:	f10d 0808 	add.w	r8, sp, #8
 80100aa:	e888 0003 	stmia.w	r8, {r0, r1}
 80100ae:	4622      	mov	r2, r4
 80100b0:	4618      	mov	r0, r3
 80100b2:	4629      	mov	r1, r5
 80100b4:	f7fd fe1c 	bl	800dcf0 <GUI_MoveRect>
 80100b8:	9801      	ldr	r0, [sp, #4]
 80100ba:	af0a      	add	r7, sp, #40	; 0x28
 80100bc:	4629      	mov	r1, r5
 80100be:	4622      	mov	r2, r4
 80100c0:	3008      	adds	r0, #8
 80100c2:	f7fd fe15 	bl	800dcf0 <GUI_MoveRect>
 80100c6:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 80100ca:	f8d3 901c 	ldr.w	r9, [r3, #28]
 80100ce:	4638      	mov	r0, r7
 80100d0:	f7f9 f824 	bl	800911c <GUI_ALLOC_UnlockH>
 80100d4:	4622      	mov	r2, r4
 80100d6:	4648      	mov	r0, r9
 80100d8:	4629      	mov	r1, r5
 80100da:	f7ff ff98 	bl	801000e <_MoveDescendents>
 80100de:	4630      	mov	r0, r6
 80100e0:	f7f9 f80e 	bl	8009100 <GUI_ALLOC_LockH>
 80100e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80100e6:	9001      	str	r0, [sp, #4]
 80100e8:	0792      	lsls	r2, r2, #30
 80100ea:	d50a      	bpl.n	8010102 <WM__MoveWindow+0x88>
 80100ec:	6981      	ldr	r1, [r0, #24]
 80100ee:	b141      	cbz	r1, 8010102 <WM__MoveWindow+0x88>
 80100f0:	6a02      	ldr	r2, [r0, #32]
 80100f2:	f7fa fa30 	bl	800a556 <WM__InvalidateParent>
 80100f6:	9b01      	ldr	r3, [sp, #4]
 80100f8:	4640      	mov	r0, r8
 80100fa:	6999      	ldr	r1, [r3, #24]
 80100fc:	6a1a      	ldr	r2, [r3, #32]
 80100fe:	f7fa fa2a 	bl	800a556 <WM__InvalidateParent>
 8010102:	4638      	mov	r0, r7
 8010104:	f7f9 f80a 	bl	800911c <GUI_ALLOC_UnlockH>
 8010108:	2303      	movs	r3, #3
 801010a:	9306      	str	r3, [sp, #24]
 801010c:	4630      	mov	r0, r6
 801010e:	ab04      	add	r3, sp, #16
 8010110:	a906      	add	r1, sp, #24
 8010112:	9309      	str	r3, [sp, #36]	; 0x24
 8010114:	9504      	str	r5, [sp, #16]
 8010116:	9405      	str	r4, [sp, #20]
 8010118:	f7fd ff30 	bl	800df7c <WM__SendMessage>
 801011c:	b00b      	add	sp, #44	; 0x2c
 801011e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010122 <WM_MoveWindow>:
 8010122:	f7ff bfaa 	b.w	801007a <WM__MoveWindow>
	...

08010128 <__errno>:
 8010128:	4b01      	ldr	r3, [pc, #4]	; (8010130 <__errno+0x8>)
 801012a:	6818      	ldr	r0, [r3, #0]
 801012c:	4770      	bx	lr
 801012e:	bf00      	nop
 8010130:	200001d0 	.word	0x200001d0

08010134 <__libc_init_array>:
 8010134:	b570      	push	{r4, r5, r6, lr}
 8010136:	4e0d      	ldr	r6, [pc, #52]	; (801016c <__libc_init_array+0x38>)
 8010138:	4c0d      	ldr	r4, [pc, #52]	; (8010170 <__libc_init_array+0x3c>)
 801013a:	1ba4      	subs	r4, r4, r6
 801013c:	10a4      	asrs	r4, r4, #2
 801013e:	2500      	movs	r5, #0
 8010140:	42a5      	cmp	r5, r4
 8010142:	d109      	bne.n	8010158 <__libc_init_array+0x24>
 8010144:	4e0b      	ldr	r6, [pc, #44]	; (8010174 <__libc_init_array+0x40>)
 8010146:	4c0c      	ldr	r4, [pc, #48]	; (8010178 <__libc_init_array+0x44>)
 8010148:	f000 f91e 	bl	8010388 <_init>
 801014c:	1ba4      	subs	r4, r4, r6
 801014e:	10a4      	asrs	r4, r4, #2
 8010150:	2500      	movs	r5, #0
 8010152:	42a5      	cmp	r5, r4
 8010154:	d105      	bne.n	8010162 <__libc_init_array+0x2e>
 8010156:	bd70      	pop	{r4, r5, r6, pc}
 8010158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801015c:	4798      	blx	r3
 801015e:	3501      	adds	r5, #1
 8010160:	e7ee      	b.n	8010140 <__libc_init_array+0xc>
 8010162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010166:	4798      	blx	r3
 8010168:	3501      	adds	r5, #1
 801016a:	e7f2      	b.n	8010152 <__libc_init_array+0x1e>
 801016c:	080155ac 	.word	0x080155ac
 8010170:	080155ac 	.word	0x080155ac
 8010174:	080155ac 	.word	0x080155ac
 8010178:	080155b0 	.word	0x080155b0

0801017c <malloc>:
 801017c:	4b02      	ldr	r3, [pc, #8]	; (8010188 <malloc+0xc>)
 801017e:	4601      	mov	r1, r0
 8010180:	6818      	ldr	r0, [r3, #0]
 8010182:	f000 b895 	b.w	80102b0 <_malloc_r>
 8010186:	bf00      	nop
 8010188:	200001d0 	.word	0x200001d0

0801018c <free>:
 801018c:	4b02      	ldr	r3, [pc, #8]	; (8010198 <free+0xc>)
 801018e:	4601      	mov	r1, r0
 8010190:	6818      	ldr	r0, [r3, #0]
 8010192:	f000 b83f 	b.w	8010214 <_free_r>
 8010196:	bf00      	nop
 8010198:	200001d0 	.word	0x200001d0

0801019c <memcmp>:
 801019c:	b530      	push	{r4, r5, lr}
 801019e:	2400      	movs	r4, #0
 80101a0:	42a2      	cmp	r2, r4
 80101a2:	d101      	bne.n	80101a8 <memcmp+0xc>
 80101a4:	2000      	movs	r0, #0
 80101a6:	e007      	b.n	80101b8 <memcmp+0x1c>
 80101a8:	5d03      	ldrb	r3, [r0, r4]
 80101aa:	3401      	adds	r4, #1
 80101ac:	190d      	adds	r5, r1, r4
 80101ae:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80101b2:	42ab      	cmp	r3, r5
 80101b4:	d0f4      	beq.n	80101a0 <memcmp+0x4>
 80101b6:	1b58      	subs	r0, r3, r5
 80101b8:	bd30      	pop	{r4, r5, pc}

080101ba <memcpy>:
 80101ba:	b510      	push	{r4, lr}
 80101bc:	1e43      	subs	r3, r0, #1
 80101be:	440a      	add	r2, r1
 80101c0:	4291      	cmp	r1, r2
 80101c2:	d100      	bne.n	80101c6 <memcpy+0xc>
 80101c4:	bd10      	pop	{r4, pc}
 80101c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101ce:	e7f7      	b.n	80101c0 <memcpy+0x6>

080101d0 <memmove>:
 80101d0:	4288      	cmp	r0, r1
 80101d2:	b510      	push	{r4, lr}
 80101d4:	eb01 0302 	add.w	r3, r1, r2
 80101d8:	d807      	bhi.n	80101ea <memmove+0x1a>
 80101da:	1e42      	subs	r2, r0, #1
 80101dc:	4299      	cmp	r1, r3
 80101de:	d00a      	beq.n	80101f6 <memmove+0x26>
 80101e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80101e8:	e7f8      	b.n	80101dc <memmove+0xc>
 80101ea:	4283      	cmp	r3, r0
 80101ec:	d9f5      	bls.n	80101da <memmove+0xa>
 80101ee:	1881      	adds	r1, r0, r2
 80101f0:	1ad2      	subs	r2, r2, r3
 80101f2:	42d3      	cmn	r3, r2
 80101f4:	d100      	bne.n	80101f8 <memmove+0x28>
 80101f6:	bd10      	pop	{r4, pc}
 80101f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010200:	e7f7      	b.n	80101f2 <memmove+0x22>

08010202 <memset>:
 8010202:	4402      	add	r2, r0
 8010204:	4603      	mov	r3, r0
 8010206:	4293      	cmp	r3, r2
 8010208:	d100      	bne.n	801020c <memset+0xa>
 801020a:	4770      	bx	lr
 801020c:	f803 1b01 	strb.w	r1, [r3], #1
 8010210:	e7f9      	b.n	8010206 <memset+0x4>
	...

08010214 <_free_r>:
 8010214:	b538      	push	{r3, r4, r5, lr}
 8010216:	4605      	mov	r5, r0
 8010218:	2900      	cmp	r1, #0
 801021a:	d045      	beq.n	80102a8 <_free_r+0x94>
 801021c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010220:	1f0c      	subs	r4, r1, #4
 8010222:	2b00      	cmp	r3, #0
 8010224:	bfb8      	it	lt
 8010226:	18e4      	addlt	r4, r4, r3
 8010228:	f000 f8ac 	bl	8010384 <__malloc_lock>
 801022c:	4a1f      	ldr	r2, [pc, #124]	; (80102ac <_free_r+0x98>)
 801022e:	6813      	ldr	r3, [r2, #0]
 8010230:	4610      	mov	r0, r2
 8010232:	b933      	cbnz	r3, 8010242 <_free_r+0x2e>
 8010234:	6063      	str	r3, [r4, #4]
 8010236:	6014      	str	r4, [r2, #0]
 8010238:	4628      	mov	r0, r5
 801023a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801023e:	f000 b8a2 	b.w	8010386 <__malloc_unlock>
 8010242:	42a3      	cmp	r3, r4
 8010244:	d90c      	bls.n	8010260 <_free_r+0x4c>
 8010246:	6821      	ldr	r1, [r4, #0]
 8010248:	1862      	adds	r2, r4, r1
 801024a:	4293      	cmp	r3, r2
 801024c:	bf04      	itt	eq
 801024e:	681a      	ldreq	r2, [r3, #0]
 8010250:	685b      	ldreq	r3, [r3, #4]
 8010252:	6063      	str	r3, [r4, #4]
 8010254:	bf04      	itt	eq
 8010256:	1852      	addeq	r2, r2, r1
 8010258:	6022      	streq	r2, [r4, #0]
 801025a:	6004      	str	r4, [r0, #0]
 801025c:	e7ec      	b.n	8010238 <_free_r+0x24>
 801025e:	4613      	mov	r3, r2
 8010260:	685a      	ldr	r2, [r3, #4]
 8010262:	b10a      	cbz	r2, 8010268 <_free_r+0x54>
 8010264:	42a2      	cmp	r2, r4
 8010266:	d9fa      	bls.n	801025e <_free_r+0x4a>
 8010268:	6819      	ldr	r1, [r3, #0]
 801026a:	1858      	adds	r0, r3, r1
 801026c:	42a0      	cmp	r0, r4
 801026e:	d10b      	bne.n	8010288 <_free_r+0x74>
 8010270:	6820      	ldr	r0, [r4, #0]
 8010272:	4401      	add	r1, r0
 8010274:	1858      	adds	r0, r3, r1
 8010276:	4282      	cmp	r2, r0
 8010278:	6019      	str	r1, [r3, #0]
 801027a:	d1dd      	bne.n	8010238 <_free_r+0x24>
 801027c:	6810      	ldr	r0, [r2, #0]
 801027e:	6852      	ldr	r2, [r2, #4]
 8010280:	605a      	str	r2, [r3, #4]
 8010282:	4401      	add	r1, r0
 8010284:	6019      	str	r1, [r3, #0]
 8010286:	e7d7      	b.n	8010238 <_free_r+0x24>
 8010288:	d902      	bls.n	8010290 <_free_r+0x7c>
 801028a:	230c      	movs	r3, #12
 801028c:	602b      	str	r3, [r5, #0]
 801028e:	e7d3      	b.n	8010238 <_free_r+0x24>
 8010290:	6820      	ldr	r0, [r4, #0]
 8010292:	1821      	adds	r1, r4, r0
 8010294:	428a      	cmp	r2, r1
 8010296:	bf04      	itt	eq
 8010298:	6811      	ldreq	r1, [r2, #0]
 801029a:	6852      	ldreq	r2, [r2, #4]
 801029c:	6062      	str	r2, [r4, #4]
 801029e:	bf04      	itt	eq
 80102a0:	1809      	addeq	r1, r1, r0
 80102a2:	6021      	streq	r1, [r4, #0]
 80102a4:	605c      	str	r4, [r3, #4]
 80102a6:	e7c7      	b.n	8010238 <_free_r+0x24>
 80102a8:	bd38      	pop	{r3, r4, r5, pc}
 80102aa:	bf00      	nop
 80102ac:	2001951c 	.word	0x2001951c

080102b0 <_malloc_r>:
 80102b0:	b570      	push	{r4, r5, r6, lr}
 80102b2:	1ccd      	adds	r5, r1, #3
 80102b4:	f025 0503 	bic.w	r5, r5, #3
 80102b8:	3508      	adds	r5, #8
 80102ba:	2d0c      	cmp	r5, #12
 80102bc:	bf38      	it	cc
 80102be:	250c      	movcc	r5, #12
 80102c0:	2d00      	cmp	r5, #0
 80102c2:	4606      	mov	r6, r0
 80102c4:	db01      	blt.n	80102ca <_malloc_r+0x1a>
 80102c6:	42a9      	cmp	r1, r5
 80102c8:	d903      	bls.n	80102d2 <_malloc_r+0x22>
 80102ca:	230c      	movs	r3, #12
 80102cc:	6033      	str	r3, [r6, #0]
 80102ce:	2000      	movs	r0, #0
 80102d0:	bd70      	pop	{r4, r5, r6, pc}
 80102d2:	f000 f857 	bl	8010384 <__malloc_lock>
 80102d6:	4a21      	ldr	r2, [pc, #132]	; (801035c <_malloc_r+0xac>)
 80102d8:	6814      	ldr	r4, [r2, #0]
 80102da:	4621      	mov	r1, r4
 80102dc:	b991      	cbnz	r1, 8010304 <_malloc_r+0x54>
 80102de:	4c20      	ldr	r4, [pc, #128]	; (8010360 <_malloc_r+0xb0>)
 80102e0:	6823      	ldr	r3, [r4, #0]
 80102e2:	b91b      	cbnz	r3, 80102ec <_malloc_r+0x3c>
 80102e4:	4630      	mov	r0, r6
 80102e6:	f000 f83d 	bl	8010364 <_sbrk_r>
 80102ea:	6020      	str	r0, [r4, #0]
 80102ec:	4629      	mov	r1, r5
 80102ee:	4630      	mov	r0, r6
 80102f0:	f000 f838 	bl	8010364 <_sbrk_r>
 80102f4:	1c43      	adds	r3, r0, #1
 80102f6:	d124      	bne.n	8010342 <_malloc_r+0x92>
 80102f8:	230c      	movs	r3, #12
 80102fa:	6033      	str	r3, [r6, #0]
 80102fc:	4630      	mov	r0, r6
 80102fe:	f000 f842 	bl	8010386 <__malloc_unlock>
 8010302:	e7e4      	b.n	80102ce <_malloc_r+0x1e>
 8010304:	680b      	ldr	r3, [r1, #0]
 8010306:	1b5b      	subs	r3, r3, r5
 8010308:	d418      	bmi.n	801033c <_malloc_r+0x8c>
 801030a:	2b0b      	cmp	r3, #11
 801030c:	d90f      	bls.n	801032e <_malloc_r+0x7e>
 801030e:	600b      	str	r3, [r1, #0]
 8010310:	50cd      	str	r5, [r1, r3]
 8010312:	18cc      	adds	r4, r1, r3
 8010314:	4630      	mov	r0, r6
 8010316:	f000 f836 	bl	8010386 <__malloc_unlock>
 801031a:	f104 000b 	add.w	r0, r4, #11
 801031e:	1d23      	adds	r3, r4, #4
 8010320:	f020 0007 	bic.w	r0, r0, #7
 8010324:	1ac3      	subs	r3, r0, r3
 8010326:	d0d3      	beq.n	80102d0 <_malloc_r+0x20>
 8010328:	425a      	negs	r2, r3
 801032a:	50e2      	str	r2, [r4, r3]
 801032c:	e7d0      	b.n	80102d0 <_malloc_r+0x20>
 801032e:	428c      	cmp	r4, r1
 8010330:	684b      	ldr	r3, [r1, #4]
 8010332:	bf16      	itet	ne
 8010334:	6063      	strne	r3, [r4, #4]
 8010336:	6013      	streq	r3, [r2, #0]
 8010338:	460c      	movne	r4, r1
 801033a:	e7eb      	b.n	8010314 <_malloc_r+0x64>
 801033c:	460c      	mov	r4, r1
 801033e:	6849      	ldr	r1, [r1, #4]
 8010340:	e7cc      	b.n	80102dc <_malloc_r+0x2c>
 8010342:	1cc4      	adds	r4, r0, #3
 8010344:	f024 0403 	bic.w	r4, r4, #3
 8010348:	42a0      	cmp	r0, r4
 801034a:	d005      	beq.n	8010358 <_malloc_r+0xa8>
 801034c:	1a21      	subs	r1, r4, r0
 801034e:	4630      	mov	r0, r6
 8010350:	f000 f808 	bl	8010364 <_sbrk_r>
 8010354:	3001      	adds	r0, #1
 8010356:	d0cf      	beq.n	80102f8 <_malloc_r+0x48>
 8010358:	6025      	str	r5, [r4, #0]
 801035a:	e7db      	b.n	8010314 <_malloc_r+0x64>
 801035c:	2001951c 	.word	0x2001951c
 8010360:	20019520 	.word	0x20019520

08010364 <_sbrk_r>:
 8010364:	b538      	push	{r3, r4, r5, lr}
 8010366:	4c06      	ldr	r4, [pc, #24]	; (8010380 <_sbrk_r+0x1c>)
 8010368:	2300      	movs	r3, #0
 801036a:	4605      	mov	r5, r0
 801036c:	4608      	mov	r0, r1
 801036e:	6023      	str	r3, [r4, #0]
 8010370:	f7f5 ffe8 	bl	8006344 <_sbrk>
 8010374:	1c43      	adds	r3, r0, #1
 8010376:	d102      	bne.n	801037e <_sbrk_r+0x1a>
 8010378:	6823      	ldr	r3, [r4, #0]
 801037a:	b103      	cbz	r3, 801037e <_sbrk_r+0x1a>
 801037c:	602b      	str	r3, [r5, #0]
 801037e:	bd38      	pop	{r3, r4, r5, pc}
 8010380:	2001b070 	.word	0x2001b070

08010384 <__malloc_lock>:
 8010384:	4770      	bx	lr

08010386 <__malloc_unlock>:
 8010386:	4770      	bx	lr

08010388 <_init>:
 8010388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801038a:	bf00      	nop
 801038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801038e:	bc08      	pop	{r3}
 8010390:	469e      	mov	lr, r3
 8010392:	4770      	bx	lr

08010394 <_fini>:
 8010394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010396:	bf00      	nop
 8010398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801039a:	bc08      	pop	{r3}
 801039c:	469e      	mov	lr, r3
 801039e:	4770      	bx	lr
